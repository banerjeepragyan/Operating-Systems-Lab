Binary files main/bio.o and xv6-public/bio.o differ
Binary files main/bootasm.o and xv6-public/bootasm.o differ
Binary files main/bootblock.o and xv6-public/bootblock.o differ
Binary files main/bootblockother.o and xv6-public/bootblockother.o differ
Binary files main/bootmain.o and xv6-public/bootmain.o differ
Binary files main/_cat and xv6-public/_cat differ
diff -urN main/cat.asm xv6-public/cat.asm
--- main/cat.asm	2022-09-26 21:21:15.403980000 +0530
+++ xv6-public/cat.asm	2022-10-31 22:34:16.309542849 +0530
@@ -72,9 +72,9 @@
       printf(1, "cat: cannot open %s\n", argv[i]);
   69:	50                   	push   %eax
   6a:	ff 33                	pushl  (%ebx)
-  6c:	68 4b 08 00 00       	push   $0x84b
+  6c:	68 2b 08 00 00       	push   $0x82b
   71:	6a 01                	push   $0x1
-  73:	e8 58 04 00 00       	call   4d0 <printf>
+  73:	e8 38 04 00 00       	call   4b0 <printf>
       exit();
   78:	e8 e5 02 00 00       	call   362 <exit>
     cat(0);
@@ -99,7 +99,7 @@
     if (write(1, buf, n) != n) {
   a0:	83 ec 04             	sub    $0x4,%esp
   a3:	53                   	push   %ebx
-  a4:	68 80 0b 00 00       	push   $0xb80
+  a4:	68 60 0b 00 00       	push   $0xb60
   a9:	6a 01                	push   $0x1
   ab:	e8 d2 02 00 00       	call   382 <write>
   b0:	83 c4 10             	add    $0x10,%esp
@@ -108,7 +108,7 @@
   while((n = read(fd, buf, sizeof(buf))) > 0) {
   b7:	83 ec 04             	sub    $0x4,%esp
   ba:	68 00 02 00 00       	push   $0x200
-  bf:	68 80 0b 00 00       	push   $0xb80
+  bf:	68 60 0b 00 00       	push   $0xb60
   c4:	56                   	push   %esi
   c5:	e8 b0 02 00 00       	call   37a <read>
   ca:	83 c4 10             	add    $0x10,%esp
@@ -125,17 +125,17 @@
   dc:	c3                   	ret    
       printf(1, "cat: write error\n");
   dd:	83 ec 08             	sub    $0x8,%esp
-  e0:	68 28 08 00 00       	push   $0x828
+  e0:	68 08 08 00 00       	push   $0x808
   e5:	6a 01                	push   $0x1
-  e7:	e8 e4 03 00 00       	call   4d0 <printf>
+  e7:	e8 c4 03 00 00       	call   4b0 <printf>
       exit();
   ec:	e8 71 02 00 00       	call   362 <exit>
     printf(1, "cat: read error\n");
   f1:	50                   	push   %eax
   f2:	50                   	push   %eax
-  f3:	68 3a 08 00 00       	push   $0x83a
+  f3:	68 1a 08 00 00       	push   $0x81a
   f8:	6a 01                	push   $0x1
-  fa:	e8 d1 03 00 00       	call   4d0 <printf>
+  fa:	e8 b1 03 00 00       	call   4b0 <printf>
     exit();
   ff:	e8 5e 02 00 00       	call   362 <exit>
  104:	66 90                	xchg   %ax,%ax
@@ -663,614 +663,593 @@
  3ff:	cd 40                	int    $0x40
  401:	c3                   	ret    
 
-00000402 <thread_create>:
-SYSCALL(thread_create)
+00000402 <draw>:
+SYSCALL(draw)
  402:	b8 16 00 00 00       	mov    $0x16,%eax
  407:	cd 40                	int    $0x40
  409:	c3                   	ret    
+ 40a:	66 90                	xchg   %ax,%ax
+ 40c:	66 90                	xchg   %ax,%ax
+ 40e:	66 90                	xchg   %ax,%ax
 
-0000040a <thread_join>:
-SYSCALL(thread_join)
- 40a:	b8 18 00 00 00       	mov    $0x18,%eax
- 40f:	cd 40                	int    $0x40
- 411:	c3                   	ret    
-
-00000412 <thread_exit>:
-SYSCALL(thread_exit)
- 412:	b8 17 00 00 00       	mov    $0x17,%eax
- 417:	cd 40                	int    $0x40
- 419:	c3                   	ret    
-
-0000041a <draw>:
- 41a:	b8 19 00 00 00       	mov    $0x19,%eax
- 41f:	cd 40                	int    $0x40
- 421:	c3                   	ret    
- 422:	66 90                	xchg   %ax,%ax
- 424:	66 90                	xchg   %ax,%ax
- 426:	66 90                	xchg   %ax,%ax
- 428:	66 90                	xchg   %ax,%ax
- 42a:	66 90                	xchg   %ax,%ax
- 42c:	66 90                	xchg   %ax,%ax
- 42e:	66 90                	xchg   %ax,%ax
-
-00000430 <printint>:
+00000410 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 430:	55                   	push   %ebp
- 431:	89 e5                	mov    %esp,%ebp
- 433:	57                   	push   %edi
- 434:	56                   	push   %esi
- 435:	53                   	push   %ebx
- 436:	83 ec 3c             	sub    $0x3c,%esp
+ 410:	55                   	push   %ebp
+ 411:	89 e5                	mov    %esp,%ebp
+ 413:	57                   	push   %edi
+ 414:	56                   	push   %esi
+ 415:	53                   	push   %ebx
+ 416:	83 ec 3c             	sub    $0x3c,%esp
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 439:	85 d2                	test   %edx,%edx
+ 419:	85 d2                	test   %edx,%edx
 {
- 43b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 41b:	89 45 c0             	mov    %eax,-0x40(%ebp)
     neg = 1;
     x = -xx;
- 43e:	89 d0                	mov    %edx,%eax
+ 41e:	89 d0                	mov    %edx,%eax
   if(sgn && xx < 0){
- 440:	79 76                	jns    4b8 <printint+0x88>
- 442:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 446:	74 70                	je     4b8 <printint+0x88>
+ 420:	79 76                	jns    498 <printint+0x88>
+ 422:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 426:	74 70                	je     498 <printint+0x88>
     x = -xx;
- 448:	f7 d8                	neg    %eax
+ 428:	f7 d8                	neg    %eax
     neg = 1;
- 44a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+ 42a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
   } else {
     x = xx;
   }
 
   i = 0;
- 451:	31 f6                	xor    %esi,%esi
- 453:	8d 5d d7             	lea    -0x29(%ebp),%ebx
- 456:	eb 0a                	jmp    462 <printint+0x32>
- 458:	90                   	nop
- 459:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 431:	31 f6                	xor    %esi,%esi
+ 433:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 436:	eb 0a                	jmp    442 <printint+0x32>
+ 438:	90                   	nop
+ 439:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   do{
     buf[i++] = digits[x % base];
- 460:	89 fe                	mov    %edi,%esi
- 462:	31 d2                	xor    %edx,%edx
- 464:	8d 7e 01             	lea    0x1(%esi),%edi
- 467:	f7 f1                	div    %ecx
- 469:	0f b6 92 68 08 00 00 	movzbl 0x868(%edx),%edx
+ 440:	89 fe                	mov    %edi,%esi
+ 442:	31 d2                	xor    %edx,%edx
+ 444:	8d 7e 01             	lea    0x1(%esi),%edi
+ 447:	f7 f1                	div    %ecx
+ 449:	0f b6 92 48 08 00 00 	movzbl 0x848(%edx),%edx
   }while((x /= base) != 0);
- 470:	85 c0                	test   %eax,%eax
+ 450:	85 c0                	test   %eax,%eax
     buf[i++] = digits[x % base];
- 472:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+ 452:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
   }while((x /= base) != 0);
- 475:	75 e9                	jne    460 <printint+0x30>
+ 455:	75 e9                	jne    440 <printint+0x30>
   if(neg)
- 477:	8b 45 c4             	mov    -0x3c(%ebp),%eax
- 47a:	85 c0                	test   %eax,%eax
- 47c:	74 08                	je     486 <printint+0x56>
+ 457:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 45a:	85 c0                	test   %eax,%eax
+ 45c:	74 08                	je     466 <printint+0x56>
     buf[i++] = '-';
- 47e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
- 483:	8d 7e 02             	lea    0x2(%esi),%edi
- 486:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
- 48a:	8b 7d c0             	mov    -0x40(%ebp),%edi
- 48d:	8d 76 00             	lea    0x0(%esi),%esi
- 490:	0f b6 06             	movzbl (%esi),%eax
+ 45e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 463:	8d 7e 02             	lea    0x2(%esi),%edi
+ 466:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 46a:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 46d:	8d 76 00             	lea    0x0(%esi),%esi
+ 470:	0f b6 06             	movzbl (%esi),%eax
   write(fd, &c, 1);
- 493:	83 ec 04             	sub    $0x4,%esp
- 496:	83 ee 01             	sub    $0x1,%esi
- 499:	6a 01                	push   $0x1
- 49b:	53                   	push   %ebx
- 49c:	57                   	push   %edi
- 49d:	88 45 d7             	mov    %al,-0x29(%ebp)
- 4a0:	e8 dd fe ff ff       	call   382 <write>
+ 473:	83 ec 04             	sub    $0x4,%esp
+ 476:	83 ee 01             	sub    $0x1,%esi
+ 479:	6a 01                	push   $0x1
+ 47b:	53                   	push   %ebx
+ 47c:	57                   	push   %edi
+ 47d:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 480:	e8 fd fe ff ff       	call   382 <write>
 
   while(--i >= 0)
- 4a5:	83 c4 10             	add    $0x10,%esp
- 4a8:	39 de                	cmp    %ebx,%esi
- 4aa:	75 e4                	jne    490 <printint+0x60>
+ 485:	83 c4 10             	add    $0x10,%esp
+ 488:	39 de                	cmp    %ebx,%esi
+ 48a:	75 e4                	jne    470 <printint+0x60>
     putc(fd, buf[i]);
 }
- 4ac:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4af:	5b                   	pop    %ebx
- 4b0:	5e                   	pop    %esi
- 4b1:	5f                   	pop    %edi
- 4b2:	5d                   	pop    %ebp
- 4b3:	c3                   	ret    
- 4b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 48c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 48f:	5b                   	pop    %ebx
+ 490:	5e                   	pop    %esi
+ 491:	5f                   	pop    %edi
+ 492:	5d                   	pop    %ebp
+ 493:	c3                   	ret    
+ 494:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 4b8:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
- 4bf:	eb 90                	jmp    451 <printint+0x21>
- 4c1:	eb 0d                	jmp    4d0 <printf>
- 4c3:	90                   	nop
- 4c4:	90                   	nop
- 4c5:	90                   	nop
- 4c6:	90                   	nop
- 4c7:	90                   	nop
- 4c8:	90                   	nop
- 4c9:	90                   	nop
- 4ca:	90                   	nop
- 4cb:	90                   	nop
- 4cc:	90                   	nop
- 4cd:	90                   	nop
- 4ce:	90                   	nop
- 4cf:	90                   	nop
+ 498:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 49f:	eb 90                	jmp    431 <printint+0x21>
+ 4a1:	eb 0d                	jmp    4b0 <printf>
+ 4a3:	90                   	nop
+ 4a4:	90                   	nop
+ 4a5:	90                   	nop
+ 4a6:	90                   	nop
+ 4a7:	90                   	nop
+ 4a8:	90                   	nop
+ 4a9:	90                   	nop
+ 4aa:	90                   	nop
+ 4ab:	90                   	nop
+ 4ac:	90                   	nop
+ 4ad:	90                   	nop
+ 4ae:	90                   	nop
+ 4af:	90                   	nop
 
-000004d0 <printf>:
+000004b0 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 4d0:	55                   	push   %ebp
- 4d1:	89 e5                	mov    %esp,%ebp
- 4d3:	57                   	push   %edi
- 4d4:	56                   	push   %esi
- 4d5:	53                   	push   %ebx
- 4d6:	83 ec 2c             	sub    $0x2c,%esp
+ 4b0:	55                   	push   %ebp
+ 4b1:	89 e5                	mov    %esp,%ebp
+ 4b3:	57                   	push   %edi
+ 4b4:	56                   	push   %esi
+ 4b5:	53                   	push   %ebx
+ 4b6:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 4d9:	8b 75 0c             	mov    0xc(%ebp),%esi
- 4dc:	0f b6 1e             	movzbl (%esi),%ebx
- 4df:	84 db                	test   %bl,%bl
- 4e1:	0f 84 b3 00 00 00    	je     59a <printf+0xca>
+ 4b9:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 4bc:	0f b6 1e             	movzbl (%esi),%ebx
+ 4bf:	84 db                	test   %bl,%bl
+ 4c1:	0f 84 b3 00 00 00    	je     57a <printf+0xca>
   ap = (uint*)(void*)&fmt + 1;
- 4e7:	8d 45 10             	lea    0x10(%ebp),%eax
- 4ea:	83 c6 01             	add    $0x1,%esi
+ 4c7:	8d 45 10             	lea    0x10(%ebp),%eax
+ 4ca:	83 c6 01             	add    $0x1,%esi
   state = 0;
- 4ed:	31 ff                	xor    %edi,%edi
+ 4cd:	31 ff                	xor    %edi,%edi
   ap = (uint*)(void*)&fmt + 1;
- 4ef:	89 45 d4             	mov    %eax,-0x2c(%ebp)
- 4f2:	eb 2f                	jmp    523 <printf+0x53>
- 4f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4cf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 4d2:	eb 2f                	jmp    503 <printf+0x53>
+ 4d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
- 4f8:	83 f8 25             	cmp    $0x25,%eax
- 4fb:	0f 84 a7 00 00 00    	je     5a8 <printf+0xd8>
+ 4d8:	83 f8 25             	cmp    $0x25,%eax
+ 4db:	0f 84 a7 00 00 00    	je     588 <printf+0xd8>
   write(fd, &c, 1);
- 501:	8d 45 e2             	lea    -0x1e(%ebp),%eax
- 504:	83 ec 04             	sub    $0x4,%esp
- 507:	88 5d e2             	mov    %bl,-0x1e(%ebp)
- 50a:	6a 01                	push   $0x1
- 50c:	50                   	push   %eax
- 50d:	ff 75 08             	pushl  0x8(%ebp)
- 510:	e8 6d fe ff ff       	call   382 <write>
- 515:	83 c4 10             	add    $0x10,%esp
- 518:	83 c6 01             	add    $0x1,%esi
+ 4e1:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 4e4:	83 ec 04             	sub    $0x4,%esp
+ 4e7:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 4ea:	6a 01                	push   $0x1
+ 4ec:	50                   	push   %eax
+ 4ed:	ff 75 08             	pushl  0x8(%ebp)
+ 4f0:	e8 8d fe ff ff       	call   382 <write>
+ 4f5:	83 c4 10             	add    $0x10,%esp
+ 4f8:	83 c6 01             	add    $0x1,%esi
   for(i = 0; fmt[i]; i++){
- 51b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
- 51f:	84 db                	test   %bl,%bl
- 521:	74 77                	je     59a <printf+0xca>
+ 4fb:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 4ff:	84 db                	test   %bl,%bl
+ 501:	74 77                	je     57a <printf+0xca>
     if(state == 0){
- 523:	85 ff                	test   %edi,%edi
+ 503:	85 ff                	test   %edi,%edi
     c = fmt[i] & 0xff;
- 525:	0f be cb             	movsbl %bl,%ecx
- 528:	0f b6 c3             	movzbl %bl,%eax
+ 505:	0f be cb             	movsbl %bl,%ecx
+ 508:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
- 52b:	74 cb                	je     4f8 <printf+0x28>
+ 50b:	74 cb                	je     4d8 <printf+0x28>
         state = '%';
       } else {
         putc(fd, c);
       }
     } else if(state == '%'){
- 52d:	83 ff 25             	cmp    $0x25,%edi
- 530:	75 e6                	jne    518 <printf+0x48>
+ 50d:	83 ff 25             	cmp    $0x25,%edi
+ 510:	75 e6                	jne    4f8 <printf+0x48>
       if(c == 'd'){
- 532:	83 f8 64             	cmp    $0x64,%eax
- 535:	0f 84 05 01 00 00    	je     640 <printf+0x170>
+ 512:	83 f8 64             	cmp    $0x64,%eax
+ 515:	0f 84 05 01 00 00    	je     620 <printf+0x170>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 53b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 541:	83 f9 70             	cmp    $0x70,%ecx
- 544:	74 72                	je     5b8 <printf+0xe8>
+ 51b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 521:	83 f9 70             	cmp    $0x70,%ecx
+ 524:	74 72                	je     598 <printf+0xe8>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 546:	83 f8 73             	cmp    $0x73,%eax
- 549:	0f 84 99 00 00 00    	je     5e8 <printf+0x118>
+ 526:	83 f8 73             	cmp    $0x73,%eax
+ 529:	0f 84 99 00 00 00    	je     5c8 <printf+0x118>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 54f:	83 f8 63             	cmp    $0x63,%eax
- 552:	0f 84 08 01 00 00    	je     660 <printf+0x190>
+ 52f:	83 f8 63             	cmp    $0x63,%eax
+ 532:	0f 84 08 01 00 00    	je     640 <printf+0x190>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 558:	83 f8 25             	cmp    $0x25,%eax
- 55b:	0f 84 ef 00 00 00    	je     650 <printf+0x180>
+ 538:	83 f8 25             	cmp    $0x25,%eax
+ 53b:	0f 84 ef 00 00 00    	je     630 <printf+0x180>
   write(fd, &c, 1);
- 561:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 564:	83 ec 04             	sub    $0x4,%esp
- 567:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 56b:	6a 01                	push   $0x1
- 56d:	50                   	push   %eax
- 56e:	ff 75 08             	pushl  0x8(%ebp)
- 571:	e8 0c fe ff ff       	call   382 <write>
- 576:	83 c4 0c             	add    $0xc,%esp
- 579:	8d 45 e6             	lea    -0x1a(%ebp),%eax
- 57c:	88 5d e6             	mov    %bl,-0x1a(%ebp)
- 57f:	6a 01                	push   $0x1
- 581:	50                   	push   %eax
- 582:	ff 75 08             	pushl  0x8(%ebp)
- 585:	83 c6 01             	add    $0x1,%esi
+ 541:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 544:	83 ec 04             	sub    $0x4,%esp
+ 547:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 54b:	6a 01                	push   $0x1
+ 54d:	50                   	push   %eax
+ 54e:	ff 75 08             	pushl  0x8(%ebp)
+ 551:	e8 2c fe ff ff       	call   382 <write>
+ 556:	83 c4 0c             	add    $0xc,%esp
+ 559:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 55c:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 55f:	6a 01                	push   $0x1
+ 561:	50                   	push   %eax
+ 562:	ff 75 08             	pushl  0x8(%ebp)
+ 565:	83 c6 01             	add    $0x1,%esi
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
       }
       state = 0;
- 588:	31 ff                	xor    %edi,%edi
+ 568:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 58a:	e8 f3 fd ff ff       	call   382 <write>
+ 56a:	e8 13 fe ff ff       	call   382 <write>
   for(i = 0; fmt[i]; i++){
- 58f:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 56f:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
   write(fd, &c, 1);
- 593:	83 c4 10             	add    $0x10,%esp
+ 573:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 596:	84 db                	test   %bl,%bl
- 598:	75 89                	jne    523 <printf+0x53>
+ 576:	84 db                	test   %bl,%bl
+ 578:	75 89                	jne    503 <printf+0x53>
     }
   }
 }
- 59a:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 59d:	5b                   	pop    %ebx
- 59e:	5e                   	pop    %esi
- 59f:	5f                   	pop    %edi
- 5a0:	5d                   	pop    %ebp
- 5a1:	c3                   	ret    
- 5a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 57a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 57d:	5b                   	pop    %ebx
+ 57e:	5e                   	pop    %esi
+ 57f:	5f                   	pop    %edi
+ 580:	5d                   	pop    %ebp
+ 581:	c3                   	ret    
+ 582:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         state = '%';
- 5a8:	bf 25 00 00 00       	mov    $0x25,%edi
- 5ad:	e9 66 ff ff ff       	jmp    518 <printf+0x48>
- 5b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 588:	bf 25 00 00 00       	mov    $0x25,%edi
+ 58d:	e9 66 ff ff ff       	jmp    4f8 <printf+0x48>
+ 592:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 5b8:	83 ec 0c             	sub    $0xc,%esp
- 5bb:	b9 10 00 00 00       	mov    $0x10,%ecx
- 5c0:	6a 00                	push   $0x0
- 5c2:	8b 7d d4             	mov    -0x2c(%ebp),%edi
- 5c5:	8b 45 08             	mov    0x8(%ebp),%eax
- 5c8:	8b 17                	mov    (%edi),%edx
- 5ca:	e8 61 fe ff ff       	call   430 <printint>
+ 598:	83 ec 0c             	sub    $0xc,%esp
+ 59b:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5a0:	6a 00                	push   $0x0
+ 5a2:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 5a5:	8b 45 08             	mov    0x8(%ebp),%eax
+ 5a8:	8b 17                	mov    (%edi),%edx
+ 5aa:	e8 61 fe ff ff       	call   410 <printint>
         ap++;
- 5cf:	89 f8                	mov    %edi,%eax
- 5d1:	83 c4 10             	add    $0x10,%esp
+ 5af:	89 f8                	mov    %edi,%eax
+ 5b1:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 5d4:	31 ff                	xor    %edi,%edi
+ 5b4:	31 ff                	xor    %edi,%edi
         ap++;
- 5d6:	83 c0 04             	add    $0x4,%eax
- 5d9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
- 5dc:	e9 37 ff ff ff       	jmp    518 <printf+0x48>
- 5e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5b6:	83 c0 04             	add    $0x4,%eax
+ 5b9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 5bc:	e9 37 ff ff ff       	jmp    4f8 <printf+0x48>
+ 5c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 5e8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 5eb:	8b 08                	mov    (%eax),%ecx
+ 5c8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 5cb:	8b 08                	mov    (%eax),%ecx
         ap++;
- 5ed:	83 c0 04             	add    $0x4,%eax
- 5f0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 5cd:	83 c0 04             	add    $0x4,%eax
+ 5d0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
         if(s == 0)
- 5f3:	85 c9                	test   %ecx,%ecx
- 5f5:	0f 84 8e 00 00 00    	je     689 <printf+0x1b9>
+ 5d3:	85 c9                	test   %ecx,%ecx
+ 5d5:	0f 84 8e 00 00 00    	je     669 <printf+0x1b9>
         while(*s != 0){
- 5fb:	0f b6 01             	movzbl (%ecx),%eax
+ 5db:	0f b6 01             	movzbl (%ecx),%eax
       state = 0;
- 5fe:	31 ff                	xor    %edi,%edi
+ 5de:	31 ff                	xor    %edi,%edi
         s = (char*)*ap;
- 600:	89 cb                	mov    %ecx,%ebx
+ 5e0:	89 cb                	mov    %ecx,%ebx
         while(*s != 0){
- 602:	84 c0                	test   %al,%al
- 604:	0f 84 0e ff ff ff    	je     518 <printf+0x48>
- 60a:	89 75 d0             	mov    %esi,-0x30(%ebp)
- 60d:	89 de                	mov    %ebx,%esi
- 60f:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 612:	8d 7d e3             	lea    -0x1d(%ebp),%edi
- 615:	8d 76 00             	lea    0x0(%esi),%esi
+ 5e2:	84 c0                	test   %al,%al
+ 5e4:	0f 84 0e ff ff ff    	je     4f8 <printf+0x48>
+ 5ea:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 5ed:	89 de                	mov    %ebx,%esi
+ 5ef:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5f2:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 5f5:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 618:	83 ec 04             	sub    $0x4,%esp
+ 5f8:	83 ec 04             	sub    $0x4,%esp
           s++;
- 61b:	83 c6 01             	add    $0x1,%esi
- 61e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+ 5fb:	83 c6 01             	add    $0x1,%esi
+ 5fe:	88 45 e3             	mov    %al,-0x1d(%ebp)
   write(fd, &c, 1);
- 621:	6a 01                	push   $0x1
- 623:	57                   	push   %edi
- 624:	53                   	push   %ebx
- 625:	e8 58 fd ff ff       	call   382 <write>
+ 601:	6a 01                	push   $0x1
+ 603:	57                   	push   %edi
+ 604:	53                   	push   %ebx
+ 605:	e8 78 fd ff ff       	call   382 <write>
         while(*s != 0){
- 62a:	0f b6 06             	movzbl (%esi),%eax
- 62d:	83 c4 10             	add    $0x10,%esp
- 630:	84 c0                	test   %al,%al
- 632:	75 e4                	jne    618 <printf+0x148>
- 634:	8b 75 d0             	mov    -0x30(%ebp),%esi
+ 60a:	0f b6 06             	movzbl (%esi),%eax
+ 60d:	83 c4 10             	add    $0x10,%esp
+ 610:	84 c0                	test   %al,%al
+ 612:	75 e4                	jne    5f8 <printf+0x148>
+ 614:	8b 75 d0             	mov    -0x30(%ebp),%esi
       state = 0;
- 637:	31 ff                	xor    %edi,%edi
- 639:	e9 da fe ff ff       	jmp    518 <printf+0x48>
- 63e:	66 90                	xchg   %ax,%ax
+ 617:	31 ff                	xor    %edi,%edi
+ 619:	e9 da fe ff ff       	jmp    4f8 <printf+0x48>
+ 61e:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 10, 1);
- 640:	83 ec 0c             	sub    $0xc,%esp
- 643:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 648:	6a 01                	push   $0x1
- 64a:	e9 73 ff ff ff       	jmp    5c2 <printf+0xf2>
- 64f:	90                   	nop
+ 620:	83 ec 0c             	sub    $0xc,%esp
+ 623:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 628:	6a 01                	push   $0x1
+ 62a:	e9 73 ff ff ff       	jmp    5a2 <printf+0xf2>
+ 62f:	90                   	nop
   write(fd, &c, 1);
- 650:	83 ec 04             	sub    $0x4,%esp
- 653:	88 5d e5             	mov    %bl,-0x1b(%ebp)
- 656:	8d 45 e5             	lea    -0x1b(%ebp),%eax
- 659:	6a 01                	push   $0x1
- 65b:	e9 21 ff ff ff       	jmp    581 <printf+0xb1>
+ 630:	83 ec 04             	sub    $0x4,%esp
+ 633:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 636:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 639:	6a 01                	push   $0x1
+ 63b:	e9 21 ff ff ff       	jmp    561 <printf+0xb1>
         putc(fd, *ap);
- 660:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 640:	8b 7d d4             	mov    -0x2c(%ebp),%edi
   write(fd, &c, 1);
- 663:	83 ec 04             	sub    $0x4,%esp
+ 643:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 666:	8b 07                	mov    (%edi),%eax
+ 646:	8b 07                	mov    (%edi),%eax
   write(fd, &c, 1);
- 668:	6a 01                	push   $0x1
+ 648:	6a 01                	push   $0x1
         ap++;
- 66a:	83 c7 04             	add    $0x4,%edi
+ 64a:	83 c7 04             	add    $0x4,%edi
         putc(fd, *ap);
- 66d:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 64d:	88 45 e4             	mov    %al,-0x1c(%ebp)
   write(fd, &c, 1);
- 670:	8d 45 e4             	lea    -0x1c(%ebp),%eax
- 673:	50                   	push   %eax
- 674:	ff 75 08             	pushl  0x8(%ebp)
- 677:	e8 06 fd ff ff       	call   382 <write>
+ 650:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 653:	50                   	push   %eax
+ 654:	ff 75 08             	pushl  0x8(%ebp)
+ 657:	e8 26 fd ff ff       	call   382 <write>
         ap++;
- 67c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
- 67f:	83 c4 10             	add    $0x10,%esp
+ 65c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 65f:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 682:	31 ff                	xor    %edi,%edi
- 684:	e9 8f fe ff ff       	jmp    518 <printf+0x48>
+ 662:	31 ff                	xor    %edi,%edi
+ 664:	e9 8f fe ff ff       	jmp    4f8 <printf+0x48>
           s = "(null)";
- 689:	bb 60 08 00 00       	mov    $0x860,%ebx
+ 669:	bb 40 08 00 00       	mov    $0x840,%ebx
         while(*s != 0){
- 68e:	b8 28 00 00 00       	mov    $0x28,%eax
- 693:	e9 72 ff ff ff       	jmp    60a <printf+0x13a>
- 698:	66 90                	xchg   %ax,%ax
- 69a:	66 90                	xchg   %ax,%ax
- 69c:	66 90                	xchg   %ax,%ax
- 69e:	66 90                	xchg   %ax,%ax
+ 66e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 673:	e9 72 ff ff ff       	jmp    5ea <printf+0x13a>
+ 678:	66 90                	xchg   %ax,%ax
+ 67a:	66 90                	xchg   %ax,%ax
+ 67c:	66 90                	xchg   %ax,%ax
+ 67e:	66 90                	xchg   %ax,%ax
 
-000006a0 <free>:
+00000680 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 6a0:	55                   	push   %ebp
+ 680:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6a1:	a1 60 0b 00 00       	mov    0xb60,%eax
+ 681:	a1 40 0b 00 00       	mov    0xb40,%eax
 {
- 6a6:	89 e5                	mov    %esp,%ebp
- 6a8:	57                   	push   %edi
- 6a9:	56                   	push   %esi
- 6aa:	53                   	push   %ebx
- 6ab:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 686:	89 e5                	mov    %esp,%ebp
+ 688:	57                   	push   %edi
+ 689:	56                   	push   %esi
+ 68a:	53                   	push   %ebx
+ 68b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 6ae:	8d 4b f8             	lea    -0x8(%ebx),%ecx
- 6b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 68e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 691:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6b8:	39 c8                	cmp    %ecx,%eax
- 6ba:	8b 10                	mov    (%eax),%edx
- 6bc:	73 32                	jae    6f0 <free+0x50>
- 6be:	39 d1                	cmp    %edx,%ecx
- 6c0:	72 04                	jb     6c6 <free+0x26>
+ 698:	39 c8                	cmp    %ecx,%eax
+ 69a:	8b 10                	mov    (%eax),%edx
+ 69c:	73 32                	jae    6d0 <free+0x50>
+ 69e:	39 d1                	cmp    %edx,%ecx
+ 6a0:	72 04                	jb     6a6 <free+0x26>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6c2:	39 d0                	cmp    %edx,%eax
- 6c4:	72 32                	jb     6f8 <free+0x58>
+ 6a2:	39 d0                	cmp    %edx,%eax
+ 6a4:	72 32                	jb     6d8 <free+0x58>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 6c6:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 6c9:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 6cc:	39 fa                	cmp    %edi,%edx
- 6ce:	74 30                	je     700 <free+0x60>
+ 6a6:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6a9:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6ac:	39 fa                	cmp    %edi,%edx
+ 6ae:	74 30                	je     6e0 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 6d0:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 6b0:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 6d3:	8b 50 04             	mov    0x4(%eax),%edx
- 6d6:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 6d9:	39 f1                	cmp    %esi,%ecx
- 6db:	74 3a                	je     717 <free+0x77>
+ 6b3:	8b 50 04             	mov    0x4(%eax),%edx
+ 6b6:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6b9:	39 f1                	cmp    %esi,%ecx
+ 6bb:	74 3a                	je     6f7 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 6dd:	89 08                	mov    %ecx,(%eax)
+ 6bd:	89 08                	mov    %ecx,(%eax)
   freep = p;
- 6df:	a3 60 0b 00 00       	mov    %eax,0xb60
+ 6bf:	a3 40 0b 00 00       	mov    %eax,0xb40
 }
- 6e4:	5b                   	pop    %ebx
- 6e5:	5e                   	pop    %esi
- 6e6:	5f                   	pop    %edi
- 6e7:	5d                   	pop    %ebp
- 6e8:	c3                   	ret    
- 6e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6c4:	5b                   	pop    %ebx
+ 6c5:	5e                   	pop    %esi
+ 6c6:	5f                   	pop    %edi
+ 6c7:	5d                   	pop    %ebp
+ 6c8:	c3                   	ret    
+ 6c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6f0:	39 d0                	cmp    %edx,%eax
- 6f2:	72 04                	jb     6f8 <free+0x58>
- 6f4:	39 d1                	cmp    %edx,%ecx
- 6f6:	72 ce                	jb     6c6 <free+0x26>
+ 6d0:	39 d0                	cmp    %edx,%eax
+ 6d2:	72 04                	jb     6d8 <free+0x58>
+ 6d4:	39 d1                	cmp    %edx,%ecx
+ 6d6:	72 ce                	jb     6a6 <free+0x26>
 {
- 6f8:	89 d0                	mov    %edx,%eax
- 6fa:	eb bc                	jmp    6b8 <free+0x18>
- 6fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6d8:	89 d0                	mov    %edx,%eax
+ 6da:	eb bc                	jmp    698 <free+0x18>
+ 6dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     bp->s.size += p->s.ptr->s.size;
- 700:	03 72 04             	add    0x4(%edx),%esi
- 703:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 6e0:	03 72 04             	add    0x4(%edx),%esi
+ 6e3:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 706:	8b 10                	mov    (%eax),%edx
- 708:	8b 12                	mov    (%edx),%edx
- 70a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 6e6:	8b 10                	mov    (%eax),%edx
+ 6e8:	8b 12                	mov    (%edx),%edx
+ 6ea:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 70d:	8b 50 04             	mov    0x4(%eax),%edx
- 710:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 713:	39 f1                	cmp    %esi,%ecx
- 715:	75 c6                	jne    6dd <free+0x3d>
+ 6ed:	8b 50 04             	mov    0x4(%eax),%edx
+ 6f0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6f3:	39 f1                	cmp    %esi,%ecx
+ 6f5:	75 c6                	jne    6bd <free+0x3d>
     p->s.size += bp->s.size;
- 717:	03 53 fc             	add    -0x4(%ebx),%edx
+ 6f7:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 71a:	a3 60 0b 00 00       	mov    %eax,0xb60
+ 6fa:	a3 40 0b 00 00       	mov    %eax,0xb40
     p->s.size += bp->s.size;
- 71f:	89 50 04             	mov    %edx,0x4(%eax)
+ 6ff:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 722:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 725:	89 10                	mov    %edx,(%eax)
+ 702:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 705:	89 10                	mov    %edx,(%eax)
 }
- 727:	5b                   	pop    %ebx
- 728:	5e                   	pop    %esi
- 729:	5f                   	pop    %edi
- 72a:	5d                   	pop    %ebp
- 72b:	c3                   	ret    
- 72c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 707:	5b                   	pop    %ebx
+ 708:	5e                   	pop    %esi
+ 709:	5f                   	pop    %edi
+ 70a:	5d                   	pop    %ebp
+ 70b:	c3                   	ret    
+ 70c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-00000730 <malloc>:
+00000710 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 730:	55                   	push   %ebp
- 731:	89 e5                	mov    %esp,%ebp
- 733:	57                   	push   %edi
- 734:	56                   	push   %esi
- 735:	53                   	push   %ebx
- 736:	83 ec 0c             	sub    $0xc,%esp
+ 710:	55                   	push   %ebp
+ 711:	89 e5                	mov    %esp,%ebp
+ 713:	57                   	push   %edi
+ 714:	56                   	push   %esi
+ 715:	53                   	push   %ebx
+ 716:	83 ec 0c             	sub    $0xc,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 739:	8b 45 08             	mov    0x8(%ebp),%eax
+ 719:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 73c:	8b 15 60 0b 00 00    	mov    0xb60,%edx
+ 71c:	8b 15 40 0b 00 00    	mov    0xb40,%edx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 742:	8d 78 07             	lea    0x7(%eax),%edi
- 745:	c1 ef 03             	shr    $0x3,%edi
- 748:	83 c7 01             	add    $0x1,%edi
+ 722:	8d 78 07             	lea    0x7(%eax),%edi
+ 725:	c1 ef 03             	shr    $0x3,%edi
+ 728:	83 c7 01             	add    $0x1,%edi
   if((prevp = freep) == 0){
- 74b:	85 d2                	test   %edx,%edx
- 74d:	0f 84 9d 00 00 00    	je     7f0 <malloc+0xc0>
- 753:	8b 02                	mov    (%edx),%eax
- 755:	8b 48 04             	mov    0x4(%eax),%ecx
+ 72b:	85 d2                	test   %edx,%edx
+ 72d:	0f 84 9d 00 00 00    	je     7d0 <malloc+0xc0>
+ 733:	8b 02                	mov    (%edx),%eax
+ 735:	8b 48 04             	mov    0x4(%eax),%ecx
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
     if(p->s.size >= nunits){
- 758:	39 cf                	cmp    %ecx,%edi
- 75a:	76 6c                	jbe    7c8 <malloc+0x98>
- 75c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
- 762:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 767:	0f 43 df             	cmovae %edi,%ebx
+ 738:	39 cf                	cmp    %ecx,%edi
+ 73a:	76 6c                	jbe    7a8 <malloc+0x98>
+ 73c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 742:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 747:	0f 43 df             	cmovae %edi,%ebx
   p = sbrk(nu * sizeof(Header));
- 76a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
- 771:	eb 0e                	jmp    781 <malloc+0x51>
- 773:	90                   	nop
- 774:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 74a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 751:	eb 0e                	jmp    761 <malloc+0x51>
+ 753:	90                   	nop
+ 754:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 778:	8b 02                	mov    (%edx),%eax
+ 758:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 77a:	8b 48 04             	mov    0x4(%eax),%ecx
- 77d:	39 f9                	cmp    %edi,%ecx
- 77f:	73 47                	jae    7c8 <malloc+0x98>
+ 75a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 75d:	39 f9                	cmp    %edi,%ecx
+ 75f:	73 47                	jae    7a8 <malloc+0x98>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 781:	39 05 60 0b 00 00    	cmp    %eax,0xb60
- 787:	89 c2                	mov    %eax,%edx
- 789:	75 ed                	jne    778 <malloc+0x48>
+ 761:	39 05 40 0b 00 00    	cmp    %eax,0xb40
+ 767:	89 c2                	mov    %eax,%edx
+ 769:	75 ed                	jne    758 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 78b:	83 ec 0c             	sub    $0xc,%esp
- 78e:	56                   	push   %esi
- 78f:	e8 56 fc ff ff       	call   3ea <sbrk>
+ 76b:	83 ec 0c             	sub    $0xc,%esp
+ 76e:	56                   	push   %esi
+ 76f:	e8 76 fc ff ff       	call   3ea <sbrk>
   if(p == (char*)-1)
- 794:	83 c4 10             	add    $0x10,%esp
- 797:	83 f8 ff             	cmp    $0xffffffff,%eax
- 79a:	74 1c                	je     7b8 <malloc+0x88>
+ 774:	83 c4 10             	add    $0x10,%esp
+ 777:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 77a:	74 1c                	je     798 <malloc+0x88>
   hp->s.size = nu;
- 79c:	89 58 04             	mov    %ebx,0x4(%eax)
+ 77c:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 79f:	83 ec 0c             	sub    $0xc,%esp
- 7a2:	83 c0 08             	add    $0x8,%eax
- 7a5:	50                   	push   %eax
- 7a6:	e8 f5 fe ff ff       	call   6a0 <free>
+ 77f:	83 ec 0c             	sub    $0xc,%esp
+ 782:	83 c0 08             	add    $0x8,%eax
+ 785:	50                   	push   %eax
+ 786:	e8 f5 fe ff ff       	call   680 <free>
   return freep;
- 7ab:	8b 15 60 0b 00 00    	mov    0xb60,%edx
+ 78b:	8b 15 40 0b 00 00    	mov    0xb40,%edx
       if((p = morecore(nunits)) == 0)
- 7b1:	83 c4 10             	add    $0x10,%esp
- 7b4:	85 d2                	test   %edx,%edx
- 7b6:	75 c0                	jne    778 <malloc+0x48>
+ 791:	83 c4 10             	add    $0x10,%esp
+ 794:	85 d2                	test   %edx,%edx
+ 796:	75 c0                	jne    758 <malloc+0x48>
         return 0;
   }
 }
- 7b8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 798:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 7bb:	31 c0                	xor    %eax,%eax
+ 79b:	31 c0                	xor    %eax,%eax
 }
- 7bd:	5b                   	pop    %ebx
- 7be:	5e                   	pop    %esi
- 7bf:	5f                   	pop    %edi
- 7c0:	5d                   	pop    %ebp
- 7c1:	c3                   	ret    
- 7c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 79d:	5b                   	pop    %ebx
+ 79e:	5e                   	pop    %esi
+ 79f:	5f                   	pop    %edi
+ 7a0:	5d                   	pop    %ebp
+ 7a1:	c3                   	ret    
+ 7a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 7c8:	39 cf                	cmp    %ecx,%edi
- 7ca:	74 54                	je     820 <malloc+0xf0>
+ 7a8:	39 cf                	cmp    %ecx,%edi
+ 7aa:	74 54                	je     800 <malloc+0xf0>
         p->s.size -= nunits;
- 7cc:	29 f9                	sub    %edi,%ecx
- 7ce:	89 48 04             	mov    %ecx,0x4(%eax)
+ 7ac:	29 f9                	sub    %edi,%ecx
+ 7ae:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 7d1:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ 7b1:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 7d4:	89 78 04             	mov    %edi,0x4(%eax)
+ 7b4:	89 78 04             	mov    %edi,0x4(%eax)
       freep = prevp;
- 7d7:	89 15 60 0b 00 00    	mov    %edx,0xb60
+ 7b7:	89 15 40 0b 00 00    	mov    %edx,0xb40
 }
- 7dd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7bd:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 7e0:	83 c0 08             	add    $0x8,%eax
+ 7c0:	83 c0 08             	add    $0x8,%eax
 }
- 7e3:	5b                   	pop    %ebx
- 7e4:	5e                   	pop    %esi
- 7e5:	5f                   	pop    %edi
- 7e6:	5d                   	pop    %ebp
- 7e7:	c3                   	ret    
- 7e8:	90                   	nop
- 7e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7c3:	5b                   	pop    %ebx
+ 7c4:	5e                   	pop    %esi
+ 7c5:	5f                   	pop    %edi
+ 7c6:	5d                   	pop    %ebp
+ 7c7:	c3                   	ret    
+ 7c8:	90                   	nop
+ 7c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     base.s.ptr = freep = prevp = &base;
- 7f0:	c7 05 60 0b 00 00 64 	movl   $0xb64,0xb60
- 7f7:	0b 00 00 
- 7fa:	c7 05 64 0b 00 00 64 	movl   $0xb64,0xb64
- 801:	0b 00 00 
+ 7d0:	c7 05 40 0b 00 00 44 	movl   $0xb44,0xb40
+ 7d7:	0b 00 00 
+ 7da:	c7 05 44 0b 00 00 44 	movl   $0xb44,0xb44
+ 7e1:	0b 00 00 
     base.s.size = 0;
- 804:	b8 64 0b 00 00       	mov    $0xb64,%eax
- 809:	c7 05 68 0b 00 00 00 	movl   $0x0,0xb68
- 810:	00 00 00 
- 813:	e9 44 ff ff ff       	jmp    75c <malloc+0x2c>
- 818:	90                   	nop
- 819:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7e4:	b8 44 0b 00 00       	mov    $0xb44,%eax
+ 7e9:	c7 05 48 0b 00 00 00 	movl   $0x0,0xb48
+ 7f0:	00 00 00 
+ 7f3:	e9 44 ff ff ff       	jmp    73c <malloc+0x2c>
+ 7f8:	90                   	nop
+ 7f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         prevp->s.ptr = p->s.ptr;
- 820:	8b 08                	mov    (%eax),%ecx
- 822:	89 0a                	mov    %ecx,(%edx)
- 824:	eb b1                	jmp    7d7 <malloc+0xa7>
+ 800:	8b 08                	mov    (%eax),%ecx
+ 802:	89 0a                	mov    %ecx,(%edx)
+ 804:	eb b1                	jmp    7b7 <malloc+0xa7>
Binary files main/cat.o and xv6-public/cat.o differ
diff -urN main/cat.sym xv6-public/cat.sym
--- main/cat.sym	2022-09-26 21:21:15.423990000 +0530
+++ xv6-public/cat.sym	2022-10-31 22:34:16.313544849 +0530
@@ -1,7 +1,7 @@
 00000000 .text
-00000828 .rodata
-0000087c .eh_frame
-00000b60 .bss
+00000808 .rodata
+0000085c .eh_frame
+00000b40 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,20 +13,19 @@
 00000000 cat.c
 00000000 ulib.c
 00000000 printf.c
-00000430 printint
-00000868 digits.1050
+00000410 printint
+00000848 digits.1044
 00000000 umalloc.c
-00000b60 freep
-00000b64 base
+00000b40 freep
+00000b44 base
 00000110 strcpy
-000004d0 printf
-00000412 thread_exit
+000004b0 printf
 00000330 memmove
 000003aa mknod
 00000220 gets
 000003e2 getpid
 00000090 cat
-00000730 malloc
+00000710 malloc
 000003f2 sleep
 00000372 pipe
 00000382 write
@@ -40,24 +39,22 @@
 0000035a fork
 000003ea sbrk
 000003fa uptime
-00000b44 __bss_start
+00000b24 __bss_start
 000001c0 memset
 00000000 main
 00000140 strcmp
 000003da dup
-00000b80 buf
+00000b60 buf
 000002a0 stat
-00000b44 _edata
-00000d80 _end
+00000b24 _edata
+00000d60 _end
 000003c2 link
 00000362 exit
 000002f0 atoi
-0000041a draw
+00000402 draw
 00000190 strlen
 000003a2 open
 000001e0 strchr
-00000402 thread_create
 000003ca mkdir
 0000038a close
-0000040a thread_join
-000006a0 free
+00000680 free
Binary files main/console.o and xv6-public/console.o differ
diff -urN main/.cvsignore xv6-public/.cvsignore
--- main/.cvsignore	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/.cvsignore	2022-08-11 18:40:22.000000000 +0530
@@ -0,0 +1,16 @@
+*.asm
+*.d
+*.sym
+_*
+kernel
+user1
+userfs
+usertests
+xv6.img
+vectors.S
+bochsout.txt
+bootblock
+bootother
+bootother.out
+parport.out
+fmt
diff -urN main/defs.h xv6-public/defs.h
--- main/defs.h	2022-09-03 13:42:01.000000000 +0530
+++ xv6-public/defs.h	2022-10-30 15:47:02.000000000 +0530
@@ -9,6 +9,7 @@
 struct sleeplock;
 struct stat;
 struct superblock;
+struct rq;
 
 // bio.c
 void            binit(void);
@@ -120,13 +121,17 @@
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
-
-//thread
-int thread_create(void (*)(void*),void*,void*);
-int thread_join(void);
-int thread_exit(void);
-
-
+void 			create_kernel_process(const char *name, void (*entrypoint)());
+void 			swap_out_process_function();
+void 			swap_in_process_function();
+extern int swap_out_process_exists;
+extern int swap_in_process_exists;
+extern struct rq rqueue;
+extern struct rq rqueue2;
+int rpush(struct proc *p);
+int rpush2(struct proc* p);
+struct proc* rpop();
+struct proc* rpop2();
 
 // swtch.S
 void            swtch(struct context**, struct context*);
@@ -171,6 +176,7 @@
 extern uint     ticks;
 void            tvinit(void);
 extern struct spinlock tickslock;
+extern struct spinlock swap_in_lock;
 
 // uart.c
 void            uartinit(void);
@@ -192,6 +198,10 @@
 void            switchkvm(void);
 int             copyout(pde_t*, uint, void*, uint);
 void            clearpteu(pde_t *pgdir, char *uva);
+extern 			char * sleeping_channel;
+extern struct spinlock sleeping_channel_lock;
+extern 			int sleeping_channel_count;
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
+
diff -urN main/.dir-locals.el xv6-public/.dir-locals.el
--- main/.dir-locals.el	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/.dir-locals.el	2022-08-11 18:40:22.000000000 +0530
@@ -0,0 +1,4 @@
+((c-mode
+  (indent-tabs-mode . nil)
+  (c-file-style . "bsd")
+  (c-basic-offset . 2)))
Binary files main/_drawtest and xv6-public/_drawtest differ
Binary files main/_Drawtest and xv6-public/_Drawtest differ
diff -urN main/drawtest.asm xv6-public/drawtest.asm
--- main/drawtest.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/drawtest.asm	2022-10-31 22:34:18.258516953 +0530
@@ -0,0 +1,1152 @@
+
+_drawtest:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(void)
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	51                   	push   %ecx
+   e:	83 ec 0c             	sub    $0xc,%esp
+	static char buf[2000];
+	printf(1,"Drawtest says call returns %d\n",draw((void*) buf,2000));
+  11:	68 d0 07 00 00       	push   $0x7d0
+  16:	68 20 0a 00 00       	push   $0xa20
+  1b:	e8 22 03 00 00       	call   342 <draw>
+  20:	83 c4 0c             	add    $0xc,%esp
+  23:	50                   	push   %eax
+  24:	68 48 07 00 00       	push   $0x748
+  29:	6a 01                	push   $0x1
+  2b:	e8 c0 03 00 00       	call   3f0 <printf>
+
+	printf(1,"%s",buf);
+  30:	83 c4 0c             	add    $0xc,%esp
+  33:	68 20 0a 00 00       	push   $0xa20
+  38:	68 68 07 00 00       	push   $0x768
+  3d:	6a 01                	push   $0x1
+  3f:	e8 ac 03 00 00       	call   3f0 <printf>
+	exit();
+  44:	e8 59 02 00 00       	call   2a2 <exit>
+  49:	66 90                	xchg   %ax,%ax
+  4b:	66 90                	xchg   %ax,%ax
+  4d:	66 90                	xchg   %ax,%ax
+  4f:	90                   	nop
+
+00000050 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  50:	55                   	push   %ebp
+  51:	89 e5                	mov    %esp,%ebp
+  53:	53                   	push   %ebx
+  54:	8b 45 08             	mov    0x8(%ebp),%eax
+  57:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  5a:	89 c2                	mov    %eax,%edx
+  5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  60:	83 c1 01             	add    $0x1,%ecx
+  63:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+  67:	83 c2 01             	add    $0x1,%edx
+  6a:	84 db                	test   %bl,%bl
+  6c:	88 5a ff             	mov    %bl,-0x1(%edx)
+  6f:	75 ef                	jne    60 <strcpy+0x10>
+    ;
+  return os;
+}
+  71:	5b                   	pop    %ebx
+  72:	5d                   	pop    %ebp
+  73:	c3                   	ret    
+  74:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  7a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000080 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  80:	55                   	push   %ebp
+  81:	89 e5                	mov    %esp,%ebp
+  83:	53                   	push   %ebx
+  84:	8b 55 08             	mov    0x8(%ebp),%edx
+  87:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  8a:	0f b6 02             	movzbl (%edx),%eax
+  8d:	0f b6 19             	movzbl (%ecx),%ebx
+  90:	84 c0                	test   %al,%al
+  92:	75 1c                	jne    b0 <strcmp+0x30>
+  94:	eb 2a                	jmp    c0 <strcmp+0x40>
+  96:	8d 76 00             	lea    0x0(%esi),%esi
+  99:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+  a0:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  a3:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+  a6:	83 c1 01             	add    $0x1,%ecx
+  a9:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+  ac:	84 c0                	test   %al,%al
+  ae:	74 10                	je     c0 <strcmp+0x40>
+  b0:	38 d8                	cmp    %bl,%al
+  b2:	74 ec                	je     a0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  b4:	29 d8                	sub    %ebx,%eax
+}
+  b6:	5b                   	pop    %ebx
+  b7:	5d                   	pop    %ebp
+  b8:	c3                   	ret    
+  b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  c0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  c2:	29 d8                	sub    %ebx,%eax
+}
+  c4:	5b                   	pop    %ebx
+  c5:	5d                   	pop    %ebp
+  c6:	c3                   	ret    
+  c7:	89 f6                	mov    %esi,%esi
+  c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000000d0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  d0:	55                   	push   %ebp
+  d1:	89 e5                	mov    %esp,%ebp
+  d3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  d6:	80 39 00             	cmpb   $0x0,(%ecx)
+  d9:	74 15                	je     f0 <strlen+0x20>
+  db:	31 d2                	xor    %edx,%edx
+  dd:	8d 76 00             	lea    0x0(%esi),%esi
+  e0:	83 c2 01             	add    $0x1,%edx
+  e3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+  e7:	89 d0                	mov    %edx,%eax
+  e9:	75 f5                	jne    e0 <strlen+0x10>
+    ;
+  return n;
+}
+  eb:	5d                   	pop    %ebp
+  ec:	c3                   	ret    
+  ed:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+  f0:	31 c0                	xor    %eax,%eax
+}
+  f2:	5d                   	pop    %ebp
+  f3:	c3                   	ret    
+  f4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  fa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000100 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 100:	55                   	push   %ebp
+ 101:	89 e5                	mov    %esp,%ebp
+ 103:	57                   	push   %edi
+ 104:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 107:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 10a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 10d:	89 d7                	mov    %edx,%edi
+ 10f:	fc                   	cld    
+ 110:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 112:	89 d0                	mov    %edx,%eax
+ 114:	5f                   	pop    %edi
+ 115:	5d                   	pop    %ebp
+ 116:	c3                   	ret    
+ 117:	89 f6                	mov    %esi,%esi
+ 119:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000120 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 120:	55                   	push   %ebp
+ 121:	89 e5                	mov    %esp,%ebp
+ 123:	53                   	push   %ebx
+ 124:	8b 45 08             	mov    0x8(%ebp),%eax
+ 127:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 12a:	0f b6 10             	movzbl (%eax),%edx
+ 12d:	84 d2                	test   %dl,%dl
+ 12f:	74 1d                	je     14e <strchr+0x2e>
+    if(*s == c)
+ 131:	38 d3                	cmp    %dl,%bl
+ 133:	89 d9                	mov    %ebx,%ecx
+ 135:	75 0d                	jne    144 <strchr+0x24>
+ 137:	eb 17                	jmp    150 <strchr+0x30>
+ 139:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 140:	38 ca                	cmp    %cl,%dl
+ 142:	74 0c                	je     150 <strchr+0x30>
+  for(; *s; s++)
+ 144:	83 c0 01             	add    $0x1,%eax
+ 147:	0f b6 10             	movzbl (%eax),%edx
+ 14a:	84 d2                	test   %dl,%dl
+ 14c:	75 f2                	jne    140 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 14e:	31 c0                	xor    %eax,%eax
+}
+ 150:	5b                   	pop    %ebx
+ 151:	5d                   	pop    %ebp
+ 152:	c3                   	ret    
+ 153:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 159:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000160 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 160:	55                   	push   %ebp
+ 161:	89 e5                	mov    %esp,%ebp
+ 163:	57                   	push   %edi
+ 164:	56                   	push   %esi
+ 165:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 166:	31 f6                	xor    %esi,%esi
+ 168:	89 f3                	mov    %esi,%ebx
+{
+ 16a:	83 ec 1c             	sub    $0x1c,%esp
+ 16d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 170:	eb 2f                	jmp    1a1 <gets+0x41>
+ 172:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 178:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 17b:	83 ec 04             	sub    $0x4,%esp
+ 17e:	6a 01                	push   $0x1
+ 180:	50                   	push   %eax
+ 181:	6a 00                	push   $0x0
+ 183:	e8 32 01 00 00       	call   2ba <read>
+    if(cc < 1)
+ 188:	83 c4 10             	add    $0x10,%esp
+ 18b:	85 c0                	test   %eax,%eax
+ 18d:	7e 1c                	jle    1ab <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 18f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 193:	83 c7 01             	add    $0x1,%edi
+ 196:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 199:	3c 0a                	cmp    $0xa,%al
+ 19b:	74 23                	je     1c0 <gets+0x60>
+ 19d:	3c 0d                	cmp    $0xd,%al
+ 19f:	74 1f                	je     1c0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 1a1:	83 c3 01             	add    $0x1,%ebx
+ 1a4:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1a7:	89 fe                	mov    %edi,%esi
+ 1a9:	7c cd                	jl     178 <gets+0x18>
+ 1ab:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1b0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1b3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1b6:	5b                   	pop    %ebx
+ 1b7:	5e                   	pop    %esi
+ 1b8:	5f                   	pop    %edi
+ 1b9:	5d                   	pop    %ebp
+ 1ba:	c3                   	ret    
+ 1bb:	90                   	nop
+ 1bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1c0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1c3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1c6:	01 de                	add    %ebx,%esi
+ 1c8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1ca:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1cd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1d0:	5b                   	pop    %ebx
+ 1d1:	5e                   	pop    %esi
+ 1d2:	5f                   	pop    %edi
+ 1d3:	5d                   	pop    %ebp
+ 1d4:	c3                   	ret    
+ 1d5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000001e0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1e0:	55                   	push   %ebp
+ 1e1:	89 e5                	mov    %esp,%ebp
+ 1e3:	56                   	push   %esi
+ 1e4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1e5:	83 ec 08             	sub    $0x8,%esp
+ 1e8:	6a 00                	push   $0x0
+ 1ea:	ff 75 08             	pushl  0x8(%ebp)
+ 1ed:	e8 f0 00 00 00       	call   2e2 <open>
+  if(fd < 0)
+ 1f2:	83 c4 10             	add    $0x10,%esp
+ 1f5:	85 c0                	test   %eax,%eax
+ 1f7:	78 27                	js     220 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 1f9:	83 ec 08             	sub    $0x8,%esp
+ 1fc:	ff 75 0c             	pushl  0xc(%ebp)
+ 1ff:	89 c3                	mov    %eax,%ebx
+ 201:	50                   	push   %eax
+ 202:	e8 f3 00 00 00       	call   2fa <fstat>
+  close(fd);
+ 207:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 20a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 20c:	e8 b9 00 00 00       	call   2ca <close>
+  return r;
+ 211:	83 c4 10             	add    $0x10,%esp
+}
+ 214:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 217:	89 f0                	mov    %esi,%eax
+ 219:	5b                   	pop    %ebx
+ 21a:	5e                   	pop    %esi
+ 21b:	5d                   	pop    %ebp
+ 21c:	c3                   	ret    
+ 21d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 220:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 225:	eb ed                	jmp    214 <stat+0x34>
+ 227:	89 f6                	mov    %esi,%esi
+ 229:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000230 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 230:	55                   	push   %ebp
+ 231:	89 e5                	mov    %esp,%ebp
+ 233:	53                   	push   %ebx
+ 234:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 237:	0f be 11             	movsbl (%ecx),%edx
+ 23a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 23d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 23f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 244:	77 1f                	ja     265 <atoi+0x35>
+ 246:	8d 76 00             	lea    0x0(%esi),%esi
+ 249:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 250:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 253:	83 c1 01             	add    $0x1,%ecx
+ 256:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 25a:	0f be 11             	movsbl (%ecx),%edx
+ 25d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 260:	80 fb 09             	cmp    $0x9,%bl
+ 263:	76 eb                	jbe    250 <atoi+0x20>
+  return n;
+}
+ 265:	5b                   	pop    %ebx
+ 266:	5d                   	pop    %ebp
+ 267:	c3                   	ret    
+ 268:	90                   	nop
+ 269:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000270 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 270:	55                   	push   %ebp
+ 271:	89 e5                	mov    %esp,%ebp
+ 273:	56                   	push   %esi
+ 274:	53                   	push   %ebx
+ 275:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 278:	8b 45 08             	mov    0x8(%ebp),%eax
+ 27b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 27e:	85 db                	test   %ebx,%ebx
+ 280:	7e 14                	jle    296 <memmove+0x26>
+ 282:	31 d2                	xor    %edx,%edx
+ 284:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 288:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 28c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 28f:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 292:	39 d3                	cmp    %edx,%ebx
+ 294:	75 f2                	jne    288 <memmove+0x18>
+  return vdst;
+}
+ 296:	5b                   	pop    %ebx
+ 297:	5e                   	pop    %esi
+ 298:	5d                   	pop    %ebp
+ 299:	c3                   	ret    
+
+0000029a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 29a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 29f:	cd 40                	int    $0x40
+ 2a1:	c3                   	ret    
+
+000002a2 <exit>:
+SYSCALL(exit)
+ 2a2:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2a7:	cd 40                	int    $0x40
+ 2a9:	c3                   	ret    
+
+000002aa <wait>:
+SYSCALL(wait)
+ 2aa:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2af:	cd 40                	int    $0x40
+ 2b1:	c3                   	ret    
+
+000002b2 <pipe>:
+SYSCALL(pipe)
+ 2b2:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2b7:	cd 40                	int    $0x40
+ 2b9:	c3                   	ret    
+
+000002ba <read>:
+SYSCALL(read)
+ 2ba:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2bf:	cd 40                	int    $0x40
+ 2c1:	c3                   	ret    
+
+000002c2 <write>:
+SYSCALL(write)
+ 2c2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2c7:	cd 40                	int    $0x40
+ 2c9:	c3                   	ret    
+
+000002ca <close>:
+SYSCALL(close)
+ 2ca:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2cf:	cd 40                	int    $0x40
+ 2d1:	c3                   	ret    
+
+000002d2 <kill>:
+SYSCALL(kill)
+ 2d2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2d7:	cd 40                	int    $0x40
+ 2d9:	c3                   	ret    
+
+000002da <exec>:
+SYSCALL(exec)
+ 2da:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2df:	cd 40                	int    $0x40
+ 2e1:	c3                   	ret    
+
+000002e2 <open>:
+SYSCALL(open)
+ 2e2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2e7:	cd 40                	int    $0x40
+ 2e9:	c3                   	ret    
+
+000002ea <mknod>:
+SYSCALL(mknod)
+ 2ea:	b8 11 00 00 00       	mov    $0x11,%eax
+ 2ef:	cd 40                	int    $0x40
+ 2f1:	c3                   	ret    
+
+000002f2 <unlink>:
+SYSCALL(unlink)
+ 2f2:	b8 12 00 00 00       	mov    $0x12,%eax
+ 2f7:	cd 40                	int    $0x40
+ 2f9:	c3                   	ret    
+
+000002fa <fstat>:
+SYSCALL(fstat)
+ 2fa:	b8 08 00 00 00       	mov    $0x8,%eax
+ 2ff:	cd 40                	int    $0x40
+ 301:	c3                   	ret    
+
+00000302 <link>:
+SYSCALL(link)
+ 302:	b8 13 00 00 00       	mov    $0x13,%eax
+ 307:	cd 40                	int    $0x40
+ 309:	c3                   	ret    
+
+0000030a <mkdir>:
+SYSCALL(mkdir)
+ 30a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 30f:	cd 40                	int    $0x40
+ 311:	c3                   	ret    
+
+00000312 <chdir>:
+SYSCALL(chdir)
+ 312:	b8 09 00 00 00       	mov    $0x9,%eax
+ 317:	cd 40                	int    $0x40
+ 319:	c3                   	ret    
+
+0000031a <dup>:
+SYSCALL(dup)
+ 31a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 31f:	cd 40                	int    $0x40
+ 321:	c3                   	ret    
+
+00000322 <getpid>:
+SYSCALL(getpid)
+ 322:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 327:	cd 40                	int    $0x40
+ 329:	c3                   	ret    
+
+0000032a <sbrk>:
+SYSCALL(sbrk)
+ 32a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 32f:	cd 40                	int    $0x40
+ 331:	c3                   	ret    
+
+00000332 <sleep>:
+SYSCALL(sleep)
+ 332:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 337:	cd 40                	int    $0x40
+ 339:	c3                   	ret    
+
+0000033a <uptime>:
+SYSCALL(uptime)
+ 33a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 33f:	cd 40                	int    $0x40
+ 341:	c3                   	ret    
+
+00000342 <draw>:
+SYSCALL(draw)
+ 342:	b8 16 00 00 00       	mov    $0x16,%eax
+ 347:	cd 40                	int    $0x40
+ 349:	c3                   	ret    
+ 34a:	66 90                	xchg   %ax,%ax
+ 34c:	66 90                	xchg   %ax,%ax
+ 34e:	66 90                	xchg   %ax,%ax
+
+00000350 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 350:	55                   	push   %ebp
+ 351:	89 e5                	mov    %esp,%ebp
+ 353:	57                   	push   %edi
+ 354:	56                   	push   %esi
+ 355:	53                   	push   %ebx
+ 356:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 359:	85 d2                	test   %edx,%edx
+{
+ 35b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 35e:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 360:	79 76                	jns    3d8 <printint+0x88>
+ 362:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 366:	74 70                	je     3d8 <printint+0x88>
+    x = -xx;
+ 368:	f7 d8                	neg    %eax
+    neg = 1;
+ 36a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 371:	31 f6                	xor    %esi,%esi
+ 373:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 376:	eb 0a                	jmp    382 <printint+0x32>
+ 378:	90                   	nop
+ 379:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 380:	89 fe                	mov    %edi,%esi
+ 382:	31 d2                	xor    %edx,%edx
+ 384:	8d 7e 01             	lea    0x1(%esi),%edi
+ 387:	f7 f1                	div    %ecx
+ 389:	0f b6 92 74 07 00 00 	movzbl 0x774(%edx),%edx
+  }while((x /= base) != 0);
+ 390:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 392:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 395:	75 e9                	jne    380 <printint+0x30>
+  if(neg)
+ 397:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 39a:	85 c0                	test   %eax,%eax
+ 39c:	74 08                	je     3a6 <printint+0x56>
+    buf[i++] = '-';
+ 39e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 3a3:	8d 7e 02             	lea    0x2(%esi),%edi
+ 3a6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 3aa:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 3ad:	8d 76 00             	lea    0x0(%esi),%esi
+ 3b0:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 3b3:	83 ec 04             	sub    $0x4,%esp
+ 3b6:	83 ee 01             	sub    $0x1,%esi
+ 3b9:	6a 01                	push   $0x1
+ 3bb:	53                   	push   %ebx
+ 3bc:	57                   	push   %edi
+ 3bd:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 3c0:	e8 fd fe ff ff       	call   2c2 <write>
+
+  while(--i >= 0)
+ 3c5:	83 c4 10             	add    $0x10,%esp
+ 3c8:	39 de                	cmp    %ebx,%esi
+ 3ca:	75 e4                	jne    3b0 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 3cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3cf:	5b                   	pop    %ebx
+ 3d0:	5e                   	pop    %esi
+ 3d1:	5f                   	pop    %edi
+ 3d2:	5d                   	pop    %ebp
+ 3d3:	c3                   	ret    
+ 3d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 3d8:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 3df:	eb 90                	jmp    371 <printint+0x21>
+ 3e1:	eb 0d                	jmp    3f0 <printf>
+ 3e3:	90                   	nop
+ 3e4:	90                   	nop
+ 3e5:	90                   	nop
+ 3e6:	90                   	nop
+ 3e7:	90                   	nop
+ 3e8:	90                   	nop
+ 3e9:	90                   	nop
+ 3ea:	90                   	nop
+ 3eb:	90                   	nop
+ 3ec:	90                   	nop
+ 3ed:	90                   	nop
+ 3ee:	90                   	nop
+ 3ef:	90                   	nop
+
+000003f0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 3f0:	55                   	push   %ebp
+ 3f1:	89 e5                	mov    %esp,%ebp
+ 3f3:	57                   	push   %edi
+ 3f4:	56                   	push   %esi
+ 3f5:	53                   	push   %ebx
+ 3f6:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 3f9:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 3fc:	0f b6 1e             	movzbl (%esi),%ebx
+ 3ff:	84 db                	test   %bl,%bl
+ 401:	0f 84 b3 00 00 00    	je     4ba <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 407:	8d 45 10             	lea    0x10(%ebp),%eax
+ 40a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 40d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 40f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 412:	eb 2f                	jmp    443 <printf+0x53>
+ 414:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 418:	83 f8 25             	cmp    $0x25,%eax
+ 41b:	0f 84 a7 00 00 00    	je     4c8 <printf+0xd8>
+  write(fd, &c, 1);
+ 421:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 424:	83 ec 04             	sub    $0x4,%esp
+ 427:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 42a:	6a 01                	push   $0x1
+ 42c:	50                   	push   %eax
+ 42d:	ff 75 08             	pushl  0x8(%ebp)
+ 430:	e8 8d fe ff ff       	call   2c2 <write>
+ 435:	83 c4 10             	add    $0x10,%esp
+ 438:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 43b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 43f:	84 db                	test   %bl,%bl
+ 441:	74 77                	je     4ba <printf+0xca>
+    if(state == 0){
+ 443:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 445:	0f be cb             	movsbl %bl,%ecx
+ 448:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 44b:	74 cb                	je     418 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 44d:	83 ff 25             	cmp    $0x25,%edi
+ 450:	75 e6                	jne    438 <printf+0x48>
+      if(c == 'd'){
+ 452:	83 f8 64             	cmp    $0x64,%eax
+ 455:	0f 84 05 01 00 00    	je     560 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 45b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 461:	83 f9 70             	cmp    $0x70,%ecx
+ 464:	74 72                	je     4d8 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 466:	83 f8 73             	cmp    $0x73,%eax
+ 469:	0f 84 99 00 00 00    	je     508 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 46f:	83 f8 63             	cmp    $0x63,%eax
+ 472:	0f 84 08 01 00 00    	je     580 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 478:	83 f8 25             	cmp    $0x25,%eax
+ 47b:	0f 84 ef 00 00 00    	je     570 <printf+0x180>
+  write(fd, &c, 1);
+ 481:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 484:	83 ec 04             	sub    $0x4,%esp
+ 487:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 48b:	6a 01                	push   $0x1
+ 48d:	50                   	push   %eax
+ 48e:	ff 75 08             	pushl  0x8(%ebp)
+ 491:	e8 2c fe ff ff       	call   2c2 <write>
+ 496:	83 c4 0c             	add    $0xc,%esp
+ 499:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 49c:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 49f:	6a 01                	push   $0x1
+ 4a1:	50                   	push   %eax
+ 4a2:	ff 75 08             	pushl  0x8(%ebp)
+ 4a5:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 4a8:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 4aa:	e8 13 fe ff ff       	call   2c2 <write>
+  for(i = 0; fmt[i]; i++){
+ 4af:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 4b3:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4b6:	84 db                	test   %bl,%bl
+ 4b8:	75 89                	jne    443 <printf+0x53>
+    }
+  }
+}
+ 4ba:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4bd:	5b                   	pop    %ebx
+ 4be:	5e                   	pop    %esi
+ 4bf:	5f                   	pop    %edi
+ 4c0:	5d                   	pop    %ebp
+ 4c1:	c3                   	ret    
+ 4c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 4c8:	bf 25 00 00 00       	mov    $0x25,%edi
+ 4cd:	e9 66 ff ff ff       	jmp    438 <printf+0x48>
+ 4d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 4d8:	83 ec 0c             	sub    $0xc,%esp
+ 4db:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4e0:	6a 00                	push   $0x0
+ 4e2:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 4e5:	8b 45 08             	mov    0x8(%ebp),%eax
+ 4e8:	8b 17                	mov    (%edi),%edx
+ 4ea:	e8 61 fe ff ff       	call   350 <printint>
+        ap++;
+ 4ef:	89 f8                	mov    %edi,%eax
+ 4f1:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 4f4:	31 ff                	xor    %edi,%edi
+        ap++;
+ 4f6:	83 c0 04             	add    $0x4,%eax
+ 4f9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 4fc:	e9 37 ff ff ff       	jmp    438 <printf+0x48>
+ 501:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 508:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 50b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 50d:	83 c0 04             	add    $0x4,%eax
+ 510:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 513:	85 c9                	test   %ecx,%ecx
+ 515:	0f 84 8e 00 00 00    	je     5a9 <printf+0x1b9>
+        while(*s != 0){
+ 51b:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 51e:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 520:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 522:	84 c0                	test   %al,%al
+ 524:	0f 84 0e ff ff ff    	je     438 <printf+0x48>
+ 52a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 52d:	89 de                	mov    %ebx,%esi
+ 52f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 532:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 535:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 538:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 53b:	83 c6 01             	add    $0x1,%esi
+ 53e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 541:	6a 01                	push   $0x1
+ 543:	57                   	push   %edi
+ 544:	53                   	push   %ebx
+ 545:	e8 78 fd ff ff       	call   2c2 <write>
+        while(*s != 0){
+ 54a:	0f b6 06             	movzbl (%esi),%eax
+ 54d:	83 c4 10             	add    $0x10,%esp
+ 550:	84 c0                	test   %al,%al
+ 552:	75 e4                	jne    538 <printf+0x148>
+ 554:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 557:	31 ff                	xor    %edi,%edi
+ 559:	e9 da fe ff ff       	jmp    438 <printf+0x48>
+ 55e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 560:	83 ec 0c             	sub    $0xc,%esp
+ 563:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 568:	6a 01                	push   $0x1
+ 56a:	e9 73 ff ff ff       	jmp    4e2 <printf+0xf2>
+ 56f:	90                   	nop
+  write(fd, &c, 1);
+ 570:	83 ec 04             	sub    $0x4,%esp
+ 573:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 576:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 579:	6a 01                	push   $0x1
+ 57b:	e9 21 ff ff ff       	jmp    4a1 <printf+0xb1>
+        putc(fd, *ap);
+ 580:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 583:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 586:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 588:	6a 01                	push   $0x1
+        ap++;
+ 58a:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 58d:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 590:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 593:	50                   	push   %eax
+ 594:	ff 75 08             	pushl  0x8(%ebp)
+ 597:	e8 26 fd ff ff       	call   2c2 <write>
+        ap++;
+ 59c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 59f:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5a2:	31 ff                	xor    %edi,%edi
+ 5a4:	e9 8f fe ff ff       	jmp    438 <printf+0x48>
+          s = "(null)";
+ 5a9:	bb 6b 07 00 00       	mov    $0x76b,%ebx
+        while(*s != 0){
+ 5ae:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5b3:	e9 72 ff ff ff       	jmp    52a <printf+0x13a>
+ 5b8:	66 90                	xchg   %ax,%ax
+ 5ba:	66 90                	xchg   %ax,%ax
+ 5bc:	66 90                	xchg   %ax,%ax
+ 5be:	66 90                	xchg   %ax,%ax
+
+000005c0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5c0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5c1:	a1 f0 11 00 00       	mov    0x11f0,%eax
+{
+ 5c6:	89 e5                	mov    %esp,%ebp
+ 5c8:	57                   	push   %edi
+ 5c9:	56                   	push   %esi
+ 5ca:	53                   	push   %ebx
+ 5cb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 5ce:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 5d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5d8:	39 c8                	cmp    %ecx,%eax
+ 5da:	8b 10                	mov    (%eax),%edx
+ 5dc:	73 32                	jae    610 <free+0x50>
+ 5de:	39 d1                	cmp    %edx,%ecx
+ 5e0:	72 04                	jb     5e6 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5e2:	39 d0                	cmp    %edx,%eax
+ 5e4:	72 32                	jb     618 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 5e6:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 5e9:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 5ec:	39 fa                	cmp    %edi,%edx
+ 5ee:	74 30                	je     620 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 5f0:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 5f3:	8b 50 04             	mov    0x4(%eax),%edx
+ 5f6:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 5f9:	39 f1                	cmp    %esi,%ecx
+ 5fb:	74 3a                	je     637 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 5fd:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 5ff:	a3 f0 11 00 00       	mov    %eax,0x11f0
+}
+ 604:	5b                   	pop    %ebx
+ 605:	5e                   	pop    %esi
+ 606:	5f                   	pop    %edi
+ 607:	5d                   	pop    %ebp
+ 608:	c3                   	ret    
+ 609:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 610:	39 d0                	cmp    %edx,%eax
+ 612:	72 04                	jb     618 <free+0x58>
+ 614:	39 d1                	cmp    %edx,%ecx
+ 616:	72 ce                	jb     5e6 <free+0x26>
+{
+ 618:	89 d0                	mov    %edx,%eax
+ 61a:	eb bc                	jmp    5d8 <free+0x18>
+ 61c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 620:	03 72 04             	add    0x4(%edx),%esi
+ 623:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 626:	8b 10                	mov    (%eax),%edx
+ 628:	8b 12                	mov    (%edx),%edx
+ 62a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 62d:	8b 50 04             	mov    0x4(%eax),%edx
+ 630:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 633:	39 f1                	cmp    %esi,%ecx
+ 635:	75 c6                	jne    5fd <free+0x3d>
+    p->s.size += bp->s.size;
+ 637:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 63a:	a3 f0 11 00 00       	mov    %eax,0x11f0
+    p->s.size += bp->s.size;
+ 63f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 642:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 645:	89 10                	mov    %edx,(%eax)
+}
+ 647:	5b                   	pop    %ebx
+ 648:	5e                   	pop    %esi
+ 649:	5f                   	pop    %edi
+ 64a:	5d                   	pop    %ebp
+ 64b:	c3                   	ret    
+ 64c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000650 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 650:	55                   	push   %ebp
+ 651:	89 e5                	mov    %esp,%ebp
+ 653:	57                   	push   %edi
+ 654:	56                   	push   %esi
+ 655:	53                   	push   %ebx
+ 656:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 659:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 65c:	8b 15 f0 11 00 00    	mov    0x11f0,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 662:	8d 78 07             	lea    0x7(%eax),%edi
+ 665:	c1 ef 03             	shr    $0x3,%edi
+ 668:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 66b:	85 d2                	test   %edx,%edx
+ 66d:	0f 84 9d 00 00 00    	je     710 <malloc+0xc0>
+ 673:	8b 02                	mov    (%edx),%eax
+ 675:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 678:	39 cf                	cmp    %ecx,%edi
+ 67a:	76 6c                	jbe    6e8 <malloc+0x98>
+ 67c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 682:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 687:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 68a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 691:	eb 0e                	jmp    6a1 <malloc+0x51>
+ 693:	90                   	nop
+ 694:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 698:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 69a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 69d:	39 f9                	cmp    %edi,%ecx
+ 69f:	73 47                	jae    6e8 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6a1:	39 05 f0 11 00 00    	cmp    %eax,0x11f0
+ 6a7:	89 c2                	mov    %eax,%edx
+ 6a9:	75 ed                	jne    698 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 6ab:	83 ec 0c             	sub    $0xc,%esp
+ 6ae:	56                   	push   %esi
+ 6af:	e8 76 fc ff ff       	call   32a <sbrk>
+  if(p == (char*)-1)
+ 6b4:	83 c4 10             	add    $0x10,%esp
+ 6b7:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6ba:	74 1c                	je     6d8 <malloc+0x88>
+  hp->s.size = nu;
+ 6bc:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6bf:	83 ec 0c             	sub    $0xc,%esp
+ 6c2:	83 c0 08             	add    $0x8,%eax
+ 6c5:	50                   	push   %eax
+ 6c6:	e8 f5 fe ff ff       	call   5c0 <free>
+  return freep;
+ 6cb:	8b 15 f0 11 00 00    	mov    0x11f0,%edx
+      if((p = morecore(nunits)) == 0)
+ 6d1:	83 c4 10             	add    $0x10,%esp
+ 6d4:	85 d2                	test   %edx,%edx
+ 6d6:	75 c0                	jne    698 <malloc+0x48>
+        return 0;
+  }
+}
+ 6d8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 6db:	31 c0                	xor    %eax,%eax
+}
+ 6dd:	5b                   	pop    %ebx
+ 6de:	5e                   	pop    %esi
+ 6df:	5f                   	pop    %edi
+ 6e0:	5d                   	pop    %ebp
+ 6e1:	c3                   	ret    
+ 6e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 6e8:	39 cf                	cmp    %ecx,%edi
+ 6ea:	74 54                	je     740 <malloc+0xf0>
+        p->s.size -= nunits;
+ 6ec:	29 f9                	sub    %edi,%ecx
+ 6ee:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 6f1:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 6f4:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 6f7:	89 15 f0 11 00 00    	mov    %edx,0x11f0
+}
+ 6fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 700:	83 c0 08             	add    $0x8,%eax
+}
+ 703:	5b                   	pop    %ebx
+ 704:	5e                   	pop    %esi
+ 705:	5f                   	pop    %edi
+ 706:	5d                   	pop    %ebp
+ 707:	c3                   	ret    
+ 708:	90                   	nop
+ 709:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 710:	c7 05 f0 11 00 00 f4 	movl   $0x11f4,0x11f0
+ 717:	11 00 00 
+ 71a:	c7 05 f4 11 00 00 f4 	movl   $0x11f4,0x11f4
+ 721:	11 00 00 
+    base.s.size = 0;
+ 724:	b8 f4 11 00 00       	mov    $0x11f4,%eax
+ 729:	c7 05 f8 11 00 00 00 	movl   $0x0,0x11f8
+ 730:	00 00 00 
+ 733:	e9 44 ff ff ff       	jmp    67c <malloc+0x2c>
+ 738:	90                   	nop
+ 739:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 740:	8b 08                	mov    (%eax),%ecx
+ 742:	89 0a                	mov    %ecx,(%edx)
+ 744:	eb b1                	jmp    6f7 <malloc+0xa7>
diff -urN main/Drawtest.asm xv6-public/Drawtest.asm
--- main/Drawtest.asm	2022-09-26 21:21:17.697126000 +0530
+++ xv6-public/Drawtest.asm	1970-01-01 05:30:00.000000000 +0530
@@ -1,1170 +0,0 @@
-
-_Drawtest:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-int main(void){
-   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-   4:	83 e4 f0             	and    $0xfffffff0,%esp
-   7:	ff 71 fc             	pushl  -0x4(%ecx)
-   a:	55                   	push   %ebp
-   b:	89 e5                	mov    %esp,%ebp
-   d:	51                   	push   %ecx
-   e:	83 ec 0c             	sub    $0xc,%esp
-    static char buf[5000];
-    printf(1,"The system call returns %d\n",draw((void*) buf,5000));
-  11:	68 88 13 00 00       	push   $0x1388
-  16:	68 40 0a 00 00       	push   $0xa40
-  1b:	e8 3a 03 00 00       	call   35a <draw>
-  20:	83 c4 0c             	add    $0xc,%esp
-  23:	50                   	push   %eax
-  24:	68 68 07 00 00       	push   $0x768
-  29:	6a 01                	push   $0x1
-  2b:	e8 e0 03 00 00       	call   410 <printf>
-    printf(1,"%s",buf);
-  30:	83 c4 0c             	add    $0xc,%esp
-  33:	68 40 0a 00 00       	push   $0xa40
-  38:	68 84 07 00 00       	push   $0x784
-  3d:	6a 01                	push   $0x1
-  3f:	e8 cc 03 00 00       	call   410 <printf>
-    exit();
-  44:	e8 59 02 00 00       	call   2a2 <exit>
-  49:	66 90                	xchg   %ax,%ax
-  4b:	66 90                	xchg   %ax,%ax
-  4d:	66 90                	xchg   %ax,%ax
-  4f:	90                   	nop
-
-00000050 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
-  50:	55                   	push   %ebp
-  51:	89 e5                	mov    %esp,%ebp
-  53:	53                   	push   %ebx
-  54:	8b 45 08             	mov    0x8(%ebp),%eax
-  57:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
-  5a:	89 c2                	mov    %eax,%edx
-  5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  60:	83 c1 01             	add    $0x1,%ecx
-  63:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
-  67:	83 c2 01             	add    $0x1,%edx
-  6a:	84 db                	test   %bl,%bl
-  6c:	88 5a ff             	mov    %bl,-0x1(%edx)
-  6f:	75 ef                	jne    60 <strcpy+0x10>
-    ;
-  return os;
-}
-  71:	5b                   	pop    %ebx
-  72:	5d                   	pop    %ebp
-  73:	c3                   	ret    
-  74:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  7a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
-
-00000080 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
-  80:	55                   	push   %ebp
-  81:	89 e5                	mov    %esp,%ebp
-  83:	53                   	push   %ebx
-  84:	8b 55 08             	mov    0x8(%ebp),%edx
-  87:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-  while(*p && *p == *q)
-  8a:	0f b6 02             	movzbl (%edx),%eax
-  8d:	0f b6 19             	movzbl (%ecx),%ebx
-  90:	84 c0                	test   %al,%al
-  92:	75 1c                	jne    b0 <strcmp+0x30>
-  94:	eb 2a                	jmp    c0 <strcmp+0x40>
-  96:	8d 76 00             	lea    0x0(%esi),%esi
-  99:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-    p++, q++;
-  a0:	83 c2 01             	add    $0x1,%edx
-  while(*p && *p == *q)
-  a3:	0f b6 02             	movzbl (%edx),%eax
-    p++, q++;
-  a6:	83 c1 01             	add    $0x1,%ecx
-  a9:	0f b6 19             	movzbl (%ecx),%ebx
-  while(*p && *p == *q)
-  ac:	84 c0                	test   %al,%al
-  ae:	74 10                	je     c0 <strcmp+0x40>
-  b0:	38 d8                	cmp    %bl,%al
-  b2:	74 ec                	je     a0 <strcmp+0x20>
-  return (uchar)*p - (uchar)*q;
-  b4:	29 d8                	sub    %ebx,%eax
-}
-  b6:	5b                   	pop    %ebx
-  b7:	5d                   	pop    %ebp
-  b8:	c3                   	ret    
-  b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  c0:	31 c0                	xor    %eax,%eax
-  return (uchar)*p - (uchar)*q;
-  c2:	29 d8                	sub    %ebx,%eax
-}
-  c4:	5b                   	pop    %ebx
-  c5:	5d                   	pop    %ebp
-  c6:	c3                   	ret    
-  c7:	89 f6                	mov    %esi,%esi
-  c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-000000d0 <strlen>:
-
-uint
-strlen(const char *s)
-{
-  d0:	55                   	push   %ebp
-  d1:	89 e5                	mov    %esp,%ebp
-  d3:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  int n;
-
-  for(n = 0; s[n]; n++)
-  d6:	80 39 00             	cmpb   $0x0,(%ecx)
-  d9:	74 15                	je     f0 <strlen+0x20>
-  db:	31 d2                	xor    %edx,%edx
-  dd:	8d 76 00             	lea    0x0(%esi),%esi
-  e0:	83 c2 01             	add    $0x1,%edx
-  e3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
-  e7:	89 d0                	mov    %edx,%eax
-  e9:	75 f5                	jne    e0 <strlen+0x10>
-    ;
-  return n;
-}
-  eb:	5d                   	pop    %ebp
-  ec:	c3                   	ret    
-  ed:	8d 76 00             	lea    0x0(%esi),%esi
-  for(n = 0; s[n]; n++)
-  f0:	31 c0                	xor    %eax,%eax
-}
-  f2:	5d                   	pop    %ebp
-  f3:	c3                   	ret    
-  f4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  fa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
-
-00000100 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 100:	55                   	push   %ebp
- 101:	89 e5                	mov    %esp,%ebp
- 103:	57                   	push   %edi
- 104:	8b 55 08             	mov    0x8(%ebp),%edx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
- 107:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 10a:	8b 45 0c             	mov    0xc(%ebp),%eax
- 10d:	89 d7                	mov    %edx,%edi
- 10f:	fc                   	cld    
- 110:	f3 aa                	rep stos %al,%es:(%edi)
-  stosb(dst, c, n);
-  return dst;
-}
- 112:	89 d0                	mov    %edx,%eax
- 114:	5f                   	pop    %edi
- 115:	5d                   	pop    %ebp
- 116:	c3                   	ret    
- 117:	89 f6                	mov    %esi,%esi
- 119:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-00000120 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 120:	55                   	push   %ebp
- 121:	89 e5                	mov    %esp,%ebp
- 123:	53                   	push   %ebx
- 124:	8b 45 08             	mov    0x8(%ebp),%eax
- 127:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-  for(; *s; s++)
- 12a:	0f b6 10             	movzbl (%eax),%edx
- 12d:	84 d2                	test   %dl,%dl
- 12f:	74 1d                	je     14e <strchr+0x2e>
-    if(*s == c)
- 131:	38 d3                	cmp    %dl,%bl
- 133:	89 d9                	mov    %ebx,%ecx
- 135:	75 0d                	jne    144 <strchr+0x24>
- 137:	eb 17                	jmp    150 <strchr+0x30>
- 139:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 140:	38 ca                	cmp    %cl,%dl
- 142:	74 0c                	je     150 <strchr+0x30>
-  for(; *s; s++)
- 144:	83 c0 01             	add    $0x1,%eax
- 147:	0f b6 10             	movzbl (%eax),%edx
- 14a:	84 d2                	test   %dl,%dl
- 14c:	75 f2                	jne    140 <strchr+0x20>
-      return (char*)s;
-  return 0;
- 14e:	31 c0                	xor    %eax,%eax
-}
- 150:	5b                   	pop    %ebx
- 151:	5d                   	pop    %ebp
- 152:	c3                   	ret    
- 153:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 159:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-00000160 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 160:	55                   	push   %ebp
- 161:	89 e5                	mov    %esp,%ebp
- 163:	57                   	push   %edi
- 164:	56                   	push   %esi
- 165:	53                   	push   %ebx
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 166:	31 f6                	xor    %esi,%esi
- 168:	89 f3                	mov    %esi,%ebx
-{
- 16a:	83 ec 1c             	sub    $0x1c,%esp
- 16d:	8b 7d 08             	mov    0x8(%ebp),%edi
-  for(i=0; i+1 < max; ){
- 170:	eb 2f                	jmp    1a1 <gets+0x41>
- 172:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    cc = read(0, &c, 1);
- 178:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 17b:	83 ec 04             	sub    $0x4,%esp
- 17e:	6a 01                	push   $0x1
- 180:	50                   	push   %eax
- 181:	6a 00                	push   $0x0
- 183:	e8 32 01 00 00       	call   2ba <read>
-    if(cc < 1)
- 188:	83 c4 10             	add    $0x10,%esp
- 18b:	85 c0                	test   %eax,%eax
- 18d:	7e 1c                	jle    1ab <gets+0x4b>
-      break;
-    buf[i++] = c;
- 18f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
- 193:	83 c7 01             	add    $0x1,%edi
- 196:	88 47 ff             	mov    %al,-0x1(%edi)
-    if(c == '\n' || c == '\r')
- 199:	3c 0a                	cmp    $0xa,%al
- 19b:	74 23                	je     1c0 <gets+0x60>
- 19d:	3c 0d                	cmp    $0xd,%al
- 19f:	74 1f                	je     1c0 <gets+0x60>
-  for(i=0; i+1 < max; ){
- 1a1:	83 c3 01             	add    $0x1,%ebx
- 1a4:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 1a7:	89 fe                	mov    %edi,%esi
- 1a9:	7c cd                	jl     178 <gets+0x18>
- 1ab:	89 f3                	mov    %esi,%ebx
-      break;
-  }
-  buf[i] = '\0';
-  return buf;
-}
- 1ad:	8b 45 08             	mov    0x8(%ebp),%eax
-  buf[i] = '\0';
- 1b0:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 1b3:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 1b6:	5b                   	pop    %ebx
- 1b7:	5e                   	pop    %esi
- 1b8:	5f                   	pop    %edi
- 1b9:	5d                   	pop    %ebp
- 1ba:	c3                   	ret    
- 1bb:	90                   	nop
- 1bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 1c0:	8b 75 08             	mov    0x8(%ebp),%esi
- 1c3:	8b 45 08             	mov    0x8(%ebp),%eax
- 1c6:	01 de                	add    %ebx,%esi
- 1c8:	89 f3                	mov    %esi,%ebx
-  buf[i] = '\0';
- 1ca:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 1cd:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 1d0:	5b                   	pop    %ebx
- 1d1:	5e                   	pop    %esi
- 1d2:	5f                   	pop    %edi
- 1d3:	5d                   	pop    %ebp
- 1d4:	c3                   	ret    
- 1d5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 1d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-000001e0 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
- 1e0:	55                   	push   %ebp
- 1e1:	89 e5                	mov    %esp,%ebp
- 1e3:	56                   	push   %esi
- 1e4:	53                   	push   %ebx
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 1e5:	83 ec 08             	sub    $0x8,%esp
- 1e8:	6a 00                	push   $0x0
- 1ea:	ff 75 08             	pushl  0x8(%ebp)
- 1ed:	e8 f0 00 00 00       	call   2e2 <open>
-  if(fd < 0)
- 1f2:	83 c4 10             	add    $0x10,%esp
- 1f5:	85 c0                	test   %eax,%eax
- 1f7:	78 27                	js     220 <stat+0x40>
-    return -1;
-  r = fstat(fd, st);
- 1f9:	83 ec 08             	sub    $0x8,%esp
- 1fc:	ff 75 0c             	pushl  0xc(%ebp)
- 1ff:	89 c3                	mov    %eax,%ebx
- 201:	50                   	push   %eax
- 202:	e8 f3 00 00 00       	call   2fa <fstat>
-  close(fd);
- 207:	89 1c 24             	mov    %ebx,(%esp)
-  r = fstat(fd, st);
- 20a:	89 c6                	mov    %eax,%esi
-  close(fd);
- 20c:	e8 b9 00 00 00       	call   2ca <close>
-  return r;
- 211:	83 c4 10             	add    $0x10,%esp
-}
- 214:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 217:	89 f0                	mov    %esi,%eax
- 219:	5b                   	pop    %ebx
- 21a:	5e                   	pop    %esi
- 21b:	5d                   	pop    %ebp
- 21c:	c3                   	ret    
- 21d:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
- 220:	be ff ff ff ff       	mov    $0xffffffff,%esi
- 225:	eb ed                	jmp    214 <stat+0x34>
- 227:	89 f6                	mov    %esi,%esi
- 229:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-00000230 <atoi>:
-
-int
-atoi(const char *s)
-{
- 230:	55                   	push   %ebp
- 231:	89 e5                	mov    %esp,%ebp
- 233:	53                   	push   %ebx
- 234:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 237:	0f be 11             	movsbl (%ecx),%edx
- 23a:	8d 42 d0             	lea    -0x30(%edx),%eax
- 23d:	3c 09                	cmp    $0x9,%al
-  n = 0;
- 23f:	b8 00 00 00 00       	mov    $0x0,%eax
-  while('0' <= *s && *s <= '9')
- 244:	77 1f                	ja     265 <atoi+0x35>
- 246:	8d 76 00             	lea    0x0(%esi),%esi
- 249:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-    n = n*10 + *s++ - '0';
- 250:	8d 04 80             	lea    (%eax,%eax,4),%eax
- 253:	83 c1 01             	add    $0x1,%ecx
- 256:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
-  while('0' <= *s && *s <= '9')
- 25a:	0f be 11             	movsbl (%ecx),%edx
- 25d:	8d 5a d0             	lea    -0x30(%edx),%ebx
- 260:	80 fb 09             	cmp    $0x9,%bl
- 263:	76 eb                	jbe    250 <atoi+0x20>
-  return n;
-}
- 265:	5b                   	pop    %ebx
- 266:	5d                   	pop    %ebp
- 267:	c3                   	ret    
- 268:	90                   	nop
- 269:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-00000270 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
- 270:	55                   	push   %ebp
- 271:	89 e5                	mov    %esp,%ebp
- 273:	56                   	push   %esi
- 274:	53                   	push   %ebx
- 275:	8b 5d 10             	mov    0x10(%ebp),%ebx
- 278:	8b 45 08             	mov    0x8(%ebp),%eax
- 27b:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 27e:	85 db                	test   %ebx,%ebx
- 280:	7e 14                	jle    296 <memmove+0x26>
- 282:	31 d2                	xor    %edx,%edx
- 284:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    *dst++ = *src++;
- 288:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
- 28c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
- 28f:	83 c2 01             	add    $0x1,%edx
-  while(n-- > 0)
- 292:	39 d3                	cmp    %edx,%ebx
- 294:	75 f2                	jne    288 <memmove+0x18>
-  return vdst;
-}
- 296:	5b                   	pop    %ebx
- 297:	5e                   	pop    %esi
- 298:	5d                   	pop    %ebp
- 299:	c3                   	ret    
-
-0000029a <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 29a:	b8 01 00 00 00       	mov    $0x1,%eax
- 29f:	cd 40                	int    $0x40
- 2a1:	c3                   	ret    
-
-000002a2 <exit>:
-SYSCALL(exit)
- 2a2:	b8 02 00 00 00       	mov    $0x2,%eax
- 2a7:	cd 40                	int    $0x40
- 2a9:	c3                   	ret    
-
-000002aa <wait>:
-SYSCALL(wait)
- 2aa:	b8 03 00 00 00       	mov    $0x3,%eax
- 2af:	cd 40                	int    $0x40
- 2b1:	c3                   	ret    
-
-000002b2 <pipe>:
-SYSCALL(pipe)
- 2b2:	b8 04 00 00 00       	mov    $0x4,%eax
- 2b7:	cd 40                	int    $0x40
- 2b9:	c3                   	ret    
-
-000002ba <read>:
-SYSCALL(read)
- 2ba:	b8 05 00 00 00       	mov    $0x5,%eax
- 2bf:	cd 40                	int    $0x40
- 2c1:	c3                   	ret    
-
-000002c2 <write>:
-SYSCALL(write)
- 2c2:	b8 10 00 00 00       	mov    $0x10,%eax
- 2c7:	cd 40                	int    $0x40
- 2c9:	c3                   	ret    
-
-000002ca <close>:
-SYSCALL(close)
- 2ca:	b8 15 00 00 00       	mov    $0x15,%eax
- 2cf:	cd 40                	int    $0x40
- 2d1:	c3                   	ret    
-
-000002d2 <kill>:
-SYSCALL(kill)
- 2d2:	b8 06 00 00 00       	mov    $0x6,%eax
- 2d7:	cd 40                	int    $0x40
- 2d9:	c3                   	ret    
-
-000002da <exec>:
-SYSCALL(exec)
- 2da:	b8 07 00 00 00       	mov    $0x7,%eax
- 2df:	cd 40                	int    $0x40
- 2e1:	c3                   	ret    
-
-000002e2 <open>:
-SYSCALL(open)
- 2e2:	b8 0f 00 00 00       	mov    $0xf,%eax
- 2e7:	cd 40                	int    $0x40
- 2e9:	c3                   	ret    
-
-000002ea <mknod>:
-SYSCALL(mknod)
- 2ea:	b8 11 00 00 00       	mov    $0x11,%eax
- 2ef:	cd 40                	int    $0x40
- 2f1:	c3                   	ret    
-
-000002f2 <unlink>:
-SYSCALL(unlink)
- 2f2:	b8 12 00 00 00       	mov    $0x12,%eax
- 2f7:	cd 40                	int    $0x40
- 2f9:	c3                   	ret    
-
-000002fa <fstat>:
-SYSCALL(fstat)
- 2fa:	b8 08 00 00 00       	mov    $0x8,%eax
- 2ff:	cd 40                	int    $0x40
- 301:	c3                   	ret    
-
-00000302 <link>:
-SYSCALL(link)
- 302:	b8 13 00 00 00       	mov    $0x13,%eax
- 307:	cd 40                	int    $0x40
- 309:	c3                   	ret    
-
-0000030a <mkdir>:
-SYSCALL(mkdir)
- 30a:	b8 14 00 00 00       	mov    $0x14,%eax
- 30f:	cd 40                	int    $0x40
- 311:	c3                   	ret    
-
-00000312 <chdir>:
-SYSCALL(chdir)
- 312:	b8 09 00 00 00       	mov    $0x9,%eax
- 317:	cd 40                	int    $0x40
- 319:	c3                   	ret    
-
-0000031a <dup>:
-SYSCALL(dup)
- 31a:	b8 0a 00 00 00       	mov    $0xa,%eax
- 31f:	cd 40                	int    $0x40
- 321:	c3                   	ret    
-
-00000322 <getpid>:
-SYSCALL(getpid)
- 322:	b8 0b 00 00 00       	mov    $0xb,%eax
- 327:	cd 40                	int    $0x40
- 329:	c3                   	ret    
-
-0000032a <sbrk>:
-SYSCALL(sbrk)
- 32a:	b8 0c 00 00 00       	mov    $0xc,%eax
- 32f:	cd 40                	int    $0x40
- 331:	c3                   	ret    
-
-00000332 <sleep>:
-SYSCALL(sleep)
- 332:	b8 0d 00 00 00       	mov    $0xd,%eax
- 337:	cd 40                	int    $0x40
- 339:	c3                   	ret    
-
-0000033a <uptime>:
-SYSCALL(uptime)
- 33a:	b8 0e 00 00 00       	mov    $0xe,%eax
- 33f:	cd 40                	int    $0x40
- 341:	c3                   	ret    
-
-00000342 <thread_create>:
-SYSCALL(thread_create)
- 342:	b8 16 00 00 00       	mov    $0x16,%eax
- 347:	cd 40                	int    $0x40
- 349:	c3                   	ret    
-
-0000034a <thread_join>:
-SYSCALL(thread_join)
- 34a:	b8 18 00 00 00       	mov    $0x18,%eax
- 34f:	cd 40                	int    $0x40
- 351:	c3                   	ret    
-
-00000352 <thread_exit>:
-SYSCALL(thread_exit)
- 352:	b8 17 00 00 00       	mov    $0x17,%eax
- 357:	cd 40                	int    $0x40
- 359:	c3                   	ret    
-
-0000035a <draw>:
- 35a:	b8 19 00 00 00       	mov    $0x19,%eax
- 35f:	cd 40                	int    $0x40
- 361:	c3                   	ret    
- 362:	66 90                	xchg   %ax,%ax
- 364:	66 90                	xchg   %ax,%ax
- 366:	66 90                	xchg   %ax,%ax
- 368:	66 90                	xchg   %ax,%ax
- 36a:	66 90                	xchg   %ax,%ax
- 36c:	66 90                	xchg   %ax,%ax
- 36e:	66 90                	xchg   %ax,%ax
-
-00000370 <printint>:
-  write(fd, &c, 1);
-}
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 370:	55                   	push   %ebp
- 371:	89 e5                	mov    %esp,%ebp
- 373:	57                   	push   %edi
- 374:	56                   	push   %esi
- 375:	53                   	push   %ebx
- 376:	83 ec 3c             	sub    $0x3c,%esp
-  char buf[16];
-  int i, neg;
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
- 379:	85 d2                	test   %edx,%edx
-{
- 37b:	89 45 c0             	mov    %eax,-0x40(%ebp)
-    neg = 1;
-    x = -xx;
- 37e:	89 d0                	mov    %edx,%eax
-  if(sgn && xx < 0){
- 380:	79 76                	jns    3f8 <printint+0x88>
- 382:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 386:	74 70                	je     3f8 <printint+0x88>
-    x = -xx;
- 388:	f7 d8                	neg    %eax
-    neg = 1;
- 38a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
-  } else {
-    x = xx;
-  }
-
-  i = 0;
- 391:	31 f6                	xor    %esi,%esi
- 393:	8d 5d d7             	lea    -0x29(%ebp),%ebx
- 396:	eb 0a                	jmp    3a2 <printint+0x32>
- 398:	90                   	nop
- 399:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  do{
-    buf[i++] = digits[x % base];
- 3a0:	89 fe                	mov    %edi,%esi
- 3a2:	31 d2                	xor    %edx,%edx
- 3a4:	8d 7e 01             	lea    0x1(%esi),%edi
- 3a7:	f7 f1                	div    %ecx
- 3a9:	0f b6 92 90 07 00 00 	movzbl 0x790(%edx),%edx
-  }while((x /= base) != 0);
- 3b0:	85 c0                	test   %eax,%eax
-    buf[i++] = digits[x % base];
- 3b2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
-  }while((x /= base) != 0);
- 3b5:	75 e9                	jne    3a0 <printint+0x30>
-  if(neg)
- 3b7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
- 3ba:	85 c0                	test   %eax,%eax
- 3bc:	74 08                	je     3c6 <printint+0x56>
-    buf[i++] = '-';
- 3be:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
- 3c3:	8d 7e 02             	lea    0x2(%esi),%edi
- 3c6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
- 3ca:	8b 7d c0             	mov    -0x40(%ebp),%edi
- 3cd:	8d 76 00             	lea    0x0(%esi),%esi
- 3d0:	0f b6 06             	movzbl (%esi),%eax
-  write(fd, &c, 1);
- 3d3:	83 ec 04             	sub    $0x4,%esp
- 3d6:	83 ee 01             	sub    $0x1,%esi
- 3d9:	6a 01                	push   $0x1
- 3db:	53                   	push   %ebx
- 3dc:	57                   	push   %edi
- 3dd:	88 45 d7             	mov    %al,-0x29(%ebp)
- 3e0:	e8 dd fe ff ff       	call   2c2 <write>
-
-  while(--i >= 0)
- 3e5:	83 c4 10             	add    $0x10,%esp
- 3e8:	39 de                	cmp    %ebx,%esi
- 3ea:	75 e4                	jne    3d0 <printint+0x60>
-    putc(fd, buf[i]);
-}
- 3ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 3ef:	5b                   	pop    %ebx
- 3f0:	5e                   	pop    %esi
- 3f1:	5f                   	pop    %edi
- 3f2:	5d                   	pop    %ebp
- 3f3:	c3                   	ret    
- 3f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  neg = 0;
- 3f8:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
- 3ff:	eb 90                	jmp    391 <printint+0x21>
- 401:	eb 0d                	jmp    410 <printf>
- 403:	90                   	nop
- 404:	90                   	nop
- 405:	90                   	nop
- 406:	90                   	nop
- 407:	90                   	nop
- 408:	90                   	nop
- 409:	90                   	nop
- 40a:	90                   	nop
- 40b:	90                   	nop
- 40c:	90                   	nop
- 40d:	90                   	nop
- 40e:	90                   	nop
- 40f:	90                   	nop
-
-00000410 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, const char *fmt, ...)
-{
- 410:	55                   	push   %ebp
- 411:	89 e5                	mov    %esp,%ebp
- 413:	57                   	push   %edi
- 414:	56                   	push   %esi
- 415:	53                   	push   %ebx
- 416:	83 ec 2c             	sub    $0x2c,%esp
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 419:	8b 75 0c             	mov    0xc(%ebp),%esi
- 41c:	0f b6 1e             	movzbl (%esi),%ebx
- 41f:	84 db                	test   %bl,%bl
- 421:	0f 84 b3 00 00 00    	je     4da <printf+0xca>
-  ap = (uint*)(void*)&fmt + 1;
- 427:	8d 45 10             	lea    0x10(%ebp),%eax
- 42a:	83 c6 01             	add    $0x1,%esi
-  state = 0;
- 42d:	31 ff                	xor    %edi,%edi
-  ap = (uint*)(void*)&fmt + 1;
- 42f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
- 432:	eb 2f                	jmp    463 <printf+0x53>
- 434:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
- 438:	83 f8 25             	cmp    $0x25,%eax
- 43b:	0f 84 a7 00 00 00    	je     4e8 <printf+0xd8>
-  write(fd, &c, 1);
- 441:	8d 45 e2             	lea    -0x1e(%ebp),%eax
- 444:	83 ec 04             	sub    $0x4,%esp
- 447:	88 5d e2             	mov    %bl,-0x1e(%ebp)
- 44a:	6a 01                	push   $0x1
- 44c:	50                   	push   %eax
- 44d:	ff 75 08             	pushl  0x8(%ebp)
- 450:	e8 6d fe ff ff       	call   2c2 <write>
- 455:	83 c4 10             	add    $0x10,%esp
- 458:	83 c6 01             	add    $0x1,%esi
-  for(i = 0; fmt[i]; i++){
- 45b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
- 45f:	84 db                	test   %bl,%bl
- 461:	74 77                	je     4da <printf+0xca>
-    if(state == 0){
- 463:	85 ff                	test   %edi,%edi
-    c = fmt[i] & 0xff;
- 465:	0f be cb             	movsbl %bl,%ecx
- 468:	0f b6 c3             	movzbl %bl,%eax
-    if(state == 0){
- 46b:	74 cb                	je     438 <printf+0x28>
-        state = '%';
-      } else {
-        putc(fd, c);
-      }
-    } else if(state == '%'){
- 46d:	83 ff 25             	cmp    $0x25,%edi
- 470:	75 e6                	jne    458 <printf+0x48>
-      if(c == 'd'){
- 472:	83 f8 64             	cmp    $0x64,%eax
- 475:	0f 84 05 01 00 00    	je     580 <printf+0x170>
-        printint(fd, *ap, 10, 1);
-        ap++;
-      } else if(c == 'x' || c == 'p'){
- 47b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 481:	83 f9 70             	cmp    $0x70,%ecx
- 484:	74 72                	je     4f8 <printf+0xe8>
-        printint(fd, *ap, 16, 0);
-        ap++;
-      } else if(c == 's'){
- 486:	83 f8 73             	cmp    $0x73,%eax
- 489:	0f 84 99 00 00 00    	je     528 <printf+0x118>
-          s = "(null)";
-        while(*s != 0){
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
- 48f:	83 f8 63             	cmp    $0x63,%eax
- 492:	0f 84 08 01 00 00    	je     5a0 <printf+0x190>
-        putc(fd, *ap);
-        ap++;
-      } else if(c == '%'){
- 498:	83 f8 25             	cmp    $0x25,%eax
- 49b:	0f 84 ef 00 00 00    	je     590 <printf+0x180>
-  write(fd, &c, 1);
- 4a1:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 4a4:	83 ec 04             	sub    $0x4,%esp
- 4a7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 4ab:	6a 01                	push   $0x1
- 4ad:	50                   	push   %eax
- 4ae:	ff 75 08             	pushl  0x8(%ebp)
- 4b1:	e8 0c fe ff ff       	call   2c2 <write>
- 4b6:	83 c4 0c             	add    $0xc,%esp
- 4b9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
- 4bc:	88 5d e6             	mov    %bl,-0x1a(%ebp)
- 4bf:	6a 01                	push   $0x1
- 4c1:	50                   	push   %eax
- 4c2:	ff 75 08             	pushl  0x8(%ebp)
- 4c5:	83 c6 01             	add    $0x1,%esi
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
-        putc(fd, c);
-      }
-      state = 0;
- 4c8:	31 ff                	xor    %edi,%edi
-  write(fd, &c, 1);
- 4ca:	e8 f3 fd ff ff       	call   2c2 <write>
-  for(i = 0; fmt[i]; i++){
- 4cf:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
-  write(fd, &c, 1);
- 4d3:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; fmt[i]; i++){
- 4d6:	84 db                	test   %bl,%bl
- 4d8:	75 89                	jne    463 <printf+0x53>
-    }
-  }
-}
- 4da:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4dd:	5b                   	pop    %ebx
- 4de:	5e                   	pop    %esi
- 4df:	5f                   	pop    %edi
- 4e0:	5d                   	pop    %ebp
- 4e1:	c3                   	ret    
- 4e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-        state = '%';
- 4e8:	bf 25 00 00 00       	mov    $0x25,%edi
- 4ed:	e9 66 ff ff ff       	jmp    458 <printf+0x48>
- 4f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-        printint(fd, *ap, 16, 0);
- 4f8:	83 ec 0c             	sub    $0xc,%esp
- 4fb:	b9 10 00 00 00       	mov    $0x10,%ecx
- 500:	6a 00                	push   $0x0
- 502:	8b 7d d4             	mov    -0x2c(%ebp),%edi
- 505:	8b 45 08             	mov    0x8(%ebp),%eax
- 508:	8b 17                	mov    (%edi),%edx
- 50a:	e8 61 fe ff ff       	call   370 <printint>
-        ap++;
- 50f:	89 f8                	mov    %edi,%eax
- 511:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 514:	31 ff                	xor    %edi,%edi
-        ap++;
- 516:	83 c0 04             	add    $0x4,%eax
- 519:	89 45 d4             	mov    %eax,-0x2c(%ebp)
- 51c:	e9 37 ff ff ff       	jmp    458 <printf+0x48>
- 521:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-        s = (char*)*ap;
- 528:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 52b:	8b 08                	mov    (%eax),%ecx
-        ap++;
- 52d:	83 c0 04             	add    $0x4,%eax
- 530:	89 45 d4             	mov    %eax,-0x2c(%ebp)
-        if(s == 0)
- 533:	85 c9                	test   %ecx,%ecx
- 535:	0f 84 8e 00 00 00    	je     5c9 <printf+0x1b9>
-        while(*s != 0){
- 53b:	0f b6 01             	movzbl (%ecx),%eax
-      state = 0;
- 53e:	31 ff                	xor    %edi,%edi
-        s = (char*)*ap;
- 540:	89 cb                	mov    %ecx,%ebx
-        while(*s != 0){
- 542:	84 c0                	test   %al,%al
- 544:	0f 84 0e ff ff ff    	je     458 <printf+0x48>
- 54a:	89 75 d0             	mov    %esi,-0x30(%ebp)
- 54d:	89 de                	mov    %ebx,%esi
- 54f:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 552:	8d 7d e3             	lea    -0x1d(%ebp),%edi
- 555:	8d 76 00             	lea    0x0(%esi),%esi
-  write(fd, &c, 1);
- 558:	83 ec 04             	sub    $0x4,%esp
-          s++;
- 55b:	83 c6 01             	add    $0x1,%esi
- 55e:	88 45 e3             	mov    %al,-0x1d(%ebp)
-  write(fd, &c, 1);
- 561:	6a 01                	push   $0x1
- 563:	57                   	push   %edi
- 564:	53                   	push   %ebx
- 565:	e8 58 fd ff ff       	call   2c2 <write>
-        while(*s != 0){
- 56a:	0f b6 06             	movzbl (%esi),%eax
- 56d:	83 c4 10             	add    $0x10,%esp
- 570:	84 c0                	test   %al,%al
- 572:	75 e4                	jne    558 <printf+0x148>
- 574:	8b 75 d0             	mov    -0x30(%ebp),%esi
-      state = 0;
- 577:	31 ff                	xor    %edi,%edi
- 579:	e9 da fe ff ff       	jmp    458 <printf+0x48>
- 57e:	66 90                	xchg   %ax,%ax
-        printint(fd, *ap, 10, 1);
- 580:	83 ec 0c             	sub    $0xc,%esp
- 583:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 588:	6a 01                	push   $0x1
- 58a:	e9 73 ff ff ff       	jmp    502 <printf+0xf2>
- 58f:	90                   	nop
-  write(fd, &c, 1);
- 590:	83 ec 04             	sub    $0x4,%esp
- 593:	88 5d e5             	mov    %bl,-0x1b(%ebp)
- 596:	8d 45 e5             	lea    -0x1b(%ebp),%eax
- 599:	6a 01                	push   $0x1
- 59b:	e9 21 ff ff ff       	jmp    4c1 <printf+0xb1>
-        putc(fd, *ap);
- 5a0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
-  write(fd, &c, 1);
- 5a3:	83 ec 04             	sub    $0x4,%esp
-        putc(fd, *ap);
- 5a6:	8b 07                	mov    (%edi),%eax
-  write(fd, &c, 1);
- 5a8:	6a 01                	push   $0x1
-        ap++;
- 5aa:	83 c7 04             	add    $0x4,%edi
-        putc(fd, *ap);
- 5ad:	88 45 e4             	mov    %al,-0x1c(%ebp)
-  write(fd, &c, 1);
- 5b0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
- 5b3:	50                   	push   %eax
- 5b4:	ff 75 08             	pushl  0x8(%ebp)
- 5b7:	e8 06 fd ff ff       	call   2c2 <write>
-        ap++;
- 5bc:	89 7d d4             	mov    %edi,-0x2c(%ebp)
- 5bf:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 5c2:	31 ff                	xor    %edi,%edi
- 5c4:	e9 8f fe ff ff       	jmp    458 <printf+0x48>
-          s = "(null)";
- 5c9:	bb 87 07 00 00       	mov    $0x787,%ebx
-        while(*s != 0){
- 5ce:	b8 28 00 00 00       	mov    $0x28,%eax
- 5d3:	e9 72 ff ff ff       	jmp    54a <printf+0x13a>
- 5d8:	66 90                	xchg   %ax,%ax
- 5da:	66 90                	xchg   %ax,%ax
- 5dc:	66 90                	xchg   %ax,%ax
- 5de:	66 90                	xchg   %ax,%ax
-
-000005e0 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 5e0:	55                   	push   %ebp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5e1:	a1 c8 1d 00 00       	mov    0x1dc8,%eax
-{
- 5e6:	89 e5                	mov    %esp,%ebp
- 5e8:	57                   	push   %edi
- 5e9:	56                   	push   %esi
- 5ea:	53                   	push   %ebx
- 5eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  bp = (Header*)ap - 1;
- 5ee:	8d 4b f8             	lea    -0x8(%ebx),%ecx
- 5f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5f8:	39 c8                	cmp    %ecx,%eax
- 5fa:	8b 10                	mov    (%eax),%edx
- 5fc:	73 32                	jae    630 <free+0x50>
- 5fe:	39 d1                	cmp    %edx,%ecx
- 600:	72 04                	jb     606 <free+0x26>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 602:	39 d0                	cmp    %edx,%eax
- 604:	72 32                	jb     638 <free+0x58>
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 606:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 609:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 60c:	39 fa                	cmp    %edi,%edx
- 60e:	74 30                	je     640 <free+0x60>
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
-  } else
-    bp->s.ptr = p->s.ptr;
- 610:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 613:	8b 50 04             	mov    0x4(%eax),%edx
- 616:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 619:	39 f1                	cmp    %esi,%ecx
- 61b:	74 3a                	je     657 <free+0x77>
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
-  } else
-    p->s.ptr = bp;
- 61d:	89 08                	mov    %ecx,(%eax)
-  freep = p;
- 61f:	a3 c8 1d 00 00       	mov    %eax,0x1dc8
-}
- 624:	5b                   	pop    %ebx
- 625:	5e                   	pop    %esi
- 626:	5f                   	pop    %edi
- 627:	5d                   	pop    %ebp
- 628:	c3                   	ret    
- 629:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 630:	39 d0                	cmp    %edx,%eax
- 632:	72 04                	jb     638 <free+0x58>
- 634:	39 d1                	cmp    %edx,%ecx
- 636:	72 ce                	jb     606 <free+0x26>
-{
- 638:	89 d0                	mov    %edx,%eax
- 63a:	eb bc                	jmp    5f8 <free+0x18>
- 63c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    bp->s.size += p->s.ptr->s.size;
- 640:	03 72 04             	add    0x4(%edx),%esi
- 643:	89 73 fc             	mov    %esi,-0x4(%ebx)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 646:	8b 10                	mov    (%eax),%edx
- 648:	8b 12                	mov    (%edx),%edx
- 64a:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 64d:	8b 50 04             	mov    0x4(%eax),%edx
- 650:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 653:	39 f1                	cmp    %esi,%ecx
- 655:	75 c6                	jne    61d <free+0x3d>
-    p->s.size += bp->s.size;
- 657:	03 53 fc             	add    -0x4(%ebx),%edx
-  freep = p;
- 65a:	a3 c8 1d 00 00       	mov    %eax,0x1dc8
-    p->s.size += bp->s.size;
- 65f:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 662:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 665:	89 10                	mov    %edx,(%eax)
-}
- 667:	5b                   	pop    %ebx
- 668:	5e                   	pop    %esi
- 669:	5f                   	pop    %edi
- 66a:	5d                   	pop    %ebp
- 66b:	c3                   	ret    
- 66c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000670 <malloc>:
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
- 670:	55                   	push   %ebp
- 671:	89 e5                	mov    %esp,%ebp
- 673:	57                   	push   %edi
- 674:	56                   	push   %esi
- 675:	53                   	push   %ebx
- 676:	83 ec 0c             	sub    $0xc,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 679:	8b 45 08             	mov    0x8(%ebp),%eax
-  if((prevp = freep) == 0){
- 67c:	8b 15 c8 1d 00 00    	mov    0x1dc8,%edx
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 682:	8d 78 07             	lea    0x7(%eax),%edi
- 685:	c1 ef 03             	shr    $0x3,%edi
- 688:	83 c7 01             	add    $0x1,%edi
-  if((prevp = freep) == 0){
- 68b:	85 d2                	test   %edx,%edx
- 68d:	0f 84 9d 00 00 00    	je     730 <malloc+0xc0>
- 693:	8b 02                	mov    (%edx),%eax
- 695:	8b 48 04             	mov    0x4(%eax),%ecx
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    if(p->s.size >= nunits){
- 698:	39 cf                	cmp    %ecx,%edi
- 69a:	76 6c                	jbe    708 <malloc+0x98>
- 69c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
- 6a2:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 6a7:	0f 43 df             	cmovae %edi,%ebx
-  p = sbrk(nu * sizeof(Header));
- 6aa:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
- 6b1:	eb 0e                	jmp    6c1 <malloc+0x51>
- 6b3:	90                   	nop
- 6b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6b8:	8b 02                	mov    (%edx),%eax
-    if(p->s.size >= nunits){
- 6ba:	8b 48 04             	mov    0x4(%eax),%ecx
- 6bd:	39 f9                	cmp    %edi,%ecx
- 6bf:	73 47                	jae    708 <malloc+0x98>
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
- 6c1:	39 05 c8 1d 00 00    	cmp    %eax,0x1dc8
- 6c7:	89 c2                	mov    %eax,%edx
- 6c9:	75 ed                	jne    6b8 <malloc+0x48>
-  p = sbrk(nu * sizeof(Header));
- 6cb:	83 ec 0c             	sub    $0xc,%esp
- 6ce:	56                   	push   %esi
- 6cf:	e8 56 fc ff ff       	call   32a <sbrk>
-  if(p == (char*)-1)
- 6d4:	83 c4 10             	add    $0x10,%esp
- 6d7:	83 f8 ff             	cmp    $0xffffffff,%eax
- 6da:	74 1c                	je     6f8 <malloc+0x88>
-  hp->s.size = nu;
- 6dc:	89 58 04             	mov    %ebx,0x4(%eax)
-  free((void*)(hp + 1));
- 6df:	83 ec 0c             	sub    $0xc,%esp
- 6e2:	83 c0 08             	add    $0x8,%eax
- 6e5:	50                   	push   %eax
- 6e6:	e8 f5 fe ff ff       	call   5e0 <free>
-  return freep;
- 6eb:	8b 15 c8 1d 00 00    	mov    0x1dc8,%edx
-      if((p = morecore(nunits)) == 0)
- 6f1:	83 c4 10             	add    $0x10,%esp
- 6f4:	85 d2                	test   %edx,%edx
- 6f6:	75 c0                	jne    6b8 <malloc+0x48>
-        return 0;
-  }
-}
- 6f8:	8d 65 f4             	lea    -0xc(%ebp),%esp
-        return 0;
- 6fb:	31 c0                	xor    %eax,%eax
-}
- 6fd:	5b                   	pop    %ebx
- 6fe:	5e                   	pop    %esi
- 6ff:	5f                   	pop    %edi
- 700:	5d                   	pop    %ebp
- 701:	c3                   	ret    
- 702:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-      if(p->s.size == nunits)
- 708:	39 cf                	cmp    %ecx,%edi
- 70a:	74 54                	je     760 <malloc+0xf0>
-        p->s.size -= nunits;
- 70c:	29 f9                	sub    %edi,%ecx
- 70e:	89 48 04             	mov    %ecx,0x4(%eax)
-        p += p->s.size;
- 711:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
-        p->s.size = nunits;
- 714:	89 78 04             	mov    %edi,0x4(%eax)
-      freep = prevp;
- 717:	89 15 c8 1d 00 00    	mov    %edx,0x1dc8
-}
- 71d:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return (void*)(p + 1);
- 720:	83 c0 08             	add    $0x8,%eax
-}
- 723:	5b                   	pop    %ebx
- 724:	5e                   	pop    %esi
- 725:	5f                   	pop    %edi
- 726:	5d                   	pop    %ebp
- 727:	c3                   	ret    
- 728:	90                   	nop
- 729:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    base.s.ptr = freep = prevp = &base;
- 730:	c7 05 c8 1d 00 00 cc 	movl   $0x1dcc,0x1dc8
- 737:	1d 00 00 
- 73a:	c7 05 cc 1d 00 00 cc 	movl   $0x1dcc,0x1dcc
- 741:	1d 00 00 
-    base.s.size = 0;
- 744:	b8 cc 1d 00 00       	mov    $0x1dcc,%eax
- 749:	c7 05 d0 1d 00 00 00 	movl   $0x0,0x1dd0
- 750:	00 00 00 
- 753:	e9 44 ff ff ff       	jmp    69c <malloc+0x2c>
- 758:	90                   	nop
- 759:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-        prevp->s.ptr = p->s.ptr;
- 760:	8b 08                	mov    (%eax),%ecx
- 762:	89 0a                	mov    %ecx,(%edx)
- 764:	eb b1                	jmp    717 <malloc+0xa7>
diff -urN main/drawtest.c xv6-public/drawtest.c
--- main/drawtest.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/drawtest.c	2022-08-12 06:12:58.000000000 +0530
@@ -0,0 +1,13 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int
+main(void)
+{
+	static char buf[2000];
+	printf(1,"Drawtest says call returns %d\n",draw((void*) buf,2000));
+
+	printf(1,"%s",buf);
+	exit();
+}
diff -urN main/Drawtest.c xv6-public/Drawtest.c
--- main/Drawtest.c	2022-08-11 23:07:41.000000000 +0530
+++ xv6-public/Drawtest.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,9 +0,0 @@
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-int main(void){
-    static char buf[5000];
-    printf(1,"The system call returns %d\n",draw((void*) buf,5000));
-    printf(1,"%s",buf);
-    exit();
-}
\ No newline at end of file
diff -urN main/drawtest.d xv6-public/drawtest.d
--- main/drawtest.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/drawtest.d	2022-10-31 22:34:18.230502951 +0530
@@ -0,0 +1 @@
+drawtest.o: drawtest.c /usr/include/stdc-predef.h types.h stat.h user.h
diff -urN main/Drawtest.d xv6-public/Drawtest.d
--- main/Drawtest.d	2022-09-26 21:21:17.641098000 +0530
+++ xv6-public/Drawtest.d	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-Drawtest.o: Drawtest.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files main/drawtest.o and xv6-public/drawtest.o differ
Binary files main/Drawtest.o and xv6-public/Drawtest.o differ
diff -urN main/drawtest.sym xv6-public/drawtest.sym
--- main/drawtest.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/drawtest.sym	2022-10-31 22:34:18.270522953 +0530
@@ -0,0 +1,59 @@
+00000000 .text
+00000748 .rodata
+00000788 .eh_frame
+00000a20 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 drawtest.c
+00000a20 buf.1037
+00000000 ulib.c
+00000000 printf.c
+00000350 printint
+00000774 digits.1044
+00000000 umalloc.c
+000011f0 freep
+000011f4 base
+00000050 strcpy
+000003f0 printf
+00000270 memmove
+000002ea mknod
+00000160 gets
+00000322 getpid
+00000650 malloc
+00000332 sleep
+000002b2 pipe
+000002c2 write
+000002fa fstat
+000002d2 kill
+00000312 chdir
+000002da exec
+000002aa wait
+000002ba read
+000002f2 unlink
+0000029a fork
+0000032a sbrk
+0000033a uptime
+00000a18 __bss_start
+00000100 memset
+00000000 main
+00000080 strcmp
+0000031a dup
+000001e0 stat
+00000a18 _edata
+000011fc _end
+00000302 link
+000002a2 exit
+00000230 atoi
+00000342 draw
+000000d0 strlen
+000002e2 open
+00000120 strchr
+0000030a mkdir
+000002ca close
+000005c0 free
diff -urN main/Drawtest.sym xv6-public/Drawtest.sym
--- main/Drawtest.sym	2022-09-26 21:21:17.705130000 +0530
+++ xv6-public/Drawtest.sym	1970-01-01 05:30:00.000000000 +0530
@@ -1,62 +0,0 @@
-00000000 .text
-00000768 .rodata
-000007a4 .eh_frame
-00000a40 .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 .debug_ranges
-00000000 Drawtest.c
-00000a40 buf.1043
-00000000 ulib.c
-00000000 printf.c
-00000370 printint
-00000790 digits.1050
-00000000 umalloc.c
-00001dc8 freep
-00001dcc base
-00000050 strcpy
-00000410 printf
-00000352 thread_exit
-00000270 memmove
-000002ea mknod
-00000160 gets
-00000322 getpid
-00000670 malloc
-00000332 sleep
-000002b2 pipe
-000002c2 write
-000002fa fstat
-000002d2 kill
-00000312 chdir
-000002da exec
-000002aa wait
-000002ba read
-000002f2 unlink
-0000029a fork
-0000032a sbrk
-0000033a uptime
-00000a34 __bss_start
-00000100 memset
-00000000 main
-00000080 strcmp
-0000031a dup
-000001e0 stat
-00000a34 _edata
-00001dd4 _end
-00000302 link
-000002a2 exit
-00000230 atoi
-0000035a draw
-000000d0 strlen
-000002e2 open
-00000120 strchr
-00000342 thread_create
-0000030a mkdir
-000002ca close
-0000034a thread_join
-000005e0 free
Binary files main/_echo and xv6-public/_echo differ
diff -urN main/echo.asm xv6-public/echo.asm
--- main/echo.asm	2022-09-26 21:21:15.520038000 +0530
+++ xv6-public/echo.asm	2022-10-31 22:34:16.389582853 +0530
@@ -32,21 +32,21 @@
   23:	eb 18                	jmp    3d <main+0x3d>
   25:	8d 76 00             	lea    0x0(%esi),%esi
     printf(1, "%s%s", argv[i], i+1 < argc ? " " : "\n");
-  28:	68 88 07 00 00       	push   $0x788
+  28:	68 68 07 00 00       	push   $0x768
   2d:	50                   	push   %eax
-  2e:	68 8a 07 00 00       	push   $0x78a
+  2e:	68 6a 07 00 00       	push   $0x76a
   33:	6a 01                	push   $0x1
-  35:	e8 f6 03 00 00       	call   430 <printf>
+  35:	e8 d6 03 00 00       	call   410 <printf>
   3a:	83 c4 10             	add    $0x10,%esp
   3d:	83 c3 04             	add    $0x4,%ebx
   40:	8b 43 fc             	mov    -0x4(%ebx),%eax
   43:	39 f3                	cmp    %esi,%ebx
   45:	75 e1                	jne    28 <main+0x28>
-  47:	68 8f 07 00 00       	push   $0x78f
+  47:	68 6f 07 00 00       	push   $0x76f
   4c:	50                   	push   %eax
-  4d:	68 8a 07 00 00       	push   $0x78a
+  4d:	68 6a 07 00 00       	push   $0x76a
   52:	6a 01                	push   $0x1
-  54:	e8 d7 03 00 00       	call   430 <printf>
+  54:	e8 b7 03 00 00       	call   410 <printf>
   59:	83 c4 10             	add    $0x10,%esp
   exit();
   5c:	e8 61 02 00 00       	call   2c2 <exit>
@@ -577,614 +577,593 @@
  35f:	cd 40                	int    $0x40
  361:	c3                   	ret    
 
-00000362 <thread_create>:
-SYSCALL(thread_create)
+00000362 <draw>:
+SYSCALL(draw)
  362:	b8 16 00 00 00       	mov    $0x16,%eax
  367:	cd 40                	int    $0x40
  369:	c3                   	ret    
+ 36a:	66 90                	xchg   %ax,%ax
+ 36c:	66 90                	xchg   %ax,%ax
+ 36e:	66 90                	xchg   %ax,%ax
 
-0000036a <thread_join>:
-SYSCALL(thread_join)
- 36a:	b8 18 00 00 00       	mov    $0x18,%eax
- 36f:	cd 40                	int    $0x40
- 371:	c3                   	ret    
-
-00000372 <thread_exit>:
-SYSCALL(thread_exit)
- 372:	b8 17 00 00 00       	mov    $0x17,%eax
- 377:	cd 40                	int    $0x40
- 379:	c3                   	ret    
-
-0000037a <draw>:
- 37a:	b8 19 00 00 00       	mov    $0x19,%eax
- 37f:	cd 40                	int    $0x40
- 381:	c3                   	ret    
- 382:	66 90                	xchg   %ax,%ax
- 384:	66 90                	xchg   %ax,%ax
- 386:	66 90                	xchg   %ax,%ax
- 388:	66 90                	xchg   %ax,%ax
- 38a:	66 90                	xchg   %ax,%ax
- 38c:	66 90                	xchg   %ax,%ax
- 38e:	66 90                	xchg   %ax,%ax
-
-00000390 <printint>:
+00000370 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 390:	55                   	push   %ebp
- 391:	89 e5                	mov    %esp,%ebp
- 393:	57                   	push   %edi
- 394:	56                   	push   %esi
- 395:	53                   	push   %ebx
- 396:	83 ec 3c             	sub    $0x3c,%esp
+ 370:	55                   	push   %ebp
+ 371:	89 e5                	mov    %esp,%ebp
+ 373:	57                   	push   %edi
+ 374:	56                   	push   %esi
+ 375:	53                   	push   %ebx
+ 376:	83 ec 3c             	sub    $0x3c,%esp
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 399:	85 d2                	test   %edx,%edx
+ 379:	85 d2                	test   %edx,%edx
 {
- 39b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 37b:	89 45 c0             	mov    %eax,-0x40(%ebp)
     neg = 1;
     x = -xx;
- 39e:	89 d0                	mov    %edx,%eax
+ 37e:	89 d0                	mov    %edx,%eax
   if(sgn && xx < 0){
- 3a0:	79 76                	jns    418 <printint+0x88>
- 3a2:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 3a6:	74 70                	je     418 <printint+0x88>
+ 380:	79 76                	jns    3f8 <printint+0x88>
+ 382:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 386:	74 70                	je     3f8 <printint+0x88>
     x = -xx;
- 3a8:	f7 d8                	neg    %eax
+ 388:	f7 d8                	neg    %eax
     neg = 1;
- 3aa:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+ 38a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
   } else {
     x = xx;
   }
 
   i = 0;
- 3b1:	31 f6                	xor    %esi,%esi
- 3b3:	8d 5d d7             	lea    -0x29(%ebp),%ebx
- 3b6:	eb 0a                	jmp    3c2 <printint+0x32>
- 3b8:	90                   	nop
- 3b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 391:	31 f6                	xor    %esi,%esi
+ 393:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 396:	eb 0a                	jmp    3a2 <printint+0x32>
+ 398:	90                   	nop
+ 399:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   do{
     buf[i++] = digits[x % base];
- 3c0:	89 fe                	mov    %edi,%esi
- 3c2:	31 d2                	xor    %edx,%edx
- 3c4:	8d 7e 01             	lea    0x1(%esi),%edi
- 3c7:	f7 f1                	div    %ecx
- 3c9:	0f b6 92 98 07 00 00 	movzbl 0x798(%edx),%edx
+ 3a0:	89 fe                	mov    %edi,%esi
+ 3a2:	31 d2                	xor    %edx,%edx
+ 3a4:	8d 7e 01             	lea    0x1(%esi),%edi
+ 3a7:	f7 f1                	div    %ecx
+ 3a9:	0f b6 92 78 07 00 00 	movzbl 0x778(%edx),%edx
   }while((x /= base) != 0);
- 3d0:	85 c0                	test   %eax,%eax
+ 3b0:	85 c0                	test   %eax,%eax
     buf[i++] = digits[x % base];
- 3d2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+ 3b2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
   }while((x /= base) != 0);
- 3d5:	75 e9                	jne    3c0 <printint+0x30>
+ 3b5:	75 e9                	jne    3a0 <printint+0x30>
   if(neg)
- 3d7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
- 3da:	85 c0                	test   %eax,%eax
- 3dc:	74 08                	je     3e6 <printint+0x56>
+ 3b7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 3ba:	85 c0                	test   %eax,%eax
+ 3bc:	74 08                	je     3c6 <printint+0x56>
     buf[i++] = '-';
- 3de:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
- 3e3:	8d 7e 02             	lea    0x2(%esi),%edi
- 3e6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
- 3ea:	8b 7d c0             	mov    -0x40(%ebp),%edi
- 3ed:	8d 76 00             	lea    0x0(%esi),%esi
- 3f0:	0f b6 06             	movzbl (%esi),%eax
+ 3be:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 3c3:	8d 7e 02             	lea    0x2(%esi),%edi
+ 3c6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 3ca:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 3cd:	8d 76 00             	lea    0x0(%esi),%esi
+ 3d0:	0f b6 06             	movzbl (%esi),%eax
   write(fd, &c, 1);
- 3f3:	83 ec 04             	sub    $0x4,%esp
- 3f6:	83 ee 01             	sub    $0x1,%esi
- 3f9:	6a 01                	push   $0x1
- 3fb:	53                   	push   %ebx
- 3fc:	57                   	push   %edi
- 3fd:	88 45 d7             	mov    %al,-0x29(%ebp)
- 400:	e8 dd fe ff ff       	call   2e2 <write>
+ 3d3:	83 ec 04             	sub    $0x4,%esp
+ 3d6:	83 ee 01             	sub    $0x1,%esi
+ 3d9:	6a 01                	push   $0x1
+ 3db:	53                   	push   %ebx
+ 3dc:	57                   	push   %edi
+ 3dd:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 3e0:	e8 fd fe ff ff       	call   2e2 <write>
 
   while(--i >= 0)
- 405:	83 c4 10             	add    $0x10,%esp
- 408:	39 de                	cmp    %ebx,%esi
- 40a:	75 e4                	jne    3f0 <printint+0x60>
+ 3e5:	83 c4 10             	add    $0x10,%esp
+ 3e8:	39 de                	cmp    %ebx,%esi
+ 3ea:	75 e4                	jne    3d0 <printint+0x60>
     putc(fd, buf[i]);
 }
- 40c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 40f:	5b                   	pop    %ebx
- 410:	5e                   	pop    %esi
- 411:	5f                   	pop    %edi
- 412:	5d                   	pop    %ebp
- 413:	c3                   	ret    
- 414:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 3ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3ef:	5b                   	pop    %ebx
+ 3f0:	5e                   	pop    %esi
+ 3f1:	5f                   	pop    %edi
+ 3f2:	5d                   	pop    %ebp
+ 3f3:	c3                   	ret    
+ 3f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 418:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
- 41f:	eb 90                	jmp    3b1 <printint+0x21>
- 421:	eb 0d                	jmp    430 <printf>
- 423:	90                   	nop
- 424:	90                   	nop
- 425:	90                   	nop
- 426:	90                   	nop
- 427:	90                   	nop
- 428:	90                   	nop
- 429:	90                   	nop
- 42a:	90                   	nop
- 42b:	90                   	nop
- 42c:	90                   	nop
- 42d:	90                   	nop
- 42e:	90                   	nop
- 42f:	90                   	nop
+ 3f8:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 3ff:	eb 90                	jmp    391 <printint+0x21>
+ 401:	eb 0d                	jmp    410 <printf>
+ 403:	90                   	nop
+ 404:	90                   	nop
+ 405:	90                   	nop
+ 406:	90                   	nop
+ 407:	90                   	nop
+ 408:	90                   	nop
+ 409:	90                   	nop
+ 40a:	90                   	nop
+ 40b:	90                   	nop
+ 40c:	90                   	nop
+ 40d:	90                   	nop
+ 40e:	90                   	nop
+ 40f:	90                   	nop
 
-00000430 <printf>:
+00000410 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 430:	55                   	push   %ebp
- 431:	89 e5                	mov    %esp,%ebp
- 433:	57                   	push   %edi
- 434:	56                   	push   %esi
- 435:	53                   	push   %ebx
- 436:	83 ec 2c             	sub    $0x2c,%esp
+ 410:	55                   	push   %ebp
+ 411:	89 e5                	mov    %esp,%ebp
+ 413:	57                   	push   %edi
+ 414:	56                   	push   %esi
+ 415:	53                   	push   %ebx
+ 416:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 439:	8b 75 0c             	mov    0xc(%ebp),%esi
- 43c:	0f b6 1e             	movzbl (%esi),%ebx
- 43f:	84 db                	test   %bl,%bl
- 441:	0f 84 b3 00 00 00    	je     4fa <printf+0xca>
+ 419:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 41c:	0f b6 1e             	movzbl (%esi),%ebx
+ 41f:	84 db                	test   %bl,%bl
+ 421:	0f 84 b3 00 00 00    	je     4da <printf+0xca>
   ap = (uint*)(void*)&fmt + 1;
- 447:	8d 45 10             	lea    0x10(%ebp),%eax
- 44a:	83 c6 01             	add    $0x1,%esi
+ 427:	8d 45 10             	lea    0x10(%ebp),%eax
+ 42a:	83 c6 01             	add    $0x1,%esi
   state = 0;
- 44d:	31 ff                	xor    %edi,%edi
+ 42d:	31 ff                	xor    %edi,%edi
   ap = (uint*)(void*)&fmt + 1;
- 44f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
- 452:	eb 2f                	jmp    483 <printf+0x53>
- 454:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 42f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 432:	eb 2f                	jmp    463 <printf+0x53>
+ 434:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
- 458:	83 f8 25             	cmp    $0x25,%eax
- 45b:	0f 84 a7 00 00 00    	je     508 <printf+0xd8>
+ 438:	83 f8 25             	cmp    $0x25,%eax
+ 43b:	0f 84 a7 00 00 00    	je     4e8 <printf+0xd8>
   write(fd, &c, 1);
- 461:	8d 45 e2             	lea    -0x1e(%ebp),%eax
- 464:	83 ec 04             	sub    $0x4,%esp
- 467:	88 5d e2             	mov    %bl,-0x1e(%ebp)
- 46a:	6a 01                	push   $0x1
- 46c:	50                   	push   %eax
- 46d:	ff 75 08             	pushl  0x8(%ebp)
- 470:	e8 6d fe ff ff       	call   2e2 <write>
- 475:	83 c4 10             	add    $0x10,%esp
- 478:	83 c6 01             	add    $0x1,%esi
+ 441:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 444:	83 ec 04             	sub    $0x4,%esp
+ 447:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 44a:	6a 01                	push   $0x1
+ 44c:	50                   	push   %eax
+ 44d:	ff 75 08             	pushl  0x8(%ebp)
+ 450:	e8 8d fe ff ff       	call   2e2 <write>
+ 455:	83 c4 10             	add    $0x10,%esp
+ 458:	83 c6 01             	add    $0x1,%esi
   for(i = 0; fmt[i]; i++){
- 47b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
- 47f:	84 db                	test   %bl,%bl
- 481:	74 77                	je     4fa <printf+0xca>
+ 45b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 45f:	84 db                	test   %bl,%bl
+ 461:	74 77                	je     4da <printf+0xca>
     if(state == 0){
- 483:	85 ff                	test   %edi,%edi
+ 463:	85 ff                	test   %edi,%edi
     c = fmt[i] & 0xff;
- 485:	0f be cb             	movsbl %bl,%ecx
- 488:	0f b6 c3             	movzbl %bl,%eax
+ 465:	0f be cb             	movsbl %bl,%ecx
+ 468:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
- 48b:	74 cb                	je     458 <printf+0x28>
+ 46b:	74 cb                	je     438 <printf+0x28>
         state = '%';
       } else {
         putc(fd, c);
       }
     } else if(state == '%'){
- 48d:	83 ff 25             	cmp    $0x25,%edi
- 490:	75 e6                	jne    478 <printf+0x48>
+ 46d:	83 ff 25             	cmp    $0x25,%edi
+ 470:	75 e6                	jne    458 <printf+0x48>
       if(c == 'd'){
- 492:	83 f8 64             	cmp    $0x64,%eax
- 495:	0f 84 05 01 00 00    	je     5a0 <printf+0x170>
+ 472:	83 f8 64             	cmp    $0x64,%eax
+ 475:	0f 84 05 01 00 00    	je     580 <printf+0x170>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 49b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 4a1:	83 f9 70             	cmp    $0x70,%ecx
- 4a4:	74 72                	je     518 <printf+0xe8>
+ 47b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 481:	83 f9 70             	cmp    $0x70,%ecx
+ 484:	74 72                	je     4f8 <printf+0xe8>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 4a6:	83 f8 73             	cmp    $0x73,%eax
- 4a9:	0f 84 99 00 00 00    	je     548 <printf+0x118>
+ 486:	83 f8 73             	cmp    $0x73,%eax
+ 489:	0f 84 99 00 00 00    	je     528 <printf+0x118>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 4af:	83 f8 63             	cmp    $0x63,%eax
- 4b2:	0f 84 08 01 00 00    	je     5c0 <printf+0x190>
+ 48f:	83 f8 63             	cmp    $0x63,%eax
+ 492:	0f 84 08 01 00 00    	je     5a0 <printf+0x190>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 4b8:	83 f8 25             	cmp    $0x25,%eax
- 4bb:	0f 84 ef 00 00 00    	je     5b0 <printf+0x180>
+ 498:	83 f8 25             	cmp    $0x25,%eax
+ 49b:	0f 84 ef 00 00 00    	je     590 <printf+0x180>
   write(fd, &c, 1);
- 4c1:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 4c4:	83 ec 04             	sub    $0x4,%esp
- 4c7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 4cb:	6a 01                	push   $0x1
- 4cd:	50                   	push   %eax
- 4ce:	ff 75 08             	pushl  0x8(%ebp)
- 4d1:	e8 0c fe ff ff       	call   2e2 <write>
- 4d6:	83 c4 0c             	add    $0xc,%esp
- 4d9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
- 4dc:	88 5d e6             	mov    %bl,-0x1a(%ebp)
- 4df:	6a 01                	push   $0x1
- 4e1:	50                   	push   %eax
- 4e2:	ff 75 08             	pushl  0x8(%ebp)
- 4e5:	83 c6 01             	add    $0x1,%esi
+ 4a1:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 4a4:	83 ec 04             	sub    $0x4,%esp
+ 4a7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4ab:	6a 01                	push   $0x1
+ 4ad:	50                   	push   %eax
+ 4ae:	ff 75 08             	pushl  0x8(%ebp)
+ 4b1:	e8 2c fe ff ff       	call   2e2 <write>
+ 4b6:	83 c4 0c             	add    $0xc,%esp
+ 4b9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 4bc:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 4bf:	6a 01                	push   $0x1
+ 4c1:	50                   	push   %eax
+ 4c2:	ff 75 08             	pushl  0x8(%ebp)
+ 4c5:	83 c6 01             	add    $0x1,%esi
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
       }
       state = 0;
- 4e8:	31 ff                	xor    %edi,%edi
+ 4c8:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 4ea:	e8 f3 fd ff ff       	call   2e2 <write>
+ 4ca:	e8 13 fe ff ff       	call   2e2 <write>
   for(i = 0; fmt[i]; i++){
- 4ef:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 4cf:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
   write(fd, &c, 1);
- 4f3:	83 c4 10             	add    $0x10,%esp
+ 4d3:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 4f6:	84 db                	test   %bl,%bl
- 4f8:	75 89                	jne    483 <printf+0x53>
+ 4d6:	84 db                	test   %bl,%bl
+ 4d8:	75 89                	jne    463 <printf+0x53>
     }
   }
 }
- 4fa:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4fd:	5b                   	pop    %ebx
- 4fe:	5e                   	pop    %esi
- 4ff:	5f                   	pop    %edi
- 500:	5d                   	pop    %ebp
- 501:	c3                   	ret    
- 502:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 4da:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4dd:	5b                   	pop    %ebx
+ 4de:	5e                   	pop    %esi
+ 4df:	5f                   	pop    %edi
+ 4e0:	5d                   	pop    %ebp
+ 4e1:	c3                   	ret    
+ 4e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         state = '%';
- 508:	bf 25 00 00 00       	mov    $0x25,%edi
- 50d:	e9 66 ff ff ff       	jmp    478 <printf+0x48>
- 512:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 4e8:	bf 25 00 00 00       	mov    $0x25,%edi
+ 4ed:	e9 66 ff ff ff       	jmp    458 <printf+0x48>
+ 4f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 518:	83 ec 0c             	sub    $0xc,%esp
- 51b:	b9 10 00 00 00       	mov    $0x10,%ecx
- 520:	6a 00                	push   $0x0
- 522:	8b 7d d4             	mov    -0x2c(%ebp),%edi
- 525:	8b 45 08             	mov    0x8(%ebp),%eax
- 528:	8b 17                	mov    (%edi),%edx
- 52a:	e8 61 fe ff ff       	call   390 <printint>
+ 4f8:	83 ec 0c             	sub    $0xc,%esp
+ 4fb:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 500:	6a 00                	push   $0x0
+ 502:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 505:	8b 45 08             	mov    0x8(%ebp),%eax
+ 508:	8b 17                	mov    (%edi),%edx
+ 50a:	e8 61 fe ff ff       	call   370 <printint>
         ap++;
- 52f:	89 f8                	mov    %edi,%eax
- 531:	83 c4 10             	add    $0x10,%esp
+ 50f:	89 f8                	mov    %edi,%eax
+ 511:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 534:	31 ff                	xor    %edi,%edi
+ 514:	31 ff                	xor    %edi,%edi
         ap++;
- 536:	83 c0 04             	add    $0x4,%eax
- 539:	89 45 d4             	mov    %eax,-0x2c(%ebp)
- 53c:	e9 37 ff ff ff       	jmp    478 <printf+0x48>
- 541:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 516:	83 c0 04             	add    $0x4,%eax
+ 519:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 51c:	e9 37 ff ff ff       	jmp    458 <printf+0x48>
+ 521:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 548:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 54b:	8b 08                	mov    (%eax),%ecx
+ 528:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 52b:	8b 08                	mov    (%eax),%ecx
         ap++;
- 54d:	83 c0 04             	add    $0x4,%eax
- 550:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 52d:	83 c0 04             	add    $0x4,%eax
+ 530:	89 45 d4             	mov    %eax,-0x2c(%ebp)
         if(s == 0)
- 553:	85 c9                	test   %ecx,%ecx
- 555:	0f 84 8e 00 00 00    	je     5e9 <printf+0x1b9>
+ 533:	85 c9                	test   %ecx,%ecx
+ 535:	0f 84 8e 00 00 00    	je     5c9 <printf+0x1b9>
         while(*s != 0){
- 55b:	0f b6 01             	movzbl (%ecx),%eax
+ 53b:	0f b6 01             	movzbl (%ecx),%eax
       state = 0;
- 55e:	31 ff                	xor    %edi,%edi
+ 53e:	31 ff                	xor    %edi,%edi
         s = (char*)*ap;
- 560:	89 cb                	mov    %ecx,%ebx
+ 540:	89 cb                	mov    %ecx,%ebx
         while(*s != 0){
- 562:	84 c0                	test   %al,%al
- 564:	0f 84 0e ff ff ff    	je     478 <printf+0x48>
- 56a:	89 75 d0             	mov    %esi,-0x30(%ebp)
- 56d:	89 de                	mov    %ebx,%esi
- 56f:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 572:	8d 7d e3             	lea    -0x1d(%ebp),%edi
- 575:	8d 76 00             	lea    0x0(%esi),%esi
+ 542:	84 c0                	test   %al,%al
+ 544:	0f 84 0e ff ff ff    	je     458 <printf+0x48>
+ 54a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 54d:	89 de                	mov    %ebx,%esi
+ 54f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 552:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 555:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 578:	83 ec 04             	sub    $0x4,%esp
+ 558:	83 ec 04             	sub    $0x4,%esp
           s++;
- 57b:	83 c6 01             	add    $0x1,%esi
- 57e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+ 55b:	83 c6 01             	add    $0x1,%esi
+ 55e:	88 45 e3             	mov    %al,-0x1d(%ebp)
   write(fd, &c, 1);
- 581:	6a 01                	push   $0x1
- 583:	57                   	push   %edi
- 584:	53                   	push   %ebx
- 585:	e8 58 fd ff ff       	call   2e2 <write>
+ 561:	6a 01                	push   $0x1
+ 563:	57                   	push   %edi
+ 564:	53                   	push   %ebx
+ 565:	e8 78 fd ff ff       	call   2e2 <write>
         while(*s != 0){
- 58a:	0f b6 06             	movzbl (%esi),%eax
- 58d:	83 c4 10             	add    $0x10,%esp
- 590:	84 c0                	test   %al,%al
- 592:	75 e4                	jne    578 <printf+0x148>
- 594:	8b 75 d0             	mov    -0x30(%ebp),%esi
+ 56a:	0f b6 06             	movzbl (%esi),%eax
+ 56d:	83 c4 10             	add    $0x10,%esp
+ 570:	84 c0                	test   %al,%al
+ 572:	75 e4                	jne    558 <printf+0x148>
+ 574:	8b 75 d0             	mov    -0x30(%ebp),%esi
       state = 0;
- 597:	31 ff                	xor    %edi,%edi
- 599:	e9 da fe ff ff       	jmp    478 <printf+0x48>
- 59e:	66 90                	xchg   %ax,%ax
+ 577:	31 ff                	xor    %edi,%edi
+ 579:	e9 da fe ff ff       	jmp    458 <printf+0x48>
+ 57e:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 10, 1);
- 5a0:	83 ec 0c             	sub    $0xc,%esp
- 5a3:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 5a8:	6a 01                	push   $0x1
- 5aa:	e9 73 ff ff ff       	jmp    522 <printf+0xf2>
- 5af:	90                   	nop
+ 580:	83 ec 0c             	sub    $0xc,%esp
+ 583:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 588:	6a 01                	push   $0x1
+ 58a:	e9 73 ff ff ff       	jmp    502 <printf+0xf2>
+ 58f:	90                   	nop
   write(fd, &c, 1);
- 5b0:	83 ec 04             	sub    $0x4,%esp
- 5b3:	88 5d e5             	mov    %bl,-0x1b(%ebp)
- 5b6:	8d 45 e5             	lea    -0x1b(%ebp),%eax
- 5b9:	6a 01                	push   $0x1
- 5bb:	e9 21 ff ff ff       	jmp    4e1 <printf+0xb1>
+ 590:	83 ec 04             	sub    $0x4,%esp
+ 593:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 596:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 599:	6a 01                	push   $0x1
+ 59b:	e9 21 ff ff ff       	jmp    4c1 <printf+0xb1>
         putc(fd, *ap);
- 5c0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 5a0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
   write(fd, &c, 1);
- 5c3:	83 ec 04             	sub    $0x4,%esp
+ 5a3:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 5c6:	8b 07                	mov    (%edi),%eax
+ 5a6:	8b 07                	mov    (%edi),%eax
   write(fd, &c, 1);
- 5c8:	6a 01                	push   $0x1
+ 5a8:	6a 01                	push   $0x1
         ap++;
- 5ca:	83 c7 04             	add    $0x4,%edi
+ 5aa:	83 c7 04             	add    $0x4,%edi
         putc(fd, *ap);
- 5cd:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 5ad:	88 45 e4             	mov    %al,-0x1c(%ebp)
   write(fd, &c, 1);
- 5d0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
- 5d3:	50                   	push   %eax
- 5d4:	ff 75 08             	pushl  0x8(%ebp)
- 5d7:	e8 06 fd ff ff       	call   2e2 <write>
+ 5b0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 5b3:	50                   	push   %eax
+ 5b4:	ff 75 08             	pushl  0x8(%ebp)
+ 5b7:	e8 26 fd ff ff       	call   2e2 <write>
         ap++;
- 5dc:	89 7d d4             	mov    %edi,-0x2c(%ebp)
- 5df:	83 c4 10             	add    $0x10,%esp
+ 5bc:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 5bf:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 5e2:	31 ff                	xor    %edi,%edi
- 5e4:	e9 8f fe ff ff       	jmp    478 <printf+0x48>
+ 5c2:	31 ff                	xor    %edi,%edi
+ 5c4:	e9 8f fe ff ff       	jmp    458 <printf+0x48>
           s = "(null)";
- 5e9:	bb 91 07 00 00       	mov    $0x791,%ebx
+ 5c9:	bb 71 07 00 00       	mov    $0x771,%ebx
         while(*s != 0){
- 5ee:	b8 28 00 00 00       	mov    $0x28,%eax
- 5f3:	e9 72 ff ff ff       	jmp    56a <printf+0x13a>
- 5f8:	66 90                	xchg   %ax,%ax
- 5fa:	66 90                	xchg   %ax,%ax
- 5fc:	66 90                	xchg   %ax,%ax
- 5fe:	66 90                	xchg   %ax,%ax
+ 5ce:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5d3:	e9 72 ff ff ff       	jmp    54a <printf+0x13a>
+ 5d8:	66 90                	xchg   %ax,%ax
+ 5da:	66 90                	xchg   %ax,%ax
+ 5dc:	66 90                	xchg   %ax,%ax
+ 5de:	66 90                	xchg   %ax,%ax
 
-00000600 <free>:
+000005e0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 600:	55                   	push   %ebp
+ 5e0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 601:	a1 44 0a 00 00       	mov    0xa44,%eax
+ 5e1:	a1 24 0a 00 00       	mov    0xa24,%eax
 {
- 606:	89 e5                	mov    %esp,%ebp
- 608:	57                   	push   %edi
- 609:	56                   	push   %esi
- 60a:	53                   	push   %ebx
- 60b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5e6:	89 e5                	mov    %esp,%ebp
+ 5e8:	57                   	push   %edi
+ 5e9:	56                   	push   %esi
+ 5ea:	53                   	push   %ebx
+ 5eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 60e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
- 611:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ee:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 5f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 618:	39 c8                	cmp    %ecx,%eax
- 61a:	8b 10                	mov    (%eax),%edx
- 61c:	73 32                	jae    650 <free+0x50>
- 61e:	39 d1                	cmp    %edx,%ecx
- 620:	72 04                	jb     626 <free+0x26>
+ 5f8:	39 c8                	cmp    %ecx,%eax
+ 5fa:	8b 10                	mov    (%eax),%edx
+ 5fc:	73 32                	jae    630 <free+0x50>
+ 5fe:	39 d1                	cmp    %edx,%ecx
+ 600:	72 04                	jb     606 <free+0x26>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 622:	39 d0                	cmp    %edx,%eax
- 624:	72 32                	jb     658 <free+0x58>
+ 602:	39 d0                	cmp    %edx,%eax
+ 604:	72 32                	jb     638 <free+0x58>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 626:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 629:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 62c:	39 fa                	cmp    %edi,%edx
- 62e:	74 30                	je     660 <free+0x60>
+ 606:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 609:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 60c:	39 fa                	cmp    %edi,%edx
+ 60e:	74 30                	je     640 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 630:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 610:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 633:	8b 50 04             	mov    0x4(%eax),%edx
- 636:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 639:	39 f1                	cmp    %esi,%ecx
- 63b:	74 3a                	je     677 <free+0x77>
+ 613:	8b 50 04             	mov    0x4(%eax),%edx
+ 616:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 619:	39 f1                	cmp    %esi,%ecx
+ 61b:	74 3a                	je     657 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 63d:	89 08                	mov    %ecx,(%eax)
+ 61d:	89 08                	mov    %ecx,(%eax)
   freep = p;
- 63f:	a3 44 0a 00 00       	mov    %eax,0xa44
+ 61f:	a3 24 0a 00 00       	mov    %eax,0xa24
 }
- 644:	5b                   	pop    %ebx
- 645:	5e                   	pop    %esi
- 646:	5f                   	pop    %edi
- 647:	5d                   	pop    %ebp
- 648:	c3                   	ret    
- 649:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 624:	5b                   	pop    %ebx
+ 625:	5e                   	pop    %esi
+ 626:	5f                   	pop    %edi
+ 627:	5d                   	pop    %ebp
+ 628:	c3                   	ret    
+ 629:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 650:	39 d0                	cmp    %edx,%eax
- 652:	72 04                	jb     658 <free+0x58>
- 654:	39 d1                	cmp    %edx,%ecx
- 656:	72 ce                	jb     626 <free+0x26>
+ 630:	39 d0                	cmp    %edx,%eax
+ 632:	72 04                	jb     638 <free+0x58>
+ 634:	39 d1                	cmp    %edx,%ecx
+ 636:	72 ce                	jb     606 <free+0x26>
 {
- 658:	89 d0                	mov    %edx,%eax
- 65a:	eb bc                	jmp    618 <free+0x18>
- 65c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 638:	89 d0                	mov    %edx,%eax
+ 63a:	eb bc                	jmp    5f8 <free+0x18>
+ 63c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     bp->s.size += p->s.ptr->s.size;
- 660:	03 72 04             	add    0x4(%edx),%esi
- 663:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 640:	03 72 04             	add    0x4(%edx),%esi
+ 643:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 666:	8b 10                	mov    (%eax),%edx
- 668:	8b 12                	mov    (%edx),%edx
- 66a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 646:	8b 10                	mov    (%eax),%edx
+ 648:	8b 12                	mov    (%edx),%edx
+ 64a:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 66d:	8b 50 04             	mov    0x4(%eax),%edx
- 670:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 673:	39 f1                	cmp    %esi,%ecx
- 675:	75 c6                	jne    63d <free+0x3d>
+ 64d:	8b 50 04             	mov    0x4(%eax),%edx
+ 650:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 653:	39 f1                	cmp    %esi,%ecx
+ 655:	75 c6                	jne    61d <free+0x3d>
     p->s.size += bp->s.size;
- 677:	03 53 fc             	add    -0x4(%ebx),%edx
+ 657:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 67a:	a3 44 0a 00 00       	mov    %eax,0xa44
+ 65a:	a3 24 0a 00 00       	mov    %eax,0xa24
     p->s.size += bp->s.size;
- 67f:	89 50 04             	mov    %edx,0x4(%eax)
+ 65f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 682:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 685:	89 10                	mov    %edx,(%eax)
+ 662:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 665:	89 10                	mov    %edx,(%eax)
 }
- 687:	5b                   	pop    %ebx
- 688:	5e                   	pop    %esi
- 689:	5f                   	pop    %edi
- 68a:	5d                   	pop    %ebp
- 68b:	c3                   	ret    
- 68c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 667:	5b                   	pop    %ebx
+ 668:	5e                   	pop    %esi
+ 669:	5f                   	pop    %edi
+ 66a:	5d                   	pop    %ebp
+ 66b:	c3                   	ret    
+ 66c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-00000690 <malloc>:
+00000670 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 690:	55                   	push   %ebp
- 691:	89 e5                	mov    %esp,%ebp
- 693:	57                   	push   %edi
- 694:	56                   	push   %esi
- 695:	53                   	push   %ebx
- 696:	83 ec 0c             	sub    $0xc,%esp
+ 670:	55                   	push   %ebp
+ 671:	89 e5                	mov    %esp,%ebp
+ 673:	57                   	push   %edi
+ 674:	56                   	push   %esi
+ 675:	53                   	push   %ebx
+ 676:	83 ec 0c             	sub    $0xc,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 699:	8b 45 08             	mov    0x8(%ebp),%eax
+ 679:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 69c:	8b 15 44 0a 00 00    	mov    0xa44,%edx
+ 67c:	8b 15 24 0a 00 00    	mov    0xa24,%edx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6a2:	8d 78 07             	lea    0x7(%eax),%edi
- 6a5:	c1 ef 03             	shr    $0x3,%edi
- 6a8:	83 c7 01             	add    $0x1,%edi
+ 682:	8d 78 07             	lea    0x7(%eax),%edi
+ 685:	c1 ef 03             	shr    $0x3,%edi
+ 688:	83 c7 01             	add    $0x1,%edi
   if((prevp = freep) == 0){
- 6ab:	85 d2                	test   %edx,%edx
- 6ad:	0f 84 9d 00 00 00    	je     750 <malloc+0xc0>
- 6b3:	8b 02                	mov    (%edx),%eax
- 6b5:	8b 48 04             	mov    0x4(%eax),%ecx
+ 68b:	85 d2                	test   %edx,%edx
+ 68d:	0f 84 9d 00 00 00    	je     730 <malloc+0xc0>
+ 693:	8b 02                	mov    (%edx),%eax
+ 695:	8b 48 04             	mov    0x4(%eax),%ecx
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
     if(p->s.size >= nunits){
- 6b8:	39 cf                	cmp    %ecx,%edi
- 6ba:	76 6c                	jbe    728 <malloc+0x98>
- 6bc:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
- 6c2:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 6c7:	0f 43 df             	cmovae %edi,%ebx
+ 698:	39 cf                	cmp    %ecx,%edi
+ 69a:	76 6c                	jbe    708 <malloc+0x98>
+ 69c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 6a2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6a7:	0f 43 df             	cmovae %edi,%ebx
   p = sbrk(nu * sizeof(Header));
- 6ca:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
- 6d1:	eb 0e                	jmp    6e1 <malloc+0x51>
- 6d3:	90                   	nop
- 6d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6aa:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 6b1:	eb 0e                	jmp    6c1 <malloc+0x51>
+ 6b3:	90                   	nop
+ 6b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6d8:	8b 02                	mov    (%edx),%eax
+ 6b8:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 6da:	8b 48 04             	mov    0x4(%eax),%ecx
- 6dd:	39 f9                	cmp    %edi,%ecx
- 6df:	73 47                	jae    728 <malloc+0x98>
+ 6ba:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6bd:	39 f9                	cmp    %edi,%ecx
+ 6bf:	73 47                	jae    708 <malloc+0x98>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 6e1:	39 05 44 0a 00 00    	cmp    %eax,0xa44
- 6e7:	89 c2                	mov    %eax,%edx
- 6e9:	75 ed                	jne    6d8 <malloc+0x48>
+ 6c1:	39 05 24 0a 00 00    	cmp    %eax,0xa24
+ 6c7:	89 c2                	mov    %eax,%edx
+ 6c9:	75 ed                	jne    6b8 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 6eb:	83 ec 0c             	sub    $0xc,%esp
- 6ee:	56                   	push   %esi
- 6ef:	e8 56 fc ff ff       	call   34a <sbrk>
+ 6cb:	83 ec 0c             	sub    $0xc,%esp
+ 6ce:	56                   	push   %esi
+ 6cf:	e8 76 fc ff ff       	call   34a <sbrk>
   if(p == (char*)-1)
- 6f4:	83 c4 10             	add    $0x10,%esp
- 6f7:	83 f8 ff             	cmp    $0xffffffff,%eax
- 6fa:	74 1c                	je     718 <malloc+0x88>
+ 6d4:	83 c4 10             	add    $0x10,%esp
+ 6d7:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6da:	74 1c                	je     6f8 <malloc+0x88>
   hp->s.size = nu;
- 6fc:	89 58 04             	mov    %ebx,0x4(%eax)
+ 6dc:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 6ff:	83 ec 0c             	sub    $0xc,%esp
- 702:	83 c0 08             	add    $0x8,%eax
- 705:	50                   	push   %eax
- 706:	e8 f5 fe ff ff       	call   600 <free>
+ 6df:	83 ec 0c             	sub    $0xc,%esp
+ 6e2:	83 c0 08             	add    $0x8,%eax
+ 6e5:	50                   	push   %eax
+ 6e6:	e8 f5 fe ff ff       	call   5e0 <free>
   return freep;
- 70b:	8b 15 44 0a 00 00    	mov    0xa44,%edx
+ 6eb:	8b 15 24 0a 00 00    	mov    0xa24,%edx
       if((p = morecore(nunits)) == 0)
- 711:	83 c4 10             	add    $0x10,%esp
- 714:	85 d2                	test   %edx,%edx
- 716:	75 c0                	jne    6d8 <malloc+0x48>
+ 6f1:	83 c4 10             	add    $0x10,%esp
+ 6f4:	85 d2                	test   %edx,%edx
+ 6f6:	75 c0                	jne    6b8 <malloc+0x48>
         return 0;
   }
 }
- 718:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6f8:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 71b:	31 c0                	xor    %eax,%eax
+ 6fb:	31 c0                	xor    %eax,%eax
 }
- 71d:	5b                   	pop    %ebx
- 71e:	5e                   	pop    %esi
- 71f:	5f                   	pop    %edi
- 720:	5d                   	pop    %ebp
- 721:	c3                   	ret    
- 722:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 6fd:	5b                   	pop    %ebx
+ 6fe:	5e                   	pop    %esi
+ 6ff:	5f                   	pop    %edi
+ 700:	5d                   	pop    %ebp
+ 701:	c3                   	ret    
+ 702:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 728:	39 cf                	cmp    %ecx,%edi
- 72a:	74 54                	je     780 <malloc+0xf0>
+ 708:	39 cf                	cmp    %ecx,%edi
+ 70a:	74 54                	je     760 <malloc+0xf0>
         p->s.size -= nunits;
- 72c:	29 f9                	sub    %edi,%ecx
- 72e:	89 48 04             	mov    %ecx,0x4(%eax)
+ 70c:	29 f9                	sub    %edi,%ecx
+ 70e:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 731:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ 711:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 734:	89 78 04             	mov    %edi,0x4(%eax)
+ 714:	89 78 04             	mov    %edi,0x4(%eax)
       freep = prevp;
- 737:	89 15 44 0a 00 00    	mov    %edx,0xa44
+ 717:	89 15 24 0a 00 00    	mov    %edx,0xa24
 }
- 73d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 71d:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 740:	83 c0 08             	add    $0x8,%eax
+ 720:	83 c0 08             	add    $0x8,%eax
 }
- 743:	5b                   	pop    %ebx
- 744:	5e                   	pop    %esi
- 745:	5f                   	pop    %edi
- 746:	5d                   	pop    %ebp
- 747:	c3                   	ret    
- 748:	90                   	nop
- 749:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 723:	5b                   	pop    %ebx
+ 724:	5e                   	pop    %esi
+ 725:	5f                   	pop    %edi
+ 726:	5d                   	pop    %ebp
+ 727:	c3                   	ret    
+ 728:	90                   	nop
+ 729:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     base.s.ptr = freep = prevp = &base;
- 750:	c7 05 44 0a 00 00 48 	movl   $0xa48,0xa44
- 757:	0a 00 00 
- 75a:	c7 05 48 0a 00 00 48 	movl   $0xa48,0xa48
- 761:	0a 00 00 
+ 730:	c7 05 24 0a 00 00 28 	movl   $0xa28,0xa24
+ 737:	0a 00 00 
+ 73a:	c7 05 28 0a 00 00 28 	movl   $0xa28,0xa28
+ 741:	0a 00 00 
     base.s.size = 0;
- 764:	b8 48 0a 00 00       	mov    $0xa48,%eax
- 769:	c7 05 4c 0a 00 00 00 	movl   $0x0,0xa4c
- 770:	00 00 00 
- 773:	e9 44 ff ff ff       	jmp    6bc <malloc+0x2c>
- 778:	90                   	nop
- 779:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 744:	b8 28 0a 00 00       	mov    $0xa28,%eax
+ 749:	c7 05 2c 0a 00 00 00 	movl   $0x0,0xa2c
+ 750:	00 00 00 
+ 753:	e9 44 ff ff ff       	jmp    69c <malloc+0x2c>
+ 758:	90                   	nop
+ 759:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         prevp->s.ptr = p->s.ptr;
- 780:	8b 08                	mov    (%eax),%ecx
- 782:	89 0a                	mov    %ecx,(%edx)
- 784:	eb b1                	jmp    737 <malloc+0xa7>
+ 760:	8b 08                	mov    (%eax),%ecx
+ 762:	89 0a                	mov    %ecx,(%edx)
+ 764:	eb b1                	jmp    717 <malloc+0xa7>
Binary files main/echo.o and xv6-public/echo.o differ
diff -urN main/echo.sym xv6-public/echo.sym
--- main/echo.sym	2022-09-26 21:21:15.528042000 +0530
+++ xv6-public/echo.sym	2022-10-31 22:34:16.401588853 +0530
@@ -1,7 +1,7 @@
 00000000 .text
-00000788 .rodata
-000007ac .eh_frame
-00000a44 .bss
+00000768 .rodata
+0000078c .eh_frame
+00000a24 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,19 +13,18 @@
 00000000 echo.c
 00000000 ulib.c
 00000000 printf.c
-00000390 printint
-00000798 digits.1050
+00000370 printint
+00000778 digits.1044
 00000000 umalloc.c
-00000a44 freep
-00000a48 base
+00000a24 freep
+00000a28 base
 00000070 strcpy
-00000430 printf
-00000372 thread_exit
+00000410 printf
 00000290 memmove
 0000030a mknod
 00000180 gets
 00000342 getpid
-00000690 malloc
+00000670 malloc
 00000352 sleep
 000002d2 pipe
 000002e2 write
@@ -39,23 +38,21 @@
 000002ba fork
 0000034a sbrk
 0000035a uptime
-00000a44 __bss_start
+00000a24 __bss_start
 00000120 memset
 00000000 main
 000000a0 strcmp
 0000033a dup
 00000200 stat
-00000a44 _edata
-00000a50 _end
+00000a24 _edata
+00000a30 _end
 00000322 link
 000002c2 exit
 00000250 atoi
-0000037a draw
+00000362 draw
 000000f0 strlen
 00000302 open
 00000140 strchr
-00000362 thread_create
 0000032a mkdir
 000002ea close
-0000036a thread_join
-00000600 free
+000005e0 free
Binary files main/entry.o and xv6-public/entry.o differ
Binary files main/entryother.o and xv6-public/entryother.o differ
Binary files main/exec.o and xv6-public/exec.o differ
Binary files main/file.o and xv6-public/file.o differ
Binary files main/_forktest and xv6-public/_forktest differ
diff -urN main/forktest.asm xv6-public/forktest.asm
--- main/forktest.asm	2022-09-26 21:21:15.664110000 +0530
+++ xv6-public/forktest.asm	2022-10-31 22:34:16.489632858 +0530
@@ -59,11 +59,11 @@
 {
   56:	83 ec 10             	sub    $0x10,%esp
   write(fd, s, strlen(s));
-  59:	68 64 04 00 00       	push   $0x464
+  59:	68 4c 04 00 00       	push   $0x44c
   5e:	e8 6d 01 00 00       	call   1d0 <strlen>
   63:	83 c4 0c             	add    $0xc,%esp
   66:	50                   	push   %eax
-  67:	68 64 04 00 00       	push   $0x464
+  67:	68 4c 04 00 00       	push   $0x44c
   6c:	6a 01                	push   $0x1
   6e:	e8 4f 03 00 00       	call   3c2 <write>
   73:	83 c4 10             	add    $0x10,%esp
@@ -98,11 +98,11 @@
   b6:	75 71                	jne    129 <forktest+0xd9>
   write(fd, s, strlen(s));
   b8:	83 ec 0c             	sub    $0xc,%esp
-  bb:	68 96 04 00 00       	push   $0x496
+  bb:	68 7e 04 00 00       	push   $0x47e
   c0:	e8 0b 01 00 00       	call   1d0 <strlen>
   c5:	83 c4 0c             	add    $0xc,%esp
   c8:	50                   	push   %eax
-  c9:	68 96 04 00 00       	push   $0x496
+  c9:	68 7e 04 00 00       	push   $0x47e
   ce:	6a 01                	push   $0x1
   d0:	e8 ed 02 00 00       	call   3c2 <write>
 }
@@ -112,11 +112,11 @@
   da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   write(fd, s, strlen(s));
   e0:	83 ec 0c             	sub    $0xc,%esp
-  e3:	68 a4 04 00 00       	push   $0x4a4
+  e3:	68 8c 04 00 00       	push   $0x48c
   e8:	e8 e3 00 00 00       	call   1d0 <strlen>
   ed:	83 c4 0c             	add    $0xc,%esp
   f0:	50                   	push   %eax
-  f1:	68 a4 04 00 00       	push   $0x4a4
+  f1:	68 8c 04 00 00       	push   $0x48c
   f6:	6a 01                	push   $0x1
   f8:	e8 c5 02 00 00       	call   3c2 <write>
     exit();
@@ -125,22 +125,22 @@
  102:	e8 9b 02 00 00       	call   3a2 <exit>
   write(fd, s, strlen(s));
  107:	83 ec 0c             	sub    $0xc,%esp
- 10a:	68 6f 04 00 00       	push   $0x46f
+ 10a:	68 57 04 00 00       	push   $0x457
  10f:	e8 bc 00 00 00       	call   1d0 <strlen>
  114:	83 c4 0c             	add    $0xc,%esp
  117:	50                   	push   %eax
- 118:	68 6f 04 00 00       	push   $0x46f
+ 118:	68 57 04 00 00       	push   $0x457
  11d:	6a 01                	push   $0x1
  11f:	e8 9e 02 00 00       	call   3c2 <write>
       exit();
  124:	e8 79 02 00 00       	call   3a2 <exit>
   write(fd, s, strlen(s));
  129:	83 ec 0c             	sub    $0xc,%esp
- 12c:	68 83 04 00 00       	push   $0x483
+ 12c:	68 6b 04 00 00       	push   $0x46b
  131:	e8 9a 00 00 00       	call   1d0 <strlen>
  136:	83 c4 0c             	add    $0xc,%esp
  139:	50                   	push   %eax
- 13a:	68 83 04 00 00       	push   $0x483
+ 13a:	68 6b 04 00 00       	push   $0x46b
  13f:	6a 01                	push   $0x1
  141:	e8 7c 02 00 00       	call   3c2 <write>
     exit();
@@ -667,25 +667,8 @@
  43f:	cd 40                	int    $0x40
  441:	c3                   	ret    
 
-00000442 <thread_create>:
-SYSCALL(thread_create)
+00000442 <draw>:
+SYSCALL(draw)
  442:	b8 16 00 00 00       	mov    $0x16,%eax
  447:	cd 40                	int    $0x40
  449:	c3                   	ret    
-
-0000044a <thread_join>:
-SYSCALL(thread_join)
- 44a:	b8 18 00 00 00       	mov    $0x18,%eax
- 44f:	cd 40                	int    $0x40
- 451:	c3                   	ret    
-
-00000452 <thread_exit>:
-SYSCALL(thread_exit)
- 452:	b8 17 00 00 00       	mov    $0x17,%eax
- 457:	cd 40                	int    $0x40
- 459:	c3                   	ret    
-
-0000045a <draw>:
- 45a:	b8 19 00 00 00       	mov    $0x19,%eax
- 45f:	cd 40                	int    $0x40
- 461:	c3                   	ret    
Binary files main/forktest.o and xv6-public/forktest.o differ
Binary files main/fs.img and xv6-public/fs.img differ
Binary files main/fs.o and xv6-public/fs.o differ
diff -urN main/.gdbinit.tmpl xv6-public/.gdbinit.tmpl
--- main/.gdbinit.tmpl	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/.gdbinit.tmpl	2022-08-11 18:40:22.000000000 +0530
@@ -0,0 +1,27 @@
+set $lastcs = -1
+
+define hook-stop
+  # There doesn't seem to be a good way to detect if we're in 16- or
+  # 32-bit mode, but in 32-bit mode we always run with CS == 8 in the
+  # kernel and CS == 35 in user space
+  if $cs == 8 || $cs == 35
+    if $lastcs != 8 && $lastcs != 35
+      set architecture i386
+    end
+    x/i $pc
+  else
+    if $lastcs == -1 || $lastcs == 8 || $lastcs == 35
+      set architecture i8086
+    end
+    # Translate the segment:offset into a physical address
+    printf "[%4x:%4x] ", $cs, $eip
+    x/i $cs*16+$eip
+  end
+  set $lastcs = $cs
+end
+
+echo + target remote localhost:1234\n
+target remote localhost:1234
+
+echo + symbol-file kernel\n
+symbol-file kernel
diff -urN main/.git/config xv6-public/.git/config
--- main/.git/config	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/.git/config	2022-08-11 18:40:22.000000000 +0530
@@ -0,0 +1,11 @@
+[core]
+	repositoryformatversion = 0
+	filemode = true
+	bare = false
+	logallrefupdates = true
+[remote "origin"]
+	url = https://github.com/mit-pdos/xv6-public.git
+	fetch = +refs/heads/*:refs/remotes/origin/*
+[branch "master"]
+	remote = origin
+	merge = refs/heads/master
diff -urN main/.git/description xv6-public/.git/description
--- main/.git/description	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/.git/description	2022-08-11 18:40:04.000000000 +0530
@@ -0,0 +1 @@
+Unnamed repository; edit this file 'description' to name the repository.
diff -urN main/.git/HEAD xv6-public/.git/HEAD
--- main/.git/HEAD	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/.git/HEAD	2022-08-11 18:40:22.000000000 +0530
@@ -0,0 +1 @@
+ref: refs/heads/master
diff -urN main/.git/hooks/applypatch-msg.sample xv6-public/.git/hooks/applypatch-msg.sample
--- main/.git/hooks/applypatch-msg.sample	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/.git/hooks/applypatch-msg.sample	2022-08-11 18:40:04.000000000 +0530
@@ -0,0 +1,15 @@
+#!/bin/sh
+#
+# An example hook script to check the commit log message taken by
+# applypatch from an e-mail message.
+#
+# The hook should exit with non-zero status after issuing an
+# appropriate message if it wants to stop the commit.  The hook is
+# allowed to edit the commit message file.
+#
+# To enable this hook, rename this file to "applypatch-msg".
+
+. git-sh-setup
+commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
+test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
+:
diff -urN main/.git/hooks/commit-msg.sample xv6-public/.git/hooks/commit-msg.sample
--- main/.git/hooks/commit-msg.sample	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/.git/hooks/commit-msg.sample	2022-08-11 18:40:04.000000000 +0530
@@ -0,0 +1,24 @@
+#!/bin/sh
+#
+# An example hook script to check the commit log message.
+# Called by "git commit" with one argument, the name of the file
+# that has the commit message.  The hook should exit with non-zero
+# status after issuing an appropriate message if it wants to stop the
+# commit.  The hook is allowed to edit the commit message file.
+#
+# To enable this hook, rename this file to "commit-msg".
+
+# Uncomment the below to add a Signed-off-by line to the message.
+# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
+# hook is more suited to it.
+#
+# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
+# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"
+
+# This example catches duplicate Signed-off-by lines.
+
+test "" = "$(grep '^Signed-off-by: ' "$1" |
+	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
+	echo >&2 Duplicate Signed-off-by lines.
+	exit 1
+}
diff -urN main/.git/hooks/fsmonitor-watchman.sample xv6-public/.git/hooks/fsmonitor-watchman.sample
--- main/.git/hooks/fsmonitor-watchman.sample	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/.git/hooks/fsmonitor-watchman.sample	2022-08-11 18:40:04.000000000 +0530
@@ -0,0 +1,173 @@
+#!/usr/bin/perl
+
+use strict;
+use warnings;
+use IPC::Open2;
+
+# An example hook script to integrate Watchman
+# (https://facebook.github.io/watchman/) with git to speed up detecting
+# new and modified files.
+#
+# The hook is passed a version (currently 2) and last update token
+# formatted as a string and outputs to stdout a new update token and
+# all files that have been modified since the update token. Paths must
+# be relative to the root of the working tree and separated by a single NUL.
+#
+# To enable this hook, rename this file to "query-watchman" and set
+# 'git config core.fsmonitor .git/hooks/query-watchman'
+#
+my ($version, $last_update_token) = @ARGV;
+
+# Uncomment for debugging
+# print STDERR "$0 $version $last_update_token\n";
+
+# Check the hook interface version
+if ($version ne 2) {
+	die "Unsupported query-fsmonitor hook version '$version'.\n" .
+	    "Falling back to scanning...\n";
+}
+
+my $git_work_tree = get_working_dir();
+
+my $retry = 1;
+
+my $json_pkg;
+eval {
+	require JSON::XS;
+	$json_pkg = "JSON::XS";
+	1;
+} or do {
+	require JSON::PP;
+	$json_pkg = "JSON::PP";
+};
+
+launch_watchman();
+
+sub launch_watchman {
+	my $o = watchman_query();
+	if (is_work_tree_watched($o)) {
+		output_result($o->{clock}, @{$o->{files}});
+	}
+}
+
+sub output_result {
+	my ($clockid, @files) = @_;
+
+	# Uncomment for debugging watchman output
+	# open (my $fh, ">", ".git/watchman-output.out");
+	# binmode $fh, ":utf8";
+	# print $fh "$clockid\n@files\n";
+	# close $fh;
+
+	binmode STDOUT, ":utf8";
+	print $clockid;
+	print "\0";
+	local $, = "\0";
+	print @files;
+}
+
+sub watchman_clock {
+	my $response = qx/watchman clock "$git_work_tree"/;
+	die "Failed to get clock id on '$git_work_tree'.\n" .
+		"Falling back to scanning...\n" if $? != 0;
+
+	return $json_pkg->new->utf8->decode($response);
+}
+
+sub watchman_query {
+	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
+	or die "open2() failed: $!\n" .
+	"Falling back to scanning...\n";
+
+	# In the query expression below we're asking for names of files that
+	# changed since $last_update_token but not from the .git folder.
+	#
+	# To accomplish this, we're using the "since" generator to use the
+	# recency index to select candidate nodes and "fields" to limit the
+	# output to file names only. Then we're using the "expression" term to
+	# further constrain the results.
+	if (substr($last_update_token, 0, 1) eq "c") {
+		$last_update_token = "\"$last_update_token\"";
+	}
+	my $query = <<"	END";
+		["query", "$git_work_tree", {
+			"since": $last_update_token,
+			"fields": ["name"],
+			"expression": ["not", ["dirname", ".git"]]
+		}]
+	END
+
+	# Uncomment for debugging the watchman query
+	# open (my $fh, ">", ".git/watchman-query.json");
+	# print $fh $query;
+	# close $fh;
+
+	print CHLD_IN $query;
+	close CHLD_IN;
+	my $response = do {local $/; <CHLD_OUT>};
+
+	# Uncomment for debugging the watch response
+	# open ($fh, ">", ".git/watchman-response.json");
+	# print $fh $response;
+	# close $fh;
+
+	die "Watchman: command returned no output.\n" .
+	"Falling back to scanning...\n" if $response eq "";
+	die "Watchman: command returned invalid output: $response\n" .
+	"Falling back to scanning...\n" unless $response =~ /^\{/;
+
+	return $json_pkg->new->utf8->decode($response);
+}
+
+sub is_work_tree_watched {
+	my ($output) = @_;
+	my $error = $output->{error};
+	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
+		$retry--;
+		my $response = qx/watchman watch "$git_work_tree"/;
+		die "Failed to make watchman watch '$git_work_tree'.\n" .
+		    "Falling back to scanning...\n" if $? != 0;
+		$output = $json_pkg->new->utf8->decode($response);
+		$error = $output->{error};
+		die "Watchman: $error.\n" .
+		"Falling back to scanning...\n" if $error;
+
+		# Uncomment for debugging watchman output
+		# open (my $fh, ">", ".git/watchman-output.out");
+		# close $fh;
+
+		# Watchman will always return all files on the first query so
+		# return the fast "everything is dirty" flag to git and do the
+		# Watchman query just to get it over with now so we won't pay
+		# the cost in git to look up each individual file.
+		my $o = watchman_clock();
+		$error = $output->{error};
+
+		die "Watchman: $error.\n" .
+		"Falling back to scanning...\n" if $error;
+
+		output_result($o->{clock}, ("/"));
+		$last_update_token = $o->{clock};
+
+		eval { launch_watchman() };
+		return 0;
+	}
+
+	die "Watchman: $error.\n" .
+	"Falling back to scanning...\n" if $error;
+
+	return 1;
+}
+
+sub get_working_dir {
+	my $working_dir;
+	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
+		$working_dir = Win32::GetCwd();
+		$working_dir =~ tr/\\/\//;
+	} else {
+		require Cwd;
+		$working_dir = Cwd::cwd();
+	}
+
+	return $working_dir;
+}
diff -urN main/.git/hooks/post-update.sample xv6-public/.git/hooks/post-update.sample
--- main/.git/hooks/post-update.sample	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/.git/hooks/post-update.sample	2022-08-11 18:40:04.000000000 +0530
@@ -0,0 +1,8 @@
+#!/bin/sh
+#
+# An example hook script to prepare a packed repository for use over
+# dumb transports.
+#
+# To enable this hook, rename this file to "post-update".
+
+exec git update-server-info
diff -urN main/.git/hooks/pre-applypatch.sample xv6-public/.git/hooks/pre-applypatch.sample
--- main/.git/hooks/pre-applypatch.sample	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/.git/hooks/pre-applypatch.sample	2022-08-11 18:40:04.000000000 +0530
@@ -0,0 +1,14 @@
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed
+# by applypatch from an e-mail message.
+#
+# The hook should exit with non-zero status after issuing an
+# appropriate message if it wants to stop the commit.
+#
+# To enable this hook, rename this file to "pre-applypatch".
+
+. git-sh-setup
+precommit="$(git rev-parse --git-path hooks/pre-commit)"
+test -x "$precommit" && exec "$precommit" ${1+"$@"}
+:
diff -urN main/.git/hooks/pre-commit.sample xv6-public/.git/hooks/pre-commit.sample
--- main/.git/hooks/pre-commit.sample	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/.git/hooks/pre-commit.sample	2022-08-11 18:40:04.000000000 +0530
@@ -0,0 +1,49 @@
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed.
+# Called by "git commit" with no arguments.  The hook should
+# exit with non-zero status after issuing an appropriate message if
+# it wants to stop the commit.
+#
+# To enable this hook, rename this file to "pre-commit".
+
+if git rev-parse --verify HEAD >/dev/null 2>&1
+then
+	against=HEAD
+else
+	# Initial commit: diff against an empty tree object
+	against=$(git hash-object -t tree /dev/null)
+fi
+
+# If you want to allow non-ASCII filenames set this variable to true.
+allownonascii=$(git config --type=bool hooks.allownonascii)
+
+# Redirect output to stderr.
+exec 1>&2
+
+# Cross platform projects tend to avoid non-ASCII filenames; prevent
+# them from being added to the repository. We exploit the fact that the
+# printable range starts at the space character and ends with tilde.
+if [ "$allownonascii" != "true" ] &&
+	# Note that the use of brackets around a tr range is ok here, (it's
+	# even required, for portability to Solaris 10's /usr/bin/tr), since
+	# the square bracket bytes happen to fall in the designated range.
+	test $(git diff --cached --name-only --diff-filter=A -z $against |
+	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
+then
+	cat <<\EOF
+Error: Attempt to add a non-ASCII file name.
+
+This can cause problems if you want to work with people on other platforms.
+
+To be portable it is advisable to rename the file.
+
+If you know what you are doing you can disable this check using:
+
+  git config hooks.allownonascii true
+EOF
+	exit 1
+fi
+
+# If there are whitespace errors, print the offending file names and fail.
+exec git diff-index --check --cached $against --
diff -urN main/.git/hooks/pre-merge-commit.sample xv6-public/.git/hooks/pre-merge-commit.sample
--- main/.git/hooks/pre-merge-commit.sample	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/.git/hooks/pre-merge-commit.sample	2022-08-11 18:40:04.000000000 +0530
@@ -0,0 +1,13 @@
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed.
+# Called by "git merge" with no arguments.  The hook should
+# exit with non-zero status after issuing an appropriate message to
+# stderr if it wants to stop the merge commit.
+#
+# To enable this hook, rename this file to "pre-merge-commit".
+
+. git-sh-setup
+test -x "$GIT_DIR/hooks/pre-commit" &&
+        exec "$GIT_DIR/hooks/pre-commit"
+:
diff -urN main/.git/hooks/prepare-commit-msg.sample xv6-public/.git/hooks/prepare-commit-msg.sample
--- main/.git/hooks/prepare-commit-msg.sample	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/.git/hooks/prepare-commit-msg.sample	2022-08-11 18:40:04.000000000 +0530
@@ -0,0 +1,42 @@
+#!/bin/sh
+#
+# An example hook script to prepare the commit log message.
+# Called by "git commit" with the name of the file that has the
+# commit message, followed by the description of the commit
+# message's source.  The hook's purpose is to edit the commit
+# message file.  If the hook fails with a non-zero status,
+# the commit is aborted.
+#
+# To enable this hook, rename this file to "prepare-commit-msg".
+
+# This hook includes three examples. The first one removes the
+# "# Please enter the commit message..." help message.
+#
+# The second includes the output of "git diff --name-status -r"
+# into the message, just before the "git status" output.  It is
+# commented because it doesn't cope with --amend or with squashed
+# commits.
+#
+# The third example adds a Signed-off-by line to the message, that can
+# still be edited.  This is rarely a good idea.
+
+COMMIT_MSG_FILE=$1
+COMMIT_SOURCE=$2
+SHA1=$3
+
+/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"
+
+# case "$COMMIT_SOURCE,$SHA1" in
+#  ,|template,)
+#    /usr/bin/perl -i.bak -pe '
+#       print "\n" . `git diff --cached --name-status -r`
+# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
+#  *) ;;
+# esac
+
+# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
+# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
+# if test -z "$COMMIT_SOURCE"
+# then
+#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
+# fi
diff -urN main/.git/hooks/pre-push.sample xv6-public/.git/hooks/pre-push.sample
--- main/.git/hooks/pre-push.sample	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/.git/hooks/pre-push.sample	2022-08-11 18:40:04.000000000 +0530
@@ -0,0 +1,53 @@
+#!/bin/sh
+
+# An example hook script to verify what is about to be pushed.  Called by "git
+# push" after it has checked the remote status, but before anything has been
+# pushed.  If this script exits with a non-zero status nothing will be pushed.
+#
+# This hook is called with the following parameters:
+#
+# $1 -- Name of the remote to which the push is being done
+# $2 -- URL to which the push is being done
+#
+# If pushing without using a named remote those arguments will be equal.
+#
+# Information about the commits which are being pushed is supplied as lines to
+# the standard input in the form:
+#
+#   <local ref> <local oid> <remote ref> <remote oid>
+#
+# This sample shows how to prevent push of commits where the log message starts
+# with "WIP" (work in progress).
+
+remote="$1"
+url="$2"
+
+zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
+
+while read local_ref local_oid remote_ref remote_oid
+do
+	if test "$local_oid" = "$zero"
+	then
+		# Handle delete
+		:
+	else
+		if test "$remote_oid" = "$zero"
+		then
+			# New branch, examine all commits
+			range="$local_oid"
+		else
+			# Update to existing branch, examine new commits
+			range="$remote_oid..$local_oid"
+		fi
+
+		# Check for WIP commit
+		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
+		if test -n "$commit"
+		then
+			echo >&2 "Found WIP commit in $local_ref, not pushing"
+			exit 1
+		fi
+	fi
+done
+
+exit 0
diff -urN main/.git/hooks/pre-rebase.sample xv6-public/.git/hooks/pre-rebase.sample
--- main/.git/hooks/pre-rebase.sample	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/.git/hooks/pre-rebase.sample	2022-08-11 18:40:04.000000000 +0530
@@ -0,0 +1,169 @@
+#!/bin/sh
+#
+# Copyright (c) 2006, 2008 Junio C Hamano
+#
+# The "pre-rebase" hook is run just before "git rebase" starts doing
+# its job, and can prevent the command from running by exiting with
+# non-zero status.
+#
+# The hook is called with the following parameters:
+#
+# $1 -- the upstream the series was forked from.
+# $2 -- the branch being rebased (or empty when rebasing the current branch).
+#
+# This sample shows how to prevent topic branches that are already
+# merged to 'next' branch from getting rebased, because allowing it
+# would result in rebasing already published history.
+
+publish=next
+basebranch="$1"
+if test "$#" = 2
+then
+	topic="refs/heads/$2"
+else
+	topic=`git symbolic-ref HEAD` ||
+	exit 0 ;# we do not interrupt rebasing detached HEAD
+fi
+
+case "$topic" in
+refs/heads/??/*)
+	;;
+*)
+	exit 0 ;# we do not interrupt others.
+	;;
+esac
+
+# Now we are dealing with a topic branch being rebased
+# on top of master.  Is it OK to rebase it?
+
+# Does the topic really exist?
+git show-ref -q "$topic" || {
+	echo >&2 "No such branch $topic"
+	exit 1
+}
+
+# Is topic fully merged to master?
+not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
+if test -z "$not_in_master"
+then
+	echo >&2 "$topic is fully merged to master; better remove it."
+	exit 1 ;# we could allow it, but there is no point.
+fi
+
+# Is topic ever merged to next?  If so you should not be rebasing it.
+only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
+only_next_2=`git rev-list ^master           ${publish} | sort`
+if test "$only_next_1" = "$only_next_2"
+then
+	not_in_topic=`git rev-list "^$topic" master`
+	if test -z "$not_in_topic"
+	then
+		echo >&2 "$topic is already up to date with master"
+		exit 1 ;# we could allow it, but there is no point.
+	else
+		exit 0
+	fi
+else
+	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
+	/usr/bin/perl -e '
+		my $topic = $ARGV[0];
+		my $msg = "* $topic has commits already merged to public branch:\n";
+		my (%not_in_next) = map {
+			/^([0-9a-f]+) /;
+			($1 => 1);
+		} split(/\n/, $ARGV[1]);
+		for my $elem (map {
+				/^([0-9a-f]+) (.*)$/;
+				[$1 => $2];
+			} split(/\n/, $ARGV[2])) {
+			if (!exists $not_in_next{$elem->[0]}) {
+				if ($msg) {
+					print STDERR $msg;
+					undef $msg;
+				}
+				print STDERR " $elem->[1]\n";
+			}
+		}
+	' "$topic" "$not_in_next" "$not_in_master"
+	exit 1
+fi
+
+<<\DOC_END
+
+This sample hook safeguards topic branches that have been
+published from being rewound.
+
+The workflow assumed here is:
+
+ * Once a topic branch forks from "master", "master" is never
+   merged into it again (either directly or indirectly).
+
+ * Once a topic branch is fully cooked and merged into "master",
+   it is deleted.  If you need to build on top of it to correct
+   earlier mistakes, a new topic branch is created by forking at
+   the tip of the "master".  This is not strictly necessary, but
+   it makes it easier to keep your history simple.
+
+ * Whenever you need to test or publish your changes to topic
+   branches, merge them into "next" branch.
+
+The script, being an example, hardcodes the publish branch name
+to be "next", but it is trivial to make it configurable via
+$GIT_DIR/config mechanism.
+
+With this workflow, you would want to know:
+
+(1) ... if a topic branch has ever been merged to "next".  Young
+    topic branches can have stupid mistakes you would rather
+    clean up before publishing, and things that have not been
+    merged into other branches can be easily rebased without
+    affecting other people.  But once it is published, you would
+    not want to rewind it.
+
+(2) ... if a topic branch has been fully merged to "master".
+    Then you can delete it.  More importantly, you should not
+    build on top of it -- other people may already want to
+    change things related to the topic as patches against your
+    "master", so if you need further changes, it is better to
+    fork the topic (perhaps with the same name) afresh from the
+    tip of "master".
+
+Let's look at this example:
+
+		   o---o---o---o---o---o---o---o---o---o "next"
+		  /       /           /           /
+		 /   a---a---b A     /           /
+		/   /               /           /
+	       /   /   c---c---c---c B         /
+	      /   /   /             \         /
+	     /   /   /   b---b C     \       /
+	    /   /   /   /             \     /
+    ---o---o---o---o---o---o---o---o---o---o---o "master"
+
+
+A, B and C are topic branches.
+
+ * A has one fix since it was merged up to "next".
+
+ * B has finished.  It has been fully merged up to "master" and "next",
+   and is ready to be deleted.
+
+ * C has not merged to "next" at all.
+
+We would want to allow C to be rebased, refuse A, and encourage
+B to be deleted.
+
+To compute (1):
+
+	git rev-list ^master ^topic next
+	git rev-list ^master        next
+
+	if these match, topic has not merged in next at all.
+
+To compute (2):
+
+	git rev-list master..topic
+
+	if this is empty, it is fully merged to "master".
+
+DOC_END
diff -urN main/.git/hooks/pre-receive.sample xv6-public/.git/hooks/pre-receive.sample
--- main/.git/hooks/pre-receive.sample	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/.git/hooks/pre-receive.sample	2022-08-11 18:40:04.000000000 +0530
@@ -0,0 +1,24 @@
+#!/bin/sh
+#
+# An example hook script to make use of push options.
+# The example simply echoes all push options that start with 'echoback='
+# and rejects all pushes when the "reject" push option is used.
+#
+# To enable this hook, rename this file to "pre-receive".
+
+if test -n "$GIT_PUSH_OPTION_COUNT"
+then
+	i=0
+	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
+	do
+		eval "value=\$GIT_PUSH_OPTION_$i"
+		case "$value" in
+		echoback=*)
+			echo "echo from the pre-receive-hook: ${value#*=}" >&2
+			;;
+		reject)
+			exit 1
+		esac
+		i=$((i + 1))
+	done
+fi
diff -urN main/.git/hooks/push-to-checkout.sample xv6-public/.git/hooks/push-to-checkout.sample
--- main/.git/hooks/push-to-checkout.sample	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/.git/hooks/push-to-checkout.sample	2022-08-11 18:40:04.000000000 +0530
@@ -0,0 +1,78 @@
+#!/bin/sh
+
+# An example hook script to update a checked-out tree on a git push.
+#
+# This hook is invoked by git-receive-pack(1) when it reacts to git
+# push and updates reference(s) in its repository, and when the push
+# tries to update the branch that is currently checked out and the
+# receive.denyCurrentBranch configuration variable is set to
+# updateInstead.
+#
+# By default, such a push is refused if the working tree and the index
+# of the remote repository has any difference from the currently
+# checked out commit; when both the working tree and the index match
+# the current commit, they are updated to match the newly pushed tip
+# of the branch. This hook is to be used to override the default
+# behaviour; however the code below reimplements the default behaviour
+# as a starting point for convenient modification.
+#
+# The hook receives the commit with which the tip of the current
+# branch is going to be updated:
+commit=$1
+
+# It can exit with a non-zero status to refuse the push (when it does
+# so, it must not modify the index or the working tree).
+die () {
+	echo >&2 "$*"
+	exit 1
+}
+
+# Or it can make any necessary changes to the working tree and to the
+# index to bring them to the desired state when the tip of the current
+# branch is updated to the new commit, and exit with a zero status.
+#
+# For example, the hook can simply run git read-tree -u -m HEAD "$1"
+# in order to emulate git fetch that is run in the reverse direction
+# with git push, as the two-tree form of git read-tree -u -m is
+# essentially the same as git switch or git checkout that switches
+# branches while keeping the local changes in the working tree that do
+# not interfere with the difference between the branches.
+
+# The below is a more-or-less exact translation to shell of the C code
+# for the default behaviour for git's push-to-checkout hook defined in
+# the push_to_deploy() function in builtin/receive-pack.c.
+#
+# Note that the hook will be executed from the repository directory,
+# not from the working tree, so if you want to perform operations on
+# the working tree, you will have to adapt your code accordingly, e.g.
+# by adding "cd .." or using relative paths.
+
+if ! git update-index -q --ignore-submodules --refresh
+then
+	die "Up-to-date check failed"
+fi
+
+if ! git diff-files --quiet --ignore-submodules --
+then
+	die "Working directory has unstaged changes"
+fi
+
+# This is a rough translation of:
+#
+#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
+if git cat-file -e HEAD 2>/dev/null
+then
+	head=HEAD
+else
+	head=$(git hash-object -t tree --stdin </dev/null)
+fi
+
+if ! git diff-index --quiet --cached --ignore-submodules $head --
+then
+	die "Working directory has staged changes"
+fi
+
+if ! git read-tree -u -m "$commit"
+then
+	die "Could not update working tree to new HEAD"
+fi
diff -urN main/.git/hooks/update.sample xv6-public/.git/hooks/update.sample
--- main/.git/hooks/update.sample	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/.git/hooks/update.sample	2022-08-11 18:40:04.000000000 +0530
@@ -0,0 +1,128 @@
+#!/bin/sh
+#
+# An example hook script to block unannotated tags from entering.
+# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
+#
+# To enable this hook, rename this file to "update".
+#
+# Config
+# ------
+# hooks.allowunannotated
+#   This boolean sets whether unannotated tags will be allowed into the
+#   repository.  By default they won't be.
+# hooks.allowdeletetag
+#   This boolean sets whether deleting tags will be allowed in the
+#   repository.  By default they won't be.
+# hooks.allowmodifytag
+#   This boolean sets whether a tag may be modified after creation. By default
+#   it won't be.
+# hooks.allowdeletebranch
+#   This boolean sets whether deleting branches will be allowed in the
+#   repository.  By default they won't be.
+# hooks.denycreatebranch
+#   This boolean sets whether remotely creating branches will be denied
+#   in the repository.  By default this is allowed.
+#
+
+# --- Command line
+refname="$1"
+oldrev="$2"
+newrev="$3"
+
+# --- Safety check
+if [ -z "$GIT_DIR" ]; then
+	echo "Don't run this script from the command line." >&2
+	echo " (if you want, you could supply GIT_DIR then run" >&2
+	echo "  $0 <ref> <oldrev> <newrev>)" >&2
+	exit 1
+fi
+
+if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
+	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
+	exit 1
+fi
+
+# --- Config
+allowunannotated=$(git config --type=bool hooks.allowunannotated)
+allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
+denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
+allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
+allowmodifytag=$(git config --type=bool hooks.allowmodifytag)
+
+# check for no description
+projectdesc=$(sed -e '1q' "$GIT_DIR/description")
+case "$projectdesc" in
+"Unnamed repository"* | "")
+	echo "*** Project description file hasn't been set" >&2
+	exit 1
+	;;
+esac
+
+# --- Check types
+# if $newrev is 0000...0000, it's a commit to delete a ref.
+zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
+if [ "$newrev" = "$zero" ]; then
+	newrev_type=delete
+else
+	newrev_type=$(git cat-file -t $newrev)
+fi
+
+case "$refname","$newrev_type" in
+	refs/tags/*,commit)
+		# un-annotated tag
+		short_refname=${refname##refs/tags/}
+		if [ "$allowunannotated" != "true" ]; then
+			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
+			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
+			exit 1
+		fi
+		;;
+	refs/tags/*,delete)
+		# delete tag
+		if [ "$allowdeletetag" != "true" ]; then
+			echo "*** Deleting a tag is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	refs/tags/*,tag)
+		# annotated tag
+		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
+		then
+			echo "*** Tag '$refname' already exists." >&2
+			echo "*** Modifying a tag is not allowed in this repository." >&2
+			exit 1
+		fi
+		;;
+	refs/heads/*,commit)
+		# branch
+		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
+			echo "*** Creating a branch is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	refs/heads/*,delete)
+		# delete branch
+		if [ "$allowdeletebranch" != "true" ]; then
+			echo "*** Deleting a branch is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	refs/remotes/*,commit)
+		# tracking branch
+		;;
+	refs/remotes/*,delete)
+		# delete tracking branch
+		if [ "$allowdeletebranch" != "true" ]; then
+			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	*)
+		# Anything else (is there anything else?)
+		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
+		exit 1
+		;;
+esac
+
+# --- Finished
+exit 0
Binary files main/.git/index and xv6-public/.git/index differ
diff -urN main/.git/info/exclude xv6-public/.git/info/exclude
--- main/.git/info/exclude	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/.git/info/exclude	2022-08-11 18:40:04.000000000 +0530
@@ -0,0 +1,6 @@
+# git ls-files --others --exclude-from=.git/info/exclude
+# Lines that start with '#' are comments.
+# For a project mostly in C, the following would be a good set of
+# exclude patterns (uncomment them if you want to use them):
+# *.[oa]
+# *~
diff -urN main/.git/logs/HEAD xv6-public/.git/logs/HEAD
--- main/.git/logs/HEAD	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/.git/logs/HEAD	2022-08-11 18:40:22.000000000 +0530
@@ -0,0 +1 @@
+0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 Sahil <sahil@sahil-VirtualBox.(none)> 1660248623 +0530	clone: from https://github.com/mit-pdos/xv6-public.git
diff -urN main/.git/logs/refs/heads/master xv6-public/.git/logs/refs/heads/master
--- main/.git/logs/refs/heads/master	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/.git/logs/refs/heads/master	2022-08-11 18:40:22.000000000 +0530
@@ -0,0 +1 @@
+0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 Sahil <sahil@sahil-VirtualBox.(none)> 1660248623 +0530	clone: from https://github.com/mit-pdos/xv6-public.git
diff -urN main/.git/logs/refs/remotes/origin/HEAD xv6-public/.git/logs/refs/remotes/origin/HEAD
--- main/.git/logs/refs/remotes/origin/HEAD	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/.git/logs/refs/remotes/origin/HEAD	2022-08-11 18:40:22.000000000 +0530
@@ -0,0 +1 @@
+0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 Sahil <sahil@sahil-VirtualBox.(none)> 1660248623 +0530	clone: from https://github.com/mit-pdos/xv6-public.git
Binary files main/.git/objects/pack/pack-df231414196a28fc988083de319039681dd68d80.idx and xv6-public/.git/objects/pack/pack-df231414196a28fc988083de319039681dd68d80.idx differ
Binary files main/.git/objects/pack/pack-df231414196a28fc988083de319039681dd68d80.pack and xv6-public/.git/objects/pack/pack-df231414196a28fc988083de319039681dd68d80.pack differ
diff -urN main/.git/packed-refs xv6-public/.git/packed-refs
--- main/.git/packed-refs	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/.git/packed-refs	2022-08-11 18:40:22.000000000 +0530
@@ -0,0 +1,28 @@
+# pack-refs with: peeled fully-peeled sorted 
+eeb7b415dbcb12cc362d0783e41c3d1f44066b17 refs/remotes/origin/master
+af0e851a3a8a7d13bc2f2d596b58500594040892 refs/tags/osdi12-submit
+^8286b58087750e09bac3815219e0382a0bb2b159
+9e698c587b135db17b38a5838976805b9c01e338 refs/tags/symlinks
+05e0b1218dcebe1f40028531b51926df8ae52be0 refs/tags/xv6-2006
+^5cc0bd5ceaf805ab44f851e6a3f1952a29e9d7b7
+42f3c3f7be9717b66ba6e133a113c0f751c53133 refs/tags/xv6-2007
+adcd16c3f7588b4a28d37495f05e94278c9e3a1e refs/tags/xv6-2008
+124fe7e457c0dc9b671c7ffccb56004eb61da4f0 refs/tags/xv6-2010
+5922cdbbcc4fdbd76eec9e0dad9f650e4c86ee99 refs/tags/xv6-rev0
+^5cc0bd5ceaf805ab44f851e6a3f1952a29e9d7b7
+81f31a773dd49b001437eaed3975438585ff9911 refs/tags/xv6-rev1
+^42f3c3f7be9717b66ba6e133a113c0f751c53133
+b818915f793cd20c5d1e24f668534a9d690f3cc8 refs/tags/xv6-rev11
+30dab73b68b816877dc8f78504ceca0808c976eb refs/tags/xv6-rev3
+^074ac7ccd43c08d01a237ce6f14cac10715a51ef
+113005d48f09a4e3939940d72a77bf6973ea8755 refs/tags/xv6-rev4
+^124fe7e457c0dc9b671c7ffccb56004eb61da4f0
+d6aa754494b37e32862b1f78d53deedc53f66a15 refs/tags/xv6-rev5
+^ae603ff5e79bb7b5eea4147425752f33d29fe558
+3e9d6413d331b4c912d55bfac253af1629d4bac9 refs/tags/xv6-rev6
+^e64c661ae8b91bd7e858bb1895bef96e6ac2b4bb
+ccc25c0fac59067d88af52ad9f3b8cee97c3810a refs/tags/xv6-rev7
+^2ae8392a5c203a7b1bc5b8bff5eabc8b5eab8972
+7d6f95e327f1c18570d5dd187e3d92e1aadae2cf refs/tags/xv6-rev8
+^9ba21267e796eb462a657392906e3cbccaedcc99
+5bf3fbee00fb27cb8cb4eca72dcd9fc4c288ed71 refs/tags/xv6-rev9
diff -urN main/.git/refs/heads/master xv6-public/.git/refs/heads/master
--- main/.git/refs/heads/master	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/.git/refs/heads/master	2022-08-11 18:40:22.000000000 +0530
@@ -0,0 +1 @@
+eeb7b415dbcb12cc362d0783e41c3d1f44066b17
diff -urN main/.git/refs/remotes/origin/HEAD xv6-public/.git/refs/remotes/origin/HEAD
--- main/.git/refs/remotes/origin/HEAD	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/.git/refs/remotes/origin/HEAD	2022-08-11 18:40:22.000000000 +0530
@@ -0,0 +1 @@
+ref: refs/remotes/origin/master
diff -urN main/.gitignore xv6-public/.gitignore
--- main/.gitignore	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/.gitignore	2022-08-11 18:40:22.000000000 +0530
@@ -0,0 +1,16 @@
+*~
+_*
+*.o
+*.d
+*.asm
+*.sym
+*.img
+vectors.S
+bootblock
+entryother
+initcode
+initcode.out
+kernel
+kernelmemfs
+mkfs
+.gdbinit
Binary files main/_grep and xv6-public/_grep differ
diff -urN main/grep.asm xv6-public/grep.asm
--- main/grep.asm	2022-09-26 21:21:15.852204000 +0530
+++ xv6-public/grep.asm	2022-10-31 22:34:16.613694865 +0530
@@ -92,17 +92,17 @@
       printf(1, "grep: cannot open %s\n", argv[i]);
   86:	50                   	push   %eax
   87:	ff 33                	pushl  (%ebx)
-  89:	68 68 0a 00 00       	push   $0xa68
+  89:	68 48 0a 00 00       	push   $0xa48
   8e:	6a 01                	push   $0x1
-  90:	e8 5b 06 00 00       	call   6f0 <printf>
+  90:	e8 3b 06 00 00       	call   6d0 <printf>
       exit();
   95:	e8 e8 04 00 00       	call   582 <exit>
     printf(2, "usage: grep pattern [file ...]\n");
   9a:	51                   	push   %ecx
   9b:	51                   	push   %ecx
-  9c:	68 48 0a 00 00       	push   $0xa48
+  9c:	68 28 0a 00 00       	push   $0xa28
   a1:	6a 02                	push   $0x2
-  a3:	e8 48 06 00 00       	call   6f0 <printf>
+  a3:	e8 28 06 00 00       	call   6d0 <printf>
     exit();
   a8:	e8 d5 04 00 00       	call   582 <exit>
   ad:	66 90                	xchg   %ax,%ax
@@ -352,7 +352,7 @@
  245:	83 ec 04             	sub    $0x4,%esp
  248:	29 f0                	sub    %esi,%eax
  24a:	50                   	push   %eax
- 24b:	8d 86 40 0e 00 00    	lea    0xe40(%esi),%eax
+ 24b:	8d 86 20 0e 00 00    	lea    0xe20(%esi),%eax
  251:	50                   	push   %eax
  252:	ff 75 0c             	pushl  0xc(%ebp)
  255:	e8 40 03 00 00       	call   59a <read>
@@ -362,9 +362,9 @@
     m += n;
  265:	01 c6                	add    %eax,%esi
     p = buf;
- 267:	bb 40 0e 00 00       	mov    $0xe40,%ebx
+ 267:	bb 20 0e 00 00       	mov    $0xe20,%ebx
     buf[m] = '\0';
- 26c:	c6 86 40 0e 00 00 00 	movb   $0x0,0xe40(%esi)
+ 26c:	c6 86 20 0e 00 00 00 	movb   $0x0,0xe20(%esi)
  273:	89 75 e4             	mov    %esi,-0x1c(%ebp)
  276:	8d 76 00             	lea    0x0(%esi),%esi
  279:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
@@ -411,7 +411,7 @@
  2d0:	eb ae                	jmp    280 <grep+0x50>
  2d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(p == buf)
- 2d8:	81 fb 40 0e 00 00    	cmp    $0xe40,%ebx
+ 2d8:	81 fb 20 0e 00 00    	cmp    $0xe20,%ebx
  2de:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  2e1:	74 2d                	je     310 <grep+0xe0>
     if(m > 0){
@@ -422,12 +422,12 @@
       memmove(buf, p, m);
  2ed:	83 ec 04             	sub    $0x4,%esp
       m -= p - buf;
- 2f0:	2d 40 0e 00 00       	sub    $0xe40,%eax
+ 2f0:	2d 20 0e 00 00       	sub    $0xe20,%eax
  2f5:	29 c6                	sub    %eax,%esi
       memmove(buf, p, m);
  2f7:	56                   	push   %esi
  2f8:	53                   	push   %ebx
- 2f9:	68 40 0e 00 00       	push   $0xe40
+ 2f9:	68 20 0e 00 00       	push   $0xe20
  2fe:	e8 4d 02 00 00       	call   550 <memmove>
  303:	83 c4 10             	add    $0x10,%esp
  306:	e9 35 ff ff ff       	jmp    240 <grep+0x10>
@@ -968,614 +968,593 @@
  61f:	cd 40                	int    $0x40
  621:	c3                   	ret    
 
-00000622 <thread_create>:
-SYSCALL(thread_create)
+00000622 <draw>:
+SYSCALL(draw)
  622:	b8 16 00 00 00       	mov    $0x16,%eax
  627:	cd 40                	int    $0x40
  629:	c3                   	ret    
+ 62a:	66 90                	xchg   %ax,%ax
+ 62c:	66 90                	xchg   %ax,%ax
+ 62e:	66 90                	xchg   %ax,%ax
 
-0000062a <thread_join>:
-SYSCALL(thread_join)
- 62a:	b8 18 00 00 00       	mov    $0x18,%eax
- 62f:	cd 40                	int    $0x40
- 631:	c3                   	ret    
-
-00000632 <thread_exit>:
-SYSCALL(thread_exit)
- 632:	b8 17 00 00 00       	mov    $0x17,%eax
- 637:	cd 40                	int    $0x40
- 639:	c3                   	ret    
-
-0000063a <draw>:
- 63a:	b8 19 00 00 00       	mov    $0x19,%eax
- 63f:	cd 40                	int    $0x40
- 641:	c3                   	ret    
- 642:	66 90                	xchg   %ax,%ax
- 644:	66 90                	xchg   %ax,%ax
- 646:	66 90                	xchg   %ax,%ax
- 648:	66 90                	xchg   %ax,%ax
- 64a:	66 90                	xchg   %ax,%ax
- 64c:	66 90                	xchg   %ax,%ax
- 64e:	66 90                	xchg   %ax,%ax
-
-00000650 <printint>:
+00000630 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 650:	55                   	push   %ebp
- 651:	89 e5                	mov    %esp,%ebp
- 653:	57                   	push   %edi
- 654:	56                   	push   %esi
- 655:	53                   	push   %ebx
- 656:	83 ec 3c             	sub    $0x3c,%esp
+ 630:	55                   	push   %ebp
+ 631:	89 e5                	mov    %esp,%ebp
+ 633:	57                   	push   %edi
+ 634:	56                   	push   %esi
+ 635:	53                   	push   %ebx
+ 636:	83 ec 3c             	sub    $0x3c,%esp
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 659:	85 d2                	test   %edx,%edx
+ 639:	85 d2                	test   %edx,%edx
 {
- 65b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 63b:	89 45 c0             	mov    %eax,-0x40(%ebp)
     neg = 1;
     x = -xx;
- 65e:	89 d0                	mov    %edx,%eax
+ 63e:	89 d0                	mov    %edx,%eax
   if(sgn && xx < 0){
- 660:	79 76                	jns    6d8 <printint+0x88>
- 662:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 666:	74 70                	je     6d8 <printint+0x88>
+ 640:	79 76                	jns    6b8 <printint+0x88>
+ 642:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 646:	74 70                	je     6b8 <printint+0x88>
     x = -xx;
- 668:	f7 d8                	neg    %eax
+ 648:	f7 d8                	neg    %eax
     neg = 1;
- 66a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+ 64a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
   } else {
     x = xx;
   }
 
   i = 0;
- 671:	31 f6                	xor    %esi,%esi
- 673:	8d 5d d7             	lea    -0x29(%ebp),%ebx
- 676:	eb 0a                	jmp    682 <printint+0x32>
- 678:	90                   	nop
- 679:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 651:	31 f6                	xor    %esi,%esi
+ 653:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 656:	eb 0a                	jmp    662 <printint+0x32>
+ 658:	90                   	nop
+ 659:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   do{
     buf[i++] = digits[x % base];
- 680:	89 fe                	mov    %edi,%esi
- 682:	31 d2                	xor    %edx,%edx
- 684:	8d 7e 01             	lea    0x1(%esi),%edi
- 687:	f7 f1                	div    %ecx
- 689:	0f b6 92 88 0a 00 00 	movzbl 0xa88(%edx),%edx
+ 660:	89 fe                	mov    %edi,%esi
+ 662:	31 d2                	xor    %edx,%edx
+ 664:	8d 7e 01             	lea    0x1(%esi),%edi
+ 667:	f7 f1                	div    %ecx
+ 669:	0f b6 92 68 0a 00 00 	movzbl 0xa68(%edx),%edx
   }while((x /= base) != 0);
- 690:	85 c0                	test   %eax,%eax
+ 670:	85 c0                	test   %eax,%eax
     buf[i++] = digits[x % base];
- 692:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+ 672:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
   }while((x /= base) != 0);
- 695:	75 e9                	jne    680 <printint+0x30>
+ 675:	75 e9                	jne    660 <printint+0x30>
   if(neg)
- 697:	8b 45 c4             	mov    -0x3c(%ebp),%eax
- 69a:	85 c0                	test   %eax,%eax
- 69c:	74 08                	je     6a6 <printint+0x56>
+ 677:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 67a:	85 c0                	test   %eax,%eax
+ 67c:	74 08                	je     686 <printint+0x56>
     buf[i++] = '-';
- 69e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
- 6a3:	8d 7e 02             	lea    0x2(%esi),%edi
- 6a6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
- 6aa:	8b 7d c0             	mov    -0x40(%ebp),%edi
- 6ad:	8d 76 00             	lea    0x0(%esi),%esi
- 6b0:	0f b6 06             	movzbl (%esi),%eax
+ 67e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 683:	8d 7e 02             	lea    0x2(%esi),%edi
+ 686:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 68a:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 68d:	8d 76 00             	lea    0x0(%esi),%esi
+ 690:	0f b6 06             	movzbl (%esi),%eax
   write(fd, &c, 1);
- 6b3:	83 ec 04             	sub    $0x4,%esp
- 6b6:	83 ee 01             	sub    $0x1,%esi
- 6b9:	6a 01                	push   $0x1
- 6bb:	53                   	push   %ebx
- 6bc:	57                   	push   %edi
- 6bd:	88 45 d7             	mov    %al,-0x29(%ebp)
- 6c0:	e8 dd fe ff ff       	call   5a2 <write>
+ 693:	83 ec 04             	sub    $0x4,%esp
+ 696:	83 ee 01             	sub    $0x1,%esi
+ 699:	6a 01                	push   $0x1
+ 69b:	53                   	push   %ebx
+ 69c:	57                   	push   %edi
+ 69d:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 6a0:	e8 fd fe ff ff       	call   5a2 <write>
 
   while(--i >= 0)
- 6c5:	83 c4 10             	add    $0x10,%esp
- 6c8:	39 de                	cmp    %ebx,%esi
- 6ca:	75 e4                	jne    6b0 <printint+0x60>
+ 6a5:	83 c4 10             	add    $0x10,%esp
+ 6a8:	39 de                	cmp    %ebx,%esi
+ 6aa:	75 e4                	jne    690 <printint+0x60>
     putc(fd, buf[i]);
 }
- 6cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 6cf:	5b                   	pop    %ebx
- 6d0:	5e                   	pop    %esi
- 6d1:	5f                   	pop    %edi
- 6d2:	5d                   	pop    %ebp
- 6d3:	c3                   	ret    
- 6d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6ac:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6af:	5b                   	pop    %ebx
+ 6b0:	5e                   	pop    %esi
+ 6b1:	5f                   	pop    %edi
+ 6b2:	5d                   	pop    %ebp
+ 6b3:	c3                   	ret    
+ 6b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 6d8:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
- 6df:	eb 90                	jmp    671 <printint+0x21>
- 6e1:	eb 0d                	jmp    6f0 <printf>
- 6e3:	90                   	nop
- 6e4:	90                   	nop
- 6e5:	90                   	nop
- 6e6:	90                   	nop
- 6e7:	90                   	nop
- 6e8:	90                   	nop
- 6e9:	90                   	nop
- 6ea:	90                   	nop
- 6eb:	90                   	nop
- 6ec:	90                   	nop
- 6ed:	90                   	nop
- 6ee:	90                   	nop
- 6ef:	90                   	nop
+ 6b8:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 6bf:	eb 90                	jmp    651 <printint+0x21>
+ 6c1:	eb 0d                	jmp    6d0 <printf>
+ 6c3:	90                   	nop
+ 6c4:	90                   	nop
+ 6c5:	90                   	nop
+ 6c6:	90                   	nop
+ 6c7:	90                   	nop
+ 6c8:	90                   	nop
+ 6c9:	90                   	nop
+ 6ca:	90                   	nop
+ 6cb:	90                   	nop
+ 6cc:	90                   	nop
+ 6cd:	90                   	nop
+ 6ce:	90                   	nop
+ 6cf:	90                   	nop
 
-000006f0 <printf>:
+000006d0 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 6f0:	55                   	push   %ebp
- 6f1:	89 e5                	mov    %esp,%ebp
- 6f3:	57                   	push   %edi
- 6f4:	56                   	push   %esi
- 6f5:	53                   	push   %ebx
- 6f6:	83 ec 2c             	sub    $0x2c,%esp
+ 6d0:	55                   	push   %ebp
+ 6d1:	89 e5                	mov    %esp,%ebp
+ 6d3:	57                   	push   %edi
+ 6d4:	56                   	push   %esi
+ 6d5:	53                   	push   %ebx
+ 6d6:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 6f9:	8b 75 0c             	mov    0xc(%ebp),%esi
- 6fc:	0f b6 1e             	movzbl (%esi),%ebx
- 6ff:	84 db                	test   %bl,%bl
- 701:	0f 84 b3 00 00 00    	je     7ba <printf+0xca>
+ 6d9:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 6dc:	0f b6 1e             	movzbl (%esi),%ebx
+ 6df:	84 db                	test   %bl,%bl
+ 6e1:	0f 84 b3 00 00 00    	je     79a <printf+0xca>
   ap = (uint*)(void*)&fmt + 1;
- 707:	8d 45 10             	lea    0x10(%ebp),%eax
- 70a:	83 c6 01             	add    $0x1,%esi
+ 6e7:	8d 45 10             	lea    0x10(%ebp),%eax
+ 6ea:	83 c6 01             	add    $0x1,%esi
   state = 0;
- 70d:	31 ff                	xor    %edi,%edi
+ 6ed:	31 ff                	xor    %edi,%edi
   ap = (uint*)(void*)&fmt + 1;
- 70f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
- 712:	eb 2f                	jmp    743 <printf+0x53>
- 714:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6ef:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 6f2:	eb 2f                	jmp    723 <printf+0x53>
+ 6f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
- 718:	83 f8 25             	cmp    $0x25,%eax
- 71b:	0f 84 a7 00 00 00    	je     7c8 <printf+0xd8>
+ 6f8:	83 f8 25             	cmp    $0x25,%eax
+ 6fb:	0f 84 a7 00 00 00    	je     7a8 <printf+0xd8>
   write(fd, &c, 1);
- 721:	8d 45 e2             	lea    -0x1e(%ebp),%eax
- 724:	83 ec 04             	sub    $0x4,%esp
- 727:	88 5d e2             	mov    %bl,-0x1e(%ebp)
- 72a:	6a 01                	push   $0x1
- 72c:	50                   	push   %eax
- 72d:	ff 75 08             	pushl  0x8(%ebp)
- 730:	e8 6d fe ff ff       	call   5a2 <write>
- 735:	83 c4 10             	add    $0x10,%esp
- 738:	83 c6 01             	add    $0x1,%esi
+ 701:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 704:	83 ec 04             	sub    $0x4,%esp
+ 707:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 70a:	6a 01                	push   $0x1
+ 70c:	50                   	push   %eax
+ 70d:	ff 75 08             	pushl  0x8(%ebp)
+ 710:	e8 8d fe ff ff       	call   5a2 <write>
+ 715:	83 c4 10             	add    $0x10,%esp
+ 718:	83 c6 01             	add    $0x1,%esi
   for(i = 0; fmt[i]; i++){
- 73b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
- 73f:	84 db                	test   %bl,%bl
- 741:	74 77                	je     7ba <printf+0xca>
+ 71b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 71f:	84 db                	test   %bl,%bl
+ 721:	74 77                	je     79a <printf+0xca>
     if(state == 0){
- 743:	85 ff                	test   %edi,%edi
+ 723:	85 ff                	test   %edi,%edi
     c = fmt[i] & 0xff;
- 745:	0f be cb             	movsbl %bl,%ecx
- 748:	0f b6 c3             	movzbl %bl,%eax
+ 725:	0f be cb             	movsbl %bl,%ecx
+ 728:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
- 74b:	74 cb                	je     718 <printf+0x28>
+ 72b:	74 cb                	je     6f8 <printf+0x28>
         state = '%';
       } else {
         putc(fd, c);
       }
     } else if(state == '%'){
- 74d:	83 ff 25             	cmp    $0x25,%edi
- 750:	75 e6                	jne    738 <printf+0x48>
+ 72d:	83 ff 25             	cmp    $0x25,%edi
+ 730:	75 e6                	jne    718 <printf+0x48>
       if(c == 'd'){
- 752:	83 f8 64             	cmp    $0x64,%eax
- 755:	0f 84 05 01 00 00    	je     860 <printf+0x170>
+ 732:	83 f8 64             	cmp    $0x64,%eax
+ 735:	0f 84 05 01 00 00    	je     840 <printf+0x170>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 75b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 761:	83 f9 70             	cmp    $0x70,%ecx
- 764:	74 72                	je     7d8 <printf+0xe8>
+ 73b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 741:	83 f9 70             	cmp    $0x70,%ecx
+ 744:	74 72                	je     7b8 <printf+0xe8>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 766:	83 f8 73             	cmp    $0x73,%eax
- 769:	0f 84 99 00 00 00    	je     808 <printf+0x118>
+ 746:	83 f8 73             	cmp    $0x73,%eax
+ 749:	0f 84 99 00 00 00    	je     7e8 <printf+0x118>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 76f:	83 f8 63             	cmp    $0x63,%eax
- 772:	0f 84 08 01 00 00    	je     880 <printf+0x190>
+ 74f:	83 f8 63             	cmp    $0x63,%eax
+ 752:	0f 84 08 01 00 00    	je     860 <printf+0x190>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 778:	83 f8 25             	cmp    $0x25,%eax
- 77b:	0f 84 ef 00 00 00    	je     870 <printf+0x180>
+ 758:	83 f8 25             	cmp    $0x25,%eax
+ 75b:	0f 84 ef 00 00 00    	je     850 <printf+0x180>
   write(fd, &c, 1);
- 781:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 784:	83 ec 04             	sub    $0x4,%esp
- 787:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 78b:	6a 01                	push   $0x1
- 78d:	50                   	push   %eax
- 78e:	ff 75 08             	pushl  0x8(%ebp)
- 791:	e8 0c fe ff ff       	call   5a2 <write>
- 796:	83 c4 0c             	add    $0xc,%esp
- 799:	8d 45 e6             	lea    -0x1a(%ebp),%eax
- 79c:	88 5d e6             	mov    %bl,-0x1a(%ebp)
- 79f:	6a 01                	push   $0x1
- 7a1:	50                   	push   %eax
- 7a2:	ff 75 08             	pushl  0x8(%ebp)
- 7a5:	83 c6 01             	add    $0x1,%esi
+ 761:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 764:	83 ec 04             	sub    $0x4,%esp
+ 767:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 76b:	6a 01                	push   $0x1
+ 76d:	50                   	push   %eax
+ 76e:	ff 75 08             	pushl  0x8(%ebp)
+ 771:	e8 2c fe ff ff       	call   5a2 <write>
+ 776:	83 c4 0c             	add    $0xc,%esp
+ 779:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 77c:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 77f:	6a 01                	push   $0x1
+ 781:	50                   	push   %eax
+ 782:	ff 75 08             	pushl  0x8(%ebp)
+ 785:	83 c6 01             	add    $0x1,%esi
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
       }
       state = 0;
- 7a8:	31 ff                	xor    %edi,%edi
+ 788:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 7aa:	e8 f3 fd ff ff       	call   5a2 <write>
+ 78a:	e8 13 fe ff ff       	call   5a2 <write>
   for(i = 0; fmt[i]; i++){
- 7af:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 78f:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
   write(fd, &c, 1);
- 7b3:	83 c4 10             	add    $0x10,%esp
+ 793:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 7b6:	84 db                	test   %bl,%bl
- 7b8:	75 89                	jne    743 <printf+0x53>
+ 796:	84 db                	test   %bl,%bl
+ 798:	75 89                	jne    723 <printf+0x53>
     }
   }
 }
- 7ba:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 7bd:	5b                   	pop    %ebx
- 7be:	5e                   	pop    %esi
- 7bf:	5f                   	pop    %edi
- 7c0:	5d                   	pop    %ebp
- 7c1:	c3                   	ret    
- 7c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 79a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 79d:	5b                   	pop    %ebx
+ 79e:	5e                   	pop    %esi
+ 79f:	5f                   	pop    %edi
+ 7a0:	5d                   	pop    %ebp
+ 7a1:	c3                   	ret    
+ 7a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         state = '%';
- 7c8:	bf 25 00 00 00       	mov    $0x25,%edi
- 7cd:	e9 66 ff ff ff       	jmp    738 <printf+0x48>
- 7d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 7a8:	bf 25 00 00 00       	mov    $0x25,%edi
+ 7ad:	e9 66 ff ff ff       	jmp    718 <printf+0x48>
+ 7b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 7d8:	83 ec 0c             	sub    $0xc,%esp
- 7db:	b9 10 00 00 00       	mov    $0x10,%ecx
- 7e0:	6a 00                	push   $0x0
- 7e2:	8b 7d d4             	mov    -0x2c(%ebp),%edi
- 7e5:	8b 45 08             	mov    0x8(%ebp),%eax
- 7e8:	8b 17                	mov    (%edi),%edx
- 7ea:	e8 61 fe ff ff       	call   650 <printint>
+ 7b8:	83 ec 0c             	sub    $0xc,%esp
+ 7bb:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 7c0:	6a 00                	push   $0x0
+ 7c2:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 7c5:	8b 45 08             	mov    0x8(%ebp),%eax
+ 7c8:	8b 17                	mov    (%edi),%edx
+ 7ca:	e8 61 fe ff ff       	call   630 <printint>
         ap++;
- 7ef:	89 f8                	mov    %edi,%eax
- 7f1:	83 c4 10             	add    $0x10,%esp
+ 7cf:	89 f8                	mov    %edi,%eax
+ 7d1:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 7f4:	31 ff                	xor    %edi,%edi
+ 7d4:	31 ff                	xor    %edi,%edi
         ap++;
- 7f6:	83 c0 04             	add    $0x4,%eax
- 7f9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
- 7fc:	e9 37 ff ff ff       	jmp    738 <printf+0x48>
- 801:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7d6:	83 c0 04             	add    $0x4,%eax
+ 7d9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 7dc:	e9 37 ff ff ff       	jmp    718 <printf+0x48>
+ 7e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 808:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 80b:	8b 08                	mov    (%eax),%ecx
+ 7e8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 7eb:	8b 08                	mov    (%eax),%ecx
         ap++;
- 80d:	83 c0 04             	add    $0x4,%eax
- 810:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 7ed:	83 c0 04             	add    $0x4,%eax
+ 7f0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
         if(s == 0)
- 813:	85 c9                	test   %ecx,%ecx
- 815:	0f 84 8e 00 00 00    	je     8a9 <printf+0x1b9>
+ 7f3:	85 c9                	test   %ecx,%ecx
+ 7f5:	0f 84 8e 00 00 00    	je     889 <printf+0x1b9>
         while(*s != 0){
- 81b:	0f b6 01             	movzbl (%ecx),%eax
+ 7fb:	0f b6 01             	movzbl (%ecx),%eax
       state = 0;
- 81e:	31 ff                	xor    %edi,%edi
+ 7fe:	31 ff                	xor    %edi,%edi
         s = (char*)*ap;
- 820:	89 cb                	mov    %ecx,%ebx
+ 800:	89 cb                	mov    %ecx,%ebx
         while(*s != 0){
- 822:	84 c0                	test   %al,%al
- 824:	0f 84 0e ff ff ff    	je     738 <printf+0x48>
- 82a:	89 75 d0             	mov    %esi,-0x30(%ebp)
- 82d:	89 de                	mov    %ebx,%esi
- 82f:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 832:	8d 7d e3             	lea    -0x1d(%ebp),%edi
- 835:	8d 76 00             	lea    0x0(%esi),%esi
+ 802:	84 c0                	test   %al,%al
+ 804:	0f 84 0e ff ff ff    	je     718 <printf+0x48>
+ 80a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 80d:	89 de                	mov    %ebx,%esi
+ 80f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 812:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 815:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 838:	83 ec 04             	sub    $0x4,%esp
+ 818:	83 ec 04             	sub    $0x4,%esp
           s++;
- 83b:	83 c6 01             	add    $0x1,%esi
- 83e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+ 81b:	83 c6 01             	add    $0x1,%esi
+ 81e:	88 45 e3             	mov    %al,-0x1d(%ebp)
   write(fd, &c, 1);
- 841:	6a 01                	push   $0x1
- 843:	57                   	push   %edi
- 844:	53                   	push   %ebx
- 845:	e8 58 fd ff ff       	call   5a2 <write>
+ 821:	6a 01                	push   $0x1
+ 823:	57                   	push   %edi
+ 824:	53                   	push   %ebx
+ 825:	e8 78 fd ff ff       	call   5a2 <write>
         while(*s != 0){
- 84a:	0f b6 06             	movzbl (%esi),%eax
- 84d:	83 c4 10             	add    $0x10,%esp
- 850:	84 c0                	test   %al,%al
- 852:	75 e4                	jne    838 <printf+0x148>
- 854:	8b 75 d0             	mov    -0x30(%ebp),%esi
+ 82a:	0f b6 06             	movzbl (%esi),%eax
+ 82d:	83 c4 10             	add    $0x10,%esp
+ 830:	84 c0                	test   %al,%al
+ 832:	75 e4                	jne    818 <printf+0x148>
+ 834:	8b 75 d0             	mov    -0x30(%ebp),%esi
       state = 0;
- 857:	31 ff                	xor    %edi,%edi
- 859:	e9 da fe ff ff       	jmp    738 <printf+0x48>
- 85e:	66 90                	xchg   %ax,%ax
+ 837:	31 ff                	xor    %edi,%edi
+ 839:	e9 da fe ff ff       	jmp    718 <printf+0x48>
+ 83e:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 10, 1);
- 860:	83 ec 0c             	sub    $0xc,%esp
- 863:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 868:	6a 01                	push   $0x1
- 86a:	e9 73 ff ff ff       	jmp    7e2 <printf+0xf2>
- 86f:	90                   	nop
+ 840:	83 ec 0c             	sub    $0xc,%esp
+ 843:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 848:	6a 01                	push   $0x1
+ 84a:	e9 73 ff ff ff       	jmp    7c2 <printf+0xf2>
+ 84f:	90                   	nop
   write(fd, &c, 1);
- 870:	83 ec 04             	sub    $0x4,%esp
- 873:	88 5d e5             	mov    %bl,-0x1b(%ebp)
- 876:	8d 45 e5             	lea    -0x1b(%ebp),%eax
- 879:	6a 01                	push   $0x1
- 87b:	e9 21 ff ff ff       	jmp    7a1 <printf+0xb1>
+ 850:	83 ec 04             	sub    $0x4,%esp
+ 853:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 856:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 859:	6a 01                	push   $0x1
+ 85b:	e9 21 ff ff ff       	jmp    781 <printf+0xb1>
         putc(fd, *ap);
- 880:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 860:	8b 7d d4             	mov    -0x2c(%ebp),%edi
   write(fd, &c, 1);
- 883:	83 ec 04             	sub    $0x4,%esp
+ 863:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 886:	8b 07                	mov    (%edi),%eax
+ 866:	8b 07                	mov    (%edi),%eax
   write(fd, &c, 1);
- 888:	6a 01                	push   $0x1
+ 868:	6a 01                	push   $0x1
         ap++;
- 88a:	83 c7 04             	add    $0x4,%edi
+ 86a:	83 c7 04             	add    $0x4,%edi
         putc(fd, *ap);
- 88d:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 86d:	88 45 e4             	mov    %al,-0x1c(%ebp)
   write(fd, &c, 1);
- 890:	8d 45 e4             	lea    -0x1c(%ebp),%eax
- 893:	50                   	push   %eax
- 894:	ff 75 08             	pushl  0x8(%ebp)
- 897:	e8 06 fd ff ff       	call   5a2 <write>
+ 870:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 873:	50                   	push   %eax
+ 874:	ff 75 08             	pushl  0x8(%ebp)
+ 877:	e8 26 fd ff ff       	call   5a2 <write>
         ap++;
- 89c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
- 89f:	83 c4 10             	add    $0x10,%esp
+ 87c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 87f:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 8a2:	31 ff                	xor    %edi,%edi
- 8a4:	e9 8f fe ff ff       	jmp    738 <printf+0x48>
+ 882:	31 ff                	xor    %edi,%edi
+ 884:	e9 8f fe ff ff       	jmp    718 <printf+0x48>
           s = "(null)";
- 8a9:	bb 7e 0a 00 00       	mov    $0xa7e,%ebx
+ 889:	bb 5e 0a 00 00       	mov    $0xa5e,%ebx
         while(*s != 0){
- 8ae:	b8 28 00 00 00       	mov    $0x28,%eax
- 8b3:	e9 72 ff ff ff       	jmp    82a <printf+0x13a>
- 8b8:	66 90                	xchg   %ax,%ax
- 8ba:	66 90                	xchg   %ax,%ax
- 8bc:	66 90                	xchg   %ax,%ax
- 8be:	66 90                	xchg   %ax,%ax
+ 88e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 893:	e9 72 ff ff ff       	jmp    80a <printf+0x13a>
+ 898:	66 90                	xchg   %ax,%ax
+ 89a:	66 90                	xchg   %ax,%ax
+ 89c:	66 90                	xchg   %ax,%ax
+ 89e:	66 90                	xchg   %ax,%ax
 
-000008c0 <free>:
+000008a0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 8c0:	55                   	push   %ebp
+ 8a0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 8c1:	a1 20 0e 00 00       	mov    0xe20,%eax
+ 8a1:	a1 00 0e 00 00       	mov    0xe00,%eax
 {
- 8c6:	89 e5                	mov    %esp,%ebp
- 8c8:	57                   	push   %edi
- 8c9:	56                   	push   %esi
- 8ca:	53                   	push   %ebx
- 8cb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8a6:	89 e5                	mov    %esp,%ebp
+ 8a8:	57                   	push   %edi
+ 8a9:	56                   	push   %esi
+ 8aa:	53                   	push   %ebx
+ 8ab:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 8ce:	8d 4b f8             	lea    -0x8(%ebx),%ecx
- 8d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8ae:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 8b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 8d8:	39 c8                	cmp    %ecx,%eax
- 8da:	8b 10                	mov    (%eax),%edx
- 8dc:	73 32                	jae    910 <free+0x50>
- 8de:	39 d1                	cmp    %edx,%ecx
- 8e0:	72 04                	jb     8e6 <free+0x26>
+ 8b8:	39 c8                	cmp    %ecx,%eax
+ 8ba:	8b 10                	mov    (%eax),%edx
+ 8bc:	73 32                	jae    8f0 <free+0x50>
+ 8be:	39 d1                	cmp    %edx,%ecx
+ 8c0:	72 04                	jb     8c6 <free+0x26>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 8e2:	39 d0                	cmp    %edx,%eax
- 8e4:	72 32                	jb     918 <free+0x58>
+ 8c2:	39 d0                	cmp    %edx,%eax
+ 8c4:	72 32                	jb     8f8 <free+0x58>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 8e6:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 8e9:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 8ec:	39 fa                	cmp    %edi,%edx
- 8ee:	74 30                	je     920 <free+0x60>
+ 8c6:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 8c9:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 8cc:	39 fa                	cmp    %edi,%edx
+ 8ce:	74 30                	je     900 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 8f0:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 8d0:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 8f3:	8b 50 04             	mov    0x4(%eax),%edx
- 8f6:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 8f9:	39 f1                	cmp    %esi,%ecx
- 8fb:	74 3a                	je     937 <free+0x77>
+ 8d3:	8b 50 04             	mov    0x4(%eax),%edx
+ 8d6:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 8d9:	39 f1                	cmp    %esi,%ecx
+ 8db:	74 3a                	je     917 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 8fd:	89 08                	mov    %ecx,(%eax)
+ 8dd:	89 08                	mov    %ecx,(%eax)
   freep = p;
- 8ff:	a3 20 0e 00 00       	mov    %eax,0xe20
+ 8df:	a3 00 0e 00 00       	mov    %eax,0xe00
 }
- 904:	5b                   	pop    %ebx
- 905:	5e                   	pop    %esi
- 906:	5f                   	pop    %edi
- 907:	5d                   	pop    %ebp
- 908:	c3                   	ret    
- 909:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8e4:	5b                   	pop    %ebx
+ 8e5:	5e                   	pop    %esi
+ 8e6:	5f                   	pop    %edi
+ 8e7:	5d                   	pop    %ebp
+ 8e8:	c3                   	ret    
+ 8e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 910:	39 d0                	cmp    %edx,%eax
- 912:	72 04                	jb     918 <free+0x58>
- 914:	39 d1                	cmp    %edx,%ecx
- 916:	72 ce                	jb     8e6 <free+0x26>
-{
- 918:	89 d0                	mov    %edx,%eax
- 91a:	eb bc                	jmp    8d8 <free+0x18>
- 91c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 8f0:	39 d0                	cmp    %edx,%eax
+ 8f2:	72 04                	jb     8f8 <free+0x58>
+ 8f4:	39 d1                	cmp    %edx,%ecx
+ 8f6:	72 ce                	jb     8c6 <free+0x26>
+{
+ 8f8:	89 d0                	mov    %edx,%eax
+ 8fa:	eb bc                	jmp    8b8 <free+0x18>
+ 8fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     bp->s.size += p->s.ptr->s.size;
- 920:	03 72 04             	add    0x4(%edx),%esi
- 923:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 900:	03 72 04             	add    0x4(%edx),%esi
+ 903:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 926:	8b 10                	mov    (%eax),%edx
- 928:	8b 12                	mov    (%edx),%edx
- 92a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 906:	8b 10                	mov    (%eax),%edx
+ 908:	8b 12                	mov    (%edx),%edx
+ 90a:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 92d:	8b 50 04             	mov    0x4(%eax),%edx
- 930:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 933:	39 f1                	cmp    %esi,%ecx
- 935:	75 c6                	jne    8fd <free+0x3d>
+ 90d:	8b 50 04             	mov    0x4(%eax),%edx
+ 910:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 913:	39 f1                	cmp    %esi,%ecx
+ 915:	75 c6                	jne    8dd <free+0x3d>
     p->s.size += bp->s.size;
- 937:	03 53 fc             	add    -0x4(%ebx),%edx
+ 917:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 93a:	a3 20 0e 00 00       	mov    %eax,0xe20
+ 91a:	a3 00 0e 00 00       	mov    %eax,0xe00
     p->s.size += bp->s.size;
- 93f:	89 50 04             	mov    %edx,0x4(%eax)
+ 91f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 942:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 945:	89 10                	mov    %edx,(%eax)
+ 922:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 925:	89 10                	mov    %edx,(%eax)
 }
- 947:	5b                   	pop    %ebx
- 948:	5e                   	pop    %esi
- 949:	5f                   	pop    %edi
- 94a:	5d                   	pop    %ebp
- 94b:	c3                   	ret    
- 94c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 927:	5b                   	pop    %ebx
+ 928:	5e                   	pop    %esi
+ 929:	5f                   	pop    %edi
+ 92a:	5d                   	pop    %ebp
+ 92b:	c3                   	ret    
+ 92c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-00000950 <malloc>:
+00000930 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 950:	55                   	push   %ebp
- 951:	89 e5                	mov    %esp,%ebp
- 953:	57                   	push   %edi
- 954:	56                   	push   %esi
- 955:	53                   	push   %ebx
- 956:	83 ec 0c             	sub    $0xc,%esp
+ 930:	55                   	push   %ebp
+ 931:	89 e5                	mov    %esp,%ebp
+ 933:	57                   	push   %edi
+ 934:	56                   	push   %esi
+ 935:	53                   	push   %ebx
+ 936:	83 ec 0c             	sub    $0xc,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 959:	8b 45 08             	mov    0x8(%ebp),%eax
+ 939:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 95c:	8b 15 20 0e 00 00    	mov    0xe20,%edx
+ 93c:	8b 15 00 0e 00 00    	mov    0xe00,%edx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 962:	8d 78 07             	lea    0x7(%eax),%edi
- 965:	c1 ef 03             	shr    $0x3,%edi
- 968:	83 c7 01             	add    $0x1,%edi
+ 942:	8d 78 07             	lea    0x7(%eax),%edi
+ 945:	c1 ef 03             	shr    $0x3,%edi
+ 948:	83 c7 01             	add    $0x1,%edi
   if((prevp = freep) == 0){
- 96b:	85 d2                	test   %edx,%edx
- 96d:	0f 84 9d 00 00 00    	je     a10 <malloc+0xc0>
- 973:	8b 02                	mov    (%edx),%eax
- 975:	8b 48 04             	mov    0x4(%eax),%ecx
+ 94b:	85 d2                	test   %edx,%edx
+ 94d:	0f 84 9d 00 00 00    	je     9f0 <malloc+0xc0>
+ 953:	8b 02                	mov    (%edx),%eax
+ 955:	8b 48 04             	mov    0x4(%eax),%ecx
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
     if(p->s.size >= nunits){
- 978:	39 cf                	cmp    %ecx,%edi
- 97a:	76 6c                	jbe    9e8 <malloc+0x98>
- 97c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
- 982:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 987:	0f 43 df             	cmovae %edi,%ebx
+ 958:	39 cf                	cmp    %ecx,%edi
+ 95a:	76 6c                	jbe    9c8 <malloc+0x98>
+ 95c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 962:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 967:	0f 43 df             	cmovae %edi,%ebx
   p = sbrk(nu * sizeof(Header));
- 98a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
- 991:	eb 0e                	jmp    9a1 <malloc+0x51>
- 993:	90                   	nop
- 994:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 96a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 971:	eb 0e                	jmp    981 <malloc+0x51>
+ 973:	90                   	nop
+ 974:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 998:	8b 02                	mov    (%edx),%eax
+ 978:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 99a:	8b 48 04             	mov    0x4(%eax),%ecx
- 99d:	39 f9                	cmp    %edi,%ecx
- 99f:	73 47                	jae    9e8 <malloc+0x98>
+ 97a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 97d:	39 f9                	cmp    %edi,%ecx
+ 97f:	73 47                	jae    9c8 <malloc+0x98>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 9a1:	39 05 20 0e 00 00    	cmp    %eax,0xe20
- 9a7:	89 c2                	mov    %eax,%edx
- 9a9:	75 ed                	jne    998 <malloc+0x48>
+ 981:	39 05 00 0e 00 00    	cmp    %eax,0xe00
+ 987:	89 c2                	mov    %eax,%edx
+ 989:	75 ed                	jne    978 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 9ab:	83 ec 0c             	sub    $0xc,%esp
- 9ae:	56                   	push   %esi
- 9af:	e8 56 fc ff ff       	call   60a <sbrk>
+ 98b:	83 ec 0c             	sub    $0xc,%esp
+ 98e:	56                   	push   %esi
+ 98f:	e8 76 fc ff ff       	call   60a <sbrk>
   if(p == (char*)-1)
- 9b4:	83 c4 10             	add    $0x10,%esp
- 9b7:	83 f8 ff             	cmp    $0xffffffff,%eax
- 9ba:	74 1c                	je     9d8 <malloc+0x88>
+ 994:	83 c4 10             	add    $0x10,%esp
+ 997:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 99a:	74 1c                	je     9b8 <malloc+0x88>
   hp->s.size = nu;
- 9bc:	89 58 04             	mov    %ebx,0x4(%eax)
+ 99c:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 9bf:	83 ec 0c             	sub    $0xc,%esp
- 9c2:	83 c0 08             	add    $0x8,%eax
- 9c5:	50                   	push   %eax
- 9c6:	e8 f5 fe ff ff       	call   8c0 <free>
+ 99f:	83 ec 0c             	sub    $0xc,%esp
+ 9a2:	83 c0 08             	add    $0x8,%eax
+ 9a5:	50                   	push   %eax
+ 9a6:	e8 f5 fe ff ff       	call   8a0 <free>
   return freep;
- 9cb:	8b 15 20 0e 00 00    	mov    0xe20,%edx
+ 9ab:	8b 15 00 0e 00 00    	mov    0xe00,%edx
       if((p = morecore(nunits)) == 0)
- 9d1:	83 c4 10             	add    $0x10,%esp
- 9d4:	85 d2                	test   %edx,%edx
- 9d6:	75 c0                	jne    998 <malloc+0x48>
+ 9b1:	83 c4 10             	add    $0x10,%esp
+ 9b4:	85 d2                	test   %edx,%edx
+ 9b6:	75 c0                	jne    978 <malloc+0x48>
         return 0;
   }
 }
- 9d8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 9b8:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 9db:	31 c0                	xor    %eax,%eax
+ 9bb:	31 c0                	xor    %eax,%eax
 }
- 9dd:	5b                   	pop    %ebx
- 9de:	5e                   	pop    %esi
- 9df:	5f                   	pop    %edi
- 9e0:	5d                   	pop    %ebp
- 9e1:	c3                   	ret    
- 9e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 9bd:	5b                   	pop    %ebx
+ 9be:	5e                   	pop    %esi
+ 9bf:	5f                   	pop    %edi
+ 9c0:	5d                   	pop    %ebp
+ 9c1:	c3                   	ret    
+ 9c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 9e8:	39 cf                	cmp    %ecx,%edi
- 9ea:	74 54                	je     a40 <malloc+0xf0>
+ 9c8:	39 cf                	cmp    %ecx,%edi
+ 9ca:	74 54                	je     a20 <malloc+0xf0>
         p->s.size -= nunits;
- 9ec:	29 f9                	sub    %edi,%ecx
- 9ee:	89 48 04             	mov    %ecx,0x4(%eax)
+ 9cc:	29 f9                	sub    %edi,%ecx
+ 9ce:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 9f1:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ 9d1:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 9f4:	89 78 04             	mov    %edi,0x4(%eax)
+ 9d4:	89 78 04             	mov    %edi,0x4(%eax)
       freep = prevp;
- 9f7:	89 15 20 0e 00 00    	mov    %edx,0xe20
+ 9d7:	89 15 00 0e 00 00    	mov    %edx,0xe00
 }
- 9fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 9dd:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- a00:	83 c0 08             	add    $0x8,%eax
+ 9e0:	83 c0 08             	add    $0x8,%eax
 }
- a03:	5b                   	pop    %ebx
- a04:	5e                   	pop    %esi
- a05:	5f                   	pop    %edi
- a06:	5d                   	pop    %ebp
- a07:	c3                   	ret    
- a08:	90                   	nop
- a09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 9e3:	5b                   	pop    %ebx
+ 9e4:	5e                   	pop    %esi
+ 9e5:	5f                   	pop    %edi
+ 9e6:	5d                   	pop    %ebp
+ 9e7:	c3                   	ret    
+ 9e8:	90                   	nop
+ 9e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     base.s.ptr = freep = prevp = &base;
- a10:	c7 05 20 0e 00 00 24 	movl   $0xe24,0xe20
- a17:	0e 00 00 
- a1a:	c7 05 24 0e 00 00 24 	movl   $0xe24,0xe24
- a21:	0e 00 00 
+ 9f0:	c7 05 00 0e 00 00 04 	movl   $0xe04,0xe00
+ 9f7:	0e 00 00 
+ 9fa:	c7 05 04 0e 00 00 04 	movl   $0xe04,0xe04
+ a01:	0e 00 00 
     base.s.size = 0;
- a24:	b8 24 0e 00 00       	mov    $0xe24,%eax
- a29:	c7 05 28 0e 00 00 00 	movl   $0x0,0xe28
- a30:	00 00 00 
- a33:	e9 44 ff ff ff       	jmp    97c <malloc+0x2c>
- a38:	90                   	nop
- a39:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a04:	b8 04 0e 00 00       	mov    $0xe04,%eax
+ a09:	c7 05 08 0e 00 00 00 	movl   $0x0,0xe08
+ a10:	00 00 00 
+ a13:	e9 44 ff ff ff       	jmp    95c <malloc+0x2c>
+ a18:	90                   	nop
+ a19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         prevp->s.ptr = p->s.ptr;
- a40:	8b 08                	mov    (%eax),%ecx
- a42:	89 0a                	mov    %ecx,(%edx)
- a44:	eb b1                	jmp    9f7 <malloc+0xa7>
+ a20:	8b 08                	mov    (%eax),%ecx
+ a22:	89 0a                	mov    %ecx,(%edx)
+ a24:	eb b1                	jmp    9d7 <malloc+0xa7>
Binary files main/grep.o and xv6-public/grep.o differ
diff -urN main/grep.sym xv6-public/grep.sym
--- main/grep.sym	2022-09-26 21:21:15.860208000 +0530
+++ xv6-public/grep.sym	2022-10-31 22:34:16.617696865 +0530
@@ -1,7 +1,7 @@
 00000000 .text
-00000a48 .rodata
-00000a9c .eh_frame
-00000e20 .bss
+00000a28 .rodata
+00000a7c .eh_frame
+00000e00 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,21 +13,20 @@
 00000000 grep.c
 00000000 ulib.c
 00000000 printf.c
-00000650 printint
-00000a88 digits.1050
+00000630 printint
+00000a68 digits.1044
 00000000 umalloc.c
-00000e20 freep
-00000e24 base
+00000e00 freep
+00000e04 base
 00000330 strcpy
-000006f0 printf
-00000632 thread_exit
+000006d0 printf
 00000550 memmove
 00000110 matchhere
 000005ca mknod
 00000440 gets
 00000602 getpid
 00000230 grep
-00000950 malloc
+00000930 malloc
 00000612 sleep
 00000592 pipe
 000005a2 write
@@ -41,26 +40,24 @@
 0000057a fork
 0000060a sbrk
 0000061a uptime
-00000e20 __bss_start
+00000e00 __bss_start
 000003e0 memset
 00000000 main
 000000b0 matchstar
 00000360 strcmp
 000005fa dup
-00000e40 buf
+00000e20 buf
 000004c0 stat
-00000e20 _edata
-00001240 _end
+00000e00 _edata
+00001220 _end
 000001d0 match
 000005e2 link
 00000582 exit
 00000510 atoi
-0000063a draw
+00000622 draw
 000003b0 strlen
 000005c2 open
 00000400 strchr
-00000622 thread_create
 000005ea mkdir
 000005aa close
-0000062a thread_join
-000008c0 free
+000008a0 free
Binary files main/ide.o and xv6-public/ide.o differ
Binary files main/_init and xv6-public/_init differ
diff -urN main/init.asm xv6-public/init.asm
--- main/init.asm	2022-09-26 21:21:15.956256000 +0530
+++ xv6-public/init.asm	2022-10-31 22:34:16.689732868 +0530
@@ -23,7 +23,7 @@
   if(open("console", O_RDWR) < 0){
    f:	83 ec 08             	sub    $0x8,%esp
   12:	6a 02                	push   $0x2
-  14:	68 08 08 00 00       	push   $0x808
+  14:	68 e8 07 00 00       	push   $0x7e8
   19:	e8 64 03 00 00       	call   382 <open>
   1e:	83 c4 10             	add    $0x10,%esp
   21:	85 c0                	test   %eax,%eax
@@ -44,9 +44,9 @@
   for(;;){
     printf(1, "init: starting sh\n");
   48:	83 ec 08             	sub    $0x8,%esp
-  4b:	68 10 08 00 00       	push   $0x810
+  4b:	68 f0 07 00 00       	push   $0x7f0
   50:	6a 01                	push   $0x1
-  52:	e8 59 04 00 00       	call   4b0 <printf>
+  52:	e8 39 04 00 00       	call   490 <printf>
     pid = fork();
   57:	e8 de 02 00 00       	call   33a <fork>
     if(pid < 0){
@@ -75,44 +75,44 @@
   7b:	74 cb                	je     48 <main+0x48>
       printf(1, "zombie!\n");
   7d:	83 ec 08             	sub    $0x8,%esp
-  80:	68 4f 08 00 00       	push   $0x84f
+  80:	68 2f 08 00 00       	push   $0x82f
   85:	6a 01                	push   $0x1
-  87:	e8 24 04 00 00       	call   4b0 <printf>
+  87:	e8 04 04 00 00       	call   490 <printf>
   8c:	83 c4 10             	add    $0x10,%esp
   8f:	eb df                	jmp    70 <main+0x70>
       printf(1, "init: fork failed\n");
   91:	53                   	push   %ebx
   92:	53                   	push   %ebx
-  93:	68 23 08 00 00       	push   $0x823
+  93:	68 03 08 00 00       	push   $0x803
   98:	6a 01                	push   $0x1
-  9a:	e8 11 04 00 00       	call   4b0 <printf>
+  9a:	e8 f1 03 00 00       	call   490 <printf>
       exit();
   9f:	e8 9e 02 00 00       	call   342 <exit>
       exec("sh", argv);
   a4:	50                   	push   %eax
   a5:	50                   	push   %eax
-  a6:	68 08 0b 00 00       	push   $0xb08
-  ab:	68 36 08 00 00       	push   $0x836
+  a6:	68 e8 0a 00 00       	push   $0xae8
+  ab:	68 16 08 00 00       	push   $0x816
   b0:	e8 c5 02 00 00       	call   37a <exec>
       printf(1, "init: exec sh failed\n");
   b5:	5a                   	pop    %edx
   b6:	59                   	pop    %ecx
-  b7:	68 39 08 00 00       	push   $0x839
+  b7:	68 19 08 00 00       	push   $0x819
   bc:	6a 01                	push   $0x1
-  be:	e8 ed 03 00 00       	call   4b0 <printf>
+  be:	e8 cd 03 00 00       	call   490 <printf>
       exit();
   c3:	e8 7a 02 00 00       	call   342 <exit>
     mknod("console", 1, 1);
   c8:	50                   	push   %eax
   c9:	6a 01                	push   $0x1
   cb:	6a 01                	push   $0x1
-  cd:	68 08 08 00 00       	push   $0x808
+  cd:	68 e8 07 00 00       	push   $0x7e8
   d2:	e8 b3 02 00 00       	call   38a <mknod>
     open("console", O_RDWR);
   d7:	58                   	pop    %eax
   d8:	5a                   	pop    %edx
   d9:	6a 02                	push   $0x2
-  db:	68 08 08 00 00       	push   $0x808
+  db:	68 e8 07 00 00       	push   $0x7e8
   e0:	e8 9d 02 00 00       	call   382 <open>
   e5:	83 c4 10             	add    $0x10,%esp
   e8:	e9 3c ff ff ff       	jmp    29 <main+0x29>
@@ -637,614 +637,593 @@
  3df:	cd 40                	int    $0x40
  3e1:	c3                   	ret    
 
-000003e2 <thread_create>:
-SYSCALL(thread_create)
+000003e2 <draw>:
+SYSCALL(draw)
  3e2:	b8 16 00 00 00       	mov    $0x16,%eax
  3e7:	cd 40                	int    $0x40
  3e9:	c3                   	ret    
+ 3ea:	66 90                	xchg   %ax,%ax
+ 3ec:	66 90                	xchg   %ax,%ax
+ 3ee:	66 90                	xchg   %ax,%ax
 
-000003ea <thread_join>:
-SYSCALL(thread_join)
- 3ea:	b8 18 00 00 00       	mov    $0x18,%eax
- 3ef:	cd 40                	int    $0x40
- 3f1:	c3                   	ret    
-
-000003f2 <thread_exit>:
-SYSCALL(thread_exit)
- 3f2:	b8 17 00 00 00       	mov    $0x17,%eax
- 3f7:	cd 40                	int    $0x40
- 3f9:	c3                   	ret    
-
-000003fa <draw>:
- 3fa:	b8 19 00 00 00       	mov    $0x19,%eax
- 3ff:	cd 40                	int    $0x40
- 401:	c3                   	ret    
- 402:	66 90                	xchg   %ax,%ax
- 404:	66 90                	xchg   %ax,%ax
- 406:	66 90                	xchg   %ax,%ax
- 408:	66 90                	xchg   %ax,%ax
- 40a:	66 90                	xchg   %ax,%ax
- 40c:	66 90                	xchg   %ax,%ax
- 40e:	66 90                	xchg   %ax,%ax
-
-00000410 <printint>:
+000003f0 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 410:	55                   	push   %ebp
- 411:	89 e5                	mov    %esp,%ebp
- 413:	57                   	push   %edi
- 414:	56                   	push   %esi
- 415:	53                   	push   %ebx
- 416:	83 ec 3c             	sub    $0x3c,%esp
+ 3f0:	55                   	push   %ebp
+ 3f1:	89 e5                	mov    %esp,%ebp
+ 3f3:	57                   	push   %edi
+ 3f4:	56                   	push   %esi
+ 3f5:	53                   	push   %ebx
+ 3f6:	83 ec 3c             	sub    $0x3c,%esp
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 419:	85 d2                	test   %edx,%edx
+ 3f9:	85 d2                	test   %edx,%edx
 {
- 41b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3fb:	89 45 c0             	mov    %eax,-0x40(%ebp)
     neg = 1;
     x = -xx;
- 41e:	89 d0                	mov    %edx,%eax
+ 3fe:	89 d0                	mov    %edx,%eax
   if(sgn && xx < 0){
- 420:	79 76                	jns    498 <printint+0x88>
- 422:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 426:	74 70                	je     498 <printint+0x88>
+ 400:	79 76                	jns    478 <printint+0x88>
+ 402:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 406:	74 70                	je     478 <printint+0x88>
     x = -xx;
- 428:	f7 d8                	neg    %eax
+ 408:	f7 d8                	neg    %eax
     neg = 1;
- 42a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+ 40a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
   } else {
     x = xx;
   }
 
   i = 0;
- 431:	31 f6                	xor    %esi,%esi
- 433:	8d 5d d7             	lea    -0x29(%ebp),%ebx
- 436:	eb 0a                	jmp    442 <printint+0x32>
- 438:	90                   	nop
- 439:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 411:	31 f6                	xor    %esi,%esi
+ 413:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 416:	eb 0a                	jmp    422 <printint+0x32>
+ 418:	90                   	nop
+ 419:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   do{
     buf[i++] = digits[x % base];
- 440:	89 fe                	mov    %edi,%esi
- 442:	31 d2                	xor    %edx,%edx
- 444:	8d 7e 01             	lea    0x1(%esi),%edi
- 447:	f7 f1                	div    %ecx
- 449:	0f b6 92 60 08 00 00 	movzbl 0x860(%edx),%edx
+ 420:	89 fe                	mov    %edi,%esi
+ 422:	31 d2                	xor    %edx,%edx
+ 424:	8d 7e 01             	lea    0x1(%esi),%edi
+ 427:	f7 f1                	div    %ecx
+ 429:	0f b6 92 40 08 00 00 	movzbl 0x840(%edx),%edx
   }while((x /= base) != 0);
- 450:	85 c0                	test   %eax,%eax
+ 430:	85 c0                	test   %eax,%eax
     buf[i++] = digits[x % base];
- 452:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+ 432:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
   }while((x /= base) != 0);
- 455:	75 e9                	jne    440 <printint+0x30>
+ 435:	75 e9                	jne    420 <printint+0x30>
   if(neg)
- 457:	8b 45 c4             	mov    -0x3c(%ebp),%eax
- 45a:	85 c0                	test   %eax,%eax
- 45c:	74 08                	je     466 <printint+0x56>
+ 437:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 43a:	85 c0                	test   %eax,%eax
+ 43c:	74 08                	je     446 <printint+0x56>
     buf[i++] = '-';
- 45e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
- 463:	8d 7e 02             	lea    0x2(%esi),%edi
- 466:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
- 46a:	8b 7d c0             	mov    -0x40(%ebp),%edi
- 46d:	8d 76 00             	lea    0x0(%esi),%esi
- 470:	0f b6 06             	movzbl (%esi),%eax
+ 43e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 443:	8d 7e 02             	lea    0x2(%esi),%edi
+ 446:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 44a:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 44d:	8d 76 00             	lea    0x0(%esi),%esi
+ 450:	0f b6 06             	movzbl (%esi),%eax
   write(fd, &c, 1);
- 473:	83 ec 04             	sub    $0x4,%esp
- 476:	83 ee 01             	sub    $0x1,%esi
- 479:	6a 01                	push   $0x1
- 47b:	53                   	push   %ebx
- 47c:	57                   	push   %edi
- 47d:	88 45 d7             	mov    %al,-0x29(%ebp)
- 480:	e8 dd fe ff ff       	call   362 <write>
+ 453:	83 ec 04             	sub    $0x4,%esp
+ 456:	83 ee 01             	sub    $0x1,%esi
+ 459:	6a 01                	push   $0x1
+ 45b:	53                   	push   %ebx
+ 45c:	57                   	push   %edi
+ 45d:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 460:	e8 fd fe ff ff       	call   362 <write>
 
   while(--i >= 0)
- 485:	83 c4 10             	add    $0x10,%esp
- 488:	39 de                	cmp    %ebx,%esi
- 48a:	75 e4                	jne    470 <printint+0x60>
+ 465:	83 c4 10             	add    $0x10,%esp
+ 468:	39 de                	cmp    %ebx,%esi
+ 46a:	75 e4                	jne    450 <printint+0x60>
     putc(fd, buf[i]);
 }
- 48c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 48f:	5b                   	pop    %ebx
- 490:	5e                   	pop    %esi
- 491:	5f                   	pop    %edi
- 492:	5d                   	pop    %ebp
- 493:	c3                   	ret    
- 494:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 46c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 46f:	5b                   	pop    %ebx
+ 470:	5e                   	pop    %esi
+ 471:	5f                   	pop    %edi
+ 472:	5d                   	pop    %ebp
+ 473:	c3                   	ret    
+ 474:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 498:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
- 49f:	eb 90                	jmp    431 <printint+0x21>
- 4a1:	eb 0d                	jmp    4b0 <printf>
- 4a3:	90                   	nop
- 4a4:	90                   	nop
- 4a5:	90                   	nop
- 4a6:	90                   	nop
- 4a7:	90                   	nop
- 4a8:	90                   	nop
- 4a9:	90                   	nop
- 4aa:	90                   	nop
- 4ab:	90                   	nop
- 4ac:	90                   	nop
- 4ad:	90                   	nop
- 4ae:	90                   	nop
- 4af:	90                   	nop
+ 478:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 47f:	eb 90                	jmp    411 <printint+0x21>
+ 481:	eb 0d                	jmp    490 <printf>
+ 483:	90                   	nop
+ 484:	90                   	nop
+ 485:	90                   	nop
+ 486:	90                   	nop
+ 487:	90                   	nop
+ 488:	90                   	nop
+ 489:	90                   	nop
+ 48a:	90                   	nop
+ 48b:	90                   	nop
+ 48c:	90                   	nop
+ 48d:	90                   	nop
+ 48e:	90                   	nop
+ 48f:	90                   	nop
 
-000004b0 <printf>:
+00000490 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 4b0:	55                   	push   %ebp
- 4b1:	89 e5                	mov    %esp,%ebp
- 4b3:	57                   	push   %edi
- 4b4:	56                   	push   %esi
- 4b5:	53                   	push   %ebx
- 4b6:	83 ec 2c             	sub    $0x2c,%esp
+ 490:	55                   	push   %ebp
+ 491:	89 e5                	mov    %esp,%ebp
+ 493:	57                   	push   %edi
+ 494:	56                   	push   %esi
+ 495:	53                   	push   %ebx
+ 496:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 4b9:	8b 75 0c             	mov    0xc(%ebp),%esi
- 4bc:	0f b6 1e             	movzbl (%esi),%ebx
- 4bf:	84 db                	test   %bl,%bl
- 4c1:	0f 84 b3 00 00 00    	je     57a <printf+0xca>
+ 499:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 49c:	0f b6 1e             	movzbl (%esi),%ebx
+ 49f:	84 db                	test   %bl,%bl
+ 4a1:	0f 84 b3 00 00 00    	je     55a <printf+0xca>
   ap = (uint*)(void*)&fmt + 1;
- 4c7:	8d 45 10             	lea    0x10(%ebp),%eax
- 4ca:	83 c6 01             	add    $0x1,%esi
+ 4a7:	8d 45 10             	lea    0x10(%ebp),%eax
+ 4aa:	83 c6 01             	add    $0x1,%esi
   state = 0;
- 4cd:	31 ff                	xor    %edi,%edi
+ 4ad:	31 ff                	xor    %edi,%edi
   ap = (uint*)(void*)&fmt + 1;
- 4cf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
- 4d2:	eb 2f                	jmp    503 <printf+0x53>
- 4d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4af:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 4b2:	eb 2f                	jmp    4e3 <printf+0x53>
+ 4b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
- 4d8:	83 f8 25             	cmp    $0x25,%eax
- 4db:	0f 84 a7 00 00 00    	je     588 <printf+0xd8>
+ 4b8:	83 f8 25             	cmp    $0x25,%eax
+ 4bb:	0f 84 a7 00 00 00    	je     568 <printf+0xd8>
   write(fd, &c, 1);
- 4e1:	8d 45 e2             	lea    -0x1e(%ebp),%eax
- 4e4:	83 ec 04             	sub    $0x4,%esp
- 4e7:	88 5d e2             	mov    %bl,-0x1e(%ebp)
- 4ea:	6a 01                	push   $0x1
- 4ec:	50                   	push   %eax
- 4ed:	ff 75 08             	pushl  0x8(%ebp)
- 4f0:	e8 6d fe ff ff       	call   362 <write>
- 4f5:	83 c4 10             	add    $0x10,%esp
- 4f8:	83 c6 01             	add    $0x1,%esi
+ 4c1:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 4c4:	83 ec 04             	sub    $0x4,%esp
+ 4c7:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 4ca:	6a 01                	push   $0x1
+ 4cc:	50                   	push   %eax
+ 4cd:	ff 75 08             	pushl  0x8(%ebp)
+ 4d0:	e8 8d fe ff ff       	call   362 <write>
+ 4d5:	83 c4 10             	add    $0x10,%esp
+ 4d8:	83 c6 01             	add    $0x1,%esi
   for(i = 0; fmt[i]; i++){
- 4fb:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
- 4ff:	84 db                	test   %bl,%bl
- 501:	74 77                	je     57a <printf+0xca>
+ 4db:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 4df:	84 db                	test   %bl,%bl
+ 4e1:	74 77                	je     55a <printf+0xca>
     if(state == 0){
- 503:	85 ff                	test   %edi,%edi
+ 4e3:	85 ff                	test   %edi,%edi
     c = fmt[i] & 0xff;
- 505:	0f be cb             	movsbl %bl,%ecx
- 508:	0f b6 c3             	movzbl %bl,%eax
+ 4e5:	0f be cb             	movsbl %bl,%ecx
+ 4e8:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
- 50b:	74 cb                	je     4d8 <printf+0x28>
+ 4eb:	74 cb                	je     4b8 <printf+0x28>
         state = '%';
       } else {
         putc(fd, c);
       }
     } else if(state == '%'){
- 50d:	83 ff 25             	cmp    $0x25,%edi
- 510:	75 e6                	jne    4f8 <printf+0x48>
+ 4ed:	83 ff 25             	cmp    $0x25,%edi
+ 4f0:	75 e6                	jne    4d8 <printf+0x48>
       if(c == 'd'){
- 512:	83 f8 64             	cmp    $0x64,%eax
- 515:	0f 84 05 01 00 00    	je     620 <printf+0x170>
+ 4f2:	83 f8 64             	cmp    $0x64,%eax
+ 4f5:	0f 84 05 01 00 00    	je     600 <printf+0x170>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 51b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 521:	83 f9 70             	cmp    $0x70,%ecx
- 524:	74 72                	je     598 <printf+0xe8>
+ 4fb:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 501:	83 f9 70             	cmp    $0x70,%ecx
+ 504:	74 72                	je     578 <printf+0xe8>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 526:	83 f8 73             	cmp    $0x73,%eax
- 529:	0f 84 99 00 00 00    	je     5c8 <printf+0x118>
+ 506:	83 f8 73             	cmp    $0x73,%eax
+ 509:	0f 84 99 00 00 00    	je     5a8 <printf+0x118>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 52f:	83 f8 63             	cmp    $0x63,%eax
- 532:	0f 84 08 01 00 00    	je     640 <printf+0x190>
+ 50f:	83 f8 63             	cmp    $0x63,%eax
+ 512:	0f 84 08 01 00 00    	je     620 <printf+0x190>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 538:	83 f8 25             	cmp    $0x25,%eax
- 53b:	0f 84 ef 00 00 00    	je     630 <printf+0x180>
+ 518:	83 f8 25             	cmp    $0x25,%eax
+ 51b:	0f 84 ef 00 00 00    	je     610 <printf+0x180>
   write(fd, &c, 1);
- 541:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 544:	83 ec 04             	sub    $0x4,%esp
- 547:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 54b:	6a 01                	push   $0x1
- 54d:	50                   	push   %eax
- 54e:	ff 75 08             	pushl  0x8(%ebp)
- 551:	e8 0c fe ff ff       	call   362 <write>
- 556:	83 c4 0c             	add    $0xc,%esp
- 559:	8d 45 e6             	lea    -0x1a(%ebp),%eax
- 55c:	88 5d e6             	mov    %bl,-0x1a(%ebp)
- 55f:	6a 01                	push   $0x1
- 561:	50                   	push   %eax
- 562:	ff 75 08             	pushl  0x8(%ebp)
- 565:	83 c6 01             	add    $0x1,%esi
+ 521:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 524:	83 ec 04             	sub    $0x4,%esp
+ 527:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 52b:	6a 01                	push   $0x1
+ 52d:	50                   	push   %eax
+ 52e:	ff 75 08             	pushl  0x8(%ebp)
+ 531:	e8 2c fe ff ff       	call   362 <write>
+ 536:	83 c4 0c             	add    $0xc,%esp
+ 539:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 53c:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 53f:	6a 01                	push   $0x1
+ 541:	50                   	push   %eax
+ 542:	ff 75 08             	pushl  0x8(%ebp)
+ 545:	83 c6 01             	add    $0x1,%esi
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
       }
       state = 0;
- 568:	31 ff                	xor    %edi,%edi
+ 548:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 56a:	e8 f3 fd ff ff       	call   362 <write>
+ 54a:	e8 13 fe ff ff       	call   362 <write>
   for(i = 0; fmt[i]; i++){
- 56f:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 54f:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
   write(fd, &c, 1);
- 573:	83 c4 10             	add    $0x10,%esp
+ 553:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 576:	84 db                	test   %bl,%bl
- 578:	75 89                	jne    503 <printf+0x53>
+ 556:	84 db                	test   %bl,%bl
+ 558:	75 89                	jne    4e3 <printf+0x53>
     }
   }
 }
- 57a:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 57d:	5b                   	pop    %ebx
- 57e:	5e                   	pop    %esi
- 57f:	5f                   	pop    %edi
- 580:	5d                   	pop    %ebp
- 581:	c3                   	ret    
- 582:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 55a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 55d:	5b                   	pop    %ebx
+ 55e:	5e                   	pop    %esi
+ 55f:	5f                   	pop    %edi
+ 560:	5d                   	pop    %ebp
+ 561:	c3                   	ret    
+ 562:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         state = '%';
- 588:	bf 25 00 00 00       	mov    $0x25,%edi
- 58d:	e9 66 ff ff ff       	jmp    4f8 <printf+0x48>
- 592:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 568:	bf 25 00 00 00       	mov    $0x25,%edi
+ 56d:	e9 66 ff ff ff       	jmp    4d8 <printf+0x48>
+ 572:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 598:	83 ec 0c             	sub    $0xc,%esp
- 59b:	b9 10 00 00 00       	mov    $0x10,%ecx
- 5a0:	6a 00                	push   $0x0
- 5a2:	8b 7d d4             	mov    -0x2c(%ebp),%edi
- 5a5:	8b 45 08             	mov    0x8(%ebp),%eax
- 5a8:	8b 17                	mov    (%edi),%edx
- 5aa:	e8 61 fe ff ff       	call   410 <printint>
+ 578:	83 ec 0c             	sub    $0xc,%esp
+ 57b:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 580:	6a 00                	push   $0x0
+ 582:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 585:	8b 45 08             	mov    0x8(%ebp),%eax
+ 588:	8b 17                	mov    (%edi),%edx
+ 58a:	e8 61 fe ff ff       	call   3f0 <printint>
         ap++;
- 5af:	89 f8                	mov    %edi,%eax
- 5b1:	83 c4 10             	add    $0x10,%esp
+ 58f:	89 f8                	mov    %edi,%eax
+ 591:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 5b4:	31 ff                	xor    %edi,%edi
+ 594:	31 ff                	xor    %edi,%edi
         ap++;
- 5b6:	83 c0 04             	add    $0x4,%eax
- 5b9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
- 5bc:	e9 37 ff ff ff       	jmp    4f8 <printf+0x48>
- 5c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 596:	83 c0 04             	add    $0x4,%eax
+ 599:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 59c:	e9 37 ff ff ff       	jmp    4d8 <printf+0x48>
+ 5a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 5c8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 5cb:	8b 08                	mov    (%eax),%ecx
+ 5a8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 5ab:	8b 08                	mov    (%eax),%ecx
         ap++;
- 5cd:	83 c0 04             	add    $0x4,%eax
- 5d0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 5ad:	83 c0 04             	add    $0x4,%eax
+ 5b0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
         if(s == 0)
- 5d3:	85 c9                	test   %ecx,%ecx
- 5d5:	0f 84 8e 00 00 00    	je     669 <printf+0x1b9>
+ 5b3:	85 c9                	test   %ecx,%ecx
+ 5b5:	0f 84 8e 00 00 00    	je     649 <printf+0x1b9>
         while(*s != 0){
- 5db:	0f b6 01             	movzbl (%ecx),%eax
+ 5bb:	0f b6 01             	movzbl (%ecx),%eax
       state = 0;
- 5de:	31 ff                	xor    %edi,%edi
+ 5be:	31 ff                	xor    %edi,%edi
         s = (char*)*ap;
- 5e0:	89 cb                	mov    %ecx,%ebx
+ 5c0:	89 cb                	mov    %ecx,%ebx
         while(*s != 0){
- 5e2:	84 c0                	test   %al,%al
- 5e4:	0f 84 0e ff ff ff    	je     4f8 <printf+0x48>
- 5ea:	89 75 d0             	mov    %esi,-0x30(%ebp)
- 5ed:	89 de                	mov    %ebx,%esi
- 5ef:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5f2:	8d 7d e3             	lea    -0x1d(%ebp),%edi
- 5f5:	8d 76 00             	lea    0x0(%esi),%esi
+ 5c2:	84 c0                	test   %al,%al
+ 5c4:	0f 84 0e ff ff ff    	je     4d8 <printf+0x48>
+ 5ca:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 5cd:	89 de                	mov    %ebx,%esi
+ 5cf:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5d2:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 5d5:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 5f8:	83 ec 04             	sub    $0x4,%esp
+ 5d8:	83 ec 04             	sub    $0x4,%esp
           s++;
- 5fb:	83 c6 01             	add    $0x1,%esi
- 5fe:	88 45 e3             	mov    %al,-0x1d(%ebp)
+ 5db:	83 c6 01             	add    $0x1,%esi
+ 5de:	88 45 e3             	mov    %al,-0x1d(%ebp)
   write(fd, &c, 1);
- 601:	6a 01                	push   $0x1
- 603:	57                   	push   %edi
- 604:	53                   	push   %ebx
- 605:	e8 58 fd ff ff       	call   362 <write>
+ 5e1:	6a 01                	push   $0x1
+ 5e3:	57                   	push   %edi
+ 5e4:	53                   	push   %ebx
+ 5e5:	e8 78 fd ff ff       	call   362 <write>
         while(*s != 0){
- 60a:	0f b6 06             	movzbl (%esi),%eax
- 60d:	83 c4 10             	add    $0x10,%esp
- 610:	84 c0                	test   %al,%al
- 612:	75 e4                	jne    5f8 <printf+0x148>
- 614:	8b 75 d0             	mov    -0x30(%ebp),%esi
+ 5ea:	0f b6 06             	movzbl (%esi),%eax
+ 5ed:	83 c4 10             	add    $0x10,%esp
+ 5f0:	84 c0                	test   %al,%al
+ 5f2:	75 e4                	jne    5d8 <printf+0x148>
+ 5f4:	8b 75 d0             	mov    -0x30(%ebp),%esi
       state = 0;
- 617:	31 ff                	xor    %edi,%edi
- 619:	e9 da fe ff ff       	jmp    4f8 <printf+0x48>
- 61e:	66 90                	xchg   %ax,%ax
+ 5f7:	31 ff                	xor    %edi,%edi
+ 5f9:	e9 da fe ff ff       	jmp    4d8 <printf+0x48>
+ 5fe:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 10, 1);
- 620:	83 ec 0c             	sub    $0xc,%esp
- 623:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 628:	6a 01                	push   $0x1
- 62a:	e9 73 ff ff ff       	jmp    5a2 <printf+0xf2>
- 62f:	90                   	nop
+ 600:	83 ec 0c             	sub    $0xc,%esp
+ 603:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 608:	6a 01                	push   $0x1
+ 60a:	e9 73 ff ff ff       	jmp    582 <printf+0xf2>
+ 60f:	90                   	nop
   write(fd, &c, 1);
- 630:	83 ec 04             	sub    $0x4,%esp
- 633:	88 5d e5             	mov    %bl,-0x1b(%ebp)
- 636:	8d 45 e5             	lea    -0x1b(%ebp),%eax
- 639:	6a 01                	push   $0x1
- 63b:	e9 21 ff ff ff       	jmp    561 <printf+0xb1>
+ 610:	83 ec 04             	sub    $0x4,%esp
+ 613:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 616:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 619:	6a 01                	push   $0x1
+ 61b:	e9 21 ff ff ff       	jmp    541 <printf+0xb1>
         putc(fd, *ap);
- 640:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 620:	8b 7d d4             	mov    -0x2c(%ebp),%edi
   write(fd, &c, 1);
- 643:	83 ec 04             	sub    $0x4,%esp
+ 623:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 646:	8b 07                	mov    (%edi),%eax
+ 626:	8b 07                	mov    (%edi),%eax
   write(fd, &c, 1);
- 648:	6a 01                	push   $0x1
+ 628:	6a 01                	push   $0x1
         ap++;
- 64a:	83 c7 04             	add    $0x4,%edi
+ 62a:	83 c7 04             	add    $0x4,%edi
         putc(fd, *ap);
- 64d:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 62d:	88 45 e4             	mov    %al,-0x1c(%ebp)
   write(fd, &c, 1);
- 650:	8d 45 e4             	lea    -0x1c(%ebp),%eax
- 653:	50                   	push   %eax
- 654:	ff 75 08             	pushl  0x8(%ebp)
- 657:	e8 06 fd ff ff       	call   362 <write>
+ 630:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 633:	50                   	push   %eax
+ 634:	ff 75 08             	pushl  0x8(%ebp)
+ 637:	e8 26 fd ff ff       	call   362 <write>
         ap++;
- 65c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
- 65f:	83 c4 10             	add    $0x10,%esp
+ 63c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 63f:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 662:	31 ff                	xor    %edi,%edi
- 664:	e9 8f fe ff ff       	jmp    4f8 <printf+0x48>
+ 642:	31 ff                	xor    %edi,%edi
+ 644:	e9 8f fe ff ff       	jmp    4d8 <printf+0x48>
           s = "(null)";
- 669:	bb 58 08 00 00       	mov    $0x858,%ebx
+ 649:	bb 38 08 00 00       	mov    $0x838,%ebx
         while(*s != 0){
- 66e:	b8 28 00 00 00       	mov    $0x28,%eax
- 673:	e9 72 ff ff ff       	jmp    5ea <printf+0x13a>
- 678:	66 90                	xchg   %ax,%ax
- 67a:	66 90                	xchg   %ax,%ax
- 67c:	66 90                	xchg   %ax,%ax
- 67e:	66 90                	xchg   %ax,%ax
+ 64e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 653:	e9 72 ff ff ff       	jmp    5ca <printf+0x13a>
+ 658:	66 90                	xchg   %ax,%ax
+ 65a:	66 90                	xchg   %ax,%ax
+ 65c:	66 90                	xchg   %ax,%ax
+ 65e:	66 90                	xchg   %ax,%ax
 
-00000680 <free>:
+00000660 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 680:	55                   	push   %ebp
+ 660:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 681:	a1 10 0b 00 00       	mov    0xb10,%eax
+ 661:	a1 f0 0a 00 00       	mov    0xaf0,%eax
 {
- 686:	89 e5                	mov    %esp,%ebp
- 688:	57                   	push   %edi
- 689:	56                   	push   %esi
- 68a:	53                   	push   %ebx
- 68b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 666:	89 e5                	mov    %esp,%ebp
+ 668:	57                   	push   %edi
+ 669:	56                   	push   %esi
+ 66a:	53                   	push   %ebx
+ 66b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 68e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
- 691:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 66e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 671:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 698:	39 c8                	cmp    %ecx,%eax
- 69a:	8b 10                	mov    (%eax),%edx
- 69c:	73 32                	jae    6d0 <free+0x50>
- 69e:	39 d1                	cmp    %edx,%ecx
- 6a0:	72 04                	jb     6a6 <free+0x26>
+ 678:	39 c8                	cmp    %ecx,%eax
+ 67a:	8b 10                	mov    (%eax),%edx
+ 67c:	73 32                	jae    6b0 <free+0x50>
+ 67e:	39 d1                	cmp    %edx,%ecx
+ 680:	72 04                	jb     686 <free+0x26>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6a2:	39 d0                	cmp    %edx,%eax
- 6a4:	72 32                	jb     6d8 <free+0x58>
+ 682:	39 d0                	cmp    %edx,%eax
+ 684:	72 32                	jb     6b8 <free+0x58>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 6a6:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 6a9:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 6ac:	39 fa                	cmp    %edi,%edx
- 6ae:	74 30                	je     6e0 <free+0x60>
+ 686:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 689:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 68c:	39 fa                	cmp    %edi,%edx
+ 68e:	74 30                	je     6c0 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 6b0:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 690:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 6b3:	8b 50 04             	mov    0x4(%eax),%edx
- 6b6:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 6b9:	39 f1                	cmp    %esi,%ecx
- 6bb:	74 3a                	je     6f7 <free+0x77>
+ 693:	8b 50 04             	mov    0x4(%eax),%edx
+ 696:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 699:	39 f1                	cmp    %esi,%ecx
+ 69b:	74 3a                	je     6d7 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 6bd:	89 08                	mov    %ecx,(%eax)
+ 69d:	89 08                	mov    %ecx,(%eax)
   freep = p;
- 6bf:	a3 10 0b 00 00       	mov    %eax,0xb10
+ 69f:	a3 f0 0a 00 00       	mov    %eax,0xaf0
 }
- 6c4:	5b                   	pop    %ebx
- 6c5:	5e                   	pop    %esi
- 6c6:	5f                   	pop    %edi
- 6c7:	5d                   	pop    %ebp
- 6c8:	c3                   	ret    
- 6c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6a4:	5b                   	pop    %ebx
+ 6a5:	5e                   	pop    %esi
+ 6a6:	5f                   	pop    %edi
+ 6a7:	5d                   	pop    %ebp
+ 6a8:	c3                   	ret    
+ 6a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6d0:	39 d0                	cmp    %edx,%eax
- 6d2:	72 04                	jb     6d8 <free+0x58>
- 6d4:	39 d1                	cmp    %edx,%ecx
- 6d6:	72 ce                	jb     6a6 <free+0x26>
+ 6b0:	39 d0                	cmp    %edx,%eax
+ 6b2:	72 04                	jb     6b8 <free+0x58>
+ 6b4:	39 d1                	cmp    %edx,%ecx
+ 6b6:	72 ce                	jb     686 <free+0x26>
 {
- 6d8:	89 d0                	mov    %edx,%eax
- 6da:	eb bc                	jmp    698 <free+0x18>
- 6dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6b8:	89 d0                	mov    %edx,%eax
+ 6ba:	eb bc                	jmp    678 <free+0x18>
+ 6bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     bp->s.size += p->s.ptr->s.size;
- 6e0:	03 72 04             	add    0x4(%edx),%esi
- 6e3:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 6c0:	03 72 04             	add    0x4(%edx),%esi
+ 6c3:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 6e6:	8b 10                	mov    (%eax),%edx
- 6e8:	8b 12                	mov    (%edx),%edx
- 6ea:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 6c6:	8b 10                	mov    (%eax),%edx
+ 6c8:	8b 12                	mov    (%edx),%edx
+ 6ca:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 6ed:	8b 50 04             	mov    0x4(%eax),%edx
- 6f0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 6f3:	39 f1                	cmp    %esi,%ecx
- 6f5:	75 c6                	jne    6bd <free+0x3d>
+ 6cd:	8b 50 04             	mov    0x4(%eax),%edx
+ 6d0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6d3:	39 f1                	cmp    %esi,%ecx
+ 6d5:	75 c6                	jne    69d <free+0x3d>
     p->s.size += bp->s.size;
- 6f7:	03 53 fc             	add    -0x4(%ebx),%edx
+ 6d7:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 6fa:	a3 10 0b 00 00       	mov    %eax,0xb10
+ 6da:	a3 f0 0a 00 00       	mov    %eax,0xaf0
     p->s.size += bp->s.size;
- 6ff:	89 50 04             	mov    %edx,0x4(%eax)
+ 6df:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 702:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 705:	89 10                	mov    %edx,(%eax)
+ 6e2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6e5:	89 10                	mov    %edx,(%eax)
 }
- 707:	5b                   	pop    %ebx
- 708:	5e                   	pop    %esi
- 709:	5f                   	pop    %edi
- 70a:	5d                   	pop    %ebp
- 70b:	c3                   	ret    
- 70c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6e7:	5b                   	pop    %ebx
+ 6e8:	5e                   	pop    %esi
+ 6e9:	5f                   	pop    %edi
+ 6ea:	5d                   	pop    %ebp
+ 6eb:	c3                   	ret    
+ 6ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-00000710 <malloc>:
+000006f0 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 710:	55                   	push   %ebp
- 711:	89 e5                	mov    %esp,%ebp
- 713:	57                   	push   %edi
- 714:	56                   	push   %esi
- 715:	53                   	push   %ebx
- 716:	83 ec 0c             	sub    $0xc,%esp
+ 6f0:	55                   	push   %ebp
+ 6f1:	89 e5                	mov    %esp,%ebp
+ 6f3:	57                   	push   %edi
+ 6f4:	56                   	push   %esi
+ 6f5:	53                   	push   %ebx
+ 6f6:	83 ec 0c             	sub    $0xc,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 719:	8b 45 08             	mov    0x8(%ebp),%eax
+ 6f9:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 71c:	8b 15 10 0b 00 00    	mov    0xb10,%edx
+ 6fc:	8b 15 f0 0a 00 00    	mov    0xaf0,%edx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 722:	8d 78 07             	lea    0x7(%eax),%edi
- 725:	c1 ef 03             	shr    $0x3,%edi
- 728:	83 c7 01             	add    $0x1,%edi
+ 702:	8d 78 07             	lea    0x7(%eax),%edi
+ 705:	c1 ef 03             	shr    $0x3,%edi
+ 708:	83 c7 01             	add    $0x1,%edi
   if((prevp = freep) == 0){
- 72b:	85 d2                	test   %edx,%edx
- 72d:	0f 84 9d 00 00 00    	je     7d0 <malloc+0xc0>
- 733:	8b 02                	mov    (%edx),%eax
- 735:	8b 48 04             	mov    0x4(%eax),%ecx
+ 70b:	85 d2                	test   %edx,%edx
+ 70d:	0f 84 9d 00 00 00    	je     7b0 <malloc+0xc0>
+ 713:	8b 02                	mov    (%edx),%eax
+ 715:	8b 48 04             	mov    0x4(%eax),%ecx
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
     if(p->s.size >= nunits){
- 738:	39 cf                	cmp    %ecx,%edi
- 73a:	76 6c                	jbe    7a8 <malloc+0x98>
- 73c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
- 742:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 747:	0f 43 df             	cmovae %edi,%ebx
+ 718:	39 cf                	cmp    %ecx,%edi
+ 71a:	76 6c                	jbe    788 <malloc+0x98>
+ 71c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 722:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 727:	0f 43 df             	cmovae %edi,%ebx
   p = sbrk(nu * sizeof(Header));
- 74a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
- 751:	eb 0e                	jmp    761 <malloc+0x51>
- 753:	90                   	nop
- 754:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 72a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 731:	eb 0e                	jmp    741 <malloc+0x51>
+ 733:	90                   	nop
+ 734:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 758:	8b 02                	mov    (%edx),%eax
+ 738:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 75a:	8b 48 04             	mov    0x4(%eax),%ecx
- 75d:	39 f9                	cmp    %edi,%ecx
- 75f:	73 47                	jae    7a8 <malloc+0x98>
+ 73a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 73d:	39 f9                	cmp    %edi,%ecx
+ 73f:	73 47                	jae    788 <malloc+0x98>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 761:	39 05 10 0b 00 00    	cmp    %eax,0xb10
- 767:	89 c2                	mov    %eax,%edx
- 769:	75 ed                	jne    758 <malloc+0x48>
+ 741:	39 05 f0 0a 00 00    	cmp    %eax,0xaf0
+ 747:	89 c2                	mov    %eax,%edx
+ 749:	75 ed                	jne    738 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 76b:	83 ec 0c             	sub    $0xc,%esp
- 76e:	56                   	push   %esi
- 76f:	e8 56 fc ff ff       	call   3ca <sbrk>
+ 74b:	83 ec 0c             	sub    $0xc,%esp
+ 74e:	56                   	push   %esi
+ 74f:	e8 76 fc ff ff       	call   3ca <sbrk>
   if(p == (char*)-1)
- 774:	83 c4 10             	add    $0x10,%esp
- 777:	83 f8 ff             	cmp    $0xffffffff,%eax
- 77a:	74 1c                	je     798 <malloc+0x88>
+ 754:	83 c4 10             	add    $0x10,%esp
+ 757:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 75a:	74 1c                	je     778 <malloc+0x88>
   hp->s.size = nu;
- 77c:	89 58 04             	mov    %ebx,0x4(%eax)
+ 75c:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 77f:	83 ec 0c             	sub    $0xc,%esp
- 782:	83 c0 08             	add    $0x8,%eax
- 785:	50                   	push   %eax
- 786:	e8 f5 fe ff ff       	call   680 <free>
+ 75f:	83 ec 0c             	sub    $0xc,%esp
+ 762:	83 c0 08             	add    $0x8,%eax
+ 765:	50                   	push   %eax
+ 766:	e8 f5 fe ff ff       	call   660 <free>
   return freep;
- 78b:	8b 15 10 0b 00 00    	mov    0xb10,%edx
+ 76b:	8b 15 f0 0a 00 00    	mov    0xaf0,%edx
       if((p = morecore(nunits)) == 0)
- 791:	83 c4 10             	add    $0x10,%esp
- 794:	85 d2                	test   %edx,%edx
- 796:	75 c0                	jne    758 <malloc+0x48>
+ 771:	83 c4 10             	add    $0x10,%esp
+ 774:	85 d2                	test   %edx,%edx
+ 776:	75 c0                	jne    738 <malloc+0x48>
         return 0;
   }
 }
- 798:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 778:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 79b:	31 c0                	xor    %eax,%eax
+ 77b:	31 c0                	xor    %eax,%eax
 }
- 79d:	5b                   	pop    %ebx
- 79e:	5e                   	pop    %esi
- 79f:	5f                   	pop    %edi
- 7a0:	5d                   	pop    %ebp
- 7a1:	c3                   	ret    
- 7a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 77d:	5b                   	pop    %ebx
+ 77e:	5e                   	pop    %esi
+ 77f:	5f                   	pop    %edi
+ 780:	5d                   	pop    %ebp
+ 781:	c3                   	ret    
+ 782:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 7a8:	39 cf                	cmp    %ecx,%edi
- 7aa:	74 54                	je     800 <malloc+0xf0>
+ 788:	39 cf                	cmp    %ecx,%edi
+ 78a:	74 54                	je     7e0 <malloc+0xf0>
         p->s.size -= nunits;
- 7ac:	29 f9                	sub    %edi,%ecx
- 7ae:	89 48 04             	mov    %ecx,0x4(%eax)
+ 78c:	29 f9                	sub    %edi,%ecx
+ 78e:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 7b1:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ 791:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 7b4:	89 78 04             	mov    %edi,0x4(%eax)
+ 794:	89 78 04             	mov    %edi,0x4(%eax)
       freep = prevp;
- 7b7:	89 15 10 0b 00 00    	mov    %edx,0xb10
+ 797:	89 15 f0 0a 00 00    	mov    %edx,0xaf0
 }
- 7bd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 79d:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 7c0:	83 c0 08             	add    $0x8,%eax
+ 7a0:	83 c0 08             	add    $0x8,%eax
 }
- 7c3:	5b                   	pop    %ebx
- 7c4:	5e                   	pop    %esi
- 7c5:	5f                   	pop    %edi
- 7c6:	5d                   	pop    %ebp
- 7c7:	c3                   	ret    
- 7c8:	90                   	nop
- 7c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7a3:	5b                   	pop    %ebx
+ 7a4:	5e                   	pop    %esi
+ 7a5:	5f                   	pop    %edi
+ 7a6:	5d                   	pop    %ebp
+ 7a7:	c3                   	ret    
+ 7a8:	90                   	nop
+ 7a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     base.s.ptr = freep = prevp = &base;
- 7d0:	c7 05 10 0b 00 00 14 	movl   $0xb14,0xb10
- 7d7:	0b 00 00 
- 7da:	c7 05 14 0b 00 00 14 	movl   $0xb14,0xb14
- 7e1:	0b 00 00 
+ 7b0:	c7 05 f0 0a 00 00 f4 	movl   $0xaf4,0xaf0
+ 7b7:	0a 00 00 
+ 7ba:	c7 05 f4 0a 00 00 f4 	movl   $0xaf4,0xaf4
+ 7c1:	0a 00 00 
     base.s.size = 0;
- 7e4:	b8 14 0b 00 00       	mov    $0xb14,%eax
- 7e9:	c7 05 18 0b 00 00 00 	movl   $0x0,0xb18
- 7f0:	00 00 00 
- 7f3:	e9 44 ff ff ff       	jmp    73c <malloc+0x2c>
- 7f8:	90                   	nop
- 7f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7c4:	b8 f4 0a 00 00       	mov    $0xaf4,%eax
+ 7c9:	c7 05 f8 0a 00 00 00 	movl   $0x0,0xaf8
+ 7d0:	00 00 00 
+ 7d3:	e9 44 ff ff ff       	jmp    71c <malloc+0x2c>
+ 7d8:	90                   	nop
+ 7d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         prevp->s.ptr = p->s.ptr;
- 800:	8b 08                	mov    (%eax),%ecx
- 802:	89 0a                	mov    %ecx,(%edx)
- 804:	eb b1                	jmp    7b7 <malloc+0xa7>
+ 7e0:	8b 08                	mov    (%eax),%ecx
+ 7e2:	89 0a                	mov    %ecx,(%edx)
+ 7e4:	eb b1                	jmp    797 <malloc+0xa7>
Binary files main/initcode.o and xv6-public/initcode.o differ
Binary files main/initcode.out and xv6-public/initcode.out differ
Binary files main/init.o and xv6-public/init.o differ
diff -urN main/init.sym xv6-public/init.sym
--- main/init.sym	2022-09-26 21:21:15.972264000 +0530
+++ xv6-public/init.sym	2022-10-31 22:34:16.705740869 +0530
@@ -1,8 +1,8 @@
 00000000 .text
-00000808 .rodata
-00000874 .eh_frame
-00000b08 .data
-00000b10 .bss
+000007e8 .rodata
+00000854 .eh_frame
+00000ae8 .data
+00000af0 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -14,20 +14,19 @@
 00000000 init.c
 00000000 ulib.c
 00000000 printf.c
-00000410 printint
-00000860 digits.1050
+000003f0 printint
+00000840 digits.1044
 00000000 umalloc.c
-00000b10 freep
-00000b14 base
+00000af0 freep
+00000af4 base
 000000f0 strcpy
-000004b0 printf
-000003f2 thread_exit
-00000b08 argv
+00000490 printf
+00000ae8 argv
 00000310 memmove
 0000038a mknod
 00000200 gets
 000003c2 getpid
-00000710 malloc
+000006f0 malloc
 000003d2 sleep
 00000352 pipe
 00000362 write
@@ -41,23 +40,21 @@
 0000033a fork
 000003ca sbrk
 000003da uptime
-00000b10 __bss_start
+00000af0 __bss_start
 000001a0 memset
 00000000 main
 00000120 strcmp
 000003ba dup
 00000280 stat
-00000b10 _edata
-00000b1c _end
+00000af0 _edata
+00000afc _end
 000003a2 link
 00000342 exit
 000002d0 atoi
-000003fa draw
+000003e2 draw
 00000170 strlen
 00000382 open
 000001c0 strchr
-000003e2 thread_create
 000003aa mkdir
 0000036a close
-000003ea thread_join
-00000680 free
+00000660 free
Binary files main/ioapic.o and xv6-public/ioapic.o differ
diff -urN main/kalloc.c xv6-public/kalloc.c
--- main/kalloc.c	2022-08-11 19:48:39.000000000 +0530
+++ xv6-public/kalloc.c	2022-10-30 15:53:16.000000000 +0530
@@ -8,6 +8,7 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "spinlock.h"
+#include "proc.h"
 
 void freerange(void *vstart, void *vend);
 extern char end[]; // first address after kernel loaded from ELF file
@@ -65,15 +66,21 @@
     panic("kfree");
 
   // Fill with junk to catch dangling refs.
-  memset(v, 1, PGSIZE);
+  //memset(v, 1, PGSIZE);
+  for(int i=0; i<PGSIZE; i++) v[i]= 1;
 
-  if(kmem.use_lock)
-    acquire(&kmem.lock);
+  if(kmem.use_lock)acquire(&kmem.lock);
   r = (struct run*)v;
   r->next = kmem.freelist;
   kmem.freelist = r;
-  if(kmem.use_lock)
-    release(&kmem.lock);
+  if(kmem.use_lock) release(&kmem.lock);
+  // wake up process sleeping on sleeping channel
+  if(kmem.use_lock) acquire(&sleeping_channel_lock);
+  if(sleeping_channel_count){
+    wakeup(sleeping_channel);
+    sleeping_channel_count = 0;
+  }
+  if(kmem.use_lock) release(&sleeping_channel_lock);
 }
 
 // Allocate one 4096-byte page of physical memory.
diff -urN main/kalloc.d xv6-public/kalloc.d
--- main/kalloc.d	2022-09-26 21:21:08.680619000 +0530
+++ xv6-public/kalloc.d	2022-10-31 22:34:07.425102375 +0530
@@ -1,2 +1,2 @@
 kalloc.o: kalloc.c /usr/include/stdc-predef.h types.h defs.h param.h \
- memlayout.h mmu.h spinlock.h
+ memlayout.h mmu.h spinlock.h proc.h
Binary files main/kalloc.o and xv6-public/kalloc.o differ
Binary files main/kbd.o and xv6-public/kbd.o differ
Binary files main/kernel and xv6-public/kernel differ
diff -urN main/kernel.asm xv6-public/kernel.asm
--- main/kernel.asm	2022-09-26 21:21:11.914235000 +0530
+++ xv6-public/kernel.asm	2022-10-31 22:34:09.730254498 +0530
@@ -24,7 +24,7 @@
 80100012:	0f 22 e0             	mov    %eax,%cr4
   # Set page directory
   movl    $(V2P_WO(entrypgdir)), %eax
-80100015:	b8 00 90 10 00       	mov    $0x109000,%eax
+80100015:	b8 00 a0 10 00       	mov    $0x10a000,%eax
   movl    %eax, %cr3
 8010001a:	0f 22 d8             	mov    %eax,%cr3
   # Turn on paging.
@@ -37,14 +37,14 @@
 
   # Set up the stack pointer.
   movl $(stack + KSTACKSIZE), %esp
-80100028:	bc c0 b5 10 80       	mov    $0x8010b5c0,%esp
+80100028:	bc d0 c5 10 80       	mov    $0x8010c5d0,%esp
 
   # Jump to main(), and switch to executing at
   # high addresses. The indirect call is needed because
   # the assembler produces a PC-relative instruction
   # for a direct jump.
   mov $main, %eax
-8010002d:	b8 a0 2e 10 80       	mov    $0x80102ea0,%eax
+8010002d:	b8 20 2f 10 80       	mov    $0x80102f20,%eax
   jmp *%eax
 80100032:	ff e0                	jmp    *%eax
 80100034:	66 90                	xchg   %ax,%ax
@@ -70,21 +70,21 @@
   bcache.head.prev = &bcache.head;
   bcache.head.next = &bcache.head;
   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
-80100044:	bb f4 b5 10 80       	mov    $0x8010b5f4,%ebx
+80100044:	bb 14 c6 10 80       	mov    $0x8010c614,%ebx
 {
 80100049:	83 ec 0c             	sub    $0xc,%esp
   initlock(&bcache.lock, "bcache");
-8010004c:	68 20 73 10 80       	push   $0x80107320
-80100051:	68 c0 b5 10 80       	push   $0x8010b5c0
-80100056:	e8 e5 44 00 00       	call   80104540 <initlock>
+8010004c:	68 60 7c 10 80       	push   $0x80107c60
+80100051:	68 e0 c5 10 80       	push   $0x8010c5e0
+80100056:	e8 c5 4d 00 00       	call   80104e20 <initlock>
   bcache.head.prev = &bcache.head;
-8010005b:	c7 05 0c fd 10 80 bc 	movl   $0x8010fcbc,0x8010fd0c
-80100062:	fc 10 80 
+8010005b:	c7 05 2c 0d 11 80 dc 	movl   $0x80110cdc,0x80110d2c
+80100062:	0c 11 80 
   bcache.head.next = &bcache.head;
-80100065:	c7 05 10 fd 10 80 bc 	movl   $0x8010fcbc,0x8010fd10
-8010006c:	fc 10 80 
+80100065:	c7 05 30 0d 11 80 dc 	movl   $0x80110cdc,0x80110d30
+8010006c:	0c 11 80 
 8010006f:	83 c4 10             	add    $0x10,%esp
-80100072:	ba bc fc 10 80       	mov    $0x8010fcbc,%edx
+80100072:	ba dc 0c 11 80       	mov    $0x80110cdc,%edx
 80100077:	eb 09                	jmp    80100082 <binit+0x42>
 80100079:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80100080:	89 c3                	mov    %eax,%ebx
@@ -96,13 +96,13 @@
     b->next = bcache.head.next;
 80100088:	89 53 54             	mov    %edx,0x54(%ebx)
     b->prev = &bcache.head;
-8010008b:	c7 43 50 bc fc 10 80 	movl   $0x8010fcbc,0x50(%ebx)
+8010008b:	c7 43 50 dc 0c 11 80 	movl   $0x80110cdc,0x50(%ebx)
     initsleeplock(&b->lock, "buffer");
-80100092:	68 27 73 10 80       	push   $0x80107327
+80100092:	68 67 7c 10 80       	push   $0x80107c67
 80100097:	50                   	push   %eax
-80100098:	e8 73 43 00 00       	call   80104410 <initsleeplock>
+80100098:	e8 53 4c 00 00       	call   80104cf0 <initsleeplock>
     bcache.head.next->prev = b;
-8010009d:	a1 10 fd 10 80       	mov    0x8010fd10,%eax
+8010009d:	a1 30 0d 11 80       	mov    0x80110d30,%eax
   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
 801000a2:	83 c4 10             	add    $0x10,%esp
 801000a5:	89 da                	mov    %ebx,%edx
@@ -111,9 +111,9 @@
   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
 801000aa:	8d 83 5c 02 00 00    	lea    0x25c(%ebx),%eax
     bcache.head.next = b;
-801000b0:	89 1d 10 fd 10 80    	mov    %ebx,0x8010fd10
+801000b0:	89 1d 30 0d 11 80    	mov    %ebx,0x80110d30
   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
-801000b6:	3d bc fc 10 80       	cmp    $0x8010fcbc,%eax
+801000b6:	3d dc 0c 11 80       	cmp    $0x80110cdc,%eax
 801000bb:	72 c3                	jb     80100080 <binit+0x40>
   }
 }
@@ -139,17 +139,17 @@
 801000d9:	8b 75 08             	mov    0x8(%ebp),%esi
 801000dc:	8b 7d 0c             	mov    0xc(%ebp),%edi
   acquire(&bcache.lock);
-801000df:	68 c0 b5 10 80       	push   $0x8010b5c0
-801000e4:	e8 97 45 00 00       	call   80104680 <acquire>
+801000df:	68 e0 c5 10 80       	push   $0x8010c5e0
+801000e4:	e8 77 4e 00 00       	call   80104f60 <acquire>
   for(b = bcache.head.next; b != &bcache.head; b = b->next){
-801000e9:	8b 1d 10 fd 10 80    	mov    0x8010fd10,%ebx
+801000e9:	8b 1d 30 0d 11 80    	mov    0x80110d30,%ebx
 801000ef:	83 c4 10             	add    $0x10,%esp
-801000f2:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
+801000f2:	81 fb dc 0c 11 80    	cmp    $0x80110cdc,%ebx
 801000f8:	75 11                	jne    8010010b <bread+0x3b>
 801000fa:	eb 24                	jmp    80100120 <bread+0x50>
 801000fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80100100:	8b 5b 54             	mov    0x54(%ebx),%ebx
-80100103:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
+80100103:	81 fb dc 0c 11 80    	cmp    $0x80110cdc,%ebx
 80100109:	74 15                	je     80100120 <bread+0x50>
     if(b->dev == dev && b->blockno == blockno){
 8010010b:	3b 73 04             	cmp    0x4(%ebx),%esi
@@ -162,12 +162,12 @@
 8010011b:	90                   	nop
 8010011c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
-80100120:	8b 1d 0c fd 10 80    	mov    0x8010fd0c,%ebx
-80100126:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
+80100120:	8b 1d 2c 0d 11 80    	mov    0x80110d2c,%ebx
+80100126:	81 fb dc 0c 11 80    	cmp    $0x80110cdc,%ebx
 8010012c:	75 0d                	jne    8010013b <bread+0x6b>
 8010012e:	eb 60                	jmp    80100190 <bread+0xc0>
 80100130:	8b 5b 50             	mov    0x50(%ebx),%ebx
-80100133:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
+80100133:	81 fb dc 0c 11 80    	cmp    $0x80110cdc,%ebx
 80100139:	74 55                	je     80100190 <bread+0xc0>
     if(b->refcnt == 0 && (b->flags & B_DIRTY) == 0) {
 8010013b:	8b 43 4c             	mov    0x4c(%ebx),%eax
@@ -185,12 +185,12 @@
 80100153:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
       release(&bcache.lock);
 8010015a:	83 ec 0c             	sub    $0xc,%esp
-8010015d:	68 c0 b5 10 80       	push   $0x8010b5c0
-80100162:	e8 d9 45 00 00       	call   80104740 <release>
+8010015d:	68 e0 c5 10 80       	push   $0x8010c5e0
+80100162:	e8 b9 4e 00 00       	call   80105020 <release>
       acquiresleep(&b->lock);
 80100167:	8d 43 0c             	lea    0xc(%ebx),%eax
 8010016a:	89 04 24             	mov    %eax,(%esp)
-8010016d:	e8 de 42 00 00       	call   80104450 <acquiresleep>
+8010016d:	e8 be 4b 00 00       	call   80104d30 <acquiresleep>
 80100172:	83 c4 10             	add    $0x10,%esp
   struct buf *b;
 
@@ -215,7 +215,7 @@
 8010018f:	c3                   	ret    
   panic("bget: no buffers");
 80100190:	83 ec 0c             	sub    $0xc,%esp
-80100193:	68 2e 73 10 80       	push   $0x8010732e
+80100193:	68 6e 7c 10 80       	push   $0x80107c6e
 80100198:	e8 f3 01 00 00       	call   80100390 <panic>
 8010019d:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -233,7 +233,7 @@
   if(!holdingsleep(&b->lock))
 801001aa:	8d 43 0c             	lea    0xc(%ebx),%eax
 801001ad:	50                   	push   %eax
-801001ae:	e8 3d 43 00 00       	call   801044f0 <holdingsleep>
+801001ae:	e8 1d 4c 00 00       	call   80104dd0 <holdingsleep>
 801001b3:	83 c4 10             	add    $0x10,%esp
 801001b6:	85 c0                	test   %eax,%eax
 801001b8:	74 0f                	je     801001c9 <bwrite+0x29>
@@ -249,7 +249,7 @@
 801001c4:	e9 57 1f 00 00       	jmp    80102120 <iderw>
     panic("bwrite");
 801001c9:	83 ec 0c             	sub    $0xc,%esp
-801001cc:	68 3f 73 10 80       	push   $0x8010733f
+801001cc:	68 7f 7c 10 80       	push   $0x80107c7f
 801001d1:	e8 ba 01 00 00       	call   80100390 <panic>
 801001d6:	8d 76 00             	lea    0x0(%esi),%esi
 801001d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
@@ -270,7 +270,7 @@
 801001e8:	83 ec 0c             	sub    $0xc,%esp
 801001eb:	8d 73 0c             	lea    0xc(%ebx),%esi
 801001ee:	56                   	push   %esi
-801001ef:	e8 fc 42 00 00       	call   801044f0 <holdingsleep>
+801001ef:	e8 dc 4b 00 00       	call   80104dd0 <holdingsleep>
 801001f4:	83 c4 10             	add    $0x10,%esp
 801001f7:	85 c0                	test   %eax,%eax
 801001f9:	74 66                	je     80100261 <brelse+0x81>
@@ -279,11 +279,11 @@
   releasesleep(&b->lock);
 801001fb:	83 ec 0c             	sub    $0xc,%esp
 801001fe:	56                   	push   %esi
-801001ff:	e8 ac 42 00 00       	call   801044b0 <releasesleep>
+801001ff:	e8 8c 4b 00 00       	call   80104d90 <releasesleep>
 
   acquire(&bcache.lock);
-80100204:	c7 04 24 c0 b5 10 80 	movl   $0x8010b5c0,(%esp)
-8010020b:	e8 70 44 00 00       	call   80104680 <acquire>
+80100204:	c7 04 24 e0 c5 10 80 	movl   $0x8010c5e0,(%esp)
+8010020b:	e8 50 4d 00 00       	call   80104f60 <acquire>
   b->refcnt--;
 80100210:	8b 43 4c             	mov    0x4c(%ebx),%eax
   if (b->refcnt == 0) {
@@ -306,30 +306,30 @@
 8010022c:	8b 53 54             	mov    0x54(%ebx),%edx
 8010022f:	89 50 54             	mov    %edx,0x54(%eax)
     b->next = bcache.head.next;
-80100232:	a1 10 fd 10 80       	mov    0x8010fd10,%eax
+80100232:	a1 30 0d 11 80       	mov    0x80110d30,%eax
     b->prev = &bcache.head;
-80100237:	c7 43 50 bc fc 10 80 	movl   $0x8010fcbc,0x50(%ebx)
+80100237:	c7 43 50 dc 0c 11 80 	movl   $0x80110cdc,0x50(%ebx)
     b->next = bcache.head.next;
 8010023e:	89 43 54             	mov    %eax,0x54(%ebx)
     bcache.head.next->prev = b;
-80100241:	a1 10 fd 10 80       	mov    0x8010fd10,%eax
+80100241:	a1 30 0d 11 80       	mov    0x80110d30,%eax
 80100246:	89 58 50             	mov    %ebx,0x50(%eax)
     bcache.head.next = b;
-80100249:	89 1d 10 fd 10 80    	mov    %ebx,0x8010fd10
+80100249:	89 1d 30 0d 11 80    	mov    %ebx,0x80110d30
   }
   
   release(&bcache.lock);
-8010024f:	c7 45 08 c0 b5 10 80 	movl   $0x8010b5c0,0x8(%ebp)
+8010024f:	c7 45 08 e0 c5 10 80 	movl   $0x8010c5e0,0x8(%ebp)
 }
 80100256:	8d 65 f8             	lea    -0x8(%ebp),%esp
 80100259:	5b                   	pop    %ebx
 8010025a:	5e                   	pop    %esi
 8010025b:	5d                   	pop    %ebp
   release(&bcache.lock);
-8010025c:	e9 df 44 00 00       	jmp    80104740 <release>
+8010025c:	e9 bf 4d 00 00       	jmp    80105020 <release>
     panic("brelse");
 80100261:	83 ec 0c             	sub    $0xc,%esp
-80100264:	68 46 73 10 80       	push   $0x80107346
+80100264:	68 86 7c 10 80       	push   $0x80107c86
 80100269:	e8 22 01 00 00       	call   80100390 <panic>
 8010026e:	66 90                	xchg   %ax,%ax
 
@@ -356,8 +356,8 @@
 80100280:	e8 db 14 00 00       	call   80101760 <iunlock>
   target = n;
   acquire(&cons.lock);
-80100285:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
-8010028c:	e8 ef 43 00 00       	call   80104680 <acquire>
+80100285:	c7 04 24 20 b5 10 80 	movl   $0x8010b520,(%esp)
+8010028c:	e8 cf 4c 00 00       	call   80104f60 <acquire>
   while(n > 0){
 80100291:	8b 5d 10             	mov    0x10(%ebp),%ebx
 80100294:	83 c4 10             	add    $0x10,%esp
@@ -365,8 +365,8 @@
 80100299:	85 db                	test   %ebx,%ebx
 8010029b:	0f 8e a1 00 00 00    	jle    80100342 <consoleread+0xd2>
     while(input.r == input.w){
-801002a1:	8b 15 a0 ff 10 80    	mov    0x8010ffa0,%edx
-801002a7:	39 15 a4 ff 10 80    	cmp    %edx,0x8010ffa4
+801002a1:	8b 15 c0 0f 11 80    	mov    0x80110fc0,%edx
+801002a7:	39 15 c4 0f 11 80    	cmp    %edx,0x80110fc4
 801002ad:	74 2c                	je     801002db <consoleread+0x6b>
 801002af:	eb 5f                	jmp    80100310 <consoleread+0xa0>
 801002b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -377,23 +377,23 @@
       }
       sleep(&input.r, &cons.lock);
 801002b8:	83 ec 08             	sub    $0x8,%esp
-801002bb:	68 20 a5 10 80       	push   $0x8010a520
-801002c0:	68 a0 ff 10 80       	push   $0x8010ffa0
-801002c5:	e8 b6 3a 00 00       	call   80103d80 <sleep>
+801002bb:	68 20 b5 10 80       	push   $0x8010b520
+801002c0:	68 c0 0f 11 80       	push   $0x80110fc0
+801002c5:	e8 86 44 00 00       	call   80104750 <sleep>
     while(input.r == input.w){
-801002ca:	8b 15 a0 ff 10 80    	mov    0x8010ffa0,%edx
+801002ca:	8b 15 c0 0f 11 80    	mov    0x80110fc0,%edx
 801002d0:	83 c4 10             	add    $0x10,%esp
-801002d3:	3b 15 a4 ff 10 80    	cmp    0x8010ffa4,%edx
+801002d3:	3b 15 c4 0f 11 80    	cmp    0x80110fc4,%edx
 801002d9:	75 35                	jne    80100310 <consoleread+0xa0>
       if(myproc()->killed){
-801002db:	e8 00 35 00 00       	call   801037e0 <myproc>
+801002db:	e8 70 3b 00 00       	call   80103e50 <myproc>
 801002e0:	8b 40 24             	mov    0x24(%eax),%eax
 801002e3:	85 c0                	test   %eax,%eax
 801002e5:	74 d1                	je     801002b8 <consoleread+0x48>
         release(&cons.lock);
 801002e7:	83 ec 0c             	sub    $0xc,%esp
-801002ea:	68 20 a5 10 80       	push   $0x8010a520
-801002ef:	e8 4c 44 00 00       	call   80104740 <release>
+801002ea:	68 20 b5 10 80       	push   $0x8010b520
+801002ef:	e8 2c 4d 00 00       	call   80105020 <release>
         ilock(ip);
 801002f4:	89 3c 24             	mov    %edi,(%esp)
 801002f7:	e8 84 13 00 00       	call   80101680 <ilock>
@@ -417,10 +417,10 @@
 8010030c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     c = input.buf[input.r++ % INPUT_BUF];
 80100310:	8d 42 01             	lea    0x1(%edx),%eax
-80100313:	a3 a0 ff 10 80       	mov    %eax,0x8010ffa0
+80100313:	a3 c0 0f 11 80       	mov    %eax,0x80110fc0
 80100318:	89 d0                	mov    %edx,%eax
 8010031a:	83 e0 7f             	and    $0x7f,%eax
-8010031d:	0f be 80 20 ff 10 80 	movsbl -0x7fef00e0(%eax),%eax
+8010031d:	0f be 80 40 0f 11 80 	movsbl -0x7feef0c0(%eax),%eax
     if(c == C('D')){  // EOF
 80100324:	83 f8 04             	cmp    $0x4,%eax
 80100327:	74 3f                	je     80100368 <consoleread+0xf8>
@@ -441,8 +441,8 @@
   release(&cons.lock);
 80100342:	83 ec 0c             	sub    $0xc,%esp
 80100345:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80100348:	68 20 a5 10 80       	push   $0x8010a520
-8010034d:	e8 ee 43 00 00       	call   80104740 <release>
+80100348:	68 20 b5 10 80       	push   $0x8010b520
+8010034d:	e8 ce 4c 00 00       	call   80105020 <release>
   ilock(ip);
 80100352:	89 3c 24             	mov    %edi,(%esp)
 80100355:	e8 26 13 00 00       	call   80101680 <ilock>
@@ -462,7 +462,7 @@
 8010036d:	3b 5d 10             	cmp    0x10(%ebp),%ebx
 80100370:	73 d0                	jae    80100342 <consoleread+0xd2>
         input.r--;
-80100372:	89 15 a0 ff 10 80    	mov    %edx,0x8010ffa0
+80100372:	89 15 c0 0f 11 80    	mov    %edx,0x80110fc0
 80100378:	eb c8                	jmp    80100342 <consoleread+0xd2>
 8010037a:	8b 45 10             	mov    0x10(%ebp),%eax
 8010037d:	29 d8                	sub    %ebx,%eax
@@ -497,23 +497,23 @@
   asm volatile("cli");
 80100398:	fa                   	cli    
   cons.locking = 0;
-80100399:	c7 05 54 a5 10 80 00 	movl   $0x0,0x8010a554
+80100399:	c7 05 54 b5 10 80 00 	movl   $0x0,0x8010b554
 801003a0:	00 00 00 
   getcallerpcs(&s, pcs);
 801003a3:	8d 5d d0             	lea    -0x30(%ebp),%ebx
 801003a6:	8d 75 f8             	lea    -0x8(%ebp),%esi
   cprintf("lapicid %d: panic: ", lapicid());
-801003a9:	e8 82 23 00 00       	call   80102730 <lapicid>
+801003a9:	e8 02 24 00 00       	call   801027b0 <lapicid>
 801003ae:	83 ec 08             	sub    $0x8,%esp
 801003b1:	50                   	push   %eax
-801003b2:	68 4d 73 10 80       	push   $0x8010734d
+801003b2:	68 8d 7c 10 80       	push   $0x80107c8d
 801003b7:	e8 a4 02 00 00       	call   80100660 <cprintf>
   cprintf(s);
 801003bc:	58                   	pop    %eax
 801003bd:	ff 75 08             	pushl  0x8(%ebp)
 801003c0:	e8 9b 02 00 00       	call   80100660 <cprintf>
   cprintf("\n");
-801003c5:	c7 04 24 93 7d 10 80 	movl   $0x80107d93,(%esp)
+801003c5:	c7 04 24 bb 87 10 80 	movl   $0x801087bb,(%esp)
 801003cc:	e8 8f 02 00 00       	call   80100660 <cprintf>
   getcallerpcs(&s, pcs);
 801003d1:	5a                   	pop    %edx
@@ -521,20 +521,20 @@
 801003d5:	59                   	pop    %ecx
 801003d6:	53                   	push   %ebx
 801003d7:	50                   	push   %eax
-801003d8:	e8 83 41 00 00       	call   80104560 <getcallerpcs>
+801003d8:	e8 63 4a 00 00       	call   80104e40 <getcallerpcs>
 801003dd:	83 c4 10             	add    $0x10,%esp
     cprintf(" %p", pcs[i]);
 801003e0:	83 ec 08             	sub    $0x8,%esp
 801003e3:	ff 33                	pushl  (%ebx)
 801003e5:	83 c3 04             	add    $0x4,%ebx
-801003e8:	68 61 73 10 80       	push   $0x80107361
+801003e8:	68 a1 7c 10 80       	push   $0x80107ca1
 801003ed:	e8 6e 02 00 00       	call   80100660 <cprintf>
   for(i=0; i<10; i++)
 801003f2:	83 c4 10             	add    $0x10,%esp
 801003f5:	39 f3                	cmp    %esi,%ebx
 801003f7:	75 e7                	jne    801003e0 <panic+0x50>
   panicked = 1; // freeze other CPU
-801003f9:	c7 05 58 a5 10 80 01 	movl   $0x1,0x8010a558
+801003f9:	c7 05 58 b5 10 80 01 	movl   $0x1,0x8010b558
 80100400:	00 00 00 
 80100403:	eb fe                	jmp    80100403 <panic+0x73>
 80100405:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -542,7 +542,7 @@
 
 80100410 <consputc>:
   if(panicked){
-80100410:	8b 0d 58 a5 10 80    	mov    0x8010a558,%ecx
+80100410:	8b 0d 58 b5 10 80    	mov    0x8010b558,%ecx
 80100416:	85 c9                	test   %ecx,%ecx
 80100418:	74 06                	je     80100420 <consputc+0x10>
 8010041a:	fa                   	cli    
@@ -562,7 +562,7 @@
     uartputc(c);
 80100436:	83 ec 0c             	sub    $0xc,%esp
 80100439:	50                   	push   %eax
-8010043a:	e8 e1 5a 00 00       	call   80105f20 <uartputc>
+8010043a:	e8 a1 63 00 00       	call   801067e0 <uartputc>
 8010043f:	83 c4 10             	add    $0x10,%esp
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
 80100442:	bb d4 03 00 00       	mov    $0x3d4,%ebx
@@ -637,11 +637,11 @@
     uartputc('\b'); uartputc(' '); uartputc('\b');
 801004e7:	83 ec 0c             	sub    $0xc,%esp
 801004ea:	6a 08                	push   $0x8
-801004ec:	e8 2f 5a 00 00       	call   80105f20 <uartputc>
+801004ec:	e8 ef 62 00 00       	call   801067e0 <uartputc>
 801004f1:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
-801004f8:	e8 23 5a 00 00       	call   80105f20 <uartputc>
+801004f8:	e8 e3 62 00 00       	call   801067e0 <uartputc>
 801004fd:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
-80100504:	e8 17 5a 00 00       	call   80105f20 <uartputc>
+80100504:	e8 d7 62 00 00       	call   801067e0 <uartputc>
 80100509:	83 c4 10             	add    $0x10,%esp
 8010050c:	e9 31 ff ff ff       	jmp    80100442 <consputc+0x32>
     memmove(crt, crt+80, sizeof(crt[0])*23*80);
@@ -652,7 +652,7 @@
     memmove(crt, crt+80, sizeof(crt[0])*23*80);
 8010051a:	68 a0 80 0b 80       	push   $0x800b80a0
 8010051f:	68 00 80 0b 80       	push   $0x800b8000
-80100524:	e8 17 43 00 00       	call   80104840 <memmove>
+80100524:	e8 f7 4b 00 00       	call   80105120 <memmove>
     memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
 80100529:	b8 80 07 00 00       	mov    $0x780,%eax
 8010052e:	83 c4 0c             	add    $0xc,%esp
@@ -663,12 +663,12 @@
 80100539:	6a 00                	push   $0x0
 8010053b:	2d 00 80 f4 7f       	sub    $0x7ff48000,%eax
 80100540:	50                   	push   %eax
-80100541:	e8 4a 42 00 00       	call   80104790 <memset>
+80100541:	e8 2a 4b 00 00       	call   80105070 <memset>
 80100546:	83 c4 10             	add    $0x10,%esp
 80100549:	e9 5d ff ff ff       	jmp    801004ab <consputc+0x9b>
     panic("pos under/overflow");
 8010054e:	83 ec 0c             	sub    $0xc,%esp
-80100551:	68 65 73 10 80       	push   $0x80107365
+80100551:	68 a5 7c 10 80       	push   $0x80107ca5
 80100556:	e8 35 fe ff ff       	call   80100390 <panic>
     if(pos > 0) --pos;
 8010055b:	85 db                	test   %ebx,%ebx
@@ -714,7 +714,7 @@
 801005aa:	31 d2                	xor    %edx,%edx
 801005ac:	8d 79 01             	lea    0x1(%ecx),%edi
 801005af:	f7 f3                	div    %ebx
-801005b1:	0f b6 92 90 73 10 80 	movzbl -0x7fef8c70(%edx),%edx
+801005b1:	0f b6 92 d0 7c 10 80 	movzbl -0x7fef8330(%edx),%edx
   }while((x /= base) != 0);
 801005b8:	85 c0                	test   %eax,%eax
     buf[i++] = digits[x % base];
@@ -769,8 +769,8 @@
 8010060c:	ff 75 08             	pushl  0x8(%ebp)
 8010060f:	e8 4c 11 00 00       	call   80101760 <iunlock>
   acquire(&cons.lock);
-80100614:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
-8010061b:	e8 60 40 00 00       	call   80104680 <acquire>
+80100614:	c7 04 24 20 b5 10 80 	movl   $0x8010b520,(%esp)
+8010061b:	e8 40 49 00 00       	call   80104f60 <acquire>
   for(i = 0; i < n; i++)
 80100620:	83 c4 10             	add    $0x10,%esp
 80100623:	85 f6                	test   %esi,%esi
@@ -787,8 +787,8 @@
 8010063d:	75 f1                	jne    80100630 <consolewrite+0x30>
   release(&cons.lock);
 8010063f:	83 ec 0c             	sub    $0xc,%esp
-80100642:	68 20 a5 10 80       	push   $0x8010a520
-80100647:	e8 f4 40 00 00       	call   80104740 <release>
+80100642:	68 20 b5 10 80       	push   $0x8010b520
+80100647:	e8 d4 49 00 00       	call   80105020 <release>
   ilock(ip);
 8010064c:	58                   	pop    %eax
 8010064d:	ff 75 08             	pushl  0x8(%ebp)
@@ -814,7 +814,7 @@
 80100665:	53                   	push   %ebx
 80100666:	83 ec 1c             	sub    $0x1c,%esp
   locking = cons.locking;
-80100669:	a1 54 a5 10 80       	mov    0x8010a554,%eax
+80100669:	a1 54 b5 10 80       	mov    0x8010b554,%eax
   if(locking)
 8010066e:	85 c0                	test   %eax,%eax
   locking = cons.locking;
@@ -890,8 +890,8 @@
 80100715:	74 10                	je     80100727 <cprintf+0xc7>
     release(&cons.lock);
 80100717:	83 ec 0c             	sub    $0xc,%esp
-8010071a:	68 20 a5 10 80       	push   $0x8010a520
-8010071f:	e8 1c 40 00 00       	call   80104740 <release>
+8010071a:	68 20 b5 10 80       	push   $0x8010b520
+8010071f:	e8 fc 48 00 00       	call   80105020 <release>
 80100724:	83 c4 10             	add    $0x10,%esp
 }
 80100727:	8d 65 f4             	lea    -0xc(%ebp),%esp
@@ -966,7 +966,7 @@
 801007ca:	e9 15 ff ff ff       	jmp    801006e4 <cprintf+0x84>
 801007cf:	90                   	nop
         s = "(null)";
-801007d0:	ba 78 73 10 80       	mov    $0x80107378,%edx
+801007d0:	ba b8 7c 10 80       	mov    $0x80107cb8,%edx
       for(; *s; s++)
 801007d5:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
 801007d8:	b8 28 00 00 00       	mov    $0x28,%eax
@@ -975,13 +975,13 @@
 801007e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     acquire(&cons.lock);
 801007e8:	83 ec 0c             	sub    $0xc,%esp
-801007eb:	68 20 a5 10 80       	push   $0x8010a520
-801007f0:	e8 8b 3e 00 00       	call   80104680 <acquire>
+801007eb:	68 20 b5 10 80       	push   $0x8010b520
+801007f0:	e8 6b 47 00 00       	call   80104f60 <acquire>
 801007f5:	83 c4 10             	add    $0x10,%esp
 801007f8:	e9 7c fe ff ff       	jmp    80100679 <cprintf+0x19>
     panic("null fmt");
 801007fd:	83 ec 0c             	sub    $0xc,%esp
-80100800:	68 7f 73 10 80       	push   $0x8010737f
+80100800:	68 bf 7c 10 80       	push   $0x80107cbf
 80100805:	e8 86 fb ff ff       	call   80100390 <panic>
 8010080a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
@@ -998,8 +998,8 @@
 80100818:	83 ec 18             	sub    $0x18,%esp
 8010081b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&cons.lock);
-8010081e:	68 20 a5 10 80       	push   $0x8010a520
-80100823:	e8 58 3e 00 00       	call   80104680 <acquire>
+8010081e:	68 20 b5 10 80       	push   $0x8010b520
+80100823:	e8 38 47 00 00       	call   80104f60 <acquire>
   while((c = getc()) >= 0){
 80100828:	83 c4 10             	add    $0x10,%esp
 8010082b:	90                   	nop
@@ -1017,12 +1017,12 @@
 8010084c:	83 ff 7f             	cmp    $0x7f,%edi
 8010084f:	75 54                	jne    801008a5 <consoleintr+0x95>
       if(input.e != input.w){
-80100851:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
-80100856:	3b 05 a4 ff 10 80    	cmp    0x8010ffa4,%eax
+80100851:	a1 c8 0f 11 80       	mov    0x80110fc8,%eax
+80100856:	3b 05 c4 0f 11 80    	cmp    0x80110fc4,%eax
 8010085c:	74 d2                	je     80100830 <consoleintr+0x20>
         input.e--;
 8010085e:	83 e8 01             	sub    $0x1,%eax
-80100861:	a3 a8 ff 10 80       	mov    %eax,0x8010ffa8
+80100861:	a3 c8 0f 11 80       	mov    %eax,0x80110fc8
         consputc(BACKSPACE);
 80100866:	b8 00 01 00 00       	mov    $0x100,%eax
 8010086b:	e8 a0 fb ff ff       	call   80100410 <consputc>
@@ -1035,8 +1035,8 @@
 80100879:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   release(&cons.lock);
 80100880:	83 ec 0c             	sub    $0xc,%esp
-80100883:	68 20 a5 10 80       	push   $0x8010a520
-80100888:	e8 b3 3e 00 00       	call   80104740 <release>
+80100883:	68 20 b5 10 80       	push   $0x8010b520
+80100888:	e8 93 47 00 00       	call   80105020 <release>
   if(doprocdump) {
 8010088d:	83 c4 10             	add    $0x10,%esp
 80100890:	85 f6                	test   %esi,%esi
@@ -1054,9 +1054,9 @@
       if(c != 0 && input.e-input.r < INPUT_BUF){
 801008a5:	85 ff                	test   %edi,%edi
 801008a7:	74 87                	je     80100830 <consoleintr+0x20>
-801008a9:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
+801008a9:	a1 c8 0f 11 80       	mov    0x80110fc8,%eax
 801008ae:	89 c2                	mov    %eax,%edx
-801008b0:	2b 15 a0 ff 10 80    	sub    0x8010ffa0,%edx
+801008b0:	2b 15 c0 0f 11 80    	sub    0x80110fc0,%edx
 801008b6:	83 fa 7f             	cmp    $0x7f,%edx
 801008b9:	0f 87 71 ff ff ff    	ja     80100830 <consoleintr+0x20>
 801008bf:	8d 50 01             	lea    0x1(%eax),%edx
@@ -1064,12 +1064,12 @@
         c = (c == '\r') ? '\n' : c;
 801008c5:	83 ff 0d             	cmp    $0xd,%edi
         input.buf[input.e++ % INPUT_BUF] = c;
-801008c8:	89 15 a8 ff 10 80    	mov    %edx,0x8010ffa8
+801008c8:	89 15 c8 0f 11 80    	mov    %edx,0x80110fc8
         c = (c == '\r') ? '\n' : c;
 801008ce:	0f 84 cc 00 00 00    	je     801009a0 <consoleintr+0x190>
         input.buf[input.e++ % INPUT_BUF] = c;
 801008d4:	89 f9                	mov    %edi,%ecx
-801008d6:	88 88 20 ff 10 80    	mov    %cl,-0x7fef00e0(%eax)
+801008d6:	88 88 40 0f 11 80    	mov    %cl,-0x7feef0c0(%eax)
         consputc(c);
 801008dc:	89 f8                	mov    %edi,%eax
 801008de:	e8 2d fb ff ff       	call   80100410 <consputc>
@@ -1078,17 +1078,17 @@
 801008e6:	0f 84 c5 00 00 00    	je     801009b1 <consoleintr+0x1a1>
 801008ec:	83 ff 04             	cmp    $0x4,%edi
 801008ef:	0f 84 bc 00 00 00    	je     801009b1 <consoleintr+0x1a1>
-801008f5:	a1 a0 ff 10 80       	mov    0x8010ffa0,%eax
+801008f5:	a1 c0 0f 11 80       	mov    0x80110fc0,%eax
 801008fa:	83 e8 80             	sub    $0xffffff80,%eax
-801008fd:	39 05 a8 ff 10 80    	cmp    %eax,0x8010ffa8
+801008fd:	39 05 c8 0f 11 80    	cmp    %eax,0x80110fc8
 80100903:	0f 85 27 ff ff ff    	jne    80100830 <consoleintr+0x20>
           wakeup(&input.r);
 80100909:	83 ec 0c             	sub    $0xc,%esp
           input.w = input.e;
-8010090c:	a3 a4 ff 10 80       	mov    %eax,0x8010ffa4
+8010090c:	a3 c4 0f 11 80       	mov    %eax,0x80110fc4
           wakeup(&input.r);
-80100911:	68 a0 ff 10 80       	push   $0x8010ffa0
-80100916:	e8 15 36 00 00       	call   80103f30 <wakeup>
+80100911:	68 c0 0f 11 80       	push   $0x80110fc0
+80100916:	e8 e5 3f 00 00       	call   80104900 <wakeup>
 8010091b:	83 c4 10             	add    $0x10,%esp
 8010091e:	e9 0d ff ff ff       	jmp    80100830 <consoleintr+0x20>
 80100923:	90                   	nop
@@ -1098,26 +1098,26 @@
 8010092d:	e9 fe fe ff ff       	jmp    80100830 <consoleintr+0x20>
 80100932:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       while(input.e != input.w &&
-80100938:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
-8010093d:	39 05 a4 ff 10 80    	cmp    %eax,0x8010ffa4
+80100938:	a1 c8 0f 11 80       	mov    0x80110fc8,%eax
+8010093d:	39 05 c4 0f 11 80    	cmp    %eax,0x80110fc4
 80100943:	75 2b                	jne    80100970 <consoleintr+0x160>
 80100945:	e9 e6 fe ff ff       	jmp    80100830 <consoleintr+0x20>
 8010094a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         input.e--;
-80100950:	a3 a8 ff 10 80       	mov    %eax,0x8010ffa8
+80100950:	a3 c8 0f 11 80       	mov    %eax,0x80110fc8
         consputc(BACKSPACE);
 80100955:	b8 00 01 00 00       	mov    $0x100,%eax
 8010095a:	e8 b1 fa ff ff       	call   80100410 <consputc>
       while(input.e != input.w &&
-8010095f:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
-80100964:	3b 05 a4 ff 10 80    	cmp    0x8010ffa4,%eax
+8010095f:	a1 c8 0f 11 80       	mov    0x80110fc8,%eax
+80100964:	3b 05 c4 0f 11 80    	cmp    0x80110fc4,%eax
 8010096a:	0f 84 c0 fe ff ff    	je     80100830 <consoleintr+0x20>
             input.buf[(input.e-1) % INPUT_BUF] != '\n'){
 80100970:	83 e8 01             	sub    $0x1,%eax
 80100973:	89 c2                	mov    %eax,%edx
 80100975:	83 e2 7f             	and    $0x7f,%edx
       while(input.e != input.w &&
-80100978:	80 ba 20 ff 10 80 0a 	cmpb   $0xa,-0x7fef00e0(%edx)
+80100978:	80 ba 40 0f 11 80 0a 	cmpb   $0xa,-0x7feef0c0(%edx)
 8010097f:	75 cf                	jne    80100950 <consoleintr+0x140>
 80100981:	e9 aa fe ff ff       	jmp    80100830 <consoleintr+0x20>
 80100986:	8d 76 00             	lea    0x0(%esi),%esi
@@ -1129,14 +1129,14 @@
 80100995:	5f                   	pop    %edi
 80100996:	5d                   	pop    %ebp
     procdump();  // now call procdump() wo. cons.lock held
-80100997:	e9 74 36 00 00       	jmp    80104010 <procdump>
+80100997:	e9 14 42 00 00       	jmp    80104bb0 <procdump>
 8010099c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         input.buf[input.e++ % INPUT_BUF] = c;
-801009a0:	c6 80 20 ff 10 80 0a 	movb   $0xa,-0x7fef00e0(%eax)
+801009a0:	c6 80 40 0f 11 80 0a 	movb   $0xa,-0x7feef0c0(%eax)
         consputc(c);
 801009a7:	b8 0a 00 00 00       	mov    $0xa,%eax
 801009ac:	e8 5f fa ff ff       	call   80100410 <consputc>
-801009b1:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
+801009b1:	a1 c8 0f 11 80       	mov    0x80110fc8,%eax
 801009b6:	e9 4e ff ff ff       	jmp    80100909 <consoleintr+0xf9>
 801009bb:	90                   	nop
 801009bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -1150,9 +1150,9 @@
 801009c1:	89 e5                	mov    %esp,%ebp
 801009c3:	83 ec 10             	sub    $0x10,%esp
   initlock(&cons.lock, "console");
-801009c6:	68 88 73 10 80       	push   $0x80107388
-801009cb:	68 20 a5 10 80       	push   $0x8010a520
-801009d0:	e8 6b 3b 00 00       	call   80104540 <initlock>
+801009c6:	68 c8 7c 10 80       	push   $0x80107cc8
+801009cb:	68 20 b5 10 80       	push   $0x8010b520
+801009d0:	e8 4b 44 00 00       	call   80104e20 <initlock>
 
   devsw[CONSOLE].write = consolewrite;
   devsw[CONSOLE].read = consoleread;
@@ -1164,13 +1164,13 @@
 801009d7:	6a 00                	push   $0x0
 801009d9:	6a 01                	push   $0x1
   devsw[CONSOLE].write = consolewrite;
-801009db:	c7 05 6c 09 11 80 00 	movl   $0x80100600,0x8011096c
+801009db:	c7 05 8c 19 11 80 00 	movl   $0x80100600,0x8011198c
 801009e2:	06 10 80 
   devsw[CONSOLE].read = consoleread;
-801009e5:	c7 05 68 09 11 80 70 	movl   $0x80100270,0x80110968
+801009e5:	c7 05 88 19 11 80 70 	movl   $0x80100270,0x80111988
 801009ec:	02 10 80 
   cons.locking = 1;
-801009ef:	c7 05 54 a5 10 80 01 	movl   $0x1,0x8010a554
+801009ef:	c7 05 54 b5 10 80 01 	movl   $0x1,0x8010b554
 801009f6:	00 00 00 
   ioapicenable(IRQ_KBD, 0);
 801009f9:	e8 d2 18 00 00       	call   801022d0 <ioapicenable>
@@ -1205,11 +1205,11 @@
   struct proghdr ph;
   pde_t *pgdir, *oldpgdir;
   struct proc *curproc = myproc();
-80100a1c:	e8 bf 2d 00 00       	call   801037e0 <myproc>
+80100a1c:	e8 2f 34 00 00       	call   80103e50 <myproc>
 80100a21:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
 
   begin_op();
-80100a27:	e8 74 21 00 00       	call   80102ba0 <begin_op>
+80100a27:	e8 f4 21 00 00       	call   80102c20 <begin_op>
 
   if((ip = namei(path)) == 0){
 80100a2c:	83 ec 0c             	sub    $0xc,%esp
@@ -1250,7 +1250,7 @@
 80100a69:	53                   	push   %ebx
 80100a6a:	e8 a1 0e 00 00       	call   80101910 <iunlockput>
     end_op();
-80100a6f:	e8 9c 21 00 00       	call   80102c10 <end_op>
+80100a6f:	e8 1c 22 00 00       	call   80102c90 <end_op>
 80100a74:	83 c4 10             	add    $0x10,%esp
   }
   return -1;
@@ -1268,7 +1268,7 @@
 80100a8f:	45 4c 46 
 80100a92:	75 d2                	jne    80100a66 <exec+0x56>
   if((pgdir = setupkvm()) == 0)
-80100a94:	e8 d7 65 00 00       	call   80107070 <setupkvm>
+80100a94:	e8 07 6f 00 00       	call   801079a0 <setupkvm>
 80100a99:	85 c0                	test   %eax,%eax
 80100a9b:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
 80100aa1:	74 c3                	je     80100a66 <exec+0x56>
@@ -1298,7 +1298,7 @@
 80100aee:	50                   	push   %eax
 80100aef:	57                   	push   %edi
 80100af0:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
-80100af6:	e8 95 63 00 00       	call   80106e90 <allocuvm>
+80100af6:	e8 55 6c 00 00       	call   80107750 <allocuvm>
 80100afb:	83 c4 10             	add    $0x10,%esp
 80100afe:	85 c0                	test   %eax,%eax
 80100b00:	89 c7                	mov    %eax,%edi
@@ -1314,7 +1314,7 @@
 80100b20:	53                   	push   %ebx
 80100b21:	50                   	push   %eax
 80100b22:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
-80100b28:	e8 a3 62 00 00       	call   80106dd0 <loaduvm>
+80100b28:	e8 63 6b 00 00       	call   80107690 <loaduvm>
 80100b2d:	83 c4 20             	add    $0x20,%esp
 80100b30:	85 c0                	test   %eax,%eax
 80100b32:	78 35                	js     80100b69 <exec+0x159>
@@ -1339,7 +1339,7 @@
     freevm(pgdir);
 80100b69:	83 ec 0c             	sub    $0xc,%esp
 80100b6c:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
-80100b72:	e8 79 64 00 00       	call   80106ff0 <freevm>
+80100b72:	e8 a9 6d 00 00       	call   80107920 <freevm>
 80100b77:	83 c4 10             	add    $0x10,%esp
 80100b7a:	e9 e7 fe ff ff       	jmp    80100a66 <exec+0x56>
 80100b7f:	81 c7 ff 0f 00 00    	add    $0xfff,%edi
@@ -1350,13 +1350,13 @@
 80100b94:	53                   	push   %ebx
 80100b95:	e8 76 0d 00 00       	call   80101910 <iunlockput>
   end_op();
-80100b9a:	e8 71 20 00 00       	call   80102c10 <end_op>
+80100b9a:	e8 f1 20 00 00       	call   80102c90 <end_op>
   if((sz = allocuvm(pgdir, sz, sz + 2*PGSIZE)) == 0)
 80100b9f:	83 c4 0c             	add    $0xc,%esp
 80100ba2:	56                   	push   %esi
 80100ba3:	57                   	push   %edi
 80100ba4:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
-80100baa:	e8 e1 62 00 00       	call   80106e90 <allocuvm>
+80100baa:	e8 a1 6b 00 00       	call   80107750 <allocuvm>
 80100baf:	83 c4 10             	add    $0x10,%esp
 80100bb2:	85 c0                	test   %eax,%eax
 80100bb4:	89 c6                	mov    %eax,%esi
@@ -1364,16 +1364,16 @@
     freevm(pgdir);
 80100bb8:	83 ec 0c             	sub    $0xc,%esp
 80100bbb:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
-80100bc1:	e8 2a 64 00 00       	call   80106ff0 <freevm>
+80100bc1:	e8 5a 6d 00 00       	call   80107920 <freevm>
 80100bc6:	83 c4 10             	add    $0x10,%esp
   return -1;
 80100bc9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 80100bce:	e9 a9 fe ff ff       	jmp    80100a7c <exec+0x6c>
     end_op();
-80100bd3:	e8 38 20 00 00       	call   80102c10 <end_op>
+80100bd3:	e8 b8 20 00 00       	call   80102c90 <end_op>
     cprintf("exec: fail\n");
 80100bd8:	83 ec 0c             	sub    $0xc,%esp
-80100bdb:	68 a1 73 10 80       	push   $0x801073a1
+80100bdb:	68 e1 7c 10 80       	push   $0x80107ce1
 80100be0:	e8 7b fa ff ff       	call   80100660 <cprintf>
     return -1;
 80100be5:	83 c4 10             	add    $0x10,%esp
@@ -1388,7 +1388,7 @@
   clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
 80100bff:	50                   	push   %eax
 80100c00:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
-80100c06:	e8 05 65 00 00       	call   80107110 <clearpteu>
+80100c06:	e8 35 6e 00 00       	call   80107a40 <clearpteu>
   for(argc = 0; argv[argc]; argc++) {
 80100c0b:	8b 45 0c             	mov    0xc(%ebp),%eax
 80100c0e:	83 c4 10             	add    $0x10,%esp
@@ -1407,7 +1407,7 @@
     sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
 80100c35:	83 ec 0c             	sub    $0xc,%esp
 80100c38:	50                   	push   %eax
-80100c39:	e8 72 3d 00 00       	call   801049b0 <strlen>
+80100c39:	e8 52 46 00 00       	call   80105290 <strlen>
 80100c3e:	f7 d0                	not    %eax
 80100c40:	01 c3                	add    %eax,%ebx
     if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
@@ -1417,14 +1417,14 @@
 80100c46:	83 e3 fc             	and    $0xfffffffc,%ebx
     if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
 80100c49:	ff 34 b8             	pushl  (%eax,%edi,4)
-80100c4c:	e8 5f 3d 00 00       	call   801049b0 <strlen>
+80100c4c:	e8 3f 46 00 00       	call   80105290 <strlen>
 80100c51:	83 c0 01             	add    $0x1,%eax
 80100c54:	50                   	push   %eax
 80100c55:	8b 45 0c             	mov    0xc(%ebp),%eax
 80100c58:	ff 34 b8             	pushl  (%eax,%edi,4)
 80100c5b:	53                   	push   %ebx
 80100c5c:	56                   	push   %esi
-80100c5d:	e8 0e 66 00 00       	call   80107270 <copyout>
+80100c5d:	e8 4e 6f 00 00       	call   80107bb0 <copyout>
 80100c62:	83 c4 20             	add    $0x20,%esp
 80100c65:	85 c0                	test   %eax,%eax
 80100c67:	0f 88 4b ff ff ff    	js     80100bb8 <exec+0x1a8>
@@ -1465,7 +1465,7 @@
   ustack[2] = sp - (argc+1)*4;  // argv pointer
 80100cc1:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%ebp)
   if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
-80100cc7:	e8 a4 65 00 00       	call   80107270 <copyout>
+80100cc7:	e8 e4 6e 00 00       	call   80107bb0 <copyout>
 80100ccc:	83 c4 10             	add    $0x10,%esp
 80100ccf:	85 c0                	test   %eax,%eax
 80100cd1:	0f 88 e1 fe ff ff    	js     80100bb8 <exec+0x1a8>
@@ -1491,7 +1491,7 @@
 80100d04:	89 f8                	mov    %edi,%eax
 80100d06:	83 c0 6c             	add    $0x6c,%eax
 80100d09:	50                   	push   %eax
-80100d0a:	e8 61 3c 00 00       	call   80104970 <safestrcpy>
+80100d0a:	e8 41 45 00 00       	call   80105250 <safestrcpy>
   curproc->pgdir = pgdir;
 80100d0f:	8b 95 f0 fe ff ff    	mov    -0x110(%ebp),%edx
   oldpgdir = curproc->pgdir;
@@ -1511,10 +1511,10 @@
 80100d2e:	89 58 44             	mov    %ebx,0x44(%eax)
   switchuvm(curproc);
 80100d31:	89 0c 24             	mov    %ecx,(%esp)
-80100d34:	e8 07 5f 00 00       	call   80106c40 <switchuvm>
+80100d34:	e8 c7 67 00 00       	call   80107500 <switchuvm>
   freevm(oldpgdir);
 80100d39:	89 3c 24             	mov    %edi,(%esp)
-80100d3c:	e8 af 62 00 00       	call   80106ff0 <freevm>
+80100d3c:	e8 df 6b 00 00       	call   80107920 <freevm>
   return 0;
 80100d41:	83 c4 10             	add    $0x10,%esp
 80100d44:	31 c0                	xor    %eax,%eax
@@ -1540,9 +1540,9 @@
 80100d61:	89 e5                	mov    %esp,%ebp
 80100d63:	83 ec 10             	sub    $0x10,%esp
   initlock(&ftable.lock, "ftable");
-80100d66:	68 ad 73 10 80       	push   $0x801073ad
-80100d6b:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100d70:	e8 cb 37 00 00       	call   80104540 <initlock>
+80100d66:	68 ed 7c 10 80       	push   $0x80107ced
+80100d6b:	68 e0 0f 11 80       	push   $0x80110fe0
+80100d70:	e8 ab 40 00 00       	call   80104e20 <initlock>
 }
 80100d75:	83 c4 10             	add    $0x10,%esp
 80100d78:	c9                   	leave  
@@ -1562,19 +1562,19 @@
 
   acquire(&ftable.lock);
   for(f = ftable.file; f < ftable.file + NFILE; f++){
-80100d84:	bb f4 ff 10 80       	mov    $0x8010fff4,%ebx
+80100d84:	bb 14 10 11 80       	mov    $0x80111014,%ebx
 {
 80100d89:	83 ec 10             	sub    $0x10,%esp
   acquire(&ftable.lock);
-80100d8c:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100d91:	e8 ea 38 00 00       	call   80104680 <acquire>
+80100d8c:	68 e0 0f 11 80       	push   $0x80110fe0
+80100d91:	e8 ca 41 00 00       	call   80104f60 <acquire>
 80100d96:	83 c4 10             	add    $0x10,%esp
 80100d99:	eb 10                	jmp    80100dab <filealloc+0x2b>
 80100d9b:	90                   	nop
 80100d9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   for(f = ftable.file; f < ftable.file + NFILE; f++){
 80100da0:	83 c3 18             	add    $0x18,%ebx
-80100da3:	81 fb 54 09 11 80    	cmp    $0x80110954,%ebx
+80100da3:	81 fb 74 19 11 80    	cmp    $0x80111974,%ebx
 80100da9:	73 25                	jae    80100dd0 <filealloc+0x50>
     if(f->ref == 0){
 80100dab:	8b 43 04             	mov    0x4(%ebx),%eax
@@ -1586,8 +1586,8 @@
       f->ref = 1;
 80100db5:	c7 43 04 01 00 00 00 	movl   $0x1,0x4(%ebx)
       release(&ftable.lock);
-80100dbc:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100dc1:	e8 7a 39 00 00       	call   80104740 <release>
+80100dbc:	68 e0 0f 11 80       	push   $0x80110fe0
+80100dc1:	e8 5a 42 00 00       	call   80105020 <release>
       return f;
     }
   }
@@ -1606,8 +1606,8 @@
   return 0;
 80100dd3:	31 db                	xor    %ebx,%ebx
   release(&ftable.lock);
-80100dd5:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100dda:	e8 61 39 00 00       	call   80104740 <release>
+80100dd5:	68 e0 0f 11 80       	push   $0x80110fe0
+80100dda:	e8 41 42 00 00       	call   80105020 <release>
 }
 80100ddf:	89 d8                	mov    %ebx,%eax
   return 0;
@@ -1630,8 +1630,8 @@
 80100df4:	83 ec 10             	sub    $0x10,%esp
 80100df7:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&ftable.lock);
-80100dfa:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100dff:	e8 7c 38 00 00       	call   80104680 <acquire>
+80100dfa:	68 e0 0f 11 80       	push   $0x80110fe0
+80100dff:	e8 5c 41 00 00       	call   80104f60 <acquire>
   if(f->ref < 1)
 80100e04:	8b 43 04             	mov    0x4(%ebx),%eax
 80100e07:	83 c4 10             	add    $0x10,%esp
@@ -1645,8 +1645,8 @@
   f->ref++;
 80100e14:	89 43 04             	mov    %eax,0x4(%ebx)
   release(&ftable.lock);
-80100e17:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100e1c:	e8 1f 39 00 00       	call   80104740 <release>
+80100e17:	68 e0 0f 11 80       	push   $0x80110fe0
+80100e1c:	e8 ff 41 00 00       	call   80105020 <release>
   return f;
 }
 80100e21:	89 d8                	mov    %ebx,%eax
@@ -1655,7 +1655,7 @@
 80100e27:	c3                   	ret    
     panic("filedup");
 80100e28:	83 ec 0c             	sub    $0xc,%esp
-80100e2b:	68 b4 73 10 80       	push   $0x801073b4
+80100e2b:	68 f4 7c 10 80       	push   $0x80107cf4
 80100e30:	e8 5b f5 ff ff       	call   80100390 <panic>
 80100e35:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80100e39:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
@@ -1676,8 +1676,8 @@
   struct file ff;
 
   acquire(&ftable.lock);
-80100e4c:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100e51:	e8 2a 38 00 00       	call   80104680 <acquire>
+80100e4c:	68 e0 0f 11 80       	push   $0x80110fe0
+80100e51:	e8 0a 41 00 00       	call   80104f60 <acquire>
   if(f->ref < 1)
 80100e56:	8b 43 04             	mov    0x4(%ebx),%eax
 80100e59:	83 c4 10             	add    $0x10,%esp
@@ -1690,7 +1690,7 @@
 80100e69:	89 43 04             	mov    %eax,0x4(%ebx)
 80100e6c:	74 1a                	je     80100e88 <fileclose+0x48>
     release(&ftable.lock);
-80100e6e:	c7 45 08 c0 ff 10 80 	movl   $0x8010ffc0,0x8(%ebp)
+80100e6e:	c7 45 08 e0 0f 11 80 	movl   $0x80110fe0,0x8(%ebp)
   else if(ff.type == FD_INODE){
     begin_op();
     iput(ff.ip);
@@ -1703,7 +1703,7 @@
 80100e7a:	5f                   	pop    %edi
 80100e7b:	5d                   	pop    %ebp
     release(&ftable.lock);
-80100e7c:	e9 bf 38 00 00       	jmp    80104740 <release>
+80100e7c:	e9 9f 41 00 00       	jmp    80105020 <release>
 80100e81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   ff = *f;
 80100e88:	0f b6 43 09          	movzbl 0x9(%ebx),%eax
@@ -1718,11 +1718,11 @@
 80100e9a:	88 45 e7             	mov    %al,-0x19(%ebp)
 80100e9d:	8b 43 10             	mov    0x10(%ebx),%eax
   release(&ftable.lock);
-80100ea0:	68 c0 ff 10 80       	push   $0x8010ffc0
+80100ea0:	68 e0 0f 11 80       	push   $0x80110fe0
   ff = *f;
 80100ea5:	89 45 e0             	mov    %eax,-0x20(%ebp)
   release(&ftable.lock);
-80100ea8:	e8 93 38 00 00       	call   80104740 <release>
+80100ea8:	e8 73 41 00 00       	call   80105020 <release>
   if(ff.type == FD_PIPE)
 80100ead:	83 c4 10             	add    $0x10,%esp
 80100eb0:	83 ff 01             	cmp    $0x1,%edi
@@ -1743,13 +1743,13 @@
 80100ecc:	83 ec 08             	sub    $0x8,%esp
 80100ecf:	53                   	push   %ebx
 80100ed0:	56                   	push   %esi
-80100ed1:	e8 7a 24 00 00       	call   80103350 <pipeclose>
+80100ed1:	e8 fa 24 00 00       	call   801033d0 <pipeclose>
 80100ed6:	83 c4 10             	add    $0x10,%esp
 80100ed9:	eb df                	jmp    80100eba <fileclose+0x7a>
 80100edb:	90                   	nop
 80100edc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     begin_op();
-80100ee0:	e8 bb 1c 00 00       	call   80102ba0 <begin_op>
+80100ee0:	e8 3b 1d 00 00       	call   80102c20 <begin_op>
     iput(ff.ip);
 80100ee5:	83 ec 0c             	sub    $0xc,%esp
 80100ee8:	ff 75 e0             	pushl  -0x20(%ebp)
@@ -1763,10 +1763,10 @@
 80100ef8:	5f                   	pop    %edi
 80100ef9:	5d                   	pop    %ebp
     end_op();
-80100efa:	e9 11 1d 00 00       	jmp    80102c10 <end_op>
+80100efa:	e9 91 1d 00 00       	jmp    80102c90 <end_op>
     panic("fileclose");
 80100eff:	83 ec 0c             	sub    $0xc,%esp
-80100f02:	68 bc 73 10 80       	push   $0x801073bc
+80100f02:	68 fc 7c 10 80       	push   $0x80107cfc
 80100f07:	e8 84 f4 ff ff       	call   80100390 <panic>
 80100f0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
@@ -1885,14 +1885,14 @@
 80100fcb:	5f                   	pop    %edi
 80100fcc:	5d                   	pop    %ebp
     return piperead(f->pipe, addr, n);
-80100fcd:	e9 2e 25 00 00       	jmp    80103500 <piperead>
+80100fcd:	e9 ae 25 00 00       	jmp    80103580 <piperead>
 80100fd2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     return -1;
 80100fd8:	be ff ff ff ff       	mov    $0xffffffff,%esi
 80100fdd:	eb d7                	jmp    80100fb6 <fileread+0x56>
   panic("fileread");
 80100fdf:	83 ec 0c             	sub    $0xc,%esp
-80100fe2:	68 c6 73 10 80       	push   $0x801073c6
+80100fe2:	68 06 7d 10 80       	push   $0x80107d06
 80100fe7:	e8 a4 f3 ff ff       	call   80100390 <panic>
 80100fec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
@@ -1959,7 +1959,7 @@
       iunlock(f->ip);
 80101044:	e8 17 07 00 00       	call   80101760 <iunlock>
       end_op();
-80101049:	e8 c2 1b 00 00       	call   80102c10 <end_op>
+80101049:	e8 42 1c 00 00       	call   80102c90 <end_op>
 8010104e:	8b 45 e0             	mov    -0x20(%ebp),%eax
 80101051:	83 c4 10             	add    $0x10,%esp
 
@@ -1981,7 +1981,7 @@
 8010106d:	81 fb 00 06 00 00    	cmp    $0x600,%ebx
 80101073:	0f 4f d8             	cmovg  %eax,%ebx
       begin_op();
-80101076:	e8 25 1b 00 00       	call   80102ba0 <begin_op>
+80101076:	e8 a5 1b 00 00       	call   80102c20 <begin_op>
       ilock(f->ip);
 8010107b:	83 ec 0c             	sub    $0xc,%esp
 8010107e:	ff 76 10             	pushl  0x10(%esi)
@@ -2003,7 +2003,7 @@
 801010a5:	89 45 e0             	mov    %eax,-0x20(%ebp)
 801010a8:	e8 b3 06 00 00       	call   80101760 <iunlock>
       end_op();
-801010ad:	e8 5e 1b 00 00       	call   80102c10 <end_op>
+801010ad:	e8 de 1b 00 00       	call   80102c90 <end_op>
       if(r < 0)
 801010b2:	8b 45 e0             	mov    -0x20(%ebp),%eax
 801010b5:	83 c4 10             	add    $0x10,%esp
@@ -2048,14 +2048,14 @@
 801010eb:	5f                   	pop    %edi
 801010ec:	5d                   	pop    %ebp
     return pipewrite(f->pipe, addr, n);
-801010ed:	e9 fe 22 00 00       	jmp    801033f0 <pipewrite>
+801010ed:	e9 7e 23 00 00       	jmp    80103470 <pipewrite>
         panic("short filewrite");
 801010f2:	83 ec 0c             	sub    $0xc,%esp
-801010f5:	68 cf 73 10 80       	push   $0x801073cf
+801010f5:	68 0f 7d 10 80       	push   $0x80107d0f
 801010fa:	e8 91 f2 ff ff       	call   80100390 <panic>
   panic("filewrite");
 801010ff:	83 ec 0c             	sub    $0xc,%esp
-80101102:	68 d5 73 10 80       	push   $0x801073d5
+80101102:	68 15 7d 10 80       	push   $0x80107d15
 80101107:	e8 84 f2 ff ff       	call   80100390 <panic>
 8010110c:	66 90                	xchg   %ax,%ax
 8010110e:	66 90                	xchg   %ax,%ax
@@ -2077,7 +2077,7 @@
 
   bp = bread(dev, BBLOCK(b, sb));
 80101117:	c1 ea 0c             	shr    $0xc,%edx
-8010111a:	03 15 d8 09 11 80    	add    0x801109d8,%edx
+8010111a:	03 15 f8 19 11 80    	add    0x801119f8,%edx
 80101120:	83 ec 08             	sub    $0x8,%esp
 80101123:	52                   	push   %edx
 80101124:	50                   	push   %eax
@@ -2110,7 +2110,7 @@
 80101154:	88 54 1e 5c          	mov    %dl,0x5c(%esi,%ebx,1)
   log_write(bp);
 80101158:	56                   	push   %esi
-80101159:	e8 12 1c 00 00       	call   80102d70 <log_write>
+80101159:	e8 92 1c 00 00       	call   80102df0 <log_write>
   brelse(bp);
 8010115e:	89 34 24             	mov    %esi,(%esp)
 80101161:	e8 7a f0 ff ff       	call   801001e0 <brelse>
@@ -2123,7 +2123,7 @@
 8010116f:	c3                   	ret    
     panic("freeing free block");
 80101170:	83 ec 0c             	sub    $0xc,%esp
-80101173:	68 df 73 10 80       	push   $0x801073df
+80101173:	68 1f 7d 10 80       	push   $0x80107d1f
 80101178:	e8 13 f2 ff ff       	call   80100390 <panic>
 8010117d:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -2136,7 +2136,7 @@
 80101185:	53                   	push   %ebx
 80101186:	83 ec 1c             	sub    $0x1c,%esp
   for(b = 0; b < sb.size; b += BPB){
-80101189:	8b 0d c0 09 11 80    	mov    0x801109c0,%ecx
+80101189:	8b 0d e0 19 11 80    	mov    0x801119e0,%ecx
 {
 8010118f:	89 45 d8             	mov    %eax,-0x28(%ebp)
   for(b = 0; b < sb.size; b += BPB){
@@ -2148,13 +2148,13 @@
 801011a4:	83 ec 08             	sub    $0x8,%esp
 801011a7:	89 f0                	mov    %esi,%eax
 801011a9:	c1 f8 0c             	sar    $0xc,%eax
-801011ac:	03 05 d8 09 11 80    	add    0x801109d8,%eax
+801011ac:	03 05 f8 19 11 80    	add    0x801119f8,%eax
 801011b2:	50                   	push   %eax
 801011b3:	ff 75 d8             	pushl  -0x28(%ebp)
 801011b6:	e8 15 ef ff ff       	call   801000d0 <bread>
 801011bb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
-801011be:	a1 c0 09 11 80       	mov    0x801109c0,%eax
+801011be:	a1 e0 19 11 80       	mov    0x801119e0,%eax
 801011c3:	83 c4 10             	add    $0x10,%esp
 801011c6:	89 45 e0             	mov    %eax,-0x20(%ebp)
 801011c9:	31 c0                	xor    %eax,%eax
@@ -2190,11 +2190,11 @@
 8010120c:	81 45 dc 00 10 00 00 	addl   $0x1000,-0x24(%ebp)
 80101213:	83 c4 10             	add    $0x10,%esp
 80101216:	8b 45 dc             	mov    -0x24(%ebp),%eax
-80101219:	39 05 c0 09 11 80    	cmp    %eax,0x801109c0
+80101219:	39 05 e0 19 11 80    	cmp    %eax,0x801119e0
 8010121f:	77 80                	ja     801011a1 <balloc+0x21>
   panic("balloc: out of blocks");
 80101221:	83 ec 0c             	sub    $0xc,%esp
-80101224:	68 f2 73 10 80       	push   $0x801073f2
+80101224:	68 32 7d 10 80       	push   $0x80107d32
 80101229:	e8 62 f1 ff ff       	call   80100390 <panic>
 8010122e:	66 90                	xchg   %ax,%ax
         bp->data[bi/8] |= m;  // Mark block in use.
@@ -2206,7 +2206,7 @@
 80101238:	88 54 0f 5c          	mov    %dl,0x5c(%edi,%ecx,1)
         log_write(bp);
 8010123c:	57                   	push   %edi
-8010123d:	e8 2e 1b 00 00       	call   80102d70 <log_write>
+8010123d:	e8 ae 1b 00 00       	call   80102df0 <log_write>
         brelse(bp);
 80101242:	89 3c 24             	mov    %edi,(%esp)
 80101245:	e8 96 ef ff ff       	call   801001e0 <brelse>
@@ -2223,10 +2223,10 @@
 8010125d:	68 00 02 00 00       	push   $0x200
 80101262:	6a 00                	push   $0x0
 80101264:	50                   	push   %eax
-80101265:	e8 26 35 00 00       	call   80104790 <memset>
+80101265:	e8 06 3e 00 00       	call   80105070 <memset>
   log_write(bp);
 8010126a:	89 1c 24             	mov    %ebx,(%esp)
-8010126d:	e8 fe 1a 00 00       	call   80102d70 <log_write>
+8010126d:	e8 7e 1b 00 00       	call   80102df0 <log_write>
   brelse(bp);
 80101272:	89 1c 24             	mov    %ebx,(%esp)
 80101275:	e8 66 ef ff ff       	call   801001e0 <brelse>
@@ -2262,13 +2262,13 @@
   empty = 0;
 80101298:	31 f6                	xor    %esi,%esi
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
-8010129a:	bb 14 0a 11 80       	mov    $0x80110a14,%ebx
+8010129a:	bb 34 1a 11 80       	mov    $0x80111a34,%ebx
 {
 8010129f:	83 ec 28             	sub    $0x28,%esp
 801012a2:	89 55 e4             	mov    %edx,-0x1c(%ebp)
   acquire(&icache.lock);
-801012a5:	68 e0 09 11 80       	push   $0x801109e0
-801012aa:	e8 d1 33 00 00       	call   80104680 <acquire>
+801012a5:	68 00 1a 11 80       	push   $0x80111a00
+801012aa:	e8 b1 3c 00 00       	call   80104f60 <acquire>
 801012af:	83 c4 10             	add    $0x10,%esp
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
 801012b2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
@@ -2276,7 +2276,7 @@
 801012b7:	89 f6                	mov    %esi,%esi
 801012b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 801012c0:	81 c3 90 00 00 00    	add    $0x90,%ebx
-801012c6:	81 fb 34 26 11 80    	cmp    $0x80112634,%ebx
+801012c6:	81 fb 54 36 11 80    	cmp    $0x80113654,%ebx
 801012cc:	73 22                	jae    801012f0 <iget+0x60>
     if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
 801012ce:	8b 4b 08             	mov    0x8(%ebx),%ecx
@@ -2295,7 +2295,7 @@
 801012df:	0f 44 f3             	cmove  %ebx,%esi
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
 801012e2:	81 c3 90 00 00 00    	add    $0x90,%ebx
-801012e8:	81 fb 34 26 11 80    	cmp    $0x80112634,%ebx
+801012e8:	81 fb 54 36 11 80    	cmp    $0x80113654,%ebx
 801012ee:	72 de                	jb     801012ce <iget+0x3e>
       empty = ip;
   }
@@ -2320,8 +2320,8 @@
   ip->valid = 0;
 80101303:	c7 46 4c 00 00 00 00 	movl   $0x0,0x4c(%esi)
   release(&icache.lock);
-8010130a:	68 e0 09 11 80       	push   $0x801109e0
-8010130f:	e8 2c 34 00 00       	call   80104740 <release>
+8010130a:	68 00 1a 11 80       	push   $0x80111a00
+8010130f:	e8 0c 3d 00 00       	call   80105020 <release>
 
   return ip;
 80101314:	83 c4 10             	add    $0x10,%esp
@@ -2344,11 +2344,11 @@
       return ip;
 80101333:	89 de                	mov    %ebx,%esi
       release(&icache.lock);
-80101335:	68 e0 09 11 80       	push   $0x801109e0
+80101335:	68 00 1a 11 80       	push   $0x80111a00
       ip->ref++;
 8010133a:	89 4b 08             	mov    %ecx,0x8(%ebx)
       release(&icache.lock);
-8010133d:	e8 fe 33 00 00       	call   80104740 <release>
+8010133d:	e8 de 3c 00 00       	call   80105020 <release>
       return ip;
 80101342:	83 c4 10             	add    $0x10,%esp
 }
@@ -2361,7 +2361,7 @@
 8010134e:	c3                   	ret    
     panic("iget: no inodes");
 8010134f:	83 ec 0c             	sub    $0xc,%esp
-80101352:	68 08 74 10 80       	push   $0x80107408
+80101352:	68 48 7d 10 80       	push   $0x80107d48
 80101357:	e8 34 f0 ff ff       	call   80100390 <panic>
 8010135c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
@@ -2440,7 +2440,7 @@
 801013cb:	89 02                	mov    %eax,(%edx)
       log_write(bp);
 801013cd:	57                   	push   %edi
-801013ce:	e8 9d 19 00 00       	call   80102d70 <log_write>
+801013ce:	e8 1d 1a 00 00       	call   80102df0 <log_write>
 801013d3:	83 c4 10             	add    $0x10,%esp
     brelse(bp);
 801013d6:	83 ec 0c             	sub    $0xc,%esp
@@ -2481,7 +2481,7 @@
 8010141f:	e9 7c ff ff ff       	jmp    801013a0 <bmap+0x40>
   panic("bmap: out of range");
 80101424:	83 ec 0c             	sub    $0xc,%esp
-80101427:	68 18 74 10 80       	push   $0x80107418
+80101427:	68 58 7d 10 80       	push   $0x80107d58
 8010142c:	e8 5f ef ff ff       	call   80100390 <panic>
 80101431:	eb 0d                	jmp    80101440 <readsb>
 80101433:	90                   	nop
@@ -2517,7 +2517,7 @@
 8010145d:	6a 1c                	push   $0x1c
 8010145f:	50                   	push   %eax
 80101460:	56                   	push   %esi
-80101461:	e8 da 33 00 00       	call   80104840 <memmove>
+80101461:	e8 ba 3c 00 00       	call   80105120 <memmove>
   brelse(bp);
 80101466:	89 5d 08             	mov    %ebx,0x8(%ebp)
 80101469:	83 c4 10             	add    $0x10,%esp
@@ -2536,38 +2536,38 @@
 80101480:	55                   	push   %ebp
 80101481:	89 e5                	mov    %esp,%ebp
 80101483:	53                   	push   %ebx
-80101484:	bb 20 0a 11 80       	mov    $0x80110a20,%ebx
+80101484:	bb 40 1a 11 80       	mov    $0x80111a40,%ebx
 80101489:	83 ec 0c             	sub    $0xc,%esp
   initlock(&icache.lock, "icache");
-8010148c:	68 2b 74 10 80       	push   $0x8010742b
-80101491:	68 e0 09 11 80       	push   $0x801109e0
-80101496:	e8 a5 30 00 00       	call   80104540 <initlock>
+8010148c:	68 6b 7d 10 80       	push   $0x80107d6b
+80101491:	68 00 1a 11 80       	push   $0x80111a00
+80101496:	e8 85 39 00 00       	call   80104e20 <initlock>
 8010149b:	83 c4 10             	add    $0x10,%esp
 8010149e:	66 90                	xchg   %ax,%ax
     initsleeplock(&icache.inode[i].lock, "inode");
 801014a0:	83 ec 08             	sub    $0x8,%esp
-801014a3:	68 32 74 10 80       	push   $0x80107432
+801014a3:	68 72 7d 10 80       	push   $0x80107d72
 801014a8:	53                   	push   %ebx
 801014a9:	81 c3 90 00 00 00    	add    $0x90,%ebx
-801014af:	e8 5c 2f 00 00       	call   80104410 <initsleeplock>
+801014af:	e8 3c 38 00 00       	call   80104cf0 <initsleeplock>
   for(i = 0; i < NINODE; i++) {
 801014b4:	83 c4 10             	add    $0x10,%esp
-801014b7:	81 fb 40 26 11 80    	cmp    $0x80112640,%ebx
+801014b7:	81 fb 60 36 11 80    	cmp    $0x80113660,%ebx
 801014bd:	75 e1                	jne    801014a0 <iinit+0x20>
   readsb(dev, &sb);
 801014bf:	83 ec 08             	sub    $0x8,%esp
-801014c2:	68 c0 09 11 80       	push   $0x801109c0
+801014c2:	68 e0 19 11 80       	push   $0x801119e0
 801014c7:	ff 75 08             	pushl  0x8(%ebp)
 801014ca:	e8 71 ff ff ff       	call   80101440 <readsb>
   cprintf("sb: size %d nblocks %d ninodes %d nlog %d logstart %d\
-801014cf:	ff 35 d8 09 11 80    	pushl  0x801109d8
-801014d5:	ff 35 d4 09 11 80    	pushl  0x801109d4
-801014db:	ff 35 d0 09 11 80    	pushl  0x801109d0
-801014e1:	ff 35 cc 09 11 80    	pushl  0x801109cc
-801014e7:	ff 35 c8 09 11 80    	pushl  0x801109c8
-801014ed:	ff 35 c4 09 11 80    	pushl  0x801109c4
-801014f3:	ff 35 c0 09 11 80    	pushl  0x801109c0
-801014f9:	68 98 74 10 80       	push   $0x80107498
+801014cf:	ff 35 f8 19 11 80    	pushl  0x801119f8
+801014d5:	ff 35 f4 19 11 80    	pushl  0x801119f4
+801014db:	ff 35 f0 19 11 80    	pushl  0x801119f0
+801014e1:	ff 35 ec 19 11 80    	pushl  0x801119ec
+801014e7:	ff 35 e8 19 11 80    	pushl  0x801119e8
+801014ed:	ff 35 e4 19 11 80    	pushl  0x801119e4
+801014f3:	ff 35 e0 19 11 80    	pushl  0x801119e0
+801014f9:	68 d8 7d 10 80       	push   $0x80107dd8
 801014fe:	e8 5d f1 ff ff       	call   80100660 <cprintf>
 }
 80101503:	83 c4 30             	add    $0x30,%esp
@@ -2586,7 +2586,7 @@
 80101515:	53                   	push   %ebx
 80101516:	83 ec 1c             	sub    $0x1c,%esp
   for(inum = 1; inum < sb.ninodes; inum++){
-80101519:	83 3d c8 09 11 80 01 	cmpl   $0x1,0x801109c8
+80101519:	83 3d e8 19 11 80 01 	cmpl   $0x1,0x801119e8
 {
 80101520:	8b 45 0c             	mov    0xc(%ebp),%eax
 80101523:	8b 75 08             	mov    0x8(%ebp),%esi
@@ -2606,13 +2606,13 @@
 80101547:	e8 94 ec ff ff       	call   801001e0 <brelse>
   for(inum = 1; inum < sb.ninodes; inum++){
 8010154c:	83 c4 10             	add    $0x10,%esp
-8010154f:	39 1d c8 09 11 80    	cmp    %ebx,0x801109c8
+8010154f:	39 1d e8 19 11 80    	cmp    %ebx,0x801119e8
 80101555:	76 69                	jbe    801015c0 <ialloc+0xb0>
     bp = bread(dev, IBLOCK(inum, sb));
 80101557:	89 d8                	mov    %ebx,%eax
 80101559:	83 ec 08             	sub    $0x8,%esp
 8010155c:	c1 e8 03             	shr    $0x3,%eax
-8010155f:	03 05 d4 09 11 80    	add    0x801109d4,%eax
+8010155f:	03 05 f4 19 11 80    	add    0x801119f4,%eax
 80101565:	50                   	push   %eax
 80101566:	56                   	push   %esi
 80101567:	e8 64 eb ff ff       	call   801000d0 <bread>
@@ -2634,14 +2634,14 @@
 80101589:	6a 40                	push   $0x40
 8010158b:	6a 00                	push   $0x0
 8010158d:	51                   	push   %ecx
-8010158e:	e8 fd 31 00 00       	call   80104790 <memset>
+8010158e:	e8 dd 3a 00 00       	call   80105070 <memset>
       dip->type = type;
 80101593:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
 80101597:	8b 4d e0             	mov    -0x20(%ebp),%ecx
 8010159a:	66 89 01             	mov    %ax,(%ecx)
       log_write(bp);   // mark it allocated on the disk
 8010159d:	89 3c 24             	mov    %edi,(%esp)
-801015a0:	e8 cb 17 00 00       	call   80102d70 <log_write>
+801015a0:	e8 4b 18 00 00       	call   80102df0 <log_write>
       brelse(bp);
 801015a5:	89 3c 24             	mov    %edi,(%esp)
 801015a8:	e8 33 ec ff ff       	call   801001e0 <brelse>
@@ -2661,7 +2661,7 @@
 801015bb:	e9 d0 fc ff ff       	jmp    80101290 <iget>
   panic("ialloc: no inodes");
 801015c0:	83 ec 0c             	sub    $0xc,%esp
-801015c3:	68 38 74 10 80       	push   $0x80107438
+801015c3:	68 78 7d 10 80       	push   $0x80107d78
 801015c8:	e8 c3 ed ff ff       	call   80100390 <panic>
 801015cd:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -2679,7 +2679,7 @@
 801015de:	83 c3 5c             	add    $0x5c,%ebx
   bp = bread(ip->dev, IBLOCK(ip->inum, sb));
 801015e1:	c1 e8 03             	shr    $0x3,%eax
-801015e4:	03 05 d4 09 11 80    	add    0x801109d4,%eax
+801015e4:	03 05 f4 19 11 80    	add    0x801119f4,%eax
 801015ea:	50                   	push   %eax
 801015eb:	ff 73 a4             	pushl  -0x5c(%ebx)
 801015ee:	e8 dd ea ff ff       	call   801000d0 <bread>
@@ -2715,10 +2715,10 @@
 8010162d:	6a 34                	push   $0x34
 8010162f:	53                   	push   %ebx
 80101630:	50                   	push   %eax
-80101631:	e8 0a 32 00 00       	call   80104840 <memmove>
+80101631:	e8 ea 3a 00 00       	call   80105120 <memmove>
   log_write(bp);
 80101636:	89 34 24             	mov    %esi,(%esp)
-80101639:	e8 32 17 00 00       	call   80102d70 <log_write>
+80101639:	e8 b2 17 00 00       	call   80102df0 <log_write>
   brelse(bp);
 8010163e:	89 75 08             	mov    %esi,0x8(%ebp)
 80101641:	83 c4 10             	add    $0x10,%esp
@@ -2739,13 +2739,13 @@
 80101654:	83 ec 10             	sub    $0x10,%esp
 80101657:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&icache.lock);
-8010165a:	68 e0 09 11 80       	push   $0x801109e0
-8010165f:	e8 1c 30 00 00       	call   80104680 <acquire>
+8010165a:	68 00 1a 11 80       	push   $0x80111a00
+8010165f:	e8 fc 38 00 00       	call   80104f60 <acquire>
   ip->ref++;
 80101664:	83 43 08 01          	addl   $0x1,0x8(%ebx)
   release(&icache.lock);
-80101668:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-8010166f:	e8 cc 30 00 00       	call   80104740 <release>
+80101668:	c7 04 24 00 1a 11 80 	movl   $0x80111a00,(%esp)
+8010166f:	e8 ac 39 00 00       	call   80105020 <release>
 }
 80101674:	89 d8                	mov    %ebx,%eax
 80101676:	8b 5d fc             	mov    -0x4(%ebp),%ebx
@@ -2771,7 +2771,7 @@
 8010169b:	8d 43 0c             	lea    0xc(%ebx),%eax
 8010169e:	83 ec 0c             	sub    $0xc,%esp
 801016a1:	50                   	push   %eax
-801016a2:	e8 a9 2d 00 00       	call   80104450 <acquiresleep>
+801016a2:	e8 89 36 00 00       	call   80104d30 <acquiresleep>
   if(ip->valid == 0){
 801016a7:	8b 43 4c             	mov    0x4c(%ebx),%eax
 801016aa:	83 c4 10             	add    $0x10,%esp
@@ -2789,7 +2789,7 @@
 801016c0:	8b 43 04             	mov    0x4(%ebx),%eax
 801016c3:	83 ec 08             	sub    $0x8,%esp
 801016c6:	c1 e8 03             	shr    $0x3,%eax
-801016c9:	03 05 d4 09 11 80    	add    0x801109d4,%eax
+801016c9:	03 05 f4 19 11 80    	add    0x801119f4,%eax
 801016cf:	50                   	push   %eax
 801016d0:	ff 33                	pushl  (%ebx)
 801016d2:	e8 f9 e9 ff ff       	call   801000d0 <bread>
@@ -2825,7 +2825,7 @@
 80101713:	50                   	push   %eax
 80101714:	8d 43 5c             	lea    0x5c(%ebx),%eax
 80101717:	50                   	push   %eax
-80101718:	e8 23 31 00 00       	call   80104840 <memmove>
+80101718:	e8 03 3a 00 00       	call   80105120 <memmove>
     brelse(bp);
 8010171d:	89 34 24             	mov    %esi,(%esp)
 80101720:	e8 bb ea ff ff       	call   801001e0 <brelse>
@@ -2838,11 +2838,11 @@
 80101734:	0f 85 77 ff ff ff    	jne    801016b1 <ilock+0x31>
       panic("ilock: no type");
 8010173a:	83 ec 0c             	sub    $0xc,%esp
-8010173d:	68 50 74 10 80       	push   $0x80107450
+8010173d:	68 90 7d 10 80       	push   $0x80107d90
 80101742:	e8 49 ec ff ff       	call   80100390 <panic>
     panic("ilock");
 80101747:	83 ec 0c             	sub    $0xc,%esp
-8010174a:	68 4a 74 10 80       	push   $0x8010744a
+8010174a:	68 8a 7d 10 80       	push   $0x80107d8a
 8010174f:	e8 3c ec ff ff       	call   80100390 <panic>
 80101754:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8010175a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
@@ -2860,7 +2860,7 @@
 8010176c:	8d 73 0c             	lea    0xc(%ebx),%esi
 8010176f:	83 ec 0c             	sub    $0xc,%esp
 80101772:	56                   	push   %esi
-80101773:	e8 78 2d 00 00       	call   801044f0 <holdingsleep>
+80101773:	e8 58 36 00 00       	call   80104dd0 <holdingsleep>
 80101778:	83 c4 10             	add    $0x10,%esp
 8010177b:	85 c0                	test   %eax,%eax
 8010177d:	74 15                	je     80101794 <iunlock+0x34>
@@ -2875,10 +2875,10 @@
 8010178d:	5e                   	pop    %esi
 8010178e:	5d                   	pop    %ebp
   releasesleep(&ip->lock);
-8010178f:	e9 1c 2d 00 00       	jmp    801044b0 <releasesleep>
+8010178f:	e9 fc 35 00 00       	jmp    80104d90 <releasesleep>
     panic("iunlock");
 80101794:	83 ec 0c             	sub    $0xc,%esp
-80101797:	68 5f 74 10 80       	push   $0x8010745f
+80101797:	68 9f 7d 10 80       	push   $0x80107d9f
 8010179c:	e8 ef eb ff ff       	call   80100390 <panic>
 801017a1:	eb 0d                	jmp    801017b0 <iput>
 801017a3:	90                   	nop
@@ -2907,7 +2907,7 @@
   acquiresleep(&ip->lock);
 801017bc:	8d 7b 0c             	lea    0xc(%ebx),%edi
 801017bf:	57                   	push   %edi
-801017c0:	e8 8b 2c 00 00       	call   80104450 <acquiresleep>
+801017c0:	e8 6b 35 00 00       	call   80104d30 <acquiresleep>
   if(ip->valid && ip->nlink == 0){
 801017c5:	8b 53 4c             	mov    0x4c(%ebx),%edx
 801017c8:	83 c4 10             	add    $0x10,%esp
@@ -2918,15 +2918,15 @@
   releasesleep(&ip->lock);
 801017d6:	83 ec 0c             	sub    $0xc,%esp
 801017d9:	57                   	push   %edi
-801017da:	e8 d1 2c 00 00       	call   801044b0 <releasesleep>
+801017da:	e8 b1 35 00 00       	call   80104d90 <releasesleep>
   acquire(&icache.lock);
-801017df:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-801017e6:	e8 95 2e 00 00       	call   80104680 <acquire>
+801017df:	c7 04 24 00 1a 11 80 	movl   $0x80111a00,(%esp)
+801017e6:	e8 75 37 00 00       	call   80104f60 <acquire>
   ip->ref--;
 801017eb:	83 6b 08 01          	subl   $0x1,0x8(%ebx)
   release(&icache.lock);
 801017ef:	83 c4 10             	add    $0x10,%esp
-801017f2:	c7 45 08 e0 09 11 80 	movl   $0x801109e0,0x8(%ebp)
+801017f2:	c7 45 08 00 1a 11 80 	movl   $0x80111a00,0x8(%ebp)
 }
 801017f9:	8d 65 f4             	lea    -0xc(%ebp),%esp
 801017fc:	5b                   	pop    %ebx
@@ -2934,17 +2934,17 @@
 801017fe:	5f                   	pop    %edi
 801017ff:	5d                   	pop    %ebp
   release(&icache.lock);
-80101800:	e9 3b 2f 00 00       	jmp    80104740 <release>
+80101800:	e9 1b 38 00 00       	jmp    80105020 <release>
 80101805:	8d 76 00             	lea    0x0(%esi),%esi
     acquire(&icache.lock);
 80101808:	83 ec 0c             	sub    $0xc,%esp
-8010180b:	68 e0 09 11 80       	push   $0x801109e0
-80101810:	e8 6b 2e 00 00       	call   80104680 <acquire>
+8010180b:	68 00 1a 11 80       	push   $0x80111a00
+80101810:	e8 4b 37 00 00       	call   80104f60 <acquire>
     int r = ip->ref;
 80101815:	8b 73 08             	mov    0x8(%ebx),%esi
     release(&icache.lock);
-80101818:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-8010181f:	e8 1c 2f 00 00       	call   80104740 <release>
+80101818:	c7 04 24 00 1a 11 80 	movl   $0x80111a00,(%esp)
+8010181f:	e8 fc 37 00 00       	call   80105020 <release>
     if(r == 1){
 80101824:	83 c4 10             	add    $0x10,%esp
 80101827:	83 fe 01             	cmp    $0x1,%esi
@@ -3197,7 +3197,7 @@
   for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
 80101a05:	01 de                	add    %ebx,%esi
     memmove(dst, bp->data + off%BSIZE, m);
-80101a07:	e8 34 2e 00 00       	call   80104840 <memmove>
+80101a07:	e8 14 37 00 00       	call   80105120 <memmove>
     brelse(bp);
 80101a0c:	8b 55 dc             	mov    -0x24(%ebp),%edx
 80101a0f:	89 14 24             	mov    %edx,(%esp)
@@ -3222,7 +3222,7 @@
 80101a30:	0f bf 40 52          	movswl 0x52(%eax),%eax
 80101a34:	66 83 f8 09          	cmp    $0x9,%ax
 80101a38:	77 17                	ja     80101a51 <readi+0xf1>
-80101a3a:	8b 04 c5 60 09 11 80 	mov    -0x7feef6a0(,%eax,8),%eax
+80101a3a:	8b 04 c5 80 19 11 80 	mov    -0x7feee680(,%eax,8),%eax
 80101a41:	85 c0                	test   %eax,%eax
 80101a43:	74 0c                	je     80101a51 <readi+0xf1>
     return devsw[ip->major].read(ip, dst, n);
@@ -3329,10 +3329,10 @@
 80101b00:	01 de                	add    %ebx,%esi
     memmove(bp->data + off%BSIZE, src, m);
 80101b02:	50                   	push   %eax
-80101b03:	e8 38 2d 00 00       	call   80104840 <memmove>
+80101b03:	e8 18 36 00 00       	call   80105120 <memmove>
     log_write(bp);
 80101b08:	89 3c 24             	mov    %edi,(%esp)
-80101b0b:	e8 60 12 00 00       	call   80102d70 <log_write>
+80101b0b:	e8 e0 12 00 00       	call   80102df0 <log_write>
     brelse(bp);
 80101b10:	89 3c 24             	mov    %edi,(%esp)
 80101b13:	e8 c8 e6 ff ff       	call   801001e0 <brelse>
@@ -3366,7 +3366,7 @@
 80101b40:	0f bf 40 52          	movswl 0x52(%eax),%eax
 80101b44:	66 83 f8 09          	cmp    $0x9,%ax
 80101b48:	77 36                	ja     80101b80 <writei+0x120>
-80101b4a:	8b 04 c5 64 09 11 80 	mov    -0x7feef69c(,%eax,8),%eax
+80101b4a:	8b 04 c5 84 19 11 80 	mov    -0x7feee67c(,%eax,8),%eax
 80101b51:	85 c0                	test   %eax,%eax
 80101b53:	74 2b                	je     80101b80 <writei+0x120>
     return devsw[ip->major].write(ip, src, n);
@@ -3412,7 +3412,7 @@
 80101b96:	6a 0e                	push   $0xe
 80101b98:	ff 75 0c             	pushl  0xc(%ebp)
 80101b9b:	ff 75 08             	pushl  0x8(%ebp)
-80101b9e:	e8 0d 2d 00 00       	call   801048b0 <strncmp>
+80101b9e:	e8 ed 35 00 00       	call   80105190 <strncmp>
 }
 80101ba3:	c9                   	leave  
 80101ba4:	c3                   	ret    
@@ -3468,7 +3468,7 @@
 80101bf7:	6a 0e                	push   $0xe
 80101bf9:	50                   	push   %eax
 80101bfa:	ff 75 0c             	pushl  0xc(%ebp)
-80101bfd:	e8 ae 2c 00 00       	call   801048b0 <strncmp>
+80101bfd:	e8 8e 35 00 00       	call   80105190 <strncmp>
       continue;
     if(namecmp(name, de.name) == 0){
 80101c02:	83 c4 10             	add    $0x10,%esp
@@ -3516,11 +3516,11 @@
 80101c3e:	c3                   	ret    
       panic("dirlookup read");
 80101c3f:	83 ec 0c             	sub    $0xc,%esp
-80101c42:	68 79 74 10 80       	push   $0x80107479
+80101c42:	68 b9 7d 10 80       	push   $0x80107db9
 80101c47:	e8 44 e7 ff ff       	call   80100390 <panic>
     panic("dirlookup not DIR");
 80101c4c:	83 ec 0c             	sub    $0xc,%esp
-80101c4f:	68 67 74 10 80       	push   $0x80107467
+80101c4f:	68 a7 7d 10 80       	push   $0x80107da7
 80101c54:	e8 37 e7 ff ff       	call   80100390 <panic>
 80101c59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
@@ -3550,19 +3550,19 @@
     ip = iget(ROOTDEV, ROOTINO);
   else
     ip = idup(myproc()->cwd);
-80101c79:	e8 62 1b 00 00       	call   801037e0 <myproc>
+80101c79:	e8 d2 21 00 00       	call   80103e50 <myproc>
   acquire(&icache.lock);
 80101c7e:	83 ec 0c             	sub    $0xc,%esp
     ip = idup(myproc()->cwd);
 80101c81:	8b 70 68             	mov    0x68(%eax),%esi
   acquire(&icache.lock);
-80101c84:	68 e0 09 11 80       	push   $0x801109e0
-80101c89:	e8 f2 29 00 00       	call   80104680 <acquire>
+80101c84:	68 00 1a 11 80       	push   $0x80111a00
+80101c89:	e8 d2 32 00 00       	call   80104f60 <acquire>
   ip->ref++;
 80101c8e:	83 46 08 01          	addl   $0x1,0x8(%esi)
   release(&icache.lock);
-80101c92:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-80101c99:	e8 a2 2a 00 00       	call   80104740 <release>
+80101c92:	c7 04 24 00 1a 11 80 	movl   $0x80111a00,(%esp)
+80101c99:	e8 82 33 00 00       	call   80105020 <release>
 80101c9e:	83 c4 10             	add    $0x10,%esp
 80101ca1:	eb 08                	jmp    80101cab <namex+0x4b>
 80101ca3:	90                   	nop
@@ -3603,7 +3603,7 @@
 80101cf1:	6a 0e                	push   $0xe
 80101cf3:	53                   	push   %ebx
 80101cf4:	57                   	push   %edi
-80101cf5:	e8 46 2b 00 00       	call   80104840 <memmove>
+80101cf5:	e8 26 34 00 00       	call   80105120 <memmove>
     path++;
 80101cfa:	8b 55 e4             	mov    -0x1c(%ebp),%edx
     memmove(name, s, DIRSIZ);
@@ -3676,7 +3676,7 @@
 80101d85:	51                   	push   %ecx
 80101d86:	53                   	push   %ebx
 80101d87:	57                   	push   %edi
-80101d88:	e8 b3 2a 00 00       	call   80104840 <memmove>
+80101d88:	e8 93 33 00 00       	call   80105120 <memmove>
     name[len] = 0;
 80101d8d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
 80101d90:	8b 55 dc             	mov    -0x24(%ebp),%edx
@@ -3806,7 +3806,7 @@
 80101e77:	6a 0e                	push   $0xe
 80101e79:	ff 75 0c             	pushl  0xc(%ebp)
 80101e7c:	50                   	push   %eax
-80101e7d:	e8 8e 2a 00 00       	call   80104910 <strncpy>
+80101e7d:	e8 6e 33 00 00       	call   801051f0 <strncpy>
   de.inum = inum;
 80101e82:	8b 45 10             	mov    0x10(%ebp),%eax
   if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
@@ -3840,11 +3840,11 @@
 80101eb6:	eb e5                	jmp    80101e9d <dirlink+0x7d>
       panic("dirlink read");
 80101eb8:	83 ec 0c             	sub    $0xc,%esp
-80101ebb:	68 88 74 10 80       	push   $0x80107488
+80101ebb:	68 c8 7d 10 80       	push   $0x80107dc8
 80101ec0:	e8 cb e4 ff ff       	call   80100390 <panic>
     panic("dirlink");
 80101ec5:	83 ec 0c             	sub    $0xc,%esp
-80101ec8:	68 8e 7a 10 80       	push   $0x80107a8e
+80101ec8:	68 03 82 10 80       	push   $0x80108203
 80101ecd:	e8 be e4 ff ff       	call   80100390 <panic>
 80101ed2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80101ed9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
@@ -3997,11 +3997,11 @@
 80101fd7:	c3                   	ret    
     panic("incorrect blockno");
 80101fd8:	83 ec 0c             	sub    $0xc,%esp
-80101fdb:	68 f4 74 10 80       	push   $0x801074f4
+80101fdb:	68 34 7e 10 80       	push   $0x80107e34
 80101fe0:	e8 ab e3 ff ff       	call   80100390 <panic>
     panic("idestart");
 80101fe5:	83 ec 0c             	sub    $0xc,%esp
-80101fe8:	68 eb 74 10 80       	push   $0x801074eb
+80101fe8:	68 2b 7e 10 80       	push   $0x80107e2b
 80101fed:	e8 9e e3 ff ff       	call   80100390 <panic>
 80101ff2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80101ff9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
@@ -4012,12 +4012,12 @@
 80102001:	89 e5                	mov    %esp,%ebp
 80102003:	83 ec 10             	sub    $0x10,%esp
   initlock(&idelock, "ide");
-80102006:	68 06 75 10 80       	push   $0x80107506
-8010200b:	68 80 a5 10 80       	push   $0x8010a580
-80102010:	e8 2b 25 00 00       	call   80104540 <initlock>
+80102006:	68 46 7e 10 80       	push   $0x80107e46
+8010200b:	68 80 b5 10 80       	push   $0x8010b580
+80102010:	e8 0b 2e 00 00       	call   80104e20 <initlock>
   ioapicenable(IRQ_IDE, ncpu - 1);
 80102015:	58                   	pop    %eax
-80102016:	a1 00 2d 11 80       	mov    0x80112d00,%eax
+80102016:	a1 20 3d 11 80       	mov    0x80113d20,%eax
 8010201b:	5a                   	pop    %edx
 8010201c:	83 e8 01             	sub    $0x1,%eax
 8010201f:	50                   	push   %eax
@@ -4049,7 +4049,7 @@
 80102056:	84 c0                	test   %al,%al
 80102058:	74 f6                	je     80102050 <ideinit+0x50>
       havedisk1 = 1;
-8010205a:	c7 05 60 a5 10 80 01 	movl   $0x1,0x8010a560
+8010205a:	c7 05 60 b5 10 80 01 	movl   $0x1,0x8010b560
 80102061:	00 00 00 
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
 80102064:	b8 e0 ff ff ff       	mov    $0xffffffe0,%eax
@@ -4089,11 +4089,11 @@
 
   // First queued buffer is the active request.
   acquire(&idelock);
-80102089:	68 80 a5 10 80       	push   $0x8010a580
-8010208e:	e8 ed 25 00 00       	call   80104680 <acquire>
+80102089:	68 80 b5 10 80       	push   $0x8010b580
+8010208e:	e8 cd 2e 00 00       	call   80104f60 <acquire>
 
   if((b = idequeue) == 0){
-80102093:	8b 1d 64 a5 10 80    	mov    0x8010a564,%ebx
+80102093:	8b 1d 64 b5 10 80    	mov    0x8010b564,%ebx
 80102099:	83 c4 10             	add    $0x10,%esp
 8010209c:	85 db                	test   %ebx,%ebx
 8010209e:	74 67                	je     80102107 <ideintr+0x87>
@@ -4102,7 +4102,7 @@
   }
   idequeue = b->qnext;
 801020a0:	8b 43 58             	mov    0x58(%ebx),%eax
-801020a3:	a3 64 a5 10 80       	mov    %eax,0x8010a564
+801020a3:	a3 64 b5 10 80       	mov    %eax,0x8010b564
 
   // Read data if needed.
   if(!(b->flags & B_DIRTY) && idewait(1) >= 0)
@@ -4144,11 +4144,11 @@
 801020ee:	89 0b                	mov    %ecx,(%ebx)
   wakeup(b);
 801020f0:	53                   	push   %ebx
-801020f1:	e8 3a 1e 00 00       	call   80103f30 <wakeup>
+801020f1:	e8 0a 28 00 00       	call   80104900 <wakeup>
 
   // Start disk on next buf in queue.
   if(idequeue != 0)
-801020f6:	a1 64 a5 10 80       	mov    0x8010a564,%eax
+801020f6:	a1 64 b5 10 80       	mov    0x8010b564,%eax
 801020fb:	83 c4 10             	add    $0x10,%esp
 801020fe:	85 c0                	test   %eax,%eax
 80102100:	74 05                	je     80102107 <ideintr+0x87>
@@ -4156,8 +4156,8 @@
 80102102:	e8 19 fe ff ff       	call   80101f20 <idestart>
     release(&idelock);
 80102107:	83 ec 0c             	sub    $0xc,%esp
-8010210a:	68 80 a5 10 80       	push   $0x8010a580
-8010210f:	e8 2c 26 00 00       	call   80104740 <release>
+8010210a:	68 80 b5 10 80       	push   $0x8010b580
+8010210f:	e8 0c 2f 00 00       	call   80105020 <release>
 
   release(&idelock);
 }
@@ -4186,7 +4186,7 @@
   if(!holdingsleep(&b->lock))
 8010212a:	8d 43 0c             	lea    0xc(%ebx),%eax
 8010212d:	50                   	push   %eax
-8010212e:	e8 bd 23 00 00       	call   801044f0 <holdingsleep>
+8010212e:	e8 9d 2c 00 00       	call   80104dd0 <holdingsleep>
 80102133:	83 c4 10             	add    $0x10,%esp
 80102136:	85 c0                	test   %eax,%eax
 80102138:	0f 84 c6 00 00 00    	je     80102204 <iderw+0xe4>
@@ -4201,20 +4201,20 @@
 8010214c:	8b 53 04             	mov    0x4(%ebx),%edx
 8010214f:	85 d2                	test   %edx,%edx
 80102151:	74 0d                	je     80102160 <iderw+0x40>
-80102153:	a1 60 a5 10 80       	mov    0x8010a560,%eax
+80102153:	a1 60 b5 10 80       	mov    0x8010b560,%eax
 80102158:	85 c0                	test   %eax,%eax
 8010215a:	0f 84 b1 00 00 00    	je     80102211 <iderw+0xf1>
     panic("iderw: ide disk 1 not present");
 
   acquire(&idelock);  //DOC:acquire-lock
 80102160:	83 ec 0c             	sub    $0xc,%esp
-80102163:	68 80 a5 10 80       	push   $0x8010a580
-80102168:	e8 13 25 00 00       	call   80104680 <acquire>
+80102163:	68 80 b5 10 80       	push   $0x8010b580
+80102168:	e8 f3 2d 00 00       	call   80104f60 <acquire>
 
   // Append b to idequeue.
   b->qnext = 0;
   for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
-8010216d:	8b 15 64 a5 10 80    	mov    0x8010a564,%edx
+8010216d:	8b 15 64 b5 10 80    	mov    0x8010b564,%edx
 80102173:	83 c4 10             	add    $0x10,%esp
   b->qnext = 0;
 80102176:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
@@ -4235,7 +4235,7 @@
 
   // Start disk if necessary.
   if(idequeue == b)
-80102196:	39 1d 64 a5 10 80    	cmp    %ebx,0x8010a564
+80102196:	39 1d 64 b5 10 80    	cmp    %ebx,0x8010b564
 8010219c:	74 42                	je     801021e0 <iderw+0xc0>
     idestart(b);
 
@@ -4249,9 +4249,9 @@
 801021a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     sleep(b, &idelock);
 801021b0:	83 ec 08             	sub    $0x8,%esp
-801021b3:	68 80 a5 10 80       	push   $0x8010a580
+801021b3:	68 80 b5 10 80       	push   $0x8010b580
 801021b8:	53                   	push   %ebx
-801021b9:	e8 c2 1b 00 00       	call   80103d80 <sleep>
+801021b9:	e8 92 25 00 00       	call   80104750 <sleep>
   while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
 801021be:	8b 03                	mov    (%ebx),%eax
 801021c0:	83 c4 10             	add    $0x10,%esp
@@ -4262,12 +4262,12 @@
 
 
   release(&idelock);
-801021cb:	c7 45 08 80 a5 10 80 	movl   $0x8010a580,0x8(%ebp)
+801021cb:	c7 45 08 80 b5 10 80 	movl   $0x8010b580,0x8(%ebp)
 }
 801021d2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 801021d5:	c9                   	leave  
   release(&idelock);
-801021d6:	e9 65 25 00 00       	jmp    80104740 <release>
+801021d6:	e9 45 2e 00 00       	jmp    80105020 <release>
 801021db:	90                   	nop
 801021dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     idestart(b);
@@ -4276,19 +4276,19 @@
 801021e7:	eb b5                	jmp    8010219e <iderw+0x7e>
 801021e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
-801021f0:	ba 64 a5 10 80       	mov    $0x8010a564,%edx
+801021f0:	ba 64 b5 10 80       	mov    $0x8010b564,%edx
 801021f5:	eb 9d                	jmp    80102194 <iderw+0x74>
     panic("iderw: nothing to do");
 801021f7:	83 ec 0c             	sub    $0xc,%esp
-801021fa:	68 20 75 10 80       	push   $0x80107520
+801021fa:	68 60 7e 10 80       	push   $0x80107e60
 801021ff:	e8 8c e1 ff ff       	call   80100390 <panic>
     panic("iderw: buf not locked");
 80102204:	83 ec 0c             	sub    $0xc,%esp
-80102207:	68 0a 75 10 80       	push   $0x8010750a
+80102207:	68 4a 7e 10 80       	push   $0x80107e4a
 8010220c:	e8 7f e1 ff ff       	call   80100390 <panic>
     panic("iderw: ide disk 1 not present");
 80102211:	83 ec 0c             	sub    $0xc,%esp
-80102214:	68 35 75 10 80       	push   $0x80107535
+80102214:	68 75 7e 10 80       	push   $0x80107e75
 80102219:	e8 72 e1 ff ff       	call   80100390 <panic>
 8010221e:	66 90                	xchg   %ax,%ax
 
@@ -4303,7 +4303,7 @@
   int i, id, maxintr;
 
   ioapic = (volatile struct ioapic*)IOAPIC;
-80102221:	c7 05 34 26 11 80 00 	movl   $0xfec00000,0x80112634
+80102221:	c7 05 54 36 11 80 00 	movl   $0xfec00000,0x80113654
 80102228:	00 c0 fe 
 {
 8010222b:	89 e5                	mov    %esp,%ebp
@@ -4313,16 +4313,16 @@
 8010222f:	c7 05 00 00 c0 fe 01 	movl   $0x1,0xfec00000
 80102236:	00 00 00 
   return ioapic->data;
-80102239:	a1 34 26 11 80       	mov    0x80112634,%eax
+80102239:	a1 54 36 11 80       	mov    0x80113654,%eax
 8010223e:	8b 58 10             	mov    0x10(%eax),%ebx
   ioapic->reg = reg;
 80102241:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   return ioapic->data;
-80102247:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+80102247:	8b 0d 54 36 11 80    	mov    0x80113654,%ecx
   maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
   id = ioapicread(REG_ID) >> 24;
   if(id != ioapicid)
-8010224d:	0f b6 15 60 27 11 80 	movzbl 0x80112760,%edx
+8010224d:	0f b6 15 80 37 11 80 	movzbl 0x80113780,%edx
   maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
 80102254:	c1 eb 10             	shr    $0x10,%ebx
   return ioapic->data;
@@ -4336,9 +4336,9 @@
 80102262:	74 16                	je     8010227a <ioapicinit+0x5a>
     cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
 80102264:	83 ec 0c             	sub    $0xc,%esp
-80102267:	68 54 75 10 80       	push   $0x80107554
+80102267:	68 94 7e 10 80       	push   $0x80107e94
 8010226c:	e8 ef e3 ff ff       	call   80100660 <cprintf>
-80102271:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+80102271:	8b 0d 54 36 11 80    	mov    0x80113654,%ecx
 80102277:	83 c4 10             	add    $0x10,%esp
 8010227a:	83 c3 21             	add    $0x21,%ebx
 {
@@ -4349,7 +4349,7 @@
   ioapic->reg = reg;
 80102290:	89 11                	mov    %edx,(%ecx)
   ioapic->data = data;
-80102292:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+80102292:	8b 0d 54 36 11 80    	mov    0x80113654,%ecx
 
   // Mark all interrupts edge-triggered, active high, disabled,
   // and not routed to any CPUs.
@@ -4367,7 +4367,7 @@
   ioapic->reg = reg;
 801022ae:	89 31                	mov    %esi,(%ecx)
   ioapic->data = data;
-801022b0:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+801022b0:	8b 0d 54 36 11 80    	mov    0x80113654,%ecx
 801022b6:	c7 41 10 00 00 00 00 	movl   $0x0,0x10(%ecx)
   for(i = 0; i <= maxintr; i++){
 801022bd:	75 d1                	jne    80102290 <ioapicinit+0x70>
@@ -4389,7 +4389,7 @@
 {
 801022d0:	55                   	push   %ebp
   ioapic->reg = reg;
-801022d1:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+801022d1:	8b 0d 54 36 11 80    	mov    0x80113654,%ecx
 {
 801022d7:	89 e5                	mov    %esp,%ebp
 801022d9:	8b 45 08             	mov    0x8(%ebp),%eax
@@ -4402,7 +4402,7 @@
   ioapic->reg = reg;
 801022e3:	89 01                	mov    %eax,(%ecx)
   ioapic->data = data;
-801022e5:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+801022e5:	8b 0d 54 36 11 80    	mov    0x80113654,%ecx
   ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
 801022eb:	83 c0 01             	add    $0x1,%eax
   ioapic->data = data;
@@ -4412,7 +4412,7 @@
   ioapic->reg = reg;
 801022f4:	89 01                	mov    %eax,(%ecx)
   ioapic->data = data;
-801022f6:	a1 34 26 11 80       	mov    0x80112634,%eax
+801022f6:	a1 54 36 11 80       	mov    0x80113654,%eax
   ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
 801022fb:	c1 e2 18             	shl    $0x18,%edx
   ioapic->data = data;
@@ -4444,11579 +4444,12510 @@
 
   if((uint)v % PGSIZE || v < end || V2P(v) >= PHYSTOP)
 8010231a:	f7 c3 ff 0f 00 00    	test   $0xfff,%ebx
-80102320:	75 70                	jne    80102392 <kfree+0x82>
-80102322:	81 fb a8 55 11 80    	cmp    $0x801155a8,%ebx
-80102328:	72 68                	jb     80102392 <kfree+0x82>
-8010232a:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80102330:	3d ff ff ff 0d       	cmp    $0xdffffff,%eax
-80102335:	77 5b                	ja     80102392 <kfree+0x82>
+80102320:	0f 85 e3 00 00 00    	jne    80102409 <kfree+0xf9>
+80102326:	81 fb dc 68 11 80    	cmp    $0x801168dc,%ebx
+8010232c:	0f 82 d7 00 00 00    	jb     80102409 <kfree+0xf9>
+80102332:	8d 93 00 00 00 80    	lea    -0x80000000(%ebx),%edx
+80102338:	81 fa ff ff ff 0d    	cmp    $0xdffffff,%edx
+8010233e:	0f 87 c5 00 00 00    	ja     80102409 <kfree+0xf9>
+80102344:	8d 93 00 10 00 00    	lea    0x1000(%ebx),%edx
+8010234a:	89 d8                	mov    %ebx,%eax
+8010234c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     panic("kfree");
 
   // Fill with junk to catch dangling refs.
-  memset(v, 1, PGSIZE);
-80102337:	83 ec 04             	sub    $0x4,%esp
-8010233a:	68 00 10 00 00       	push   $0x1000
-8010233f:	6a 01                	push   $0x1
-80102341:	53                   	push   %ebx
-80102342:	e8 49 24 00 00       	call   80104790 <memset>
-
-  if(kmem.use_lock)
-80102347:	8b 15 74 26 11 80    	mov    0x80112674,%edx
-8010234d:	83 c4 10             	add    $0x10,%esp
-80102350:	85 d2                	test   %edx,%edx
-80102352:	75 2c                	jne    80102380 <kfree+0x70>
-    acquire(&kmem.lock);
+  //memset(v, 1, PGSIZE);
+  for(int i=0; i<PGSIZE; i++) v[i]= 1;
+80102350:	c6 00 01             	movb   $0x1,(%eax)
+80102353:	83 c0 01             	add    $0x1,%eax
+80102356:	39 d0                	cmp    %edx,%eax
+80102358:	75 f6                	jne    80102350 <kfree+0x40>
+
+  if(kmem.use_lock)acquire(&kmem.lock);
+8010235a:	a1 94 36 11 80       	mov    0x80113694,%eax
+8010235f:	85 c0                	test   %eax,%eax
+80102361:	0f 85 8d 00 00 00    	jne    801023f4 <kfree+0xe4>
   r = (struct run*)v;
   r->next = kmem.freelist;
-80102354:	a1 78 26 11 80       	mov    0x80112678,%eax
-80102359:	89 03                	mov    %eax,(%ebx)
+80102367:	a1 98 36 11 80       	mov    0x80113698,%eax
+8010236c:	89 03                	mov    %eax,(%ebx)
   kmem.freelist = r;
-  if(kmem.use_lock)
-8010235b:	a1 74 26 11 80       	mov    0x80112674,%eax
+  if(kmem.use_lock) release(&kmem.lock);
+8010236e:	a1 94 36 11 80       	mov    0x80113694,%eax
   kmem.freelist = r;
-80102360:	89 1d 78 26 11 80    	mov    %ebx,0x80112678
-  if(kmem.use_lock)
-80102366:	85 c0                	test   %eax,%eax
-80102368:	75 06                	jne    80102370 <kfree+0x60>
-    release(&kmem.lock);
-}
-8010236a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-8010236d:	c9                   	leave  
-8010236e:	c3                   	ret    
-8010236f:	90                   	nop
-    release(&kmem.lock);
-80102370:	c7 45 08 40 26 11 80 	movl   $0x80112640,0x8(%ebp)
+80102373:	89 1d 98 36 11 80    	mov    %ebx,0x80113698
+  if(kmem.use_lock) release(&kmem.lock);
+80102379:	85 c0                	test   %eax,%eax
+8010237b:	75 0e                	jne    8010238b <kfree+0x7b>
+  // wake up process sleeping on sleeping channel
+  if(kmem.use_lock) acquire(&sleeping_channel_lock);
+  if(sleeping_channel_count){
+8010237d:	a1 c8 b5 10 80       	mov    0x8010b5c8,%eax
+80102382:	85 c0                	test   %eax,%eax
+80102384:	75 39                	jne    801023bf <kfree+0xaf>
+    wakeup(sleeping_channel);
+    sleeping_channel_count = 0;
+  }
+  if(kmem.use_lock) release(&sleeping_channel_lock);
 }
-80102377:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-8010237a:	c9                   	leave  
-    release(&kmem.lock);
-8010237b:	e9 c0 23 00 00       	jmp    80104740 <release>
-    acquire(&kmem.lock);
-80102380:	83 ec 0c             	sub    $0xc,%esp
-80102383:	68 40 26 11 80       	push   $0x80112640
-80102388:	e8 f3 22 00 00       	call   80104680 <acquire>
-8010238d:	83 c4 10             	add    $0x10,%esp
-80102390:	eb c2                	jmp    80102354 <kfree+0x44>
+80102386:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102389:	c9                   	leave  
+8010238a:	c3                   	ret    
+  if(kmem.use_lock) release(&kmem.lock);
+8010238b:	83 ec 0c             	sub    $0xc,%esp
+8010238e:	68 60 36 11 80       	push   $0x80113660
+80102393:	e8 88 2c 00 00       	call   80105020 <release>
+  if(kmem.use_lock) acquire(&sleeping_channel_lock);
+80102398:	8b 1d 94 36 11 80    	mov    0x80113694,%ebx
+8010239e:	83 c4 10             	add    $0x10,%esp
+801023a1:	85 db                	test   %ebx,%ebx
+801023a3:	74 d8                	je     8010237d <kfree+0x6d>
+801023a5:	83 ec 0c             	sub    $0xc,%esp
+801023a8:	68 a0 68 11 80       	push   $0x801168a0
+801023ad:	e8 ae 2b 00 00       	call   80104f60 <acquire>
+  if(sleeping_channel_count){
+801023b2:	8b 0d c8 b5 10 80    	mov    0x8010b5c8,%ecx
+801023b8:	83 c4 10             	add    $0x10,%esp
+801023bb:	85 c9                	test   %ecx,%ecx
+801023bd:	74 1b                	je     801023da <kfree+0xca>
+    wakeup(sleeping_channel);
+801023bf:	83 ec 0c             	sub    $0xc,%esp
+801023c2:	ff 35 d8 68 11 80    	pushl  0x801168d8
+801023c8:	e8 33 25 00 00       	call   80104900 <wakeup>
+    sleeping_channel_count = 0;
+801023cd:	c7 05 c8 b5 10 80 00 	movl   $0x0,0x8010b5c8
+801023d4:	00 00 00 
+801023d7:	83 c4 10             	add    $0x10,%esp
+  if(kmem.use_lock) release(&sleeping_channel_lock);
+801023da:	8b 15 94 36 11 80    	mov    0x80113694,%edx
+801023e0:	85 d2                	test   %edx,%edx
+801023e2:	74 a2                	je     80102386 <kfree+0x76>
+801023e4:	c7 45 08 a0 68 11 80 	movl   $0x801168a0,0x8(%ebp)
+}
+801023eb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801023ee:	c9                   	leave  
+  if(kmem.use_lock) release(&sleeping_channel_lock);
+801023ef:	e9 2c 2c 00 00       	jmp    80105020 <release>
+  if(kmem.use_lock)acquire(&kmem.lock);
+801023f4:	83 ec 0c             	sub    $0xc,%esp
+801023f7:	68 60 36 11 80       	push   $0x80113660
+801023fc:	e8 5f 2b 00 00       	call   80104f60 <acquire>
+80102401:	83 c4 10             	add    $0x10,%esp
+80102404:	e9 5e ff ff ff       	jmp    80102367 <kfree+0x57>
     panic("kfree");
-80102392:	83 ec 0c             	sub    $0xc,%esp
-80102395:	68 86 75 10 80       	push   $0x80107586
-8010239a:	e8 f1 df ff ff       	call   80100390 <panic>
-8010239f:	90                   	nop
-
-801023a0 <freerange>:
-{
-801023a0:	55                   	push   %ebp
-801023a1:	89 e5                	mov    %esp,%ebp
-801023a3:	56                   	push   %esi
-801023a4:	53                   	push   %ebx
+80102409:	83 ec 0c             	sub    $0xc,%esp
+8010240c:	68 c6 7e 10 80       	push   $0x80107ec6
+80102411:	e8 7a df ff ff       	call   80100390 <panic>
+80102416:	8d 76 00             	lea    0x0(%esi),%esi
+80102419:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80102420 <freerange>:
+{
+80102420:	55                   	push   %ebp
+80102421:	89 e5                	mov    %esp,%ebp
+80102423:	56                   	push   %esi
+80102424:	53                   	push   %ebx
   p = (char*)PGROUNDUP((uint)vstart);
-801023a5:	8b 45 08             	mov    0x8(%ebp),%eax
+80102425:	8b 45 08             	mov    0x8(%ebp),%eax
 {
-801023a8:	8b 75 0c             	mov    0xc(%ebp),%esi
+80102428:	8b 75 0c             	mov    0xc(%ebp),%esi
   p = (char*)PGROUNDUP((uint)vstart);
-801023ab:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
-801023b1:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+8010242b:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+80102431:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-801023b7:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-801023bd:	39 de                	cmp    %ebx,%esi
-801023bf:	72 23                	jb     801023e4 <freerange+0x44>
-801023c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102437:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+8010243d:	39 de                	cmp    %ebx,%esi
+8010243f:	72 23                	jb     80102464 <freerange+0x44>
+80102441:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     kfree(p);
-801023c8:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
-801023ce:	83 ec 0c             	sub    $0xc,%esp
+80102448:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
+8010244e:	83 ec 0c             	sub    $0xc,%esp
   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-801023d1:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80102451:	81 c3 00 10 00 00    	add    $0x1000,%ebx
     kfree(p);
-801023d7:	50                   	push   %eax
-801023d8:	e8 33 ff ff ff       	call   80102310 <kfree>
+80102457:	50                   	push   %eax
+80102458:	e8 b3 fe ff ff       	call   80102310 <kfree>
   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-801023dd:	83 c4 10             	add    $0x10,%esp
-801023e0:	39 f3                	cmp    %esi,%ebx
-801023e2:	76 e4                	jbe    801023c8 <freerange+0x28>
-}
-801023e4:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801023e7:	5b                   	pop    %ebx
-801023e8:	5e                   	pop    %esi
-801023e9:	5d                   	pop    %ebp
-801023ea:	c3                   	ret    
-801023eb:	90                   	nop
-801023ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-801023f0 <kinit1>:
-{
-801023f0:	55                   	push   %ebp
-801023f1:	89 e5                	mov    %esp,%ebp
-801023f3:	56                   	push   %esi
-801023f4:	53                   	push   %ebx
-801023f5:	8b 75 0c             	mov    0xc(%ebp),%esi
+8010245d:	83 c4 10             	add    $0x10,%esp
+80102460:	39 f3                	cmp    %esi,%ebx
+80102462:	76 e4                	jbe    80102448 <freerange+0x28>
+}
+80102464:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80102467:	5b                   	pop    %ebx
+80102468:	5e                   	pop    %esi
+80102469:	5d                   	pop    %ebp
+8010246a:	c3                   	ret    
+8010246b:	90                   	nop
+8010246c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80102470 <kinit1>:
+{
+80102470:	55                   	push   %ebp
+80102471:	89 e5                	mov    %esp,%ebp
+80102473:	56                   	push   %esi
+80102474:	53                   	push   %ebx
+80102475:	8b 75 0c             	mov    0xc(%ebp),%esi
   initlock(&kmem.lock, "kmem");
-801023f8:	83 ec 08             	sub    $0x8,%esp
-801023fb:	68 8c 75 10 80       	push   $0x8010758c
-80102400:	68 40 26 11 80       	push   $0x80112640
-80102405:	e8 36 21 00 00       	call   80104540 <initlock>
+80102478:	83 ec 08             	sub    $0x8,%esp
+8010247b:	68 cc 7e 10 80       	push   $0x80107ecc
+80102480:	68 60 36 11 80       	push   $0x80113660
+80102485:	e8 96 29 00 00       	call   80104e20 <initlock>
   p = (char*)PGROUNDUP((uint)vstart);
-8010240a:	8b 45 08             	mov    0x8(%ebp),%eax
+8010248a:	8b 45 08             	mov    0x8(%ebp),%eax
   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-8010240d:	83 c4 10             	add    $0x10,%esp
+8010248d:	83 c4 10             	add    $0x10,%esp
   kmem.use_lock = 0;
-80102410:	c7 05 74 26 11 80 00 	movl   $0x0,0x80112674
-80102417:	00 00 00 
+80102490:	c7 05 94 36 11 80 00 	movl   $0x0,0x80113694
+80102497:	00 00 00 
   p = (char*)PGROUNDUP((uint)vstart);
-8010241a:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
-80102420:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+8010249a:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+801024a0:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-80102426:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-8010242c:	39 de                	cmp    %ebx,%esi
-8010242e:	72 1c                	jb     8010244c <kinit1+0x5c>
+801024a6:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+801024ac:	39 de                	cmp    %ebx,%esi
+801024ae:	72 1c                	jb     801024cc <kinit1+0x5c>
     kfree(p);
-80102430:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
-80102436:	83 ec 0c             	sub    $0xc,%esp
+801024b0:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
+801024b6:	83 ec 0c             	sub    $0xc,%esp
   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-80102439:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+801024b9:	81 c3 00 10 00 00    	add    $0x1000,%ebx
     kfree(p);
-8010243f:	50                   	push   %eax
-80102440:	e8 cb fe ff ff       	call   80102310 <kfree>
+801024bf:	50                   	push   %eax
+801024c0:	e8 4b fe ff ff       	call   80102310 <kfree>
   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-80102445:	83 c4 10             	add    $0x10,%esp
-80102448:	39 de                	cmp    %ebx,%esi
-8010244a:	73 e4                	jae    80102430 <kinit1+0x40>
-}
-8010244c:	8d 65 f8             	lea    -0x8(%ebp),%esp
-8010244f:	5b                   	pop    %ebx
-80102450:	5e                   	pop    %esi
-80102451:	5d                   	pop    %ebp
-80102452:	c3                   	ret    
-80102453:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80102459:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-80102460 <kinit2>:
-{
-80102460:	55                   	push   %ebp
-80102461:	89 e5                	mov    %esp,%ebp
-80102463:	56                   	push   %esi
-80102464:	53                   	push   %ebx
+801024c5:	83 c4 10             	add    $0x10,%esp
+801024c8:	39 de                	cmp    %ebx,%esi
+801024ca:	73 e4                	jae    801024b0 <kinit1+0x40>
+}
+801024cc:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801024cf:	5b                   	pop    %ebx
+801024d0:	5e                   	pop    %esi
+801024d1:	5d                   	pop    %ebp
+801024d2:	c3                   	ret    
+801024d3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801024d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801024e0 <kinit2>:
+{
+801024e0:	55                   	push   %ebp
+801024e1:	89 e5                	mov    %esp,%ebp
+801024e3:	56                   	push   %esi
+801024e4:	53                   	push   %ebx
   p = (char*)PGROUNDUP((uint)vstart);
-80102465:	8b 45 08             	mov    0x8(%ebp),%eax
+801024e5:	8b 45 08             	mov    0x8(%ebp),%eax
 {
-80102468:	8b 75 0c             	mov    0xc(%ebp),%esi
+801024e8:	8b 75 0c             	mov    0xc(%ebp),%esi
   p = (char*)PGROUNDUP((uint)vstart);
-8010246b:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
-80102471:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+801024eb:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+801024f1:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-80102477:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-8010247d:	39 de                	cmp    %ebx,%esi
-8010247f:	72 23                	jb     801024a4 <kinit2+0x44>
-80102481:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801024f7:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+801024fd:	39 de                	cmp    %ebx,%esi
+801024ff:	72 23                	jb     80102524 <kinit2+0x44>
+80102501:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     kfree(p);
-80102488:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
-8010248e:	83 ec 0c             	sub    $0xc,%esp
+80102508:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
+8010250e:	83 ec 0c             	sub    $0xc,%esp
   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-80102491:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80102511:	81 c3 00 10 00 00    	add    $0x1000,%ebx
     kfree(p);
-80102497:	50                   	push   %eax
-80102498:	e8 73 fe ff ff       	call   80102310 <kfree>
+80102517:	50                   	push   %eax
+80102518:	e8 f3 fd ff ff       	call   80102310 <kfree>
   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-8010249d:	83 c4 10             	add    $0x10,%esp
-801024a0:	39 de                	cmp    %ebx,%esi
-801024a2:	73 e4                	jae    80102488 <kinit2+0x28>
+8010251d:	83 c4 10             	add    $0x10,%esp
+80102520:	39 de                	cmp    %ebx,%esi
+80102522:	73 e4                	jae    80102508 <kinit2+0x28>
   kmem.use_lock = 1;
-801024a4:	c7 05 74 26 11 80 01 	movl   $0x1,0x80112674
-801024ab:	00 00 00 
+80102524:	c7 05 94 36 11 80 01 	movl   $0x1,0x80113694
+8010252b:	00 00 00 
 }
-801024ae:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801024b1:	5b                   	pop    %ebx
-801024b2:	5e                   	pop    %esi
-801024b3:	5d                   	pop    %ebp
-801024b4:	c3                   	ret    
-801024b5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801024b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+8010252e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80102531:	5b                   	pop    %ebx
+80102532:	5e                   	pop    %esi
+80102533:	5d                   	pop    %ebp
+80102534:	c3                   	ret    
+80102535:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102539:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-801024c0 <kalloc>:
+80102540 <kalloc>:
 char*
 kalloc(void)
 {
   struct run *r;
 
   if(kmem.use_lock)
-801024c0:	a1 74 26 11 80       	mov    0x80112674,%eax
-801024c5:	85 c0                	test   %eax,%eax
-801024c7:	75 1f                	jne    801024e8 <kalloc+0x28>
+80102540:	a1 94 36 11 80       	mov    0x80113694,%eax
+80102545:	85 c0                	test   %eax,%eax
+80102547:	75 1f                	jne    80102568 <kalloc+0x28>
     acquire(&kmem.lock);
   r = kmem.freelist;
-801024c9:	a1 78 26 11 80       	mov    0x80112678,%eax
+80102549:	a1 98 36 11 80       	mov    0x80113698,%eax
   if(r)
-801024ce:	85 c0                	test   %eax,%eax
-801024d0:	74 0e                	je     801024e0 <kalloc+0x20>
+8010254e:	85 c0                	test   %eax,%eax
+80102550:	74 0e                	je     80102560 <kalloc+0x20>
     kmem.freelist = r->next;
-801024d2:	8b 10                	mov    (%eax),%edx
-801024d4:	89 15 78 26 11 80    	mov    %edx,0x80112678
-801024da:	c3                   	ret    
-801024db:	90                   	nop
-801024dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102552:	8b 10                	mov    (%eax),%edx
+80102554:	89 15 98 36 11 80    	mov    %edx,0x80113698
+8010255a:	c3                   	ret    
+8010255b:	90                   	nop
+8010255c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   if(kmem.use_lock)
     release(&kmem.lock);
   return (char*)r;
 }
-801024e0:	f3 c3                	repz ret 
-801024e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80102560:	f3 c3                	repz ret 
+80102562:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 {
-801024e8:	55                   	push   %ebp
-801024e9:	89 e5                	mov    %esp,%ebp
-801024eb:	83 ec 24             	sub    $0x24,%esp
+80102568:	55                   	push   %ebp
+80102569:	89 e5                	mov    %esp,%ebp
+8010256b:	83 ec 24             	sub    $0x24,%esp
     acquire(&kmem.lock);
-801024ee:	68 40 26 11 80       	push   $0x80112640
-801024f3:	e8 88 21 00 00       	call   80104680 <acquire>
+8010256e:	68 60 36 11 80       	push   $0x80113660
+80102573:	e8 e8 29 00 00       	call   80104f60 <acquire>
   r = kmem.freelist;
-801024f8:	a1 78 26 11 80       	mov    0x80112678,%eax
+80102578:	a1 98 36 11 80       	mov    0x80113698,%eax
   if(r)
-801024fd:	83 c4 10             	add    $0x10,%esp
-80102500:	8b 15 74 26 11 80    	mov    0x80112674,%edx
-80102506:	85 c0                	test   %eax,%eax
-80102508:	74 08                	je     80102512 <kalloc+0x52>
+8010257d:	83 c4 10             	add    $0x10,%esp
+80102580:	8b 15 94 36 11 80    	mov    0x80113694,%edx
+80102586:	85 c0                	test   %eax,%eax
+80102588:	74 08                	je     80102592 <kalloc+0x52>
     kmem.freelist = r->next;
-8010250a:	8b 08                	mov    (%eax),%ecx
-8010250c:	89 0d 78 26 11 80    	mov    %ecx,0x80112678
+8010258a:	8b 08                	mov    (%eax),%ecx
+8010258c:	89 0d 98 36 11 80    	mov    %ecx,0x80113698
   if(kmem.use_lock)
-80102512:	85 d2                	test   %edx,%edx
-80102514:	74 16                	je     8010252c <kalloc+0x6c>
+80102592:	85 d2                	test   %edx,%edx
+80102594:	74 16                	je     801025ac <kalloc+0x6c>
     release(&kmem.lock);
-80102516:	83 ec 0c             	sub    $0xc,%esp
-80102519:	89 45 f4             	mov    %eax,-0xc(%ebp)
-8010251c:	68 40 26 11 80       	push   $0x80112640
-80102521:	e8 1a 22 00 00       	call   80104740 <release>
+80102596:	83 ec 0c             	sub    $0xc,%esp
+80102599:	89 45 f4             	mov    %eax,-0xc(%ebp)
+8010259c:	68 60 36 11 80       	push   $0x80113660
+801025a1:	e8 7a 2a 00 00       	call   80105020 <release>
   return (char*)r;
-80102526:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801025a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
     release(&kmem.lock);
-80102529:	83 c4 10             	add    $0x10,%esp
+801025a9:	83 c4 10             	add    $0x10,%esp
 }
-8010252c:	c9                   	leave  
-8010252d:	c3                   	ret    
-8010252e:	66 90                	xchg   %ax,%ax
+801025ac:	c9                   	leave  
+801025ad:	c3                   	ret    
+801025ae:	66 90                	xchg   %ax,%ax
 
-80102530 <kbdgetc>:
+801025b0 <kbdgetc>:
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102530:	ba 64 00 00 00       	mov    $0x64,%edx
-80102535:	ec                   	in     (%dx),%al
+801025b0:	ba 64 00 00 00       	mov    $0x64,%edx
+801025b5:	ec                   	in     (%dx),%al
     normalmap, shiftmap, ctlmap, ctlmap
   };
   uint st, data, c;
 
   st = inb(KBSTATP);
   if((st & KBS_DIB) == 0)
-80102536:	a8 01                	test   $0x1,%al
-80102538:	0f 84 c2 00 00 00    	je     80102600 <kbdgetc+0xd0>
-8010253e:	ba 60 00 00 00       	mov    $0x60,%edx
-80102543:	ec                   	in     (%dx),%al
+801025b6:	a8 01                	test   $0x1,%al
+801025b8:	0f 84 c2 00 00 00    	je     80102680 <kbdgetc+0xd0>
+801025be:	ba 60 00 00 00       	mov    $0x60,%edx
+801025c3:	ec                   	in     (%dx),%al
     return -1;
   data = inb(KBDATAP);
-80102544:	0f b6 d0             	movzbl %al,%edx
-80102547:	8b 0d b4 a5 10 80    	mov    0x8010a5b4,%ecx
+801025c4:	0f b6 d0             	movzbl %al,%edx
+801025c7:	8b 0d b4 b5 10 80    	mov    0x8010b5b4,%ecx
 
   if(data == 0xE0){
-8010254d:	81 fa e0 00 00 00    	cmp    $0xe0,%edx
-80102553:	0f 84 7f 00 00 00    	je     801025d8 <kbdgetc+0xa8>
+801025cd:	81 fa e0 00 00 00    	cmp    $0xe0,%edx
+801025d3:	0f 84 7f 00 00 00    	je     80102658 <kbdgetc+0xa8>
 {
-80102559:	55                   	push   %ebp
-8010255a:	89 e5                	mov    %esp,%ebp
-8010255c:	53                   	push   %ebx
-8010255d:	89 cb                	mov    %ecx,%ebx
-8010255f:	83 e3 40             	and    $0x40,%ebx
+801025d9:	55                   	push   %ebp
+801025da:	89 e5                	mov    %esp,%ebp
+801025dc:	53                   	push   %ebx
+801025dd:	89 cb                	mov    %ecx,%ebx
+801025df:	83 e3 40             	and    $0x40,%ebx
     shift |= E0ESC;
     return 0;
   } else if(data & 0x80){
-80102562:	84 c0                	test   %al,%al
-80102564:	78 4a                	js     801025b0 <kbdgetc+0x80>
+801025e2:	84 c0                	test   %al,%al
+801025e4:	78 4a                	js     80102630 <kbdgetc+0x80>
     // Key released
     data = (shift & E0ESC ? data : data & 0x7F);
     shift &= ~(shiftcode[data] | E0ESC);
     return 0;
   } else if(shift & E0ESC){
-80102566:	85 db                	test   %ebx,%ebx
-80102568:	74 09                	je     80102573 <kbdgetc+0x43>
+801025e6:	85 db                	test   %ebx,%ebx
+801025e8:	74 09                	je     801025f3 <kbdgetc+0x43>
     // Last character was an E0 escape; or with 0x80
     data |= 0x80;
-8010256a:	83 c8 80             	or     $0xffffff80,%eax
+801025ea:	83 c8 80             	or     $0xffffff80,%eax
     shift &= ~E0ESC;
-8010256d:	83 e1 bf             	and    $0xffffffbf,%ecx
+801025ed:	83 e1 bf             	and    $0xffffffbf,%ecx
     data |= 0x80;
-80102570:	0f b6 d0             	movzbl %al,%edx
+801025f0:	0f b6 d0             	movzbl %al,%edx
   }
 
   shift |= shiftcode[data];
-80102573:	0f b6 82 c0 76 10 80 	movzbl -0x7fef8940(%edx),%eax
-8010257a:	09 c1                	or     %eax,%ecx
+801025f3:	0f b6 82 00 80 10 80 	movzbl -0x7fef8000(%edx),%eax
+801025fa:	09 c1                	or     %eax,%ecx
   shift ^= togglecode[data];
-8010257c:	0f b6 82 c0 75 10 80 	movzbl -0x7fef8a40(%edx),%eax
-80102583:	31 c1                	xor    %eax,%ecx
+801025fc:	0f b6 82 00 7f 10 80 	movzbl -0x7fef8100(%edx),%eax
+80102603:	31 c1                	xor    %eax,%ecx
   c = charcode[shift & (CTL | SHIFT)][data];
-80102585:	89 c8                	mov    %ecx,%eax
+80102605:	89 c8                	mov    %ecx,%eax
   shift ^= togglecode[data];
-80102587:	89 0d b4 a5 10 80    	mov    %ecx,0x8010a5b4
+80102607:	89 0d b4 b5 10 80    	mov    %ecx,0x8010b5b4
   c = charcode[shift & (CTL | SHIFT)][data];
-8010258d:	83 e0 03             	and    $0x3,%eax
+8010260d:	83 e0 03             	and    $0x3,%eax
   if(shift & CAPSLOCK){
-80102590:	83 e1 08             	and    $0x8,%ecx
+80102610:	83 e1 08             	and    $0x8,%ecx
   c = charcode[shift & (CTL | SHIFT)][data];
-80102593:	8b 04 85 a0 75 10 80 	mov    -0x7fef8a60(,%eax,4),%eax
-8010259a:	0f b6 04 10          	movzbl (%eax,%edx,1),%eax
+80102613:	8b 04 85 e0 7e 10 80 	mov    -0x7fef8120(,%eax,4),%eax
+8010261a:	0f b6 04 10          	movzbl (%eax,%edx,1),%eax
   if(shift & CAPSLOCK){
-8010259e:	74 31                	je     801025d1 <kbdgetc+0xa1>
+8010261e:	74 31                	je     80102651 <kbdgetc+0xa1>
     if('a' <= c && c <= 'z')
-801025a0:	8d 50 9f             	lea    -0x61(%eax),%edx
-801025a3:	83 fa 19             	cmp    $0x19,%edx
-801025a6:	77 40                	ja     801025e8 <kbdgetc+0xb8>
+80102620:	8d 50 9f             	lea    -0x61(%eax),%edx
+80102623:	83 fa 19             	cmp    $0x19,%edx
+80102626:	77 40                	ja     80102668 <kbdgetc+0xb8>
       c += 'A' - 'a';
-801025a8:	83 e8 20             	sub    $0x20,%eax
+80102628:	83 e8 20             	sub    $0x20,%eax
     else if('A' <= c && c <= 'Z')
       c += 'a' - 'A';
   }
   return c;
 }
-801025ab:	5b                   	pop    %ebx
-801025ac:	5d                   	pop    %ebp
-801025ad:	c3                   	ret    
-801025ae:	66 90                	xchg   %ax,%ax
+8010262b:	5b                   	pop    %ebx
+8010262c:	5d                   	pop    %ebp
+8010262d:	c3                   	ret    
+8010262e:	66 90                	xchg   %ax,%ax
     data = (shift & E0ESC ? data : data & 0x7F);
-801025b0:	83 e0 7f             	and    $0x7f,%eax
-801025b3:	85 db                	test   %ebx,%ebx
-801025b5:	0f 44 d0             	cmove  %eax,%edx
+80102630:	83 e0 7f             	and    $0x7f,%eax
+80102633:	85 db                	test   %ebx,%ebx
+80102635:	0f 44 d0             	cmove  %eax,%edx
     shift &= ~(shiftcode[data] | E0ESC);
-801025b8:	0f b6 82 c0 76 10 80 	movzbl -0x7fef8940(%edx),%eax
-801025bf:	83 c8 40             	or     $0x40,%eax
-801025c2:	0f b6 c0             	movzbl %al,%eax
-801025c5:	f7 d0                	not    %eax
-801025c7:	21 c1                	and    %eax,%ecx
+80102638:	0f b6 82 00 80 10 80 	movzbl -0x7fef8000(%edx),%eax
+8010263f:	83 c8 40             	or     $0x40,%eax
+80102642:	0f b6 c0             	movzbl %al,%eax
+80102645:	f7 d0                	not    %eax
+80102647:	21 c1                	and    %eax,%ecx
     return 0;
-801025c9:	31 c0                	xor    %eax,%eax
+80102649:	31 c0                	xor    %eax,%eax
     shift &= ~(shiftcode[data] | E0ESC);
-801025cb:	89 0d b4 a5 10 80    	mov    %ecx,0x8010a5b4
+8010264b:	89 0d b4 b5 10 80    	mov    %ecx,0x8010b5b4
 }
-801025d1:	5b                   	pop    %ebx
-801025d2:	5d                   	pop    %ebp
-801025d3:	c3                   	ret    
-801025d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102651:	5b                   	pop    %ebx
+80102652:	5d                   	pop    %ebp
+80102653:	c3                   	ret    
+80102654:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     shift |= E0ESC;
-801025d8:	83 c9 40             	or     $0x40,%ecx
+80102658:	83 c9 40             	or     $0x40,%ecx
     return 0;
-801025db:	31 c0                	xor    %eax,%eax
+8010265b:	31 c0                	xor    %eax,%eax
     shift |= E0ESC;
-801025dd:	89 0d b4 a5 10 80    	mov    %ecx,0x8010a5b4
+8010265d:	89 0d b4 b5 10 80    	mov    %ecx,0x8010b5b4
     return 0;
-801025e3:	c3                   	ret    
-801025e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102663:	c3                   	ret    
+80102664:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     else if('A' <= c && c <= 'Z')
-801025e8:	8d 48 bf             	lea    -0x41(%eax),%ecx
+80102668:	8d 48 bf             	lea    -0x41(%eax),%ecx
       c += 'a' - 'A';
-801025eb:	8d 50 20             	lea    0x20(%eax),%edx
+8010266b:	8d 50 20             	lea    0x20(%eax),%edx
 }
-801025ee:	5b                   	pop    %ebx
+8010266e:	5b                   	pop    %ebx
       c += 'a' - 'A';
-801025ef:	83 f9 1a             	cmp    $0x1a,%ecx
-801025f2:	0f 42 c2             	cmovb  %edx,%eax
+8010266f:	83 f9 1a             	cmp    $0x1a,%ecx
+80102672:	0f 42 c2             	cmovb  %edx,%eax
 }
-801025f5:	5d                   	pop    %ebp
-801025f6:	c3                   	ret    
-801025f7:	89 f6                	mov    %esi,%esi
-801025f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80102675:	5d                   	pop    %ebp
+80102676:	c3                   	ret    
+80102677:	89 f6                	mov    %esi,%esi
+80102679:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
     return -1;
-80102600:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80102680:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80102605:	c3                   	ret    
-80102606:	8d 76 00             	lea    0x0(%esi),%esi
-80102609:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80102685:	c3                   	ret    
+80102686:	8d 76 00             	lea    0x0(%esi),%esi
+80102689:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80102610 <kbdintr>:
+80102690 <kbdintr>:
 
 void
 kbdintr(void)
 {
-80102610:	55                   	push   %ebp
-80102611:	89 e5                	mov    %esp,%ebp
-80102613:	83 ec 14             	sub    $0x14,%esp
+80102690:	55                   	push   %ebp
+80102691:	89 e5                	mov    %esp,%ebp
+80102693:	83 ec 14             	sub    $0x14,%esp
   consoleintr(kbdgetc);
-80102616:	68 30 25 10 80       	push   $0x80102530
-8010261b:	e8 f0 e1 ff ff       	call   80100810 <consoleintr>
+80102696:	68 b0 25 10 80       	push   $0x801025b0
+8010269b:	e8 70 e1 ff ff       	call   80100810 <consoleintr>
 }
-80102620:	83 c4 10             	add    $0x10,%esp
-80102623:	c9                   	leave  
-80102624:	c3                   	ret    
-80102625:	66 90                	xchg   %ax,%ax
-80102627:	66 90                	xchg   %ax,%ax
-80102629:	66 90                	xchg   %ax,%ax
-8010262b:	66 90                	xchg   %ax,%ax
-8010262d:	66 90                	xchg   %ax,%ax
-8010262f:	90                   	nop
+801026a0:	83 c4 10             	add    $0x10,%esp
+801026a3:	c9                   	leave  
+801026a4:	c3                   	ret    
+801026a5:	66 90                	xchg   %ax,%ax
+801026a7:	66 90                	xchg   %ax,%ax
+801026a9:	66 90                	xchg   %ax,%ax
+801026ab:	66 90                	xchg   %ax,%ax
+801026ad:	66 90                	xchg   %ax,%ax
+801026af:	90                   	nop
 
-80102630 <lapicinit>:
+801026b0 <lapicinit>:
 }
 
 void
 lapicinit(void)
 {
   if(!lapic)
-80102630:	a1 7c 26 11 80       	mov    0x8011267c,%eax
+801026b0:	a1 9c 36 11 80       	mov    0x8011369c,%eax
 {
-80102635:	55                   	push   %ebp
-80102636:	89 e5                	mov    %esp,%ebp
+801026b5:	55                   	push   %ebp
+801026b6:	89 e5                	mov    %esp,%ebp
   if(!lapic)
-80102638:	85 c0                	test   %eax,%eax
-8010263a:	0f 84 c8 00 00 00    	je     80102708 <lapicinit+0xd8>
+801026b8:	85 c0                	test   %eax,%eax
+801026ba:	0f 84 c8 00 00 00    	je     80102788 <lapicinit+0xd8>
   lapic[index] = value;
-80102640:	c7 80 f0 00 00 00 3f 	movl   $0x13f,0xf0(%eax)
-80102647:	01 00 00 
+801026c0:	c7 80 f0 00 00 00 3f 	movl   $0x13f,0xf0(%eax)
+801026c7:	01 00 00 
   lapic[ID];  // wait for write to finish, by reading
-8010264a:	8b 50 20             	mov    0x20(%eax),%edx
+801026ca:	8b 50 20             	mov    0x20(%eax),%edx
   lapic[index] = value;
-8010264d:	c7 80 e0 03 00 00 0b 	movl   $0xb,0x3e0(%eax)
-80102654:	00 00 00 
+801026cd:	c7 80 e0 03 00 00 0b 	movl   $0xb,0x3e0(%eax)
+801026d4:	00 00 00 
   lapic[ID];  // wait for write to finish, by reading
-80102657:	8b 50 20             	mov    0x20(%eax),%edx
+801026d7:	8b 50 20             	mov    0x20(%eax),%edx
   lapic[index] = value;
-8010265a:	c7 80 20 03 00 00 20 	movl   $0x20020,0x320(%eax)
-80102661:	00 02 00 
+801026da:	c7 80 20 03 00 00 20 	movl   $0x20020,0x320(%eax)
+801026e1:	00 02 00 
   lapic[ID];  // wait for write to finish, by reading
-80102664:	8b 50 20             	mov    0x20(%eax),%edx
+801026e4:	8b 50 20             	mov    0x20(%eax),%edx
   lapic[index] = value;
-80102667:	c7 80 80 03 00 00 80 	movl   $0x989680,0x380(%eax)
-8010266e:	96 98 00 
+801026e7:	c7 80 80 03 00 00 80 	movl   $0x989680,0x380(%eax)
+801026ee:	96 98 00 
   lapic[ID];  // wait for write to finish, by reading
-80102671:	8b 50 20             	mov    0x20(%eax),%edx
+801026f1:	8b 50 20             	mov    0x20(%eax),%edx
   lapic[index] = value;
-80102674:	c7 80 50 03 00 00 00 	movl   $0x10000,0x350(%eax)
-8010267b:	00 01 00 
+801026f4:	c7 80 50 03 00 00 00 	movl   $0x10000,0x350(%eax)
+801026fb:	00 01 00 
   lapic[ID];  // wait for write to finish, by reading
-8010267e:	8b 50 20             	mov    0x20(%eax),%edx
+801026fe:	8b 50 20             	mov    0x20(%eax),%edx
   lapic[index] = value;
-80102681:	c7 80 60 03 00 00 00 	movl   $0x10000,0x360(%eax)
-80102688:	00 01 00 
+80102701:	c7 80 60 03 00 00 00 	movl   $0x10000,0x360(%eax)
+80102708:	00 01 00 
   lapic[ID];  // wait for write to finish, by reading
-8010268b:	8b 50 20             	mov    0x20(%eax),%edx
+8010270b:	8b 50 20             	mov    0x20(%eax),%edx
   lapicw(LINT0, MASKED);
   lapicw(LINT1, MASKED);
 
   // Disable performance counter overflow interrupts
   // on machines that provide that interrupt entry.
   if(((lapic[VER]>>16) & 0xFF) >= 4)
-8010268e:	8b 50 30             	mov    0x30(%eax),%edx
-80102691:	c1 ea 10             	shr    $0x10,%edx
-80102694:	80 fa 03             	cmp    $0x3,%dl
-80102697:	77 77                	ja     80102710 <lapicinit+0xe0>
+8010270e:	8b 50 30             	mov    0x30(%eax),%edx
+80102711:	c1 ea 10             	shr    $0x10,%edx
+80102714:	80 fa 03             	cmp    $0x3,%dl
+80102717:	77 77                	ja     80102790 <lapicinit+0xe0>
   lapic[index] = value;
-80102699:	c7 80 70 03 00 00 33 	movl   $0x33,0x370(%eax)
-801026a0:	00 00 00 
+80102719:	c7 80 70 03 00 00 33 	movl   $0x33,0x370(%eax)
+80102720:	00 00 00 
   lapic[ID];  // wait for write to finish, by reading
-801026a3:	8b 50 20             	mov    0x20(%eax),%edx
+80102723:	8b 50 20             	mov    0x20(%eax),%edx
   lapic[index] = value;
-801026a6:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
-801026ad:	00 00 00 
+80102726:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
+8010272d:	00 00 00 
   lapic[ID];  // wait for write to finish, by reading
-801026b0:	8b 50 20             	mov    0x20(%eax),%edx
+80102730:	8b 50 20             	mov    0x20(%eax),%edx
   lapic[index] = value;
-801026b3:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
-801026ba:	00 00 00 
+80102733:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
+8010273a:	00 00 00 
   lapic[ID];  // wait for write to finish, by reading
-801026bd:	8b 50 20             	mov    0x20(%eax),%edx
+8010273d:	8b 50 20             	mov    0x20(%eax),%edx
   lapic[index] = value;
-801026c0:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
-801026c7:	00 00 00 
+80102740:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
+80102747:	00 00 00 
   lapic[ID];  // wait for write to finish, by reading
-801026ca:	8b 50 20             	mov    0x20(%eax),%edx
+8010274a:	8b 50 20             	mov    0x20(%eax),%edx
   lapic[index] = value;
-801026cd:	c7 80 10 03 00 00 00 	movl   $0x0,0x310(%eax)
-801026d4:	00 00 00 
+8010274d:	c7 80 10 03 00 00 00 	movl   $0x0,0x310(%eax)
+80102754:	00 00 00 
   lapic[ID];  // wait for write to finish, by reading
-801026d7:	8b 50 20             	mov    0x20(%eax),%edx
+80102757:	8b 50 20             	mov    0x20(%eax),%edx
   lapic[index] = value;
-801026da:	c7 80 00 03 00 00 00 	movl   $0x88500,0x300(%eax)
-801026e1:	85 08 00 
+8010275a:	c7 80 00 03 00 00 00 	movl   $0x88500,0x300(%eax)
+80102761:	85 08 00 
   lapic[ID];  // wait for write to finish, by reading
-801026e4:	8b 50 20             	mov    0x20(%eax),%edx
-801026e7:	89 f6                	mov    %esi,%esi
-801026e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80102764:	8b 50 20             	mov    0x20(%eax),%edx
+80102767:	89 f6                	mov    %esi,%esi
+80102769:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
   lapicw(EOI, 0);
 
   // Send an Init Level De-Assert to synchronise arbitration ID's.
   lapicw(ICRHI, 0);
   lapicw(ICRLO, BCAST | INIT | LEVEL);
   while(lapic[ICRLO] & DELIVS)
-801026f0:	8b 90 00 03 00 00    	mov    0x300(%eax),%edx
-801026f6:	80 e6 10             	and    $0x10,%dh
-801026f9:	75 f5                	jne    801026f0 <lapicinit+0xc0>
+80102770:	8b 90 00 03 00 00    	mov    0x300(%eax),%edx
+80102776:	80 e6 10             	and    $0x10,%dh
+80102779:	75 f5                	jne    80102770 <lapicinit+0xc0>
   lapic[index] = value;
-801026fb:	c7 80 80 00 00 00 00 	movl   $0x0,0x80(%eax)
-80102702:	00 00 00 
+8010277b:	c7 80 80 00 00 00 00 	movl   $0x0,0x80(%eax)
+80102782:	00 00 00 
   lapic[ID];  // wait for write to finish, by reading
-80102705:	8b 40 20             	mov    0x20(%eax),%eax
+80102785:	8b 40 20             	mov    0x20(%eax),%eax
     ;
 
   // Enable interrupts on the APIC (but not on the processor).
   lapicw(TPR, 0);
 }
-80102708:	5d                   	pop    %ebp
-80102709:	c3                   	ret    
-8010270a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80102788:	5d                   	pop    %ebp
+80102789:	c3                   	ret    
+8010278a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   lapic[index] = value;
-80102710:	c7 80 40 03 00 00 00 	movl   $0x10000,0x340(%eax)
-80102717:	00 01 00 
+80102790:	c7 80 40 03 00 00 00 	movl   $0x10000,0x340(%eax)
+80102797:	00 01 00 
   lapic[ID];  // wait for write to finish, by reading
-8010271a:	8b 50 20             	mov    0x20(%eax),%edx
-8010271d:	e9 77 ff ff ff       	jmp    80102699 <lapicinit+0x69>
-80102722:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80102729:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+8010279a:	8b 50 20             	mov    0x20(%eax),%edx
+8010279d:	e9 77 ff ff ff       	jmp    80102719 <lapicinit+0x69>
+801027a2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801027a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80102730 <lapicid>:
+801027b0 <lapicid>:
 
 int
 lapicid(void)
 {
   if (!lapic)
-80102730:	8b 15 7c 26 11 80    	mov    0x8011267c,%edx
+801027b0:	8b 15 9c 36 11 80    	mov    0x8011369c,%edx
 {
-80102736:	55                   	push   %ebp
-80102737:	31 c0                	xor    %eax,%eax
-80102739:	89 e5                	mov    %esp,%ebp
+801027b6:	55                   	push   %ebp
+801027b7:	31 c0                	xor    %eax,%eax
+801027b9:	89 e5                	mov    %esp,%ebp
   if (!lapic)
-8010273b:	85 d2                	test   %edx,%edx
-8010273d:	74 06                	je     80102745 <lapicid+0x15>
+801027bb:	85 d2                	test   %edx,%edx
+801027bd:	74 06                	je     801027c5 <lapicid+0x15>
     return 0;
   return lapic[ID] >> 24;
-8010273f:	8b 42 20             	mov    0x20(%edx),%eax
-80102742:	c1 e8 18             	shr    $0x18,%eax
+801027bf:	8b 42 20             	mov    0x20(%edx),%eax
+801027c2:	c1 e8 18             	shr    $0x18,%eax
 }
-80102745:	5d                   	pop    %ebp
-80102746:	c3                   	ret    
-80102747:	89 f6                	mov    %esi,%esi
-80102749:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+801027c5:	5d                   	pop    %ebp
+801027c6:	c3                   	ret    
+801027c7:	89 f6                	mov    %esi,%esi
+801027c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80102750 <lapiceoi>:
+801027d0 <lapiceoi>:
 
 // Acknowledge interrupt.
 void
 lapiceoi(void)
 {
   if(lapic)
-80102750:	a1 7c 26 11 80       	mov    0x8011267c,%eax
+801027d0:	a1 9c 36 11 80       	mov    0x8011369c,%eax
 {
-80102755:	55                   	push   %ebp
-80102756:	89 e5                	mov    %esp,%ebp
+801027d5:	55                   	push   %ebp
+801027d6:	89 e5                	mov    %esp,%ebp
   if(lapic)
-80102758:	85 c0                	test   %eax,%eax
-8010275a:	74 0d                	je     80102769 <lapiceoi+0x19>
+801027d8:	85 c0                	test   %eax,%eax
+801027da:	74 0d                	je     801027e9 <lapiceoi+0x19>
   lapic[index] = value;
-8010275c:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
-80102763:	00 00 00 
+801027dc:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
+801027e3:	00 00 00 
   lapic[ID];  // wait for write to finish, by reading
-80102766:	8b 40 20             	mov    0x20(%eax),%eax
+801027e6:	8b 40 20             	mov    0x20(%eax),%eax
     lapicw(EOI, 0);
 }
-80102769:	5d                   	pop    %ebp
-8010276a:	c3                   	ret    
-8010276b:	90                   	nop
-8010276c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801027e9:	5d                   	pop    %ebp
+801027ea:	c3                   	ret    
+801027eb:	90                   	nop
+801027ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80102770 <microdelay>:
+801027f0 <microdelay>:
 
 // Spin for a given number of microseconds.
 // On real hardware would want to tune this dynamically.
 void
 microdelay(int us)
 {
-80102770:	55                   	push   %ebp
-80102771:	89 e5                	mov    %esp,%ebp
+801027f0:	55                   	push   %ebp
+801027f1:	89 e5                	mov    %esp,%ebp
 }
-80102773:	5d                   	pop    %ebp
-80102774:	c3                   	ret    
-80102775:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80102779:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+801027f3:	5d                   	pop    %ebp
+801027f4:	c3                   	ret    
+801027f5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801027f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80102780 <lapicstartap>:
+80102800 <lapicstartap>:
 
 // Start additional processor running entry code at addr.
 // See Appendix B of MultiProcessor Specification.
 void
 lapicstartap(uchar apicid, uint addr)
 {
-80102780:	55                   	push   %ebp
+80102800:	55                   	push   %ebp
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102781:	b8 0f 00 00 00       	mov    $0xf,%eax
-80102786:	ba 70 00 00 00       	mov    $0x70,%edx
-8010278b:	89 e5                	mov    %esp,%ebp
-8010278d:	53                   	push   %ebx
-8010278e:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-80102791:	8b 5d 08             	mov    0x8(%ebp),%ebx
-80102794:	ee                   	out    %al,(%dx)
-80102795:	b8 0a 00 00 00       	mov    $0xa,%eax
-8010279a:	ba 71 00 00 00       	mov    $0x71,%edx
-8010279f:	ee                   	out    %al,(%dx)
+80102801:	b8 0f 00 00 00       	mov    $0xf,%eax
+80102806:	ba 70 00 00 00       	mov    $0x70,%edx
+8010280b:	89 e5                	mov    %esp,%ebp
+8010280d:	53                   	push   %ebx
+8010280e:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80102811:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80102814:	ee                   	out    %al,(%dx)
+80102815:	b8 0a 00 00 00       	mov    $0xa,%eax
+8010281a:	ba 71 00 00 00       	mov    $0x71,%edx
+8010281f:	ee                   	out    %al,(%dx)
   // and the warm reset vector (DWORD based at 40:67) to point at
   // the AP startup code prior to the [universal startup algorithm]."
   outb(CMOS_PORT, 0xF);  // offset 0xF is shutdown code
   outb(CMOS_PORT+1, 0x0A);
   wrv = (ushort*)P2V((0x40<<4 | 0x67));  // Warm reset vector
   wrv[0] = 0;
-801027a0:	31 c0                	xor    %eax,%eax
+80102820:	31 c0                	xor    %eax,%eax
   wrv[1] = addr >> 4;
 
   // "Universal startup algorithm."
   // Send INIT (level-triggered) interrupt to reset other CPU.
   lapicw(ICRHI, apicid<<24);
-801027a2:	c1 e3 18             	shl    $0x18,%ebx
+80102822:	c1 e3 18             	shl    $0x18,%ebx
   wrv[0] = 0;
-801027a5:	66 a3 67 04 00 80    	mov    %ax,0x80000467
+80102825:	66 a3 67 04 00 80    	mov    %ax,0x80000467
   wrv[1] = addr >> 4;
-801027ab:	89 c8                	mov    %ecx,%eax
+8010282b:	89 c8                	mov    %ecx,%eax
   // when it is in the halted state due to an INIT.  So the second
   // should be ignored, but it is part of the official Intel algorithm.
   // Bochs complains about the second one.  Too bad for Bochs.
   for(i = 0; i < 2; i++){
     lapicw(ICRHI, apicid<<24);
     lapicw(ICRLO, STARTUP | (addr>>12));
-801027ad:	c1 e9 0c             	shr    $0xc,%ecx
+8010282d:	c1 e9 0c             	shr    $0xc,%ecx
   wrv[1] = addr >> 4;
-801027b0:	c1 e8 04             	shr    $0x4,%eax
+80102830:	c1 e8 04             	shr    $0x4,%eax
   lapicw(ICRHI, apicid<<24);
-801027b3:	89 da                	mov    %ebx,%edx
+80102833:	89 da                	mov    %ebx,%edx
     lapicw(ICRLO, STARTUP | (addr>>12));
-801027b5:	80 cd 06             	or     $0x6,%ch
+80102835:	80 cd 06             	or     $0x6,%ch
   wrv[1] = addr >> 4;
-801027b8:	66 a3 69 04 00 80    	mov    %ax,0x80000469
+80102838:	66 a3 69 04 00 80    	mov    %ax,0x80000469
   lapic[index] = value;
-801027be:	a1 7c 26 11 80       	mov    0x8011267c,%eax
-801027c3:	89 98 10 03 00 00    	mov    %ebx,0x310(%eax)
+8010283e:	a1 9c 36 11 80       	mov    0x8011369c,%eax
+80102843:	89 98 10 03 00 00    	mov    %ebx,0x310(%eax)
   lapic[ID];  // wait for write to finish, by reading
-801027c9:	8b 58 20             	mov    0x20(%eax),%ebx
+80102849:	8b 58 20             	mov    0x20(%eax),%ebx
   lapic[index] = value;
-801027cc:	c7 80 00 03 00 00 00 	movl   $0xc500,0x300(%eax)
-801027d3:	c5 00 00 
+8010284c:	c7 80 00 03 00 00 00 	movl   $0xc500,0x300(%eax)
+80102853:	c5 00 00 
   lapic[ID];  // wait for write to finish, by reading
-801027d6:	8b 58 20             	mov    0x20(%eax),%ebx
+80102856:	8b 58 20             	mov    0x20(%eax),%ebx
   lapic[index] = value;
-801027d9:	c7 80 00 03 00 00 00 	movl   $0x8500,0x300(%eax)
-801027e0:	85 00 00 
+80102859:	c7 80 00 03 00 00 00 	movl   $0x8500,0x300(%eax)
+80102860:	85 00 00 
   lapic[ID];  // wait for write to finish, by reading
-801027e3:	8b 58 20             	mov    0x20(%eax),%ebx
+80102863:	8b 58 20             	mov    0x20(%eax),%ebx
   lapic[index] = value;
-801027e6:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
+80102866:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
   lapic[ID];  // wait for write to finish, by reading
-801027ec:	8b 58 20             	mov    0x20(%eax),%ebx
+8010286c:	8b 58 20             	mov    0x20(%eax),%ebx
   lapic[index] = value;
-801027ef:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
+8010286f:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
   lapic[ID];  // wait for write to finish, by reading
-801027f5:	8b 58 20             	mov    0x20(%eax),%ebx
+80102875:	8b 58 20             	mov    0x20(%eax),%ebx
   lapic[index] = value;
-801027f8:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
+80102878:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
   lapic[ID];  // wait for write to finish, by reading
-801027fe:	8b 50 20             	mov    0x20(%eax),%edx
+8010287e:	8b 50 20             	mov    0x20(%eax),%edx
   lapic[index] = value;
-80102801:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
+80102881:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
   lapic[ID];  // wait for write to finish, by reading
-80102807:	8b 40 20             	mov    0x20(%eax),%eax
+80102887:	8b 40 20             	mov    0x20(%eax),%eax
     microdelay(200);
   }
 }
-8010280a:	5b                   	pop    %ebx
-8010280b:	5d                   	pop    %ebp
-8010280c:	c3                   	ret    
-8010280d:	8d 76 00             	lea    0x0(%esi),%esi
+8010288a:	5b                   	pop    %ebx
+8010288b:	5d                   	pop    %ebp
+8010288c:	c3                   	ret    
+8010288d:	8d 76 00             	lea    0x0(%esi),%esi
 
-80102810 <cmostime>:
+80102890 <cmostime>:
 }
 
 // qemu seems to use 24-hour GWT and the values are BCD encoded
 void
 cmostime(struct rtcdate *r)
 {
-80102810:	55                   	push   %ebp
-80102811:	b8 0b 00 00 00       	mov    $0xb,%eax
-80102816:	ba 70 00 00 00       	mov    $0x70,%edx
-8010281b:	89 e5                	mov    %esp,%ebp
-8010281d:	57                   	push   %edi
-8010281e:	56                   	push   %esi
-8010281f:	53                   	push   %ebx
-80102820:	83 ec 4c             	sub    $0x4c,%esp
-80102823:	ee                   	out    %al,(%dx)
+80102890:	55                   	push   %ebp
+80102891:	b8 0b 00 00 00       	mov    $0xb,%eax
+80102896:	ba 70 00 00 00       	mov    $0x70,%edx
+8010289b:	89 e5                	mov    %esp,%ebp
+8010289d:	57                   	push   %edi
+8010289e:	56                   	push   %esi
+8010289f:	53                   	push   %ebx
+801028a0:	83 ec 4c             	sub    $0x4c,%esp
+801028a3:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102824:	ba 71 00 00 00       	mov    $0x71,%edx
-80102829:	ec                   	in     (%dx),%al
-8010282a:	83 e0 04             	and    $0x4,%eax
+801028a4:	ba 71 00 00 00       	mov    $0x71,%edx
+801028a9:	ec                   	in     (%dx),%al
+801028aa:	83 e0 04             	and    $0x4,%eax
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-8010282d:	bb 70 00 00 00       	mov    $0x70,%ebx
-80102832:	88 45 b3             	mov    %al,-0x4d(%ebp)
-80102835:	8d 76 00             	lea    0x0(%esi),%esi
-80102838:	31 c0                	xor    %eax,%eax
-8010283a:	89 da                	mov    %ebx,%edx
-8010283c:	ee                   	out    %al,(%dx)
+801028ad:	bb 70 00 00 00       	mov    $0x70,%ebx
+801028b2:	88 45 b3             	mov    %al,-0x4d(%ebp)
+801028b5:	8d 76 00             	lea    0x0(%esi),%esi
+801028b8:	31 c0                	xor    %eax,%eax
+801028ba:	89 da                	mov    %ebx,%edx
+801028bc:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-8010283d:	b9 71 00 00 00       	mov    $0x71,%ecx
-80102842:	89 ca                	mov    %ecx,%edx
-80102844:	ec                   	in     (%dx),%al
-80102845:	88 45 b7             	mov    %al,-0x49(%ebp)
+801028bd:	b9 71 00 00 00       	mov    $0x71,%ecx
+801028c2:	89 ca                	mov    %ecx,%edx
+801028c4:	ec                   	in     (%dx),%al
+801028c5:	88 45 b7             	mov    %al,-0x49(%ebp)
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102848:	89 da                	mov    %ebx,%edx
-8010284a:	b8 02 00 00 00       	mov    $0x2,%eax
-8010284f:	ee                   	out    %al,(%dx)
+801028c8:	89 da                	mov    %ebx,%edx
+801028ca:	b8 02 00 00 00       	mov    $0x2,%eax
+801028cf:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102850:	89 ca                	mov    %ecx,%edx
-80102852:	ec                   	in     (%dx),%al
-80102853:	88 45 b6             	mov    %al,-0x4a(%ebp)
+801028d0:	89 ca                	mov    %ecx,%edx
+801028d2:	ec                   	in     (%dx),%al
+801028d3:	88 45 b6             	mov    %al,-0x4a(%ebp)
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102856:	89 da                	mov    %ebx,%edx
-80102858:	b8 04 00 00 00       	mov    $0x4,%eax
-8010285d:	ee                   	out    %al,(%dx)
+801028d6:	89 da                	mov    %ebx,%edx
+801028d8:	b8 04 00 00 00       	mov    $0x4,%eax
+801028dd:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-8010285e:	89 ca                	mov    %ecx,%edx
-80102860:	ec                   	in     (%dx),%al
-80102861:	88 45 b5             	mov    %al,-0x4b(%ebp)
+801028de:	89 ca                	mov    %ecx,%edx
+801028e0:	ec                   	in     (%dx),%al
+801028e1:	88 45 b5             	mov    %al,-0x4b(%ebp)
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102864:	89 da                	mov    %ebx,%edx
-80102866:	b8 07 00 00 00       	mov    $0x7,%eax
-8010286b:	ee                   	out    %al,(%dx)
+801028e4:	89 da                	mov    %ebx,%edx
+801028e6:	b8 07 00 00 00       	mov    $0x7,%eax
+801028eb:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-8010286c:	89 ca                	mov    %ecx,%edx
-8010286e:	ec                   	in     (%dx),%al
-8010286f:	88 45 b4             	mov    %al,-0x4c(%ebp)
+801028ec:	89 ca                	mov    %ecx,%edx
+801028ee:	ec                   	in     (%dx),%al
+801028ef:	88 45 b4             	mov    %al,-0x4c(%ebp)
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102872:	89 da                	mov    %ebx,%edx
-80102874:	b8 08 00 00 00       	mov    $0x8,%eax
-80102879:	ee                   	out    %al,(%dx)
+801028f2:	89 da                	mov    %ebx,%edx
+801028f4:	b8 08 00 00 00       	mov    $0x8,%eax
+801028f9:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-8010287a:	89 ca                	mov    %ecx,%edx
-8010287c:	ec                   	in     (%dx),%al
-8010287d:	89 c7                	mov    %eax,%edi
+801028fa:	89 ca                	mov    %ecx,%edx
+801028fc:	ec                   	in     (%dx),%al
+801028fd:	89 c7                	mov    %eax,%edi
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-8010287f:	89 da                	mov    %ebx,%edx
-80102881:	b8 09 00 00 00       	mov    $0x9,%eax
-80102886:	ee                   	out    %al,(%dx)
+801028ff:	89 da                	mov    %ebx,%edx
+80102901:	b8 09 00 00 00       	mov    $0x9,%eax
+80102906:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102887:	89 ca                	mov    %ecx,%edx
-80102889:	ec                   	in     (%dx),%al
-8010288a:	89 c6                	mov    %eax,%esi
+80102907:	89 ca                	mov    %ecx,%edx
+80102909:	ec                   	in     (%dx),%al
+8010290a:	89 c6                	mov    %eax,%esi
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-8010288c:	89 da                	mov    %ebx,%edx
-8010288e:	b8 0a 00 00 00       	mov    $0xa,%eax
-80102893:	ee                   	out    %al,(%dx)
+8010290c:	89 da                	mov    %ebx,%edx
+8010290e:	b8 0a 00 00 00       	mov    $0xa,%eax
+80102913:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102894:	89 ca                	mov    %ecx,%edx
-80102896:	ec                   	in     (%dx),%al
+80102914:	89 ca                	mov    %ecx,%edx
+80102916:	ec                   	in     (%dx),%al
   bcd = (sb & (1 << 2)) == 0;
 
   // make sure CMOS doesn't modify time while we read it
   for(;;) {
     fill_rtcdate(&t1);
     if(cmos_read(CMOS_STATA) & CMOS_UIP)
-80102897:	84 c0                	test   %al,%al
-80102899:	78 9d                	js     80102838 <cmostime+0x28>
+80102917:	84 c0                	test   %al,%al
+80102919:	78 9d                	js     801028b8 <cmostime+0x28>
   return inb(CMOS_RETURN);
-8010289b:	0f b6 45 b7          	movzbl -0x49(%ebp),%eax
-8010289f:	89 fa                	mov    %edi,%edx
-801028a1:	0f b6 fa             	movzbl %dl,%edi
-801028a4:	89 f2                	mov    %esi,%edx
-801028a6:	0f b6 f2             	movzbl %dl,%esi
-801028a9:	89 7d c8             	mov    %edi,-0x38(%ebp)
+8010291b:	0f b6 45 b7          	movzbl -0x49(%ebp),%eax
+8010291f:	89 fa                	mov    %edi,%edx
+80102921:	0f b6 fa             	movzbl %dl,%edi
+80102924:	89 f2                	mov    %esi,%edx
+80102926:	0f b6 f2             	movzbl %dl,%esi
+80102929:	89 7d c8             	mov    %edi,-0x38(%ebp)
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-801028ac:	89 da                	mov    %ebx,%edx
-801028ae:	89 75 cc             	mov    %esi,-0x34(%ebp)
-801028b1:	89 45 b8             	mov    %eax,-0x48(%ebp)
-801028b4:	0f b6 45 b6          	movzbl -0x4a(%ebp),%eax
-801028b8:	89 45 bc             	mov    %eax,-0x44(%ebp)
-801028bb:	0f b6 45 b5          	movzbl -0x4b(%ebp),%eax
-801028bf:	89 45 c0             	mov    %eax,-0x40(%ebp)
-801028c2:	0f b6 45 b4          	movzbl -0x4c(%ebp),%eax
-801028c6:	89 45 c4             	mov    %eax,-0x3c(%ebp)
-801028c9:	31 c0                	xor    %eax,%eax
-801028cb:	ee                   	out    %al,(%dx)
+8010292c:	89 da                	mov    %ebx,%edx
+8010292e:	89 75 cc             	mov    %esi,-0x34(%ebp)
+80102931:	89 45 b8             	mov    %eax,-0x48(%ebp)
+80102934:	0f b6 45 b6          	movzbl -0x4a(%ebp),%eax
+80102938:	89 45 bc             	mov    %eax,-0x44(%ebp)
+8010293b:	0f b6 45 b5          	movzbl -0x4b(%ebp),%eax
+8010293f:	89 45 c0             	mov    %eax,-0x40(%ebp)
+80102942:	0f b6 45 b4          	movzbl -0x4c(%ebp),%eax
+80102946:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+80102949:	31 c0                	xor    %eax,%eax
+8010294b:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-801028cc:	89 ca                	mov    %ecx,%edx
-801028ce:	ec                   	in     (%dx),%al
-801028cf:	0f b6 c0             	movzbl %al,%eax
+8010294c:	89 ca                	mov    %ecx,%edx
+8010294e:	ec                   	in     (%dx),%al
+8010294f:	0f b6 c0             	movzbl %al,%eax
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-801028d2:	89 da                	mov    %ebx,%edx
-801028d4:	89 45 d0             	mov    %eax,-0x30(%ebp)
-801028d7:	b8 02 00 00 00       	mov    $0x2,%eax
-801028dc:	ee                   	out    %al,(%dx)
+80102952:	89 da                	mov    %ebx,%edx
+80102954:	89 45 d0             	mov    %eax,-0x30(%ebp)
+80102957:	b8 02 00 00 00       	mov    $0x2,%eax
+8010295c:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-801028dd:	89 ca                	mov    %ecx,%edx
-801028df:	ec                   	in     (%dx),%al
-801028e0:	0f b6 c0             	movzbl %al,%eax
+8010295d:	89 ca                	mov    %ecx,%edx
+8010295f:	ec                   	in     (%dx),%al
+80102960:	0f b6 c0             	movzbl %al,%eax
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-801028e3:	89 da                	mov    %ebx,%edx
-801028e5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
-801028e8:	b8 04 00 00 00       	mov    $0x4,%eax
-801028ed:	ee                   	out    %al,(%dx)
+80102963:	89 da                	mov    %ebx,%edx
+80102965:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+80102968:	b8 04 00 00 00       	mov    $0x4,%eax
+8010296d:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-801028ee:	89 ca                	mov    %ecx,%edx
-801028f0:	ec                   	in     (%dx),%al
-801028f1:	0f b6 c0             	movzbl %al,%eax
+8010296e:	89 ca                	mov    %ecx,%edx
+80102970:	ec                   	in     (%dx),%al
+80102971:	0f b6 c0             	movzbl %al,%eax
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-801028f4:	89 da                	mov    %ebx,%edx
-801028f6:	89 45 d8             	mov    %eax,-0x28(%ebp)
-801028f9:	b8 07 00 00 00       	mov    $0x7,%eax
-801028fe:	ee                   	out    %al,(%dx)
+80102974:	89 da                	mov    %ebx,%edx
+80102976:	89 45 d8             	mov    %eax,-0x28(%ebp)
+80102979:	b8 07 00 00 00       	mov    $0x7,%eax
+8010297e:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-801028ff:	89 ca                	mov    %ecx,%edx
-80102901:	ec                   	in     (%dx),%al
-80102902:	0f b6 c0             	movzbl %al,%eax
+8010297f:	89 ca                	mov    %ecx,%edx
+80102981:	ec                   	in     (%dx),%al
+80102982:	0f b6 c0             	movzbl %al,%eax
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102905:	89 da                	mov    %ebx,%edx
-80102907:	89 45 dc             	mov    %eax,-0x24(%ebp)
-8010290a:	b8 08 00 00 00       	mov    $0x8,%eax
-8010290f:	ee                   	out    %al,(%dx)
+80102985:	89 da                	mov    %ebx,%edx
+80102987:	89 45 dc             	mov    %eax,-0x24(%ebp)
+8010298a:	b8 08 00 00 00       	mov    $0x8,%eax
+8010298f:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102910:	89 ca                	mov    %ecx,%edx
-80102912:	ec                   	in     (%dx),%al
-80102913:	0f b6 c0             	movzbl %al,%eax
+80102990:	89 ca                	mov    %ecx,%edx
+80102992:	ec                   	in     (%dx),%al
+80102993:	0f b6 c0             	movzbl %al,%eax
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102916:	89 da                	mov    %ebx,%edx
-80102918:	89 45 e0             	mov    %eax,-0x20(%ebp)
-8010291b:	b8 09 00 00 00       	mov    $0x9,%eax
-80102920:	ee                   	out    %al,(%dx)
+80102996:	89 da                	mov    %ebx,%edx
+80102998:	89 45 e0             	mov    %eax,-0x20(%ebp)
+8010299b:	b8 09 00 00 00       	mov    $0x9,%eax
+801029a0:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102921:	89 ca                	mov    %ecx,%edx
-80102923:	ec                   	in     (%dx),%al
-80102924:	0f b6 c0             	movzbl %al,%eax
+801029a1:	89 ca                	mov    %ecx,%edx
+801029a3:	ec                   	in     (%dx),%al
+801029a4:	0f b6 c0             	movzbl %al,%eax
         continue;
     fill_rtcdate(&t2);
     if(memcmp(&t1, &t2, sizeof(t1)) == 0)
-80102927:	83 ec 04             	sub    $0x4,%esp
+801029a7:	83 ec 04             	sub    $0x4,%esp
   return inb(CMOS_RETURN);
-8010292a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801029aa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if(memcmp(&t1, &t2, sizeof(t1)) == 0)
-8010292d:	8d 45 d0             	lea    -0x30(%ebp),%eax
-80102930:	6a 18                	push   $0x18
-80102932:	50                   	push   %eax
-80102933:	8d 45 b8             	lea    -0x48(%ebp),%eax
-80102936:	50                   	push   %eax
-80102937:	e8 a4 1e 00 00       	call   801047e0 <memcmp>
-8010293c:	83 c4 10             	add    $0x10,%esp
-8010293f:	85 c0                	test   %eax,%eax
-80102941:	0f 85 f1 fe ff ff    	jne    80102838 <cmostime+0x28>
+801029ad:	8d 45 d0             	lea    -0x30(%ebp),%eax
+801029b0:	6a 18                	push   $0x18
+801029b2:	50                   	push   %eax
+801029b3:	8d 45 b8             	lea    -0x48(%ebp),%eax
+801029b6:	50                   	push   %eax
+801029b7:	e8 04 27 00 00       	call   801050c0 <memcmp>
+801029bc:	83 c4 10             	add    $0x10,%esp
+801029bf:	85 c0                	test   %eax,%eax
+801029c1:	0f 85 f1 fe ff ff    	jne    801028b8 <cmostime+0x28>
       break;
   }
 
   // convert
   if(bcd) {
-80102947:	80 7d b3 00          	cmpb   $0x0,-0x4d(%ebp)
-8010294b:	75 78                	jne    801029c5 <cmostime+0x1b5>
+801029c7:	80 7d b3 00          	cmpb   $0x0,-0x4d(%ebp)
+801029cb:	75 78                	jne    80102a45 <cmostime+0x1b5>
 #define    CONV(x)     (t1.x = ((t1.x >> 4) * 10) + (t1.x & 0xf))
     CONV(second);
-8010294d:	8b 45 b8             	mov    -0x48(%ebp),%eax
-80102950:	89 c2                	mov    %eax,%edx
-80102952:	83 e0 0f             	and    $0xf,%eax
-80102955:	c1 ea 04             	shr    $0x4,%edx
-80102958:	8d 14 92             	lea    (%edx,%edx,4),%edx
-8010295b:	8d 04 50             	lea    (%eax,%edx,2),%eax
-8010295e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+801029cd:	8b 45 b8             	mov    -0x48(%ebp),%eax
+801029d0:	89 c2                	mov    %eax,%edx
+801029d2:	83 e0 0f             	and    $0xf,%eax
+801029d5:	c1 ea 04             	shr    $0x4,%edx
+801029d8:	8d 14 92             	lea    (%edx,%edx,4),%edx
+801029db:	8d 04 50             	lea    (%eax,%edx,2),%eax
+801029de:	89 45 b8             	mov    %eax,-0x48(%ebp)
     CONV(minute);
-80102961:	8b 45 bc             	mov    -0x44(%ebp),%eax
-80102964:	89 c2                	mov    %eax,%edx
-80102966:	83 e0 0f             	and    $0xf,%eax
-80102969:	c1 ea 04             	shr    $0x4,%edx
-8010296c:	8d 14 92             	lea    (%edx,%edx,4),%edx
-8010296f:	8d 04 50             	lea    (%eax,%edx,2),%eax
-80102972:	89 45 bc             	mov    %eax,-0x44(%ebp)
+801029e1:	8b 45 bc             	mov    -0x44(%ebp),%eax
+801029e4:	89 c2                	mov    %eax,%edx
+801029e6:	83 e0 0f             	and    $0xf,%eax
+801029e9:	c1 ea 04             	shr    $0x4,%edx
+801029ec:	8d 14 92             	lea    (%edx,%edx,4),%edx
+801029ef:	8d 04 50             	lea    (%eax,%edx,2),%eax
+801029f2:	89 45 bc             	mov    %eax,-0x44(%ebp)
     CONV(hour  );
-80102975:	8b 45 c0             	mov    -0x40(%ebp),%eax
-80102978:	89 c2                	mov    %eax,%edx
-8010297a:	83 e0 0f             	and    $0xf,%eax
-8010297d:	c1 ea 04             	shr    $0x4,%edx
-80102980:	8d 14 92             	lea    (%edx,%edx,4),%edx
-80102983:	8d 04 50             	lea    (%eax,%edx,2),%eax
-80102986:	89 45 c0             	mov    %eax,-0x40(%ebp)
+801029f5:	8b 45 c0             	mov    -0x40(%ebp),%eax
+801029f8:	89 c2                	mov    %eax,%edx
+801029fa:	83 e0 0f             	and    $0xf,%eax
+801029fd:	c1 ea 04             	shr    $0x4,%edx
+80102a00:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102a03:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102a06:	89 45 c0             	mov    %eax,-0x40(%ebp)
     CONV(day   );
-80102989:	8b 45 c4             	mov    -0x3c(%ebp),%eax
-8010298c:	89 c2                	mov    %eax,%edx
-8010298e:	83 e0 0f             	and    $0xf,%eax
-80102991:	c1 ea 04             	shr    $0x4,%edx
-80102994:	8d 14 92             	lea    (%edx,%edx,4),%edx
-80102997:	8d 04 50             	lea    (%eax,%edx,2),%eax
-8010299a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+80102a09:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+80102a0c:	89 c2                	mov    %eax,%edx
+80102a0e:	83 e0 0f             	and    $0xf,%eax
+80102a11:	c1 ea 04             	shr    $0x4,%edx
+80102a14:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102a17:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102a1a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
     CONV(month );
-8010299d:	8b 45 c8             	mov    -0x38(%ebp),%eax
-801029a0:	89 c2                	mov    %eax,%edx
-801029a2:	83 e0 0f             	and    $0xf,%eax
-801029a5:	c1 ea 04             	shr    $0x4,%edx
-801029a8:	8d 14 92             	lea    (%edx,%edx,4),%edx
-801029ab:	8d 04 50             	lea    (%eax,%edx,2),%eax
-801029ae:	89 45 c8             	mov    %eax,-0x38(%ebp)
+80102a1d:	8b 45 c8             	mov    -0x38(%ebp),%eax
+80102a20:	89 c2                	mov    %eax,%edx
+80102a22:	83 e0 0f             	and    $0xf,%eax
+80102a25:	c1 ea 04             	shr    $0x4,%edx
+80102a28:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102a2b:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102a2e:	89 45 c8             	mov    %eax,-0x38(%ebp)
     CONV(year  );
-801029b1:	8b 45 cc             	mov    -0x34(%ebp),%eax
-801029b4:	89 c2                	mov    %eax,%edx
-801029b6:	83 e0 0f             	and    $0xf,%eax
-801029b9:	c1 ea 04             	shr    $0x4,%edx
-801029bc:	8d 14 92             	lea    (%edx,%edx,4),%edx
-801029bf:	8d 04 50             	lea    (%eax,%edx,2),%eax
-801029c2:	89 45 cc             	mov    %eax,-0x34(%ebp)
+80102a31:	8b 45 cc             	mov    -0x34(%ebp),%eax
+80102a34:	89 c2                	mov    %eax,%edx
+80102a36:	83 e0 0f             	and    $0xf,%eax
+80102a39:	c1 ea 04             	shr    $0x4,%edx
+80102a3c:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102a3f:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102a42:	89 45 cc             	mov    %eax,-0x34(%ebp)
 #undef     CONV
   }
 
   *r = t1;
-801029c5:	8b 75 08             	mov    0x8(%ebp),%esi
-801029c8:	8b 45 b8             	mov    -0x48(%ebp),%eax
-801029cb:	89 06                	mov    %eax,(%esi)
-801029cd:	8b 45 bc             	mov    -0x44(%ebp),%eax
-801029d0:	89 46 04             	mov    %eax,0x4(%esi)
-801029d3:	8b 45 c0             	mov    -0x40(%ebp),%eax
-801029d6:	89 46 08             	mov    %eax,0x8(%esi)
-801029d9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
-801029dc:	89 46 0c             	mov    %eax,0xc(%esi)
-801029df:	8b 45 c8             	mov    -0x38(%ebp),%eax
-801029e2:	89 46 10             	mov    %eax,0x10(%esi)
-801029e5:	8b 45 cc             	mov    -0x34(%ebp),%eax
-801029e8:	89 46 14             	mov    %eax,0x14(%esi)
+80102a45:	8b 75 08             	mov    0x8(%ebp),%esi
+80102a48:	8b 45 b8             	mov    -0x48(%ebp),%eax
+80102a4b:	89 06                	mov    %eax,(%esi)
+80102a4d:	8b 45 bc             	mov    -0x44(%ebp),%eax
+80102a50:	89 46 04             	mov    %eax,0x4(%esi)
+80102a53:	8b 45 c0             	mov    -0x40(%ebp),%eax
+80102a56:	89 46 08             	mov    %eax,0x8(%esi)
+80102a59:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+80102a5c:	89 46 0c             	mov    %eax,0xc(%esi)
+80102a5f:	8b 45 c8             	mov    -0x38(%ebp),%eax
+80102a62:	89 46 10             	mov    %eax,0x10(%esi)
+80102a65:	8b 45 cc             	mov    -0x34(%ebp),%eax
+80102a68:	89 46 14             	mov    %eax,0x14(%esi)
   r->year += 2000;
-801029eb:	81 46 14 d0 07 00 00 	addl   $0x7d0,0x14(%esi)
+80102a6b:	81 46 14 d0 07 00 00 	addl   $0x7d0,0x14(%esi)
 }
-801029f2:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801029f5:	5b                   	pop    %ebx
-801029f6:	5e                   	pop    %esi
-801029f7:	5f                   	pop    %edi
-801029f8:	5d                   	pop    %ebp
-801029f9:	c3                   	ret    
-801029fa:	66 90                	xchg   %ax,%ax
-801029fc:	66 90                	xchg   %ax,%ax
-801029fe:	66 90                	xchg   %ax,%ax
+80102a72:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102a75:	5b                   	pop    %ebx
+80102a76:	5e                   	pop    %esi
+80102a77:	5f                   	pop    %edi
+80102a78:	5d                   	pop    %ebp
+80102a79:	c3                   	ret    
+80102a7a:	66 90                	xchg   %ax,%ax
+80102a7c:	66 90                	xchg   %ax,%ax
+80102a7e:	66 90                	xchg   %ax,%ax
 
-80102a00 <install_trans>:
+80102a80 <install_trans>:
 static void
 install_trans(void)
 {
   int tail;
 
   for (tail = 0; tail < log.lh.n; tail++) {
-80102a00:	8b 0d c8 26 11 80    	mov    0x801126c8,%ecx
-80102a06:	85 c9                	test   %ecx,%ecx
-80102a08:	0f 8e 8a 00 00 00    	jle    80102a98 <install_trans+0x98>
-{
-80102a0e:	55                   	push   %ebp
-80102a0f:	89 e5                	mov    %esp,%ebp
-80102a11:	57                   	push   %edi
-80102a12:	56                   	push   %esi
-80102a13:	53                   	push   %ebx
+80102a80:	8b 0d e8 36 11 80    	mov    0x801136e8,%ecx
+80102a86:	85 c9                	test   %ecx,%ecx
+80102a88:	0f 8e 8a 00 00 00    	jle    80102b18 <install_trans+0x98>
+{
+80102a8e:	55                   	push   %ebp
+80102a8f:	89 e5                	mov    %esp,%ebp
+80102a91:	57                   	push   %edi
+80102a92:	56                   	push   %esi
+80102a93:	53                   	push   %ebx
   for (tail = 0; tail < log.lh.n; tail++) {
-80102a14:	31 db                	xor    %ebx,%ebx
+80102a94:	31 db                	xor    %ebx,%ebx
 {
-80102a16:	83 ec 0c             	sub    $0xc,%esp
-80102a19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102a96:	83 ec 0c             	sub    $0xc,%esp
+80102a99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block
-80102a20:	a1 b4 26 11 80       	mov    0x801126b4,%eax
-80102a25:	83 ec 08             	sub    $0x8,%esp
-80102a28:	01 d8                	add    %ebx,%eax
-80102a2a:	83 c0 01             	add    $0x1,%eax
-80102a2d:	50                   	push   %eax
-80102a2e:	ff 35 c4 26 11 80    	pushl  0x801126c4
-80102a34:	e8 97 d6 ff ff       	call   801000d0 <bread>
-80102a39:	89 c7                	mov    %eax,%edi
+80102aa0:	a1 d4 36 11 80       	mov    0x801136d4,%eax
+80102aa5:	83 ec 08             	sub    $0x8,%esp
+80102aa8:	01 d8                	add    %ebx,%eax
+80102aaa:	83 c0 01             	add    $0x1,%eax
+80102aad:	50                   	push   %eax
+80102aae:	ff 35 e4 36 11 80    	pushl  0x801136e4
+80102ab4:	e8 17 d6 ff ff       	call   801000d0 <bread>
+80102ab9:	89 c7                	mov    %eax,%edi
     struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
-80102a3b:	58                   	pop    %eax
-80102a3c:	5a                   	pop    %edx
-80102a3d:	ff 34 9d cc 26 11 80 	pushl  -0x7feed934(,%ebx,4)
-80102a44:	ff 35 c4 26 11 80    	pushl  0x801126c4
+80102abb:	58                   	pop    %eax
+80102abc:	5a                   	pop    %edx
+80102abd:	ff 34 9d ec 36 11 80 	pushl  -0x7feec914(,%ebx,4)
+80102ac4:	ff 35 e4 36 11 80    	pushl  0x801136e4
   for (tail = 0; tail < log.lh.n; tail++) {
-80102a4a:	83 c3 01             	add    $0x1,%ebx
+80102aca:	83 c3 01             	add    $0x1,%ebx
     struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
-80102a4d:	e8 7e d6 ff ff       	call   801000d0 <bread>
-80102a52:	89 c6                	mov    %eax,%esi
+80102acd:	e8 fe d5 ff ff       	call   801000d0 <bread>
+80102ad2:	89 c6                	mov    %eax,%esi
     memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
-80102a54:	8d 47 5c             	lea    0x5c(%edi),%eax
-80102a57:	83 c4 0c             	add    $0xc,%esp
-80102a5a:	68 00 02 00 00       	push   $0x200
-80102a5f:	50                   	push   %eax
-80102a60:	8d 46 5c             	lea    0x5c(%esi),%eax
-80102a63:	50                   	push   %eax
-80102a64:	e8 d7 1d 00 00       	call   80104840 <memmove>
+80102ad4:	8d 47 5c             	lea    0x5c(%edi),%eax
+80102ad7:	83 c4 0c             	add    $0xc,%esp
+80102ada:	68 00 02 00 00       	push   $0x200
+80102adf:	50                   	push   %eax
+80102ae0:	8d 46 5c             	lea    0x5c(%esi),%eax
+80102ae3:	50                   	push   %eax
+80102ae4:	e8 37 26 00 00       	call   80105120 <memmove>
     bwrite(dbuf);  // write dst to disk
-80102a69:	89 34 24             	mov    %esi,(%esp)
-80102a6c:	e8 2f d7 ff ff       	call   801001a0 <bwrite>
+80102ae9:	89 34 24             	mov    %esi,(%esp)
+80102aec:	e8 af d6 ff ff       	call   801001a0 <bwrite>
     brelse(lbuf);
-80102a71:	89 3c 24             	mov    %edi,(%esp)
-80102a74:	e8 67 d7 ff ff       	call   801001e0 <brelse>
+80102af1:	89 3c 24             	mov    %edi,(%esp)
+80102af4:	e8 e7 d6 ff ff       	call   801001e0 <brelse>
     brelse(dbuf);
-80102a79:	89 34 24             	mov    %esi,(%esp)
-80102a7c:	e8 5f d7 ff ff       	call   801001e0 <brelse>
+80102af9:	89 34 24             	mov    %esi,(%esp)
+80102afc:	e8 df d6 ff ff       	call   801001e0 <brelse>
   for (tail = 0; tail < log.lh.n; tail++) {
-80102a81:	83 c4 10             	add    $0x10,%esp
-80102a84:	39 1d c8 26 11 80    	cmp    %ebx,0x801126c8
-80102a8a:	7f 94                	jg     80102a20 <install_trans+0x20>
-  }
-}
-80102a8c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80102a8f:	5b                   	pop    %ebx
-80102a90:	5e                   	pop    %esi
-80102a91:	5f                   	pop    %edi
-80102a92:	5d                   	pop    %ebp
-80102a93:	c3                   	ret    
-80102a94:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80102a98:	f3 c3                	repz ret 
-80102a9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80102b01:	83 c4 10             	add    $0x10,%esp
+80102b04:	39 1d e8 36 11 80    	cmp    %ebx,0x801136e8
+80102b0a:	7f 94                	jg     80102aa0 <install_trans+0x20>
+  }
+}
+80102b0c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102b0f:	5b                   	pop    %ebx
+80102b10:	5e                   	pop    %esi
+80102b11:	5f                   	pop    %edi
+80102b12:	5d                   	pop    %ebp
+80102b13:	c3                   	ret    
+80102b14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102b18:	f3 c3                	repz ret 
+80102b1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80102aa0 <write_head>:
+80102b20 <write_head>:
 // Write in-memory log header to disk.
 // This is the true point at which the
 // current transaction commits.
 static void
 write_head(void)
 {
-80102aa0:	55                   	push   %ebp
-80102aa1:	89 e5                	mov    %esp,%ebp
-80102aa3:	56                   	push   %esi
-80102aa4:	53                   	push   %ebx
+80102b20:	55                   	push   %ebp
+80102b21:	89 e5                	mov    %esp,%ebp
+80102b23:	56                   	push   %esi
+80102b24:	53                   	push   %ebx
   struct buf *buf = bread(log.dev, log.start);
-80102aa5:	83 ec 08             	sub    $0x8,%esp
-80102aa8:	ff 35 b4 26 11 80    	pushl  0x801126b4
-80102aae:	ff 35 c4 26 11 80    	pushl  0x801126c4
-80102ab4:	e8 17 d6 ff ff       	call   801000d0 <bread>
+80102b25:	83 ec 08             	sub    $0x8,%esp
+80102b28:	ff 35 d4 36 11 80    	pushl  0x801136d4
+80102b2e:	ff 35 e4 36 11 80    	pushl  0x801136e4
+80102b34:	e8 97 d5 ff ff       	call   801000d0 <bread>
   struct logheader *hb = (struct logheader *) (buf->data);
   int i;
   hb->n = log.lh.n;
-80102ab9:	8b 1d c8 26 11 80    	mov    0x801126c8,%ebx
+80102b39:	8b 1d e8 36 11 80    	mov    0x801136e8,%ebx
   for (i = 0; i < log.lh.n; i++) {
-80102abf:	83 c4 10             	add    $0x10,%esp
+80102b3f:	83 c4 10             	add    $0x10,%esp
   struct buf *buf = bread(log.dev, log.start);
-80102ac2:	89 c6                	mov    %eax,%esi
+80102b42:	89 c6                	mov    %eax,%esi
   for (i = 0; i < log.lh.n; i++) {
-80102ac4:	85 db                	test   %ebx,%ebx
+80102b44:	85 db                	test   %ebx,%ebx
   hb->n = log.lh.n;
-80102ac6:	89 58 5c             	mov    %ebx,0x5c(%eax)
+80102b46:	89 58 5c             	mov    %ebx,0x5c(%eax)
   for (i = 0; i < log.lh.n; i++) {
-80102ac9:	7e 16                	jle    80102ae1 <write_head+0x41>
-80102acb:	c1 e3 02             	shl    $0x2,%ebx
-80102ace:	31 d2                	xor    %edx,%edx
+80102b49:	7e 16                	jle    80102b61 <write_head+0x41>
+80102b4b:	c1 e3 02             	shl    $0x2,%ebx
+80102b4e:	31 d2                	xor    %edx,%edx
     hb->block[i] = log.lh.block[i];
-80102ad0:	8b 8a cc 26 11 80    	mov    -0x7feed934(%edx),%ecx
-80102ad6:	89 4c 16 60          	mov    %ecx,0x60(%esi,%edx,1)
-80102ada:	83 c2 04             	add    $0x4,%edx
+80102b50:	8b 8a ec 36 11 80    	mov    -0x7feec914(%edx),%ecx
+80102b56:	89 4c 16 60          	mov    %ecx,0x60(%esi,%edx,1)
+80102b5a:	83 c2 04             	add    $0x4,%edx
   for (i = 0; i < log.lh.n; i++) {
-80102add:	39 da                	cmp    %ebx,%edx
-80102adf:	75 ef                	jne    80102ad0 <write_head+0x30>
+80102b5d:	39 da                	cmp    %ebx,%edx
+80102b5f:	75 ef                	jne    80102b50 <write_head+0x30>
   }
   bwrite(buf);
-80102ae1:	83 ec 0c             	sub    $0xc,%esp
-80102ae4:	56                   	push   %esi
-80102ae5:	e8 b6 d6 ff ff       	call   801001a0 <bwrite>
+80102b61:	83 ec 0c             	sub    $0xc,%esp
+80102b64:	56                   	push   %esi
+80102b65:	e8 36 d6 ff ff       	call   801001a0 <bwrite>
   brelse(buf);
-80102aea:	89 34 24             	mov    %esi,(%esp)
-80102aed:	e8 ee d6 ff ff       	call   801001e0 <brelse>
+80102b6a:	89 34 24             	mov    %esi,(%esp)
+80102b6d:	e8 6e d6 ff ff       	call   801001e0 <brelse>
 }
-80102af2:	83 c4 10             	add    $0x10,%esp
-80102af5:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80102af8:	5b                   	pop    %ebx
-80102af9:	5e                   	pop    %esi
-80102afa:	5d                   	pop    %ebp
-80102afb:	c3                   	ret    
-80102afc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80102b00 <initlog>:
-{
-80102b00:	55                   	push   %ebp
-80102b01:	89 e5                	mov    %esp,%ebp
-80102b03:	53                   	push   %ebx
-80102b04:	83 ec 2c             	sub    $0x2c,%esp
-80102b07:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80102b72:	83 c4 10             	add    $0x10,%esp
+80102b75:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80102b78:	5b                   	pop    %ebx
+80102b79:	5e                   	pop    %esi
+80102b7a:	5d                   	pop    %ebp
+80102b7b:	c3                   	ret    
+80102b7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80102b80 <initlog>:
+{
+80102b80:	55                   	push   %ebp
+80102b81:	89 e5                	mov    %esp,%ebp
+80102b83:	53                   	push   %ebx
+80102b84:	83 ec 2c             	sub    $0x2c,%esp
+80102b87:	8b 5d 08             	mov    0x8(%ebp),%ebx
   initlock(&log.lock, "log");
-80102b0a:	68 c0 77 10 80       	push   $0x801077c0
-80102b0f:	68 80 26 11 80       	push   $0x80112680
-80102b14:	e8 27 1a 00 00       	call   80104540 <initlock>
+80102b8a:	68 00 81 10 80       	push   $0x80108100
+80102b8f:	68 a0 36 11 80       	push   $0x801136a0
+80102b94:	e8 87 22 00 00       	call   80104e20 <initlock>
   readsb(dev, &sb);
-80102b19:	58                   	pop    %eax
-80102b1a:	8d 45 dc             	lea    -0x24(%ebp),%eax
-80102b1d:	5a                   	pop    %edx
-80102b1e:	50                   	push   %eax
-80102b1f:	53                   	push   %ebx
-80102b20:	e8 1b e9 ff ff       	call   80101440 <readsb>
+80102b99:	58                   	pop    %eax
+80102b9a:	8d 45 dc             	lea    -0x24(%ebp),%eax
+80102b9d:	5a                   	pop    %edx
+80102b9e:	50                   	push   %eax
+80102b9f:	53                   	push   %ebx
+80102ba0:	e8 9b e8 ff ff       	call   80101440 <readsb>
   log.size = sb.nlog;
-80102b25:	8b 55 e8             	mov    -0x18(%ebp),%edx
+80102ba5:	8b 55 e8             	mov    -0x18(%ebp),%edx
   log.start = sb.logstart;
-80102b28:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80102ba8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   struct buf *buf = bread(log.dev, log.start);
-80102b2b:	59                   	pop    %ecx
+80102bab:	59                   	pop    %ecx
   log.dev = dev;
-80102b2c:	89 1d c4 26 11 80    	mov    %ebx,0x801126c4
+80102bac:	89 1d e4 36 11 80    	mov    %ebx,0x801136e4
   log.size = sb.nlog;
-80102b32:	89 15 b8 26 11 80    	mov    %edx,0x801126b8
+80102bb2:	89 15 d8 36 11 80    	mov    %edx,0x801136d8
   log.start = sb.logstart;
-80102b38:	a3 b4 26 11 80       	mov    %eax,0x801126b4
+80102bb8:	a3 d4 36 11 80       	mov    %eax,0x801136d4
   struct buf *buf = bread(log.dev, log.start);
-80102b3d:	5a                   	pop    %edx
-80102b3e:	50                   	push   %eax
-80102b3f:	53                   	push   %ebx
-80102b40:	e8 8b d5 ff ff       	call   801000d0 <bread>
+80102bbd:	5a                   	pop    %edx
+80102bbe:	50                   	push   %eax
+80102bbf:	53                   	push   %ebx
+80102bc0:	e8 0b d5 ff ff       	call   801000d0 <bread>
   log.lh.n = lh->n;
-80102b45:	8b 58 5c             	mov    0x5c(%eax),%ebx
+80102bc5:	8b 58 5c             	mov    0x5c(%eax),%ebx
   for (i = 0; i < log.lh.n; i++) {
-80102b48:	83 c4 10             	add    $0x10,%esp
-80102b4b:	85 db                	test   %ebx,%ebx
+80102bc8:	83 c4 10             	add    $0x10,%esp
+80102bcb:	85 db                	test   %ebx,%ebx
   log.lh.n = lh->n;
-80102b4d:	89 1d c8 26 11 80    	mov    %ebx,0x801126c8
+80102bcd:	89 1d e8 36 11 80    	mov    %ebx,0x801136e8
   for (i = 0; i < log.lh.n; i++) {
-80102b53:	7e 1c                	jle    80102b71 <initlog+0x71>
-80102b55:	c1 e3 02             	shl    $0x2,%ebx
-80102b58:	31 d2                	xor    %edx,%edx
-80102b5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80102bd3:	7e 1c                	jle    80102bf1 <initlog+0x71>
+80102bd5:	c1 e3 02             	shl    $0x2,%ebx
+80102bd8:	31 d2                	xor    %edx,%edx
+80102bda:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     log.lh.block[i] = lh->block[i];
-80102b60:	8b 4c 10 60          	mov    0x60(%eax,%edx,1),%ecx
-80102b64:	83 c2 04             	add    $0x4,%edx
-80102b67:	89 8a c8 26 11 80    	mov    %ecx,-0x7feed938(%edx)
+80102be0:	8b 4c 10 60          	mov    0x60(%eax,%edx,1),%ecx
+80102be4:	83 c2 04             	add    $0x4,%edx
+80102be7:	89 8a e8 36 11 80    	mov    %ecx,-0x7feec918(%edx)
   for (i = 0; i < log.lh.n; i++) {
-80102b6d:	39 d3                	cmp    %edx,%ebx
-80102b6f:	75 ef                	jne    80102b60 <initlog+0x60>
+80102bed:	39 d3                	cmp    %edx,%ebx
+80102bef:	75 ef                	jne    80102be0 <initlog+0x60>
   brelse(buf);
-80102b71:	83 ec 0c             	sub    $0xc,%esp
-80102b74:	50                   	push   %eax
-80102b75:	e8 66 d6 ff ff       	call   801001e0 <brelse>
+80102bf1:	83 ec 0c             	sub    $0xc,%esp
+80102bf4:	50                   	push   %eax
+80102bf5:	e8 e6 d5 ff ff       	call   801001e0 <brelse>
 
 static void
 recover_from_log(void)
 {
   read_head();
   install_trans(); // if committed, copy from log to disk
-80102b7a:	e8 81 fe ff ff       	call   80102a00 <install_trans>
+80102bfa:	e8 81 fe ff ff       	call   80102a80 <install_trans>
   log.lh.n = 0;
-80102b7f:	c7 05 c8 26 11 80 00 	movl   $0x0,0x801126c8
-80102b86:	00 00 00 
+80102bff:	c7 05 e8 36 11 80 00 	movl   $0x0,0x801136e8
+80102c06:	00 00 00 
   write_head(); // clear the log
-80102b89:	e8 12 ff ff ff       	call   80102aa0 <write_head>
+80102c09:	e8 12 ff ff ff       	call   80102b20 <write_head>
 }
-80102b8e:	83 c4 10             	add    $0x10,%esp
-80102b91:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80102b94:	c9                   	leave  
-80102b95:	c3                   	ret    
-80102b96:	8d 76 00             	lea    0x0(%esi),%esi
-80102b99:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80102c0e:	83 c4 10             	add    $0x10,%esp
+80102c11:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102c14:	c9                   	leave  
+80102c15:	c3                   	ret    
+80102c16:	8d 76 00             	lea    0x0(%esi),%esi
+80102c19:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80102ba0 <begin_op>:
+80102c20 <begin_op>:
 }
 
 // called at the start of each FS system call.
 void
 begin_op(void)
 {
-80102ba0:	55                   	push   %ebp
-80102ba1:	89 e5                	mov    %esp,%ebp
-80102ba3:	83 ec 14             	sub    $0x14,%esp
+80102c20:	55                   	push   %ebp
+80102c21:	89 e5                	mov    %esp,%ebp
+80102c23:	83 ec 14             	sub    $0x14,%esp
   acquire(&log.lock);
-80102ba6:	68 80 26 11 80       	push   $0x80112680
-80102bab:	e8 d0 1a 00 00       	call   80104680 <acquire>
-80102bb0:	83 c4 10             	add    $0x10,%esp
-80102bb3:	eb 18                	jmp    80102bcd <begin_op+0x2d>
-80102bb5:	8d 76 00             	lea    0x0(%esi),%esi
+80102c26:	68 a0 36 11 80       	push   $0x801136a0
+80102c2b:	e8 30 23 00 00       	call   80104f60 <acquire>
+80102c30:	83 c4 10             	add    $0x10,%esp
+80102c33:	eb 18                	jmp    80102c4d <begin_op+0x2d>
+80102c35:	8d 76 00             	lea    0x0(%esi),%esi
   while(1){
     if(log.committing){
       sleep(&log, &log.lock);
-80102bb8:	83 ec 08             	sub    $0x8,%esp
-80102bbb:	68 80 26 11 80       	push   $0x80112680
-80102bc0:	68 80 26 11 80       	push   $0x80112680
-80102bc5:	e8 b6 11 00 00       	call   80103d80 <sleep>
-80102bca:	83 c4 10             	add    $0x10,%esp
+80102c38:	83 ec 08             	sub    $0x8,%esp
+80102c3b:	68 a0 36 11 80       	push   $0x801136a0
+80102c40:	68 a0 36 11 80       	push   $0x801136a0
+80102c45:	e8 06 1b 00 00       	call   80104750 <sleep>
+80102c4a:	83 c4 10             	add    $0x10,%esp
     if(log.committing){
-80102bcd:	a1 c0 26 11 80       	mov    0x801126c0,%eax
-80102bd2:	85 c0                	test   %eax,%eax
-80102bd4:	75 e2                	jne    80102bb8 <begin_op+0x18>
+80102c4d:	a1 e0 36 11 80       	mov    0x801136e0,%eax
+80102c52:	85 c0                	test   %eax,%eax
+80102c54:	75 e2                	jne    80102c38 <begin_op+0x18>
     } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
-80102bd6:	a1 bc 26 11 80       	mov    0x801126bc,%eax
-80102bdb:	8b 15 c8 26 11 80    	mov    0x801126c8,%edx
-80102be1:	83 c0 01             	add    $0x1,%eax
-80102be4:	8d 0c 80             	lea    (%eax,%eax,4),%ecx
-80102be7:	8d 14 4a             	lea    (%edx,%ecx,2),%edx
-80102bea:	83 fa 1e             	cmp    $0x1e,%edx
-80102bed:	7f c9                	jg     80102bb8 <begin_op+0x18>
+80102c56:	a1 dc 36 11 80       	mov    0x801136dc,%eax
+80102c5b:	8b 15 e8 36 11 80    	mov    0x801136e8,%edx
+80102c61:	83 c0 01             	add    $0x1,%eax
+80102c64:	8d 0c 80             	lea    (%eax,%eax,4),%ecx
+80102c67:	8d 14 4a             	lea    (%edx,%ecx,2),%edx
+80102c6a:	83 fa 1e             	cmp    $0x1e,%edx
+80102c6d:	7f c9                	jg     80102c38 <begin_op+0x18>
       // this op might exhaust log space; wait for commit.
       sleep(&log, &log.lock);
     } else {
       log.outstanding += 1;
       release(&log.lock);
-80102bef:	83 ec 0c             	sub    $0xc,%esp
+80102c6f:	83 ec 0c             	sub    $0xc,%esp
       log.outstanding += 1;
-80102bf2:	a3 bc 26 11 80       	mov    %eax,0x801126bc
+80102c72:	a3 dc 36 11 80       	mov    %eax,0x801136dc
       release(&log.lock);
-80102bf7:	68 80 26 11 80       	push   $0x80112680
-80102bfc:	e8 3f 1b 00 00       	call   80104740 <release>
+80102c77:	68 a0 36 11 80       	push   $0x801136a0
+80102c7c:	e8 9f 23 00 00       	call   80105020 <release>
       break;
     }
   }
 }
-80102c01:	83 c4 10             	add    $0x10,%esp
-80102c04:	c9                   	leave  
-80102c05:	c3                   	ret    
-80102c06:	8d 76 00             	lea    0x0(%esi),%esi
-80102c09:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80102c81:	83 c4 10             	add    $0x10,%esp
+80102c84:	c9                   	leave  
+80102c85:	c3                   	ret    
+80102c86:	8d 76 00             	lea    0x0(%esi),%esi
+80102c89:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80102c10 <end_op>:
+80102c90 <end_op>:
 
 // called at the end of each FS system call.
 // commits if this was the last outstanding operation.
 void
 end_op(void)
 {
-80102c10:	55                   	push   %ebp
-80102c11:	89 e5                	mov    %esp,%ebp
-80102c13:	57                   	push   %edi
-80102c14:	56                   	push   %esi
-80102c15:	53                   	push   %ebx
-80102c16:	83 ec 18             	sub    $0x18,%esp
+80102c90:	55                   	push   %ebp
+80102c91:	89 e5                	mov    %esp,%ebp
+80102c93:	57                   	push   %edi
+80102c94:	56                   	push   %esi
+80102c95:	53                   	push   %ebx
+80102c96:	83 ec 18             	sub    $0x18,%esp
   int do_commit = 0;
 
   acquire(&log.lock);
-80102c19:	68 80 26 11 80       	push   $0x80112680
-80102c1e:	e8 5d 1a 00 00       	call   80104680 <acquire>
+80102c99:	68 a0 36 11 80       	push   $0x801136a0
+80102c9e:	e8 bd 22 00 00       	call   80104f60 <acquire>
   log.outstanding -= 1;
-80102c23:	a1 bc 26 11 80       	mov    0x801126bc,%eax
+80102ca3:	a1 dc 36 11 80       	mov    0x801136dc,%eax
   if(log.committing)
-80102c28:	8b 35 c0 26 11 80    	mov    0x801126c0,%esi
-80102c2e:	83 c4 10             	add    $0x10,%esp
+80102ca8:	8b 35 e0 36 11 80    	mov    0x801136e0,%esi
+80102cae:	83 c4 10             	add    $0x10,%esp
   log.outstanding -= 1;
-80102c31:	8d 58 ff             	lea    -0x1(%eax),%ebx
+80102cb1:	8d 58 ff             	lea    -0x1(%eax),%ebx
   if(log.committing)
-80102c34:	85 f6                	test   %esi,%esi
+80102cb4:	85 f6                	test   %esi,%esi
   log.outstanding -= 1;
-80102c36:	89 1d bc 26 11 80    	mov    %ebx,0x801126bc
+80102cb6:	89 1d dc 36 11 80    	mov    %ebx,0x801136dc
   if(log.committing)
-80102c3c:	0f 85 1a 01 00 00    	jne    80102d5c <end_op+0x14c>
+80102cbc:	0f 85 1a 01 00 00    	jne    80102ddc <end_op+0x14c>
     panic("log.committing");
   if(log.outstanding == 0){
-80102c42:	85 db                	test   %ebx,%ebx
-80102c44:	0f 85 ee 00 00 00    	jne    80102d38 <end_op+0x128>
+80102cc2:	85 db                	test   %ebx,%ebx
+80102cc4:	0f 85 ee 00 00 00    	jne    80102db8 <end_op+0x128>
     // begin_op() may be waiting for log space,
     // and decrementing log.outstanding has decreased
     // the amount of reserved space.
     wakeup(&log);
   }
   release(&log.lock);
-80102c4a:	83 ec 0c             	sub    $0xc,%esp
+80102cca:	83 ec 0c             	sub    $0xc,%esp
     log.committing = 1;
-80102c4d:	c7 05 c0 26 11 80 01 	movl   $0x1,0x801126c0
-80102c54:	00 00 00 
+80102ccd:	c7 05 e0 36 11 80 01 	movl   $0x1,0x801136e0
+80102cd4:	00 00 00 
   release(&log.lock);
-80102c57:	68 80 26 11 80       	push   $0x80112680
-80102c5c:	e8 df 1a 00 00       	call   80104740 <release>
+80102cd7:	68 a0 36 11 80       	push   $0x801136a0
+80102cdc:	e8 3f 23 00 00       	call   80105020 <release>
 }
 
 static void
 commit()
 {
   if (log.lh.n > 0) {
-80102c61:	8b 0d c8 26 11 80    	mov    0x801126c8,%ecx
-80102c67:	83 c4 10             	add    $0x10,%esp
-80102c6a:	85 c9                	test   %ecx,%ecx
-80102c6c:	0f 8e 85 00 00 00    	jle    80102cf7 <end_op+0xe7>
+80102ce1:	8b 0d e8 36 11 80    	mov    0x801136e8,%ecx
+80102ce7:	83 c4 10             	add    $0x10,%esp
+80102cea:	85 c9                	test   %ecx,%ecx
+80102cec:	0f 8e 85 00 00 00    	jle    80102d77 <end_op+0xe7>
     struct buf *to = bread(log.dev, log.start+tail+1); // log block
-80102c72:	a1 b4 26 11 80       	mov    0x801126b4,%eax
-80102c77:	83 ec 08             	sub    $0x8,%esp
-80102c7a:	01 d8                	add    %ebx,%eax
-80102c7c:	83 c0 01             	add    $0x1,%eax
-80102c7f:	50                   	push   %eax
-80102c80:	ff 35 c4 26 11 80    	pushl  0x801126c4
-80102c86:	e8 45 d4 ff ff       	call   801000d0 <bread>
-80102c8b:	89 c6                	mov    %eax,%esi
+80102cf2:	a1 d4 36 11 80       	mov    0x801136d4,%eax
+80102cf7:	83 ec 08             	sub    $0x8,%esp
+80102cfa:	01 d8                	add    %ebx,%eax
+80102cfc:	83 c0 01             	add    $0x1,%eax
+80102cff:	50                   	push   %eax
+80102d00:	ff 35 e4 36 11 80    	pushl  0x801136e4
+80102d06:	e8 c5 d3 ff ff       	call   801000d0 <bread>
+80102d0b:	89 c6                	mov    %eax,%esi
     struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
-80102c8d:	58                   	pop    %eax
-80102c8e:	5a                   	pop    %edx
-80102c8f:	ff 34 9d cc 26 11 80 	pushl  -0x7feed934(,%ebx,4)
-80102c96:	ff 35 c4 26 11 80    	pushl  0x801126c4
+80102d0d:	58                   	pop    %eax
+80102d0e:	5a                   	pop    %edx
+80102d0f:	ff 34 9d ec 36 11 80 	pushl  -0x7feec914(,%ebx,4)
+80102d16:	ff 35 e4 36 11 80    	pushl  0x801136e4
   for (tail = 0; tail < log.lh.n; tail++) {
-80102c9c:	83 c3 01             	add    $0x1,%ebx
+80102d1c:	83 c3 01             	add    $0x1,%ebx
     struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
-80102c9f:	e8 2c d4 ff ff       	call   801000d0 <bread>
-80102ca4:	89 c7                	mov    %eax,%edi
+80102d1f:	e8 ac d3 ff ff       	call   801000d0 <bread>
+80102d24:	89 c7                	mov    %eax,%edi
     memmove(to->data, from->data, BSIZE);
-80102ca6:	8d 40 5c             	lea    0x5c(%eax),%eax
-80102ca9:	83 c4 0c             	add    $0xc,%esp
-80102cac:	68 00 02 00 00       	push   $0x200
-80102cb1:	50                   	push   %eax
-80102cb2:	8d 46 5c             	lea    0x5c(%esi),%eax
-80102cb5:	50                   	push   %eax
-80102cb6:	e8 85 1b 00 00       	call   80104840 <memmove>
+80102d26:	8d 40 5c             	lea    0x5c(%eax),%eax
+80102d29:	83 c4 0c             	add    $0xc,%esp
+80102d2c:	68 00 02 00 00       	push   $0x200
+80102d31:	50                   	push   %eax
+80102d32:	8d 46 5c             	lea    0x5c(%esi),%eax
+80102d35:	50                   	push   %eax
+80102d36:	e8 e5 23 00 00       	call   80105120 <memmove>
     bwrite(to);  // write the log
-80102cbb:	89 34 24             	mov    %esi,(%esp)
-80102cbe:	e8 dd d4 ff ff       	call   801001a0 <bwrite>
+80102d3b:	89 34 24             	mov    %esi,(%esp)
+80102d3e:	e8 5d d4 ff ff       	call   801001a0 <bwrite>
     brelse(from);
-80102cc3:	89 3c 24             	mov    %edi,(%esp)
-80102cc6:	e8 15 d5 ff ff       	call   801001e0 <brelse>
+80102d43:	89 3c 24             	mov    %edi,(%esp)
+80102d46:	e8 95 d4 ff ff       	call   801001e0 <brelse>
     brelse(to);
-80102ccb:	89 34 24             	mov    %esi,(%esp)
-80102cce:	e8 0d d5 ff ff       	call   801001e0 <brelse>
+80102d4b:	89 34 24             	mov    %esi,(%esp)
+80102d4e:	e8 8d d4 ff ff       	call   801001e0 <brelse>
   for (tail = 0; tail < log.lh.n; tail++) {
-80102cd3:	83 c4 10             	add    $0x10,%esp
-80102cd6:	3b 1d c8 26 11 80    	cmp    0x801126c8,%ebx
-80102cdc:	7c 94                	jl     80102c72 <end_op+0x62>
+80102d53:	83 c4 10             	add    $0x10,%esp
+80102d56:	3b 1d e8 36 11 80    	cmp    0x801136e8,%ebx
+80102d5c:	7c 94                	jl     80102cf2 <end_op+0x62>
     write_log();     // Write modified blocks from cache to log
     write_head();    // Write header to disk -- the real commit
-80102cde:	e8 bd fd ff ff       	call   80102aa0 <write_head>
+80102d5e:	e8 bd fd ff ff       	call   80102b20 <write_head>
     install_trans(); // Now install writes to home locations
-80102ce3:	e8 18 fd ff ff       	call   80102a00 <install_trans>
+80102d63:	e8 18 fd ff ff       	call   80102a80 <install_trans>
     log.lh.n = 0;
-80102ce8:	c7 05 c8 26 11 80 00 	movl   $0x0,0x801126c8
-80102cef:	00 00 00 
+80102d68:	c7 05 e8 36 11 80 00 	movl   $0x0,0x801136e8
+80102d6f:	00 00 00 
     write_head();    // Erase the transaction from the log
-80102cf2:	e8 a9 fd ff ff       	call   80102aa0 <write_head>
+80102d72:	e8 a9 fd ff ff       	call   80102b20 <write_head>
     acquire(&log.lock);
-80102cf7:	83 ec 0c             	sub    $0xc,%esp
-80102cfa:	68 80 26 11 80       	push   $0x80112680
-80102cff:	e8 7c 19 00 00       	call   80104680 <acquire>
+80102d77:	83 ec 0c             	sub    $0xc,%esp
+80102d7a:	68 a0 36 11 80       	push   $0x801136a0
+80102d7f:	e8 dc 21 00 00       	call   80104f60 <acquire>
     wakeup(&log);
-80102d04:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
+80102d84:	c7 04 24 a0 36 11 80 	movl   $0x801136a0,(%esp)
     log.committing = 0;
-80102d0b:	c7 05 c0 26 11 80 00 	movl   $0x0,0x801126c0
-80102d12:	00 00 00 
+80102d8b:	c7 05 e0 36 11 80 00 	movl   $0x0,0x801136e0
+80102d92:	00 00 00 
     wakeup(&log);
-80102d15:	e8 16 12 00 00       	call   80103f30 <wakeup>
+80102d95:	e8 66 1b 00 00       	call   80104900 <wakeup>
     release(&log.lock);
-80102d1a:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
-80102d21:	e8 1a 1a 00 00       	call   80104740 <release>
-80102d26:	83 c4 10             	add    $0x10,%esp
-}
-80102d29:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80102d2c:	5b                   	pop    %ebx
-80102d2d:	5e                   	pop    %esi
-80102d2e:	5f                   	pop    %edi
-80102d2f:	5d                   	pop    %ebp
-80102d30:	c3                   	ret    
-80102d31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102d9a:	c7 04 24 a0 36 11 80 	movl   $0x801136a0,(%esp)
+80102da1:	e8 7a 22 00 00       	call   80105020 <release>
+80102da6:	83 c4 10             	add    $0x10,%esp
+}
+80102da9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102dac:	5b                   	pop    %ebx
+80102dad:	5e                   	pop    %esi
+80102dae:	5f                   	pop    %edi
+80102daf:	5d                   	pop    %ebp
+80102db0:	c3                   	ret    
+80102db1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     wakeup(&log);
-80102d38:	83 ec 0c             	sub    $0xc,%esp
-80102d3b:	68 80 26 11 80       	push   $0x80112680
-80102d40:	e8 eb 11 00 00       	call   80103f30 <wakeup>
+80102db8:	83 ec 0c             	sub    $0xc,%esp
+80102dbb:	68 a0 36 11 80       	push   $0x801136a0
+80102dc0:	e8 3b 1b 00 00       	call   80104900 <wakeup>
   release(&log.lock);
-80102d45:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
-80102d4c:	e8 ef 19 00 00       	call   80104740 <release>
-80102d51:	83 c4 10             	add    $0x10,%esp
-}
-80102d54:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80102d57:	5b                   	pop    %ebx
-80102d58:	5e                   	pop    %esi
-80102d59:	5f                   	pop    %edi
-80102d5a:	5d                   	pop    %ebp
-80102d5b:	c3                   	ret    
+80102dc5:	c7 04 24 a0 36 11 80 	movl   $0x801136a0,(%esp)
+80102dcc:	e8 4f 22 00 00       	call   80105020 <release>
+80102dd1:	83 c4 10             	add    $0x10,%esp
+}
+80102dd4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102dd7:	5b                   	pop    %ebx
+80102dd8:	5e                   	pop    %esi
+80102dd9:	5f                   	pop    %edi
+80102dda:	5d                   	pop    %ebp
+80102ddb:	c3                   	ret    
     panic("log.committing");
-80102d5c:	83 ec 0c             	sub    $0xc,%esp
-80102d5f:	68 c4 77 10 80       	push   $0x801077c4
-80102d64:	e8 27 d6 ff ff       	call   80100390 <panic>
-80102d69:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102ddc:	83 ec 0c             	sub    $0xc,%esp
+80102ddf:	68 04 81 10 80       	push   $0x80108104
+80102de4:	e8 a7 d5 ff ff       	call   80100390 <panic>
+80102de9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80102d70 <log_write>:
+80102df0 <log_write>:
 //   modify bp->data[]
 //   log_write(bp)
 //   brelse(bp)
 void
 log_write(struct buf *b)
 {
-80102d70:	55                   	push   %ebp
-80102d71:	89 e5                	mov    %esp,%ebp
-80102d73:	53                   	push   %ebx
-80102d74:	83 ec 04             	sub    $0x4,%esp
+80102df0:	55                   	push   %ebp
+80102df1:	89 e5                	mov    %esp,%ebp
+80102df3:	53                   	push   %ebx
+80102df4:	83 ec 04             	sub    $0x4,%esp
   int i;
 
   if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
-80102d77:	8b 15 c8 26 11 80    	mov    0x801126c8,%edx
+80102df7:	8b 15 e8 36 11 80    	mov    0x801136e8,%edx
 {
-80102d7d:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80102dfd:	8b 5d 08             	mov    0x8(%ebp),%ebx
   if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
-80102d80:	83 fa 1d             	cmp    $0x1d,%edx
-80102d83:	0f 8f 9d 00 00 00    	jg     80102e26 <log_write+0xb6>
-80102d89:	a1 b8 26 11 80       	mov    0x801126b8,%eax
-80102d8e:	83 e8 01             	sub    $0x1,%eax
-80102d91:	39 c2                	cmp    %eax,%edx
-80102d93:	0f 8d 8d 00 00 00    	jge    80102e26 <log_write+0xb6>
+80102e00:	83 fa 1d             	cmp    $0x1d,%edx
+80102e03:	0f 8f 9d 00 00 00    	jg     80102ea6 <log_write+0xb6>
+80102e09:	a1 d8 36 11 80       	mov    0x801136d8,%eax
+80102e0e:	83 e8 01             	sub    $0x1,%eax
+80102e11:	39 c2                	cmp    %eax,%edx
+80102e13:	0f 8d 8d 00 00 00    	jge    80102ea6 <log_write+0xb6>
     panic("too big a transaction");
   if (log.outstanding < 1)
-80102d99:	a1 bc 26 11 80       	mov    0x801126bc,%eax
-80102d9e:	85 c0                	test   %eax,%eax
-80102da0:	0f 8e 8d 00 00 00    	jle    80102e33 <log_write+0xc3>
+80102e19:	a1 dc 36 11 80       	mov    0x801136dc,%eax
+80102e1e:	85 c0                	test   %eax,%eax
+80102e20:	0f 8e 8d 00 00 00    	jle    80102eb3 <log_write+0xc3>
     panic("log_write outside of trans");
 
   acquire(&log.lock);
-80102da6:	83 ec 0c             	sub    $0xc,%esp
-80102da9:	68 80 26 11 80       	push   $0x80112680
-80102dae:	e8 cd 18 00 00       	call   80104680 <acquire>
+80102e26:	83 ec 0c             	sub    $0xc,%esp
+80102e29:	68 a0 36 11 80       	push   $0x801136a0
+80102e2e:	e8 2d 21 00 00       	call   80104f60 <acquire>
   for (i = 0; i < log.lh.n; i++) {
-80102db3:	8b 0d c8 26 11 80    	mov    0x801126c8,%ecx
-80102db9:	83 c4 10             	add    $0x10,%esp
-80102dbc:	83 f9 00             	cmp    $0x0,%ecx
-80102dbf:	7e 57                	jle    80102e18 <log_write+0xa8>
+80102e33:	8b 0d e8 36 11 80    	mov    0x801136e8,%ecx
+80102e39:	83 c4 10             	add    $0x10,%esp
+80102e3c:	83 f9 00             	cmp    $0x0,%ecx
+80102e3f:	7e 57                	jle    80102e98 <log_write+0xa8>
     if (log.lh.block[i] == b->blockno)   // log absorbtion
-80102dc1:	8b 53 08             	mov    0x8(%ebx),%edx
+80102e41:	8b 53 08             	mov    0x8(%ebx),%edx
   for (i = 0; i < log.lh.n; i++) {
-80102dc4:	31 c0                	xor    %eax,%eax
+80102e44:	31 c0                	xor    %eax,%eax
     if (log.lh.block[i] == b->blockno)   // log absorbtion
-80102dc6:	3b 15 cc 26 11 80    	cmp    0x801126cc,%edx
-80102dcc:	75 0b                	jne    80102dd9 <log_write+0x69>
-80102dce:	eb 38                	jmp    80102e08 <log_write+0x98>
-80102dd0:	39 14 85 cc 26 11 80 	cmp    %edx,-0x7feed934(,%eax,4)
-80102dd7:	74 2f                	je     80102e08 <log_write+0x98>
+80102e46:	3b 15 ec 36 11 80    	cmp    0x801136ec,%edx
+80102e4c:	75 0b                	jne    80102e59 <log_write+0x69>
+80102e4e:	eb 38                	jmp    80102e88 <log_write+0x98>
+80102e50:	39 14 85 ec 36 11 80 	cmp    %edx,-0x7feec914(,%eax,4)
+80102e57:	74 2f                	je     80102e88 <log_write+0x98>
   for (i = 0; i < log.lh.n; i++) {
-80102dd9:	83 c0 01             	add    $0x1,%eax
-80102ddc:	39 c1                	cmp    %eax,%ecx
-80102dde:	75 f0                	jne    80102dd0 <log_write+0x60>
+80102e59:	83 c0 01             	add    $0x1,%eax
+80102e5c:	39 c1                	cmp    %eax,%ecx
+80102e5e:	75 f0                	jne    80102e50 <log_write+0x60>
       break;
   }
   log.lh.block[i] = b->blockno;
-80102de0:	89 14 85 cc 26 11 80 	mov    %edx,-0x7feed934(,%eax,4)
+80102e60:	89 14 85 ec 36 11 80 	mov    %edx,-0x7feec914(,%eax,4)
   if (i == log.lh.n)
     log.lh.n++;
-80102de7:	83 c0 01             	add    $0x1,%eax
-80102dea:	a3 c8 26 11 80       	mov    %eax,0x801126c8
+80102e67:	83 c0 01             	add    $0x1,%eax
+80102e6a:	a3 e8 36 11 80       	mov    %eax,0x801136e8
   b->flags |= B_DIRTY; // prevent eviction
-80102def:	83 0b 04             	orl    $0x4,(%ebx)
+80102e6f:	83 0b 04             	orl    $0x4,(%ebx)
   release(&log.lock);
-80102df2:	c7 45 08 80 26 11 80 	movl   $0x80112680,0x8(%ebp)
+80102e72:	c7 45 08 a0 36 11 80 	movl   $0x801136a0,0x8(%ebp)
 }
-80102df9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80102dfc:	c9                   	leave  
+80102e79:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102e7c:	c9                   	leave  
   release(&log.lock);
-80102dfd:	e9 3e 19 00 00       	jmp    80104740 <release>
-80102e02:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80102e7d:	e9 9e 21 00 00       	jmp    80105020 <release>
+80102e82:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   log.lh.block[i] = b->blockno;
-80102e08:	89 14 85 cc 26 11 80 	mov    %edx,-0x7feed934(,%eax,4)
-80102e0f:	eb de                	jmp    80102def <log_write+0x7f>
-80102e11:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80102e18:	8b 43 08             	mov    0x8(%ebx),%eax
-80102e1b:	a3 cc 26 11 80       	mov    %eax,0x801126cc
+80102e88:	89 14 85 ec 36 11 80 	mov    %edx,-0x7feec914(,%eax,4)
+80102e8f:	eb de                	jmp    80102e6f <log_write+0x7f>
+80102e91:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102e98:	8b 43 08             	mov    0x8(%ebx),%eax
+80102e9b:	a3 ec 36 11 80       	mov    %eax,0x801136ec
   if (i == log.lh.n)
-80102e20:	75 cd                	jne    80102def <log_write+0x7f>
-80102e22:	31 c0                	xor    %eax,%eax
-80102e24:	eb c1                	jmp    80102de7 <log_write+0x77>
+80102ea0:	75 cd                	jne    80102e6f <log_write+0x7f>
+80102ea2:	31 c0                	xor    %eax,%eax
+80102ea4:	eb c1                	jmp    80102e67 <log_write+0x77>
     panic("too big a transaction");
-80102e26:	83 ec 0c             	sub    $0xc,%esp
-80102e29:	68 d3 77 10 80       	push   $0x801077d3
-80102e2e:	e8 5d d5 ff ff       	call   80100390 <panic>
+80102ea6:	83 ec 0c             	sub    $0xc,%esp
+80102ea9:	68 13 81 10 80       	push   $0x80108113
+80102eae:	e8 dd d4 ff ff       	call   80100390 <panic>
     panic("log_write outside of trans");
-80102e33:	83 ec 0c             	sub    $0xc,%esp
-80102e36:	68 e9 77 10 80       	push   $0x801077e9
-80102e3b:	e8 50 d5 ff ff       	call   80100390 <panic>
+80102eb3:	83 ec 0c             	sub    $0xc,%esp
+80102eb6:	68 29 81 10 80       	push   $0x80108129
+80102ebb:	e8 d0 d4 ff ff       	call   80100390 <panic>
 
-80102e40 <mpmain>:
+80102ec0 <mpmain>:
 }
 
 // Common CPU setup code.
 static void
 mpmain(void)
 {
-80102e40:	55                   	push   %ebp
-80102e41:	89 e5                	mov    %esp,%ebp
-80102e43:	53                   	push   %ebx
-80102e44:	83 ec 04             	sub    $0x4,%esp
+80102ec0:	55                   	push   %ebp
+80102ec1:	89 e5                	mov    %esp,%ebp
+80102ec3:	53                   	push   %ebx
+80102ec4:	83 ec 04             	sub    $0x4,%esp
   cprintf("cpu%d: starting %d\n", cpuid(), cpuid());
-80102e47:	e8 74 09 00 00       	call   801037c0 <cpuid>
-80102e4c:	89 c3                	mov    %eax,%ebx
-80102e4e:	e8 6d 09 00 00       	call   801037c0 <cpuid>
-80102e53:	83 ec 04             	sub    $0x4,%esp
-80102e56:	53                   	push   %ebx
-80102e57:	50                   	push   %eax
-80102e58:	68 04 78 10 80       	push   $0x80107804
-80102e5d:	e8 fe d7 ff ff       	call   80100660 <cprintf>
+80102ec7:	e8 34 0c 00 00       	call   80103b00 <cpuid>
+80102ecc:	89 c3                	mov    %eax,%ebx
+80102ece:	e8 2d 0c 00 00       	call   80103b00 <cpuid>
+80102ed3:	83 ec 04             	sub    $0x4,%esp
+80102ed6:	53                   	push   %ebx
+80102ed7:	50                   	push   %eax
+80102ed8:	68 44 81 10 80       	push   $0x80108144
+80102edd:	e8 7e d7 ff ff       	call   80100660 <cprintf>
   idtinit();       // load idt register
-80102e62:	e8 c9 2c 00 00       	call   80105b30 <idtinit>
+80102ee2:	e8 49 35 00 00       	call   80106430 <idtinit>
   xchg(&(mycpu()->started), 1); // tell startothers() we're up
-80102e67:	e8 d4 08 00 00       	call   80103740 <mycpu>
-80102e6c:	89 c2                	mov    %eax,%edx
+80102ee7:	e8 94 0b 00 00       	call   80103a80 <mycpu>
+80102eec:	89 c2                	mov    %eax,%edx
 xchg(volatile uint *addr, uint newval)
 {
   uint result;
 
   // The + in "+m" denotes a read-modify-write operand.
   asm volatile("lock; xchgl %0, %1" :
-80102e6e:	b8 01 00 00 00       	mov    $0x1,%eax
-80102e73:	f0 87 82 a0 00 00 00 	lock xchg %eax,0xa0(%edx)
+80102eee:	b8 01 00 00 00       	mov    $0x1,%eax
+80102ef3:	f0 87 82 a0 00 00 00 	lock xchg %eax,0xa0(%edx)
   scheduler();     // start running processes
-80102e7a:	e8 21 0c 00 00       	call   80103aa0 <scheduler>
-80102e7f:	90                   	nop
+80102efa:	e8 71 12 00 00       	call   80104170 <scheduler>
+80102eff:	90                   	nop
 
-80102e80 <mpenter>:
+80102f00 <mpenter>:
 {
-80102e80:	55                   	push   %ebp
-80102e81:	89 e5                	mov    %esp,%ebp
-80102e83:	83 ec 08             	sub    $0x8,%esp
+80102f00:	55                   	push   %ebp
+80102f01:	89 e5                	mov    %esp,%ebp
+80102f03:	83 ec 08             	sub    $0x8,%esp
   switchkvm();
-80102e86:	e8 95 3d 00 00       	call   80106c20 <switchkvm>
+80102f06:	e8 d5 45 00 00       	call   801074e0 <switchkvm>
   seginit();
-80102e8b:	e8 00 3d 00 00       	call   80106b90 <seginit>
+80102f0b:	e8 b0 44 00 00       	call   801073c0 <seginit>
   lapicinit();
-80102e90:	e8 9b f7 ff ff       	call   80102630 <lapicinit>
+80102f10:	e8 9b f7 ff ff       	call   801026b0 <lapicinit>
   mpmain();
-80102e95:	e8 a6 ff ff ff       	call   80102e40 <mpmain>
-80102e9a:	66 90                	xchg   %ax,%ax
-80102e9c:	66 90                	xchg   %ax,%ax
-80102e9e:	66 90                	xchg   %ax,%ax
-
-80102ea0 <main>:
-{
-80102ea0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-80102ea4:	83 e4 f0             	and    $0xfffffff0,%esp
-80102ea7:	ff 71 fc             	pushl  -0x4(%ecx)
-80102eaa:	55                   	push   %ebp
-80102eab:	89 e5                	mov    %esp,%ebp
-80102ead:	53                   	push   %ebx
-80102eae:	51                   	push   %ecx
+80102f15:	e8 a6 ff ff ff       	call   80102ec0 <mpmain>
+80102f1a:	66 90                	xchg   %ax,%ax
+80102f1c:	66 90                	xchg   %ax,%ax
+80102f1e:	66 90                	xchg   %ax,%ax
+
+80102f20 <main>:
+{
+80102f20:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+80102f24:	83 e4 f0             	and    $0xfffffff0,%esp
+80102f27:	ff 71 fc             	pushl  -0x4(%ecx)
+80102f2a:	55                   	push   %ebp
+80102f2b:	89 e5                	mov    %esp,%ebp
+80102f2d:	53                   	push   %ebx
+80102f2e:	51                   	push   %ecx
   kinit1(end, P2V(4*1024*1024)); // phys page allocator
-80102eaf:	83 ec 08             	sub    $0x8,%esp
-80102eb2:	68 00 00 40 80       	push   $0x80400000
-80102eb7:	68 a8 55 11 80       	push   $0x801155a8
-80102ebc:	e8 2f f5 ff ff       	call   801023f0 <kinit1>
+80102f2f:	83 ec 08             	sub    $0x8,%esp
+80102f32:	68 00 00 40 80       	push   $0x80400000
+80102f37:	68 dc 68 11 80       	push   $0x801168dc
+80102f3c:	e8 2f f5 ff ff       	call   80102470 <kinit1>
   kvmalloc();      // kernel page table
-80102ec1:	e8 2a 42 00 00       	call   801070f0 <kvmalloc>
+80102f41:	e8 da 4a 00 00       	call   80107a20 <kvmalloc>
   mpinit();        // detect other processors
-80102ec6:	e8 75 01 00 00       	call   80103040 <mpinit>
+80102f46:	e8 75 01 00 00       	call   801030c0 <mpinit>
   lapicinit();     // interrupt controller
-80102ecb:	e8 60 f7 ff ff       	call   80102630 <lapicinit>
+80102f4b:	e8 60 f7 ff ff       	call   801026b0 <lapicinit>
   seginit();       // segment descriptors
-80102ed0:	e8 bb 3c 00 00       	call   80106b90 <seginit>
+80102f50:	e8 6b 44 00 00       	call   801073c0 <seginit>
   picinit();       // disable pic
-80102ed5:	e8 46 03 00 00       	call   80103220 <picinit>
+80102f55:	e8 46 03 00 00       	call   801032a0 <picinit>
   ioapicinit();    // another interrupt controller
-80102eda:	e8 41 f3 ff ff       	call   80102220 <ioapicinit>
+80102f5a:	e8 c1 f2 ff ff       	call   80102220 <ioapicinit>
   consoleinit();   // console hardware
-80102edf:	e8 dc da ff ff       	call   801009c0 <consoleinit>
+80102f5f:	e8 5c da ff ff       	call   801009c0 <consoleinit>
   uartinit();      // serial port
-80102ee4:	e8 77 2f 00 00       	call   80105e60 <uartinit>
+80102f64:	e8 b7 37 00 00       	call   80106720 <uartinit>
   pinit();         // process table
-80102ee9:	e8 32 08 00 00       	call   80103720 <pinit>
+80102f69:	e8 c2 0a 00 00       	call   80103a30 <pinit>
   tvinit();        // trap vectors
-80102eee:	e8 bd 2b 00 00       	call   80105ab0 <tvinit>
+80102f6e:	e8 3d 34 00 00       	call   801063b0 <tvinit>
   binit();         // buffer cache
-80102ef3:	e8 48 d1 ff ff       	call   80100040 <binit>
+80102f73:	e8 c8 d0 ff ff       	call   80100040 <binit>
   fileinit();      // file table
-80102ef8:	e8 63 de ff ff       	call   80100d60 <fileinit>
+80102f78:	e8 e3 dd ff ff       	call   80100d60 <fileinit>
   ideinit();       // disk 
-80102efd:	e8 fe f0 ff ff       	call   80102000 <ideinit>
+80102f7d:	e8 7e f0 ff ff       	call   80102000 <ideinit>
 
   // Write entry code to unused memory at 0x7000.
   // The linker has placed the image of entryother.S in
   // _binary_entryother_start.
   code = P2V(0x7000);
   memmove(code, _binary_entryother_start, (uint)_binary_entryother_size);
-80102f02:	83 c4 0c             	add    $0xc,%esp
-80102f05:	68 8a 00 00 00       	push   $0x8a
-80102f0a:	68 8c a4 10 80       	push   $0x8010a48c
-80102f0f:	68 00 70 00 80       	push   $0x80007000
-80102f14:	e8 27 19 00 00       	call   80104840 <memmove>
+80102f82:	83 c4 0c             	add    $0xc,%esp
+80102f85:	68 8a 00 00 00       	push   $0x8a
+80102f8a:	68 8c b4 10 80       	push   $0x8010b48c
+80102f8f:	68 00 70 00 80       	push   $0x80007000
+80102f94:	e8 87 21 00 00       	call   80105120 <memmove>
 
   for(c = cpus; c < cpus+ncpu; c++){
-80102f19:	69 05 00 2d 11 80 b0 	imul   $0xb0,0x80112d00,%eax
-80102f20:	00 00 00 
-80102f23:	83 c4 10             	add    $0x10,%esp
-80102f26:	05 80 27 11 80       	add    $0x80112780,%eax
-80102f2b:	3d 80 27 11 80       	cmp    $0x80112780,%eax
-80102f30:	76 71                	jbe    80102fa3 <main+0x103>
-80102f32:	bb 80 27 11 80       	mov    $0x80112780,%ebx
-80102f37:	89 f6                	mov    %esi,%esi
-80102f39:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80102f99:	69 05 20 3d 11 80 b0 	imul   $0xb0,0x80113d20,%eax
+80102fa0:	00 00 00 
+80102fa3:	83 c4 10             	add    $0x10,%esp
+80102fa6:	05 a0 37 11 80       	add    $0x801137a0,%eax
+80102fab:	3d a0 37 11 80       	cmp    $0x801137a0,%eax
+80102fb0:	76 71                	jbe    80103023 <main+0x103>
+80102fb2:	bb a0 37 11 80       	mov    $0x801137a0,%ebx
+80102fb7:	89 f6                	mov    %esi,%esi
+80102fb9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
     if(c == mycpu())  // We've started already.
-80102f40:	e8 fb 07 00 00       	call   80103740 <mycpu>
-80102f45:	39 d8                	cmp    %ebx,%eax
-80102f47:	74 41                	je     80102f8a <main+0xea>
+80102fc0:	e8 bb 0a 00 00       	call   80103a80 <mycpu>
+80102fc5:	39 d8                	cmp    %ebx,%eax
+80102fc7:	74 41                	je     8010300a <main+0xea>
       continue;
 
     // Tell entryother.S what stack to use, where to enter, and what
     // pgdir to use. We cannot use kpgdir yet, because the AP processor
     // is running in low  memory, so we use entrypgdir for the APs too.
     stack = kalloc();
-80102f49:	e8 72 f5 ff ff       	call   801024c0 <kalloc>
+80102fc9:	e8 72 f5 ff ff       	call   80102540 <kalloc>
     *(void**)(code-4) = stack + KSTACKSIZE;
-80102f4e:	05 00 10 00 00       	add    $0x1000,%eax
+80102fce:	05 00 10 00 00       	add    $0x1000,%eax
     *(void(**)(void))(code-8) = mpenter;
-80102f53:	c7 05 f8 6f 00 80 80 	movl   $0x80102e80,0x80006ff8
-80102f5a:	2e 10 80 
+80102fd3:	c7 05 f8 6f 00 80 00 	movl   $0x80102f00,0x80006ff8
+80102fda:	2f 10 80 
     *(int**)(code-12) = (void *) V2P(entrypgdir);
-80102f5d:	c7 05 f4 6f 00 80 00 	movl   $0x109000,0x80006ff4
-80102f64:	90 10 00 
+80102fdd:	c7 05 f4 6f 00 80 00 	movl   $0x10a000,0x80006ff4
+80102fe4:	a0 10 00 
     *(void**)(code-4) = stack + KSTACKSIZE;
-80102f67:	a3 fc 6f 00 80       	mov    %eax,0x80006ffc
+80102fe7:	a3 fc 6f 00 80       	mov    %eax,0x80006ffc
 
     lapicstartap(c->apicid, V2P(code));
-80102f6c:	0f b6 03             	movzbl (%ebx),%eax
-80102f6f:	83 ec 08             	sub    $0x8,%esp
-80102f72:	68 00 70 00 00       	push   $0x7000
-80102f77:	50                   	push   %eax
-80102f78:	e8 03 f8 ff ff       	call   80102780 <lapicstartap>
-80102f7d:	83 c4 10             	add    $0x10,%esp
+80102fec:	0f b6 03             	movzbl (%ebx),%eax
+80102fef:	83 ec 08             	sub    $0x8,%esp
+80102ff2:	68 00 70 00 00       	push   $0x7000
+80102ff7:	50                   	push   %eax
+80102ff8:	e8 03 f8 ff ff       	call   80102800 <lapicstartap>
+80102ffd:	83 c4 10             	add    $0x10,%esp
 
     // wait for cpu to finish mpmain()
     while(c->started == 0)
-80102f80:	8b 83 a0 00 00 00    	mov    0xa0(%ebx),%eax
-80102f86:	85 c0                	test   %eax,%eax
-80102f88:	74 f6                	je     80102f80 <main+0xe0>
+80103000:	8b 83 a0 00 00 00    	mov    0xa0(%ebx),%eax
+80103006:	85 c0                	test   %eax,%eax
+80103008:	74 f6                	je     80103000 <main+0xe0>
   for(c = cpus; c < cpus+ncpu; c++){
-80102f8a:	69 05 00 2d 11 80 b0 	imul   $0xb0,0x80112d00,%eax
-80102f91:	00 00 00 
-80102f94:	81 c3 b0 00 00 00    	add    $0xb0,%ebx
-80102f9a:	05 80 27 11 80       	add    $0x80112780,%eax
-80102f9f:	39 c3                	cmp    %eax,%ebx
-80102fa1:	72 9d                	jb     80102f40 <main+0xa0>
+8010300a:	69 05 20 3d 11 80 b0 	imul   $0xb0,0x80113d20,%eax
+80103011:	00 00 00 
+80103014:	81 c3 b0 00 00 00    	add    $0xb0,%ebx
+8010301a:	05 a0 37 11 80       	add    $0x801137a0,%eax
+8010301f:	39 c3                	cmp    %eax,%ebx
+80103021:	72 9d                	jb     80102fc0 <main+0xa0>
   kinit2(P2V(4*1024*1024), P2V(PHYSTOP)); // must come after startothers()
-80102fa3:	83 ec 08             	sub    $0x8,%esp
-80102fa6:	68 00 00 00 8e       	push   $0x8e000000
-80102fab:	68 00 00 40 80       	push   $0x80400000
-80102fb0:	e8 ab f4 ff ff       	call   80102460 <kinit2>
+80103023:	83 ec 08             	sub    $0x8,%esp
+80103026:	68 00 00 00 8e       	push   $0x8e000000
+8010302b:	68 00 00 40 80       	push   $0x80400000
+80103030:	e8 ab f4 ff ff       	call   801024e0 <kinit2>
   userinit();      // first user process
-80102fb5:	e8 56 08 00 00       	call   80103810 <userinit>
+80103035:	e8 46 0e 00 00       	call   80103e80 <userinit>
   mpmain();        // finish this processor's setup
-80102fba:	e8 81 fe ff ff       	call   80102e40 <mpmain>
-80102fbf:	90                   	nop
+8010303a:	e8 81 fe ff ff       	call   80102ec0 <mpmain>
+8010303f:	90                   	nop
 
-80102fc0 <mpsearch1>:
+80103040 <mpsearch1>:
 }
 
 // Look for an MP structure in the len bytes at addr.
 static struct mp*
 mpsearch1(uint a, int len)
 {
-80102fc0:	55                   	push   %ebp
-80102fc1:	89 e5                	mov    %esp,%ebp
-80102fc3:	57                   	push   %edi
-80102fc4:	56                   	push   %esi
+80103040:	55                   	push   %ebp
+80103041:	89 e5                	mov    %esp,%ebp
+80103043:	57                   	push   %edi
+80103044:	56                   	push   %esi
   uchar *e, *p, *addr;
 
   addr = P2V(a);
-80102fc5:	8d b0 00 00 00 80    	lea    -0x80000000(%eax),%esi
+80103045:	8d b0 00 00 00 80    	lea    -0x80000000(%eax),%esi
 {
-80102fcb:	53                   	push   %ebx
+8010304b:	53                   	push   %ebx
   e = addr+len;
-80102fcc:	8d 1c 16             	lea    (%esi,%edx,1),%ebx
+8010304c:	8d 1c 16             	lea    (%esi,%edx,1),%ebx
 {
-80102fcf:	83 ec 0c             	sub    $0xc,%esp
+8010304f:	83 ec 0c             	sub    $0xc,%esp
   for(p = addr; p < e; p += sizeof(struct mp))
-80102fd2:	39 de                	cmp    %ebx,%esi
-80102fd4:	72 10                	jb     80102fe6 <mpsearch1+0x26>
-80102fd6:	eb 50                	jmp    80103028 <mpsearch1+0x68>
-80102fd8:	90                   	nop
-80102fd9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80102fe0:	39 fb                	cmp    %edi,%ebx
-80102fe2:	89 fe                	mov    %edi,%esi
-80102fe4:	76 42                	jbe    80103028 <mpsearch1+0x68>
+80103052:	39 de                	cmp    %ebx,%esi
+80103054:	72 10                	jb     80103066 <mpsearch1+0x26>
+80103056:	eb 50                	jmp    801030a8 <mpsearch1+0x68>
+80103058:	90                   	nop
+80103059:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103060:	39 fb                	cmp    %edi,%ebx
+80103062:	89 fe                	mov    %edi,%esi
+80103064:	76 42                	jbe    801030a8 <mpsearch1+0x68>
     if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
-80102fe6:	83 ec 04             	sub    $0x4,%esp
-80102fe9:	8d 7e 10             	lea    0x10(%esi),%edi
-80102fec:	6a 04                	push   $0x4
-80102fee:	68 18 78 10 80       	push   $0x80107818
-80102ff3:	56                   	push   %esi
-80102ff4:	e8 e7 17 00 00       	call   801047e0 <memcmp>
-80102ff9:	83 c4 10             	add    $0x10,%esp
-80102ffc:	85 c0                	test   %eax,%eax
-80102ffe:	75 e0                	jne    80102fe0 <mpsearch1+0x20>
-80103000:	89 f1                	mov    %esi,%ecx
-80103002:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80103066:	83 ec 04             	sub    $0x4,%esp
+80103069:	8d 7e 10             	lea    0x10(%esi),%edi
+8010306c:	6a 04                	push   $0x4
+8010306e:	68 58 81 10 80       	push   $0x80108158
+80103073:	56                   	push   %esi
+80103074:	e8 47 20 00 00       	call   801050c0 <memcmp>
+80103079:	83 c4 10             	add    $0x10,%esp
+8010307c:	85 c0                	test   %eax,%eax
+8010307e:	75 e0                	jne    80103060 <mpsearch1+0x20>
+80103080:	89 f1                	mov    %esi,%ecx
+80103082:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     sum += addr[i];
-80103008:	0f b6 11             	movzbl (%ecx),%edx
-8010300b:	83 c1 01             	add    $0x1,%ecx
-8010300e:	01 d0                	add    %edx,%eax
+80103088:	0f b6 11             	movzbl (%ecx),%edx
+8010308b:	83 c1 01             	add    $0x1,%ecx
+8010308e:	01 d0                	add    %edx,%eax
   for(i=0; i<len; i++)
-80103010:	39 f9                	cmp    %edi,%ecx
-80103012:	75 f4                	jne    80103008 <mpsearch1+0x48>
+80103090:	39 f9                	cmp    %edi,%ecx
+80103092:	75 f4                	jne    80103088 <mpsearch1+0x48>
     if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
-80103014:	84 c0                	test   %al,%al
-80103016:	75 c8                	jne    80102fe0 <mpsearch1+0x20>
+80103094:	84 c0                	test   %al,%al
+80103096:	75 c8                	jne    80103060 <mpsearch1+0x20>
       return (struct mp*)p;
   return 0;
 }
-80103018:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010301b:	89 f0                	mov    %esi,%eax
-8010301d:	5b                   	pop    %ebx
-8010301e:	5e                   	pop    %esi
-8010301f:	5f                   	pop    %edi
-80103020:	5d                   	pop    %ebp
-80103021:	c3                   	ret    
-80103022:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80103028:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103098:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010309b:	89 f0                	mov    %esi,%eax
+8010309d:	5b                   	pop    %ebx
+8010309e:	5e                   	pop    %esi
+8010309f:	5f                   	pop    %edi
+801030a0:	5d                   	pop    %ebp
+801030a1:	c3                   	ret    
+801030a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801030a8:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-8010302b:	31 f6                	xor    %esi,%esi
+801030ab:	31 f6                	xor    %esi,%esi
 }
-8010302d:	89 f0                	mov    %esi,%eax
-8010302f:	5b                   	pop    %ebx
-80103030:	5e                   	pop    %esi
-80103031:	5f                   	pop    %edi
-80103032:	5d                   	pop    %ebp
-80103033:	c3                   	ret    
-80103034:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-8010303a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+801030ad:	89 f0                	mov    %esi,%eax
+801030af:	5b                   	pop    %ebx
+801030b0:	5e                   	pop    %esi
+801030b1:	5f                   	pop    %edi
+801030b2:	5d                   	pop    %ebp
+801030b3:	c3                   	ret    
+801030b4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801030ba:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
 
-80103040 <mpinit>:
+801030c0 <mpinit>:
   return conf;
 }
 
 void
 mpinit(void)
 {
-80103040:	55                   	push   %ebp
-80103041:	89 e5                	mov    %esp,%ebp
-80103043:	57                   	push   %edi
-80103044:	56                   	push   %esi
-80103045:	53                   	push   %ebx
-80103046:	83 ec 1c             	sub    $0x1c,%esp
+801030c0:	55                   	push   %ebp
+801030c1:	89 e5                	mov    %esp,%ebp
+801030c3:	57                   	push   %edi
+801030c4:	56                   	push   %esi
+801030c5:	53                   	push   %ebx
+801030c6:	83 ec 1c             	sub    $0x1c,%esp
   if((p = ((bda[0x0F]<<8)| bda[0x0E]) << 4)){
-80103049:	0f b6 05 0f 04 00 80 	movzbl 0x8000040f,%eax
-80103050:	0f b6 15 0e 04 00 80 	movzbl 0x8000040e,%edx
-80103057:	c1 e0 08             	shl    $0x8,%eax
-8010305a:	09 d0                	or     %edx,%eax
-8010305c:	c1 e0 04             	shl    $0x4,%eax
-8010305f:	85 c0                	test   %eax,%eax
-80103061:	75 1b                	jne    8010307e <mpinit+0x3e>
+801030c9:	0f b6 05 0f 04 00 80 	movzbl 0x8000040f,%eax
+801030d0:	0f b6 15 0e 04 00 80 	movzbl 0x8000040e,%edx
+801030d7:	c1 e0 08             	shl    $0x8,%eax
+801030da:	09 d0                	or     %edx,%eax
+801030dc:	c1 e0 04             	shl    $0x4,%eax
+801030df:	85 c0                	test   %eax,%eax
+801030e1:	75 1b                	jne    801030fe <mpinit+0x3e>
     p = ((bda[0x14]<<8)|bda[0x13])*1024;
-80103063:	0f b6 05 14 04 00 80 	movzbl 0x80000414,%eax
-8010306a:	0f b6 15 13 04 00 80 	movzbl 0x80000413,%edx
-80103071:	c1 e0 08             	shl    $0x8,%eax
-80103074:	09 d0                	or     %edx,%eax
-80103076:	c1 e0 0a             	shl    $0xa,%eax
+801030e3:	0f b6 05 14 04 00 80 	movzbl 0x80000414,%eax
+801030ea:	0f b6 15 13 04 00 80 	movzbl 0x80000413,%edx
+801030f1:	c1 e0 08             	shl    $0x8,%eax
+801030f4:	09 d0                	or     %edx,%eax
+801030f6:	c1 e0 0a             	shl    $0xa,%eax
     if((mp = mpsearch1(p-1024, 1024)))
-80103079:	2d 00 04 00 00       	sub    $0x400,%eax
+801030f9:	2d 00 04 00 00       	sub    $0x400,%eax
     if((mp = mpsearch1(p, 1024)))
-8010307e:	ba 00 04 00 00       	mov    $0x400,%edx
-80103083:	e8 38 ff ff ff       	call   80102fc0 <mpsearch1>
-80103088:	85 c0                	test   %eax,%eax
-8010308a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-8010308d:	0f 84 3d 01 00 00    	je     801031d0 <mpinit+0x190>
+801030fe:	ba 00 04 00 00       	mov    $0x400,%edx
+80103103:	e8 38 ff ff ff       	call   80103040 <mpsearch1>
+80103108:	85 c0                	test   %eax,%eax
+8010310a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+8010310d:	0f 84 3d 01 00 00    	je     80103250 <mpinit+0x190>
   if((mp = mpsearch()) == 0 || mp->physaddr == 0)
-80103093:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80103096:	8b 58 04             	mov    0x4(%eax),%ebx
-80103099:	85 db                	test   %ebx,%ebx
-8010309b:	0f 84 4f 01 00 00    	je     801031f0 <mpinit+0x1b0>
+80103113:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80103116:	8b 58 04             	mov    0x4(%eax),%ebx
+80103119:	85 db                	test   %ebx,%ebx
+8010311b:	0f 84 4f 01 00 00    	je     80103270 <mpinit+0x1b0>
   conf = (struct mpconf*) P2V((uint) mp->physaddr);
-801030a1:	8d b3 00 00 00 80    	lea    -0x80000000(%ebx),%esi
+80103121:	8d b3 00 00 00 80    	lea    -0x80000000(%ebx),%esi
   if(memcmp(conf, "PCMP", 4) != 0)
-801030a7:	83 ec 04             	sub    $0x4,%esp
-801030aa:	6a 04                	push   $0x4
-801030ac:	68 35 78 10 80       	push   $0x80107835
-801030b1:	56                   	push   %esi
-801030b2:	e8 29 17 00 00       	call   801047e0 <memcmp>
-801030b7:	83 c4 10             	add    $0x10,%esp
-801030ba:	85 c0                	test   %eax,%eax
-801030bc:	0f 85 2e 01 00 00    	jne    801031f0 <mpinit+0x1b0>
+80103127:	83 ec 04             	sub    $0x4,%esp
+8010312a:	6a 04                	push   $0x4
+8010312c:	68 75 81 10 80       	push   $0x80108175
+80103131:	56                   	push   %esi
+80103132:	e8 89 1f 00 00       	call   801050c0 <memcmp>
+80103137:	83 c4 10             	add    $0x10,%esp
+8010313a:	85 c0                	test   %eax,%eax
+8010313c:	0f 85 2e 01 00 00    	jne    80103270 <mpinit+0x1b0>
   if(conf->version != 1 && conf->version != 4)
-801030c2:	0f b6 83 06 00 00 80 	movzbl -0x7ffffffa(%ebx),%eax
-801030c9:	3c 01                	cmp    $0x1,%al
-801030cb:	0f 95 c2             	setne  %dl
-801030ce:	3c 04                	cmp    $0x4,%al
-801030d0:	0f 95 c0             	setne  %al
-801030d3:	20 c2                	and    %al,%dl
-801030d5:	0f 85 15 01 00 00    	jne    801031f0 <mpinit+0x1b0>
+80103142:	0f b6 83 06 00 00 80 	movzbl -0x7ffffffa(%ebx),%eax
+80103149:	3c 01                	cmp    $0x1,%al
+8010314b:	0f 95 c2             	setne  %dl
+8010314e:	3c 04                	cmp    $0x4,%al
+80103150:	0f 95 c0             	setne  %al
+80103153:	20 c2                	and    %al,%dl
+80103155:	0f 85 15 01 00 00    	jne    80103270 <mpinit+0x1b0>
   if(sum((uchar*)conf, conf->length) != 0)
-801030db:	0f b7 bb 04 00 00 80 	movzwl -0x7ffffffc(%ebx),%edi
+8010315b:	0f b7 bb 04 00 00 80 	movzwl -0x7ffffffc(%ebx),%edi
   for(i=0; i<len; i++)
-801030e2:	66 85 ff             	test   %di,%di
-801030e5:	74 1a                	je     80103101 <mpinit+0xc1>
-801030e7:	89 f0                	mov    %esi,%eax
-801030e9:	01 f7                	add    %esi,%edi
+80103162:	66 85 ff             	test   %di,%di
+80103165:	74 1a                	je     80103181 <mpinit+0xc1>
+80103167:	89 f0                	mov    %esi,%eax
+80103169:	01 f7                	add    %esi,%edi
   sum = 0;
-801030eb:	31 d2                	xor    %edx,%edx
-801030ed:	8d 76 00             	lea    0x0(%esi),%esi
+8010316b:	31 d2                	xor    %edx,%edx
+8010316d:	8d 76 00             	lea    0x0(%esi),%esi
     sum += addr[i];
-801030f0:	0f b6 08             	movzbl (%eax),%ecx
-801030f3:	83 c0 01             	add    $0x1,%eax
-801030f6:	01 ca                	add    %ecx,%edx
+80103170:	0f b6 08             	movzbl (%eax),%ecx
+80103173:	83 c0 01             	add    $0x1,%eax
+80103176:	01 ca                	add    %ecx,%edx
   for(i=0; i<len; i++)
-801030f8:	39 c7                	cmp    %eax,%edi
-801030fa:	75 f4                	jne    801030f0 <mpinit+0xb0>
-801030fc:	84 d2                	test   %dl,%dl
-801030fe:	0f 95 c2             	setne  %dl
+80103178:	39 c7                	cmp    %eax,%edi
+8010317a:	75 f4                	jne    80103170 <mpinit+0xb0>
+8010317c:	84 d2                	test   %dl,%dl
+8010317e:	0f 95 c2             	setne  %dl
   struct mp *mp;
   struct mpconf *conf;
   struct mpproc *proc;
   struct mpioapic *ioapic;
 
   if((conf = mpconfig(&mp)) == 0)
-80103101:	85 f6                	test   %esi,%esi
-80103103:	0f 84 e7 00 00 00    	je     801031f0 <mpinit+0x1b0>
-80103109:	84 d2                	test   %dl,%dl
-8010310b:	0f 85 df 00 00 00    	jne    801031f0 <mpinit+0x1b0>
+80103181:	85 f6                	test   %esi,%esi
+80103183:	0f 84 e7 00 00 00    	je     80103270 <mpinit+0x1b0>
+80103189:	84 d2                	test   %dl,%dl
+8010318b:	0f 85 df 00 00 00    	jne    80103270 <mpinit+0x1b0>
     panic("Expect to run on an SMP");
   ismp = 1;
   lapic = (uint*)conf->lapicaddr;
-80103111:	8b 83 24 00 00 80    	mov    -0x7fffffdc(%ebx),%eax
-80103117:	a3 7c 26 11 80       	mov    %eax,0x8011267c
+80103191:	8b 83 24 00 00 80    	mov    -0x7fffffdc(%ebx),%eax
+80103197:	a3 9c 36 11 80       	mov    %eax,0x8011369c
   for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
-8010311c:	0f b7 93 04 00 00 80 	movzwl -0x7ffffffc(%ebx),%edx
-80103123:	8d 83 2c 00 00 80    	lea    -0x7fffffd4(%ebx),%eax
+8010319c:	0f b7 93 04 00 00 80 	movzwl -0x7ffffffc(%ebx),%edx
+801031a3:	8d 83 2c 00 00 80    	lea    -0x7fffffd4(%ebx),%eax
   ismp = 1;
-80103129:	bb 01 00 00 00       	mov    $0x1,%ebx
+801031a9:	bb 01 00 00 00       	mov    $0x1,%ebx
   for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
-8010312e:	01 d6                	add    %edx,%esi
-80103130:	39 c6                	cmp    %eax,%esi
-80103132:	76 23                	jbe    80103157 <mpinit+0x117>
+801031ae:	01 d6                	add    %edx,%esi
+801031b0:	39 c6                	cmp    %eax,%esi
+801031b2:	76 23                	jbe    801031d7 <mpinit+0x117>
     switch(*p){
-80103134:	0f b6 10             	movzbl (%eax),%edx
-80103137:	80 fa 04             	cmp    $0x4,%dl
-8010313a:	0f 87 ca 00 00 00    	ja     8010320a <mpinit+0x1ca>
-80103140:	ff 24 95 5c 78 10 80 	jmp    *-0x7fef87a4(,%edx,4)
-80103147:	89 f6                	mov    %esi,%esi
-80103149:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+801031b4:	0f b6 10             	movzbl (%eax),%edx
+801031b7:	80 fa 04             	cmp    $0x4,%dl
+801031ba:	0f 87 ca 00 00 00    	ja     8010328a <mpinit+0x1ca>
+801031c0:	ff 24 95 9c 81 10 80 	jmp    *-0x7fef7e64(,%edx,4)
+801031c7:	89 f6                	mov    %esi,%esi
+801031c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
       p += sizeof(struct mpioapic);
       continue;
     case MPBUS:
     case MPIOINTR:
     case MPLINTR:
       p += 8;
-80103150:	83 c0 08             	add    $0x8,%eax
+801031d0:	83 c0 08             	add    $0x8,%eax
   for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
-80103153:	39 c6                	cmp    %eax,%esi
-80103155:	77 dd                	ja     80103134 <mpinit+0xf4>
+801031d3:	39 c6                	cmp    %eax,%esi
+801031d5:	77 dd                	ja     801031b4 <mpinit+0xf4>
     default:
       ismp = 0;
       break;
     }
   }
   if(!ismp)
-80103157:	85 db                	test   %ebx,%ebx
-80103159:	0f 84 9e 00 00 00    	je     801031fd <mpinit+0x1bd>
+801031d7:	85 db                	test   %ebx,%ebx
+801031d9:	0f 84 9e 00 00 00    	je     8010327d <mpinit+0x1bd>
     panic("Didn't find a suitable machine");
 
   if(mp->imcrp){
-8010315f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80103162:	80 78 0c 00          	cmpb   $0x0,0xc(%eax)
-80103166:	74 15                	je     8010317d <mpinit+0x13d>
+801031df:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+801031e2:	80 78 0c 00          	cmpb   $0x0,0xc(%eax)
+801031e6:	74 15                	je     801031fd <mpinit+0x13d>
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80103168:	b8 70 00 00 00       	mov    $0x70,%eax
-8010316d:	ba 22 00 00 00       	mov    $0x22,%edx
-80103172:	ee                   	out    %al,(%dx)
+801031e8:	b8 70 00 00 00       	mov    $0x70,%eax
+801031ed:	ba 22 00 00 00       	mov    $0x22,%edx
+801031f2:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80103173:	ba 23 00 00 00       	mov    $0x23,%edx
-80103178:	ec                   	in     (%dx),%al
+801031f3:	ba 23 00 00 00       	mov    $0x23,%edx
+801031f8:	ec                   	in     (%dx),%al
     // Bochs doesn't support IMCR, so this doesn't run on Bochs.
     // But it would on real hardware.
     outb(0x22, 0x70);   // Select IMCR
     outb(0x23, inb(0x23) | 1);  // Mask external interrupts.
-80103179:	83 c8 01             	or     $0x1,%eax
+801031f9:	83 c8 01             	or     $0x1,%eax
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-8010317c:	ee                   	out    %al,(%dx)
+801031fc:	ee                   	out    %al,(%dx)
   }
 }
-8010317d:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80103180:	5b                   	pop    %ebx
-80103181:	5e                   	pop    %esi
-80103182:	5f                   	pop    %edi
-80103183:	5d                   	pop    %ebp
-80103184:	c3                   	ret    
-80103185:	8d 76 00             	lea    0x0(%esi),%esi
+801031fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103200:	5b                   	pop    %ebx
+80103201:	5e                   	pop    %esi
+80103202:	5f                   	pop    %edi
+80103203:	5d                   	pop    %ebp
+80103204:	c3                   	ret    
+80103205:	8d 76 00             	lea    0x0(%esi),%esi
       if(ncpu < NCPU) {
-80103188:	8b 0d 00 2d 11 80    	mov    0x80112d00,%ecx
-8010318e:	83 f9 07             	cmp    $0x7,%ecx
-80103191:	7f 19                	jg     801031ac <mpinit+0x16c>
+80103208:	8b 0d 20 3d 11 80    	mov    0x80113d20,%ecx
+8010320e:	83 f9 07             	cmp    $0x7,%ecx
+80103211:	7f 19                	jg     8010322c <mpinit+0x16c>
         cpus[ncpu].apicid = proc->apicid;  // apicid may differ from ncpu
-80103193:	0f b6 50 01          	movzbl 0x1(%eax),%edx
-80103197:	69 f9 b0 00 00 00    	imul   $0xb0,%ecx,%edi
+80103213:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+80103217:	69 f9 b0 00 00 00    	imul   $0xb0,%ecx,%edi
         ncpu++;
-8010319d:	83 c1 01             	add    $0x1,%ecx
-801031a0:	89 0d 00 2d 11 80    	mov    %ecx,0x80112d00
+8010321d:	83 c1 01             	add    $0x1,%ecx
+80103220:	89 0d 20 3d 11 80    	mov    %ecx,0x80113d20
         cpus[ncpu].apicid = proc->apicid;  // apicid may differ from ncpu
-801031a6:	88 97 80 27 11 80    	mov    %dl,-0x7feed880(%edi)
+80103226:	88 97 a0 37 11 80    	mov    %dl,-0x7feec860(%edi)
       p += sizeof(struct mpproc);
-801031ac:	83 c0 14             	add    $0x14,%eax
+8010322c:	83 c0 14             	add    $0x14,%eax
       continue;
-801031af:	e9 7c ff ff ff       	jmp    80103130 <mpinit+0xf0>
-801031b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010322f:	e9 7c ff ff ff       	jmp    801031b0 <mpinit+0xf0>
+80103234:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       ioapicid = ioapic->apicno;
-801031b8:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+80103238:	0f b6 50 01          	movzbl 0x1(%eax),%edx
       p += sizeof(struct mpioapic);
-801031bc:	83 c0 08             	add    $0x8,%eax
+8010323c:	83 c0 08             	add    $0x8,%eax
       ioapicid = ioapic->apicno;
-801031bf:	88 15 60 27 11 80    	mov    %dl,0x80112760
+8010323f:	88 15 80 37 11 80    	mov    %dl,0x80113780
       continue;
-801031c5:	e9 66 ff ff ff       	jmp    80103130 <mpinit+0xf0>
-801031ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80103245:	e9 66 ff ff ff       	jmp    801031b0 <mpinit+0xf0>
+8010324a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   return mpsearch1(0xF0000, 0x10000);
-801031d0:	ba 00 00 01 00       	mov    $0x10000,%edx
-801031d5:	b8 00 00 0f 00       	mov    $0xf0000,%eax
-801031da:	e8 e1 fd ff ff       	call   80102fc0 <mpsearch1>
+80103250:	ba 00 00 01 00       	mov    $0x10000,%edx
+80103255:	b8 00 00 0f 00       	mov    $0xf0000,%eax
+8010325a:	e8 e1 fd ff ff       	call   80103040 <mpsearch1>
   if((mp = mpsearch()) == 0 || mp->physaddr == 0)
-801031df:	85 c0                	test   %eax,%eax
+8010325f:	85 c0                	test   %eax,%eax
   return mpsearch1(0xF0000, 0x10000);
-801031e1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80103261:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   if((mp = mpsearch()) == 0 || mp->physaddr == 0)
-801031e4:	0f 85 a9 fe ff ff    	jne    80103093 <mpinit+0x53>
-801031ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80103264:	0f 85 a9 fe ff ff    	jne    80103113 <mpinit+0x53>
+8010326a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     panic("Expect to run on an SMP");
-801031f0:	83 ec 0c             	sub    $0xc,%esp
-801031f3:	68 1d 78 10 80       	push   $0x8010781d
-801031f8:	e8 93 d1 ff ff       	call   80100390 <panic>
+80103270:	83 ec 0c             	sub    $0xc,%esp
+80103273:	68 5d 81 10 80       	push   $0x8010815d
+80103278:	e8 13 d1 ff ff       	call   80100390 <panic>
     panic("Didn't find a suitable machine");
-801031fd:	83 ec 0c             	sub    $0xc,%esp
-80103200:	68 3c 78 10 80       	push   $0x8010783c
-80103205:	e8 86 d1 ff ff       	call   80100390 <panic>
+8010327d:	83 ec 0c             	sub    $0xc,%esp
+80103280:	68 7c 81 10 80       	push   $0x8010817c
+80103285:	e8 06 d1 ff ff       	call   80100390 <panic>
       ismp = 0;
-8010320a:	31 db                	xor    %ebx,%ebx
-8010320c:	e9 26 ff ff ff       	jmp    80103137 <mpinit+0xf7>
-80103211:	66 90                	xchg   %ax,%ax
-80103213:	66 90                	xchg   %ax,%ax
-80103215:	66 90                	xchg   %ax,%ax
-80103217:	66 90                	xchg   %ax,%ax
-80103219:	66 90                	xchg   %ax,%ax
-8010321b:	66 90                	xchg   %ax,%ax
-8010321d:	66 90                	xchg   %ax,%ax
-8010321f:	90                   	nop
+8010328a:	31 db                	xor    %ebx,%ebx
+8010328c:	e9 26 ff ff ff       	jmp    801031b7 <mpinit+0xf7>
+80103291:	66 90                	xchg   %ax,%ax
+80103293:	66 90                	xchg   %ax,%ax
+80103295:	66 90                	xchg   %ax,%ax
+80103297:	66 90                	xchg   %ax,%ax
+80103299:	66 90                	xchg   %ax,%ax
+8010329b:	66 90                	xchg   %ax,%ax
+8010329d:	66 90                	xchg   %ax,%ax
+8010329f:	90                   	nop
 
-80103220 <picinit>:
+801032a0 <picinit>:
 #define IO_PIC2         0xA0    // Slave (IRQs 8-15)
 
 // Don't use the 8259A interrupt controllers.  Xv6 assumes SMP hardware.
 void
 picinit(void)
 {
-80103220:	55                   	push   %ebp
-80103221:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80103226:	ba 21 00 00 00       	mov    $0x21,%edx
-8010322b:	89 e5                	mov    %esp,%ebp
-8010322d:	ee                   	out    %al,(%dx)
-8010322e:	ba a1 00 00 00       	mov    $0xa1,%edx
-80103233:	ee                   	out    %al,(%dx)
+801032a0:	55                   	push   %ebp
+801032a1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801032a6:	ba 21 00 00 00       	mov    $0x21,%edx
+801032ab:	89 e5                	mov    %esp,%ebp
+801032ad:	ee                   	out    %al,(%dx)
+801032ae:	ba a1 00 00 00       	mov    $0xa1,%edx
+801032b3:	ee                   	out    %al,(%dx)
   // mask all interrupts
   outb(IO_PIC1+1, 0xFF);
   outb(IO_PIC2+1, 0xFF);
 }
-80103234:	5d                   	pop    %ebp
-80103235:	c3                   	ret    
-80103236:	66 90                	xchg   %ax,%ax
-80103238:	66 90                	xchg   %ax,%ax
-8010323a:	66 90                	xchg   %ax,%ax
-8010323c:	66 90                	xchg   %ax,%ax
-8010323e:	66 90                	xchg   %ax,%ax
+801032b4:	5d                   	pop    %ebp
+801032b5:	c3                   	ret    
+801032b6:	66 90                	xchg   %ax,%ax
+801032b8:	66 90                	xchg   %ax,%ax
+801032ba:	66 90                	xchg   %ax,%ax
+801032bc:	66 90                	xchg   %ax,%ax
+801032be:	66 90                	xchg   %ax,%ax
 
-80103240 <pipealloc>:
+801032c0 <pipealloc>:
   int writeopen;  // write fd is still open
 };
 
 int
 pipealloc(struct file **f0, struct file **f1)
 {
-80103240:	55                   	push   %ebp
-80103241:	89 e5                	mov    %esp,%ebp
-80103243:	57                   	push   %edi
-80103244:	56                   	push   %esi
-80103245:	53                   	push   %ebx
-80103246:	83 ec 0c             	sub    $0xc,%esp
-80103249:	8b 5d 08             	mov    0x8(%ebp),%ebx
-8010324c:	8b 75 0c             	mov    0xc(%ebp),%esi
+801032c0:	55                   	push   %ebp
+801032c1:	89 e5                	mov    %esp,%ebp
+801032c3:	57                   	push   %edi
+801032c4:	56                   	push   %esi
+801032c5:	53                   	push   %ebx
+801032c6:	83 ec 0c             	sub    $0xc,%esp
+801032c9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801032cc:	8b 75 0c             	mov    0xc(%ebp),%esi
   struct pipe *p;
 
   p = 0;
   *f0 = *f1 = 0;
-8010324f:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
-80103255:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+801032cf:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
+801032d5:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
   if((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
-8010325b:	e8 20 db ff ff       	call   80100d80 <filealloc>
-80103260:	85 c0                	test   %eax,%eax
-80103262:	89 03                	mov    %eax,(%ebx)
-80103264:	74 22                	je     80103288 <pipealloc+0x48>
-80103266:	e8 15 db ff ff       	call   80100d80 <filealloc>
-8010326b:	85 c0                	test   %eax,%eax
-8010326d:	89 06                	mov    %eax,(%esi)
-8010326f:	74 3f                	je     801032b0 <pipealloc+0x70>
+801032db:	e8 a0 da ff ff       	call   80100d80 <filealloc>
+801032e0:	85 c0                	test   %eax,%eax
+801032e2:	89 03                	mov    %eax,(%ebx)
+801032e4:	74 22                	je     80103308 <pipealloc+0x48>
+801032e6:	e8 95 da ff ff       	call   80100d80 <filealloc>
+801032eb:	85 c0                	test   %eax,%eax
+801032ed:	89 06                	mov    %eax,(%esi)
+801032ef:	74 3f                	je     80103330 <pipealloc+0x70>
     goto bad;
   if((p = (struct pipe*)kalloc()) == 0)
-80103271:	e8 4a f2 ff ff       	call   801024c0 <kalloc>
-80103276:	85 c0                	test   %eax,%eax
-80103278:	89 c7                	mov    %eax,%edi
-8010327a:	75 54                	jne    801032d0 <pipealloc+0x90>
+801032f1:	e8 4a f2 ff ff       	call   80102540 <kalloc>
+801032f6:	85 c0                	test   %eax,%eax
+801032f8:	89 c7                	mov    %eax,%edi
+801032fa:	75 54                	jne    80103350 <pipealloc+0x90>
 
 //PAGEBREAK: 20
  bad:
   if(p)
     kfree((char*)p);
   if(*f0)
-8010327c:	8b 03                	mov    (%ebx),%eax
-8010327e:	85 c0                	test   %eax,%eax
-80103280:	75 34                	jne    801032b6 <pipealloc+0x76>
-80103282:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801032fc:	8b 03                	mov    (%ebx),%eax
+801032fe:	85 c0                	test   %eax,%eax
+80103300:	75 34                	jne    80103336 <pipealloc+0x76>
+80103302:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     fileclose(*f0);
   if(*f1)
-80103288:	8b 06                	mov    (%esi),%eax
-8010328a:	85 c0                	test   %eax,%eax
-8010328c:	74 0c                	je     8010329a <pipealloc+0x5a>
+80103308:	8b 06                	mov    (%esi),%eax
+8010330a:	85 c0                	test   %eax,%eax
+8010330c:	74 0c                	je     8010331a <pipealloc+0x5a>
     fileclose(*f1);
-8010328e:	83 ec 0c             	sub    $0xc,%esp
-80103291:	50                   	push   %eax
-80103292:	e8 a9 db ff ff       	call   80100e40 <fileclose>
-80103297:	83 c4 10             	add    $0x10,%esp
+8010330e:	83 ec 0c             	sub    $0xc,%esp
+80103311:	50                   	push   %eax
+80103312:	e8 29 db ff ff       	call   80100e40 <fileclose>
+80103317:	83 c4 10             	add    $0x10,%esp
   return -1;
 }
-8010329a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010331a:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return -1;
-8010329d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010331d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-801032a2:	5b                   	pop    %ebx
-801032a3:	5e                   	pop    %esi
-801032a4:	5f                   	pop    %edi
-801032a5:	5d                   	pop    %ebp
-801032a6:	c3                   	ret    
-801032a7:	89 f6                	mov    %esi,%esi
-801032a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80103322:	5b                   	pop    %ebx
+80103323:	5e                   	pop    %esi
+80103324:	5f                   	pop    %edi
+80103325:	5d                   	pop    %ebp
+80103326:	c3                   	ret    
+80103327:	89 f6                	mov    %esi,%esi
+80103329:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
   if(*f0)
-801032b0:	8b 03                	mov    (%ebx),%eax
-801032b2:	85 c0                	test   %eax,%eax
-801032b4:	74 e4                	je     8010329a <pipealloc+0x5a>
+80103330:	8b 03                	mov    (%ebx),%eax
+80103332:	85 c0                	test   %eax,%eax
+80103334:	74 e4                	je     8010331a <pipealloc+0x5a>
     fileclose(*f0);
-801032b6:	83 ec 0c             	sub    $0xc,%esp
-801032b9:	50                   	push   %eax
-801032ba:	e8 81 db ff ff       	call   80100e40 <fileclose>
+80103336:	83 ec 0c             	sub    $0xc,%esp
+80103339:	50                   	push   %eax
+8010333a:	e8 01 db ff ff       	call   80100e40 <fileclose>
   if(*f1)
-801032bf:	8b 06                	mov    (%esi),%eax
+8010333f:	8b 06                	mov    (%esi),%eax
     fileclose(*f0);
-801032c1:	83 c4 10             	add    $0x10,%esp
+80103341:	83 c4 10             	add    $0x10,%esp
   if(*f1)
-801032c4:	85 c0                	test   %eax,%eax
-801032c6:	75 c6                	jne    8010328e <pipealloc+0x4e>
-801032c8:	eb d0                	jmp    8010329a <pipealloc+0x5a>
-801032ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80103344:	85 c0                	test   %eax,%eax
+80103346:	75 c6                	jne    8010330e <pipealloc+0x4e>
+80103348:	eb d0                	jmp    8010331a <pipealloc+0x5a>
+8010334a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   initlock(&p->lock, "pipe");
-801032d0:	83 ec 08             	sub    $0x8,%esp
+80103350:	83 ec 08             	sub    $0x8,%esp
   p->readopen = 1;
-801032d3:	c7 80 3c 02 00 00 01 	movl   $0x1,0x23c(%eax)
-801032da:	00 00 00 
+80103353:	c7 80 3c 02 00 00 01 	movl   $0x1,0x23c(%eax)
+8010335a:	00 00 00 
   p->writeopen = 1;
-801032dd:	c7 80 40 02 00 00 01 	movl   $0x1,0x240(%eax)
-801032e4:	00 00 00 
+8010335d:	c7 80 40 02 00 00 01 	movl   $0x1,0x240(%eax)
+80103364:	00 00 00 
   p->nwrite = 0;
-801032e7:	c7 80 38 02 00 00 00 	movl   $0x0,0x238(%eax)
-801032ee:	00 00 00 
+80103367:	c7 80 38 02 00 00 00 	movl   $0x0,0x238(%eax)
+8010336e:	00 00 00 
   p->nread = 0;
-801032f1:	c7 80 34 02 00 00 00 	movl   $0x0,0x234(%eax)
-801032f8:	00 00 00 
+80103371:	c7 80 34 02 00 00 00 	movl   $0x0,0x234(%eax)
+80103378:	00 00 00 
   initlock(&p->lock, "pipe");
-801032fb:	68 70 78 10 80       	push   $0x80107870
-80103300:	50                   	push   %eax
-80103301:	e8 3a 12 00 00       	call   80104540 <initlock>
+8010337b:	68 b0 81 10 80       	push   $0x801081b0
+80103380:	50                   	push   %eax
+80103381:	e8 9a 1a 00 00       	call   80104e20 <initlock>
   (*f0)->type = FD_PIPE;
-80103306:	8b 03                	mov    (%ebx),%eax
+80103386:	8b 03                	mov    (%ebx),%eax
   return 0;
-80103308:	83 c4 10             	add    $0x10,%esp
+80103388:	83 c4 10             	add    $0x10,%esp
   (*f0)->type = FD_PIPE;
-8010330b:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+8010338b:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
   (*f0)->readable = 1;
-80103311:	8b 03                	mov    (%ebx),%eax
-80103313:	c6 40 08 01          	movb   $0x1,0x8(%eax)
+80103391:	8b 03                	mov    (%ebx),%eax
+80103393:	c6 40 08 01          	movb   $0x1,0x8(%eax)
   (*f0)->writable = 0;
-80103317:	8b 03                	mov    (%ebx),%eax
-80103319:	c6 40 09 00          	movb   $0x0,0x9(%eax)
+80103397:	8b 03                	mov    (%ebx),%eax
+80103399:	c6 40 09 00          	movb   $0x0,0x9(%eax)
   (*f0)->pipe = p;
-8010331d:	8b 03                	mov    (%ebx),%eax
-8010331f:	89 78 0c             	mov    %edi,0xc(%eax)
+8010339d:	8b 03                	mov    (%ebx),%eax
+8010339f:	89 78 0c             	mov    %edi,0xc(%eax)
   (*f1)->type = FD_PIPE;
-80103322:	8b 06                	mov    (%esi),%eax
-80103324:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+801033a2:	8b 06                	mov    (%esi),%eax
+801033a4:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
   (*f1)->readable = 0;
-8010332a:	8b 06                	mov    (%esi),%eax
-8010332c:	c6 40 08 00          	movb   $0x0,0x8(%eax)
+801033aa:	8b 06                	mov    (%esi),%eax
+801033ac:	c6 40 08 00          	movb   $0x0,0x8(%eax)
   (*f1)->writable = 1;
-80103330:	8b 06                	mov    (%esi),%eax
-80103332:	c6 40 09 01          	movb   $0x1,0x9(%eax)
+801033b0:	8b 06                	mov    (%esi),%eax
+801033b2:	c6 40 09 01          	movb   $0x1,0x9(%eax)
   (*f1)->pipe = p;
-80103336:	8b 06                	mov    (%esi),%eax
-80103338:	89 78 0c             	mov    %edi,0xc(%eax)
+801033b6:	8b 06                	mov    (%esi),%eax
+801033b8:	89 78 0c             	mov    %edi,0xc(%eax)
 }
-8010333b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801033bb:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-8010333e:	31 c0                	xor    %eax,%eax
+801033be:	31 c0                	xor    %eax,%eax
 }
-80103340:	5b                   	pop    %ebx
-80103341:	5e                   	pop    %esi
-80103342:	5f                   	pop    %edi
-80103343:	5d                   	pop    %ebp
-80103344:	c3                   	ret    
-80103345:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80103349:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+801033c0:	5b                   	pop    %ebx
+801033c1:	5e                   	pop    %esi
+801033c2:	5f                   	pop    %edi
+801033c3:	5d                   	pop    %ebp
+801033c4:	c3                   	ret    
+801033c5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801033c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80103350 <pipeclose>:
+801033d0 <pipeclose>:
 
 void
 pipeclose(struct pipe *p, int writable)
 {
-80103350:	55                   	push   %ebp
-80103351:	89 e5                	mov    %esp,%ebp
-80103353:	56                   	push   %esi
-80103354:	53                   	push   %ebx
-80103355:	8b 5d 08             	mov    0x8(%ebp),%ebx
-80103358:	8b 75 0c             	mov    0xc(%ebp),%esi
+801033d0:	55                   	push   %ebp
+801033d1:	89 e5                	mov    %esp,%ebp
+801033d3:	56                   	push   %esi
+801033d4:	53                   	push   %ebx
+801033d5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801033d8:	8b 75 0c             	mov    0xc(%ebp),%esi
   acquire(&p->lock);
-8010335b:	83 ec 0c             	sub    $0xc,%esp
-8010335e:	53                   	push   %ebx
-8010335f:	e8 1c 13 00 00       	call   80104680 <acquire>
+801033db:	83 ec 0c             	sub    $0xc,%esp
+801033de:	53                   	push   %ebx
+801033df:	e8 7c 1b 00 00       	call   80104f60 <acquire>
   if(writable){
-80103364:	83 c4 10             	add    $0x10,%esp
-80103367:	85 f6                	test   %esi,%esi
-80103369:	74 45                	je     801033b0 <pipeclose+0x60>
+801033e4:	83 c4 10             	add    $0x10,%esp
+801033e7:	85 f6                	test   %esi,%esi
+801033e9:	74 45                	je     80103430 <pipeclose+0x60>
     p->writeopen = 0;
     wakeup(&p->nread);
-8010336b:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
-80103371:	83 ec 0c             	sub    $0xc,%esp
+801033eb:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
+801033f1:	83 ec 0c             	sub    $0xc,%esp
     p->writeopen = 0;
-80103374:	c7 83 40 02 00 00 00 	movl   $0x0,0x240(%ebx)
-8010337b:	00 00 00 
+801033f4:	c7 83 40 02 00 00 00 	movl   $0x0,0x240(%ebx)
+801033fb:	00 00 00 
     wakeup(&p->nread);
-8010337e:	50                   	push   %eax
-8010337f:	e8 ac 0b 00 00       	call   80103f30 <wakeup>
-80103384:	83 c4 10             	add    $0x10,%esp
+801033fe:	50                   	push   %eax
+801033ff:	e8 fc 14 00 00       	call   80104900 <wakeup>
+80103404:	83 c4 10             	add    $0x10,%esp
   } else {
     p->readopen = 0;
     wakeup(&p->nwrite);
   }
   if(p->readopen == 0 && p->writeopen == 0){
-80103387:	8b 93 3c 02 00 00    	mov    0x23c(%ebx),%edx
-8010338d:	85 d2                	test   %edx,%edx
-8010338f:	75 0a                	jne    8010339b <pipeclose+0x4b>
-80103391:	8b 83 40 02 00 00    	mov    0x240(%ebx),%eax
-80103397:	85 c0                	test   %eax,%eax
-80103399:	74 35                	je     801033d0 <pipeclose+0x80>
+80103407:	8b 93 3c 02 00 00    	mov    0x23c(%ebx),%edx
+8010340d:	85 d2                	test   %edx,%edx
+8010340f:	75 0a                	jne    8010341b <pipeclose+0x4b>
+80103411:	8b 83 40 02 00 00    	mov    0x240(%ebx),%eax
+80103417:	85 c0                	test   %eax,%eax
+80103419:	74 35                	je     80103450 <pipeclose+0x80>
     release(&p->lock);
     kfree((char*)p);
   } else
     release(&p->lock);
-8010339b:	89 5d 08             	mov    %ebx,0x8(%ebp)
+8010341b:	89 5d 08             	mov    %ebx,0x8(%ebp)
 }
-8010339e:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801033a1:	5b                   	pop    %ebx
-801033a2:	5e                   	pop    %esi
-801033a3:	5d                   	pop    %ebp
+8010341e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103421:	5b                   	pop    %ebx
+80103422:	5e                   	pop    %esi
+80103423:	5d                   	pop    %ebp
     release(&p->lock);
-801033a4:	e9 97 13 00 00       	jmp    80104740 <release>
-801033a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103424:	e9 f7 1b 00 00       	jmp    80105020 <release>
+80103429:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     wakeup(&p->nwrite);
-801033b0:	8d 83 38 02 00 00    	lea    0x238(%ebx),%eax
-801033b6:	83 ec 0c             	sub    $0xc,%esp
+80103430:	8d 83 38 02 00 00    	lea    0x238(%ebx),%eax
+80103436:	83 ec 0c             	sub    $0xc,%esp
     p->readopen = 0;
-801033b9:	c7 83 3c 02 00 00 00 	movl   $0x0,0x23c(%ebx)
-801033c0:	00 00 00 
+80103439:	c7 83 3c 02 00 00 00 	movl   $0x0,0x23c(%ebx)
+80103440:	00 00 00 
     wakeup(&p->nwrite);
-801033c3:	50                   	push   %eax
-801033c4:	e8 67 0b 00 00       	call   80103f30 <wakeup>
-801033c9:	83 c4 10             	add    $0x10,%esp
-801033cc:	eb b9                	jmp    80103387 <pipeclose+0x37>
-801033ce:	66 90                	xchg   %ax,%ax
+80103443:	50                   	push   %eax
+80103444:	e8 b7 14 00 00       	call   80104900 <wakeup>
+80103449:	83 c4 10             	add    $0x10,%esp
+8010344c:	eb b9                	jmp    80103407 <pipeclose+0x37>
+8010344e:	66 90                	xchg   %ax,%ax
     release(&p->lock);
-801033d0:	83 ec 0c             	sub    $0xc,%esp
-801033d3:	53                   	push   %ebx
-801033d4:	e8 67 13 00 00       	call   80104740 <release>
+80103450:	83 ec 0c             	sub    $0xc,%esp
+80103453:	53                   	push   %ebx
+80103454:	e8 c7 1b 00 00       	call   80105020 <release>
     kfree((char*)p);
-801033d9:	89 5d 08             	mov    %ebx,0x8(%ebp)
-801033dc:	83 c4 10             	add    $0x10,%esp
+80103459:	89 5d 08             	mov    %ebx,0x8(%ebp)
+8010345c:	83 c4 10             	add    $0x10,%esp
 }
-801033df:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801033e2:	5b                   	pop    %ebx
-801033e3:	5e                   	pop    %esi
-801033e4:	5d                   	pop    %ebp
+8010345f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103462:	5b                   	pop    %ebx
+80103463:	5e                   	pop    %esi
+80103464:	5d                   	pop    %ebp
     kfree((char*)p);
-801033e5:	e9 26 ef ff ff       	jmp    80102310 <kfree>
-801033ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80103465:	e9 a6 ee ff ff       	jmp    80102310 <kfree>
+8010346a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-801033f0 <pipewrite>:
+80103470 <pipewrite>:
 
 //PAGEBREAK: 40
 int
 pipewrite(struct pipe *p, char *addr, int n)
 {
-801033f0:	55                   	push   %ebp
-801033f1:	89 e5                	mov    %esp,%ebp
-801033f3:	57                   	push   %edi
-801033f4:	56                   	push   %esi
-801033f5:	53                   	push   %ebx
-801033f6:	83 ec 28             	sub    $0x28,%esp
-801033f9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80103470:	55                   	push   %ebp
+80103471:	89 e5                	mov    %esp,%ebp
+80103473:	57                   	push   %edi
+80103474:	56                   	push   %esi
+80103475:	53                   	push   %ebx
+80103476:	83 ec 28             	sub    $0x28,%esp
+80103479:	8b 5d 08             	mov    0x8(%ebp),%ebx
   int i;
 
   acquire(&p->lock);
-801033fc:	53                   	push   %ebx
-801033fd:	e8 7e 12 00 00       	call   80104680 <acquire>
+8010347c:	53                   	push   %ebx
+8010347d:	e8 de 1a 00 00       	call   80104f60 <acquire>
   for(i = 0; i < n; i++){
-80103402:	8b 45 10             	mov    0x10(%ebp),%eax
-80103405:	83 c4 10             	add    $0x10,%esp
-80103408:	85 c0                	test   %eax,%eax
-8010340a:	0f 8e c9 00 00 00    	jle    801034d9 <pipewrite+0xe9>
-80103410:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-80103413:	8b 83 38 02 00 00    	mov    0x238(%ebx),%eax
+80103482:	8b 45 10             	mov    0x10(%ebp),%eax
+80103485:	83 c4 10             	add    $0x10,%esp
+80103488:	85 c0                	test   %eax,%eax
+8010348a:	0f 8e c9 00 00 00    	jle    80103559 <pipewrite+0xe9>
+80103490:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80103493:	8b 83 38 02 00 00    	mov    0x238(%ebx),%eax
     while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
       if(p->readopen == 0 || myproc()->killed){
         release(&p->lock);
         return -1;
       }
       wakeup(&p->nread);
-80103419:	8d bb 34 02 00 00    	lea    0x234(%ebx),%edi
-8010341f:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
-80103422:	03 4d 10             	add    0x10(%ebp),%ecx
-80103425:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+80103499:	8d bb 34 02 00 00    	lea    0x234(%ebx),%edi
+8010349f:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+801034a2:	03 4d 10             	add    0x10(%ebp),%ecx
+801034a5:	89 4d e0             	mov    %ecx,-0x20(%ebp)
     while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
-80103428:	8b 8b 34 02 00 00    	mov    0x234(%ebx),%ecx
-8010342e:	8d 91 00 02 00 00    	lea    0x200(%ecx),%edx
-80103434:	39 d0                	cmp    %edx,%eax
-80103436:	75 71                	jne    801034a9 <pipewrite+0xb9>
+801034a8:	8b 8b 34 02 00 00    	mov    0x234(%ebx),%ecx
+801034ae:	8d 91 00 02 00 00    	lea    0x200(%ecx),%edx
+801034b4:	39 d0                	cmp    %edx,%eax
+801034b6:	75 71                	jne    80103529 <pipewrite+0xb9>
       if(p->readopen == 0 || myproc()->killed){
-80103438:	8b 83 3c 02 00 00    	mov    0x23c(%ebx),%eax
-8010343e:	85 c0                	test   %eax,%eax
-80103440:	74 4e                	je     80103490 <pipewrite+0xa0>
+801034b8:	8b 83 3c 02 00 00    	mov    0x23c(%ebx),%eax
+801034be:	85 c0                	test   %eax,%eax
+801034c0:	74 4e                	je     80103510 <pipewrite+0xa0>
       sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
-80103442:	8d b3 38 02 00 00    	lea    0x238(%ebx),%esi
-80103448:	eb 3a                	jmp    80103484 <pipewrite+0x94>
-8010344a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801034c2:	8d b3 38 02 00 00    	lea    0x238(%ebx),%esi
+801034c8:	eb 3a                	jmp    80103504 <pipewrite+0x94>
+801034ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       wakeup(&p->nread);
-80103450:	83 ec 0c             	sub    $0xc,%esp
-80103453:	57                   	push   %edi
-80103454:	e8 d7 0a 00 00       	call   80103f30 <wakeup>
+801034d0:	83 ec 0c             	sub    $0xc,%esp
+801034d3:	57                   	push   %edi
+801034d4:	e8 27 14 00 00       	call   80104900 <wakeup>
       sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
-80103459:	5a                   	pop    %edx
-8010345a:	59                   	pop    %ecx
-8010345b:	53                   	push   %ebx
-8010345c:	56                   	push   %esi
-8010345d:	e8 1e 09 00 00       	call   80103d80 <sleep>
+801034d9:	5a                   	pop    %edx
+801034da:	59                   	pop    %ecx
+801034db:	53                   	push   %ebx
+801034dc:	56                   	push   %esi
+801034dd:	e8 6e 12 00 00       	call   80104750 <sleep>
     while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
-80103462:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
-80103468:	8b 93 38 02 00 00    	mov    0x238(%ebx),%edx
-8010346e:	83 c4 10             	add    $0x10,%esp
-80103471:	05 00 02 00 00       	add    $0x200,%eax
-80103476:	39 c2                	cmp    %eax,%edx
-80103478:	75 36                	jne    801034b0 <pipewrite+0xc0>
+801034e2:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
+801034e8:	8b 93 38 02 00 00    	mov    0x238(%ebx),%edx
+801034ee:	83 c4 10             	add    $0x10,%esp
+801034f1:	05 00 02 00 00       	add    $0x200,%eax
+801034f6:	39 c2                	cmp    %eax,%edx
+801034f8:	75 36                	jne    80103530 <pipewrite+0xc0>
       if(p->readopen == 0 || myproc()->killed){
-8010347a:	8b 83 3c 02 00 00    	mov    0x23c(%ebx),%eax
-80103480:	85 c0                	test   %eax,%eax
-80103482:	74 0c                	je     80103490 <pipewrite+0xa0>
-80103484:	e8 57 03 00 00       	call   801037e0 <myproc>
-80103489:	8b 40 24             	mov    0x24(%eax),%eax
-8010348c:	85 c0                	test   %eax,%eax
-8010348e:	74 c0                	je     80103450 <pipewrite+0x60>
+801034fa:	8b 83 3c 02 00 00    	mov    0x23c(%ebx),%eax
+80103500:	85 c0                	test   %eax,%eax
+80103502:	74 0c                	je     80103510 <pipewrite+0xa0>
+80103504:	e8 47 09 00 00       	call   80103e50 <myproc>
+80103509:	8b 40 24             	mov    0x24(%eax),%eax
+8010350c:	85 c0                	test   %eax,%eax
+8010350e:	74 c0                	je     801034d0 <pipewrite+0x60>
         release(&p->lock);
-80103490:	83 ec 0c             	sub    $0xc,%esp
-80103493:	53                   	push   %ebx
-80103494:	e8 a7 12 00 00       	call   80104740 <release>
+80103510:	83 ec 0c             	sub    $0xc,%esp
+80103513:	53                   	push   %ebx
+80103514:	e8 07 1b 00 00       	call   80105020 <release>
         return -1;
-80103499:	83 c4 10             	add    $0x10,%esp
-8010349c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80103519:	83 c4 10             	add    $0x10,%esp
+8010351c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
     p->data[p->nwrite++ % PIPESIZE] = addr[i];
   }
   wakeup(&p->nread);  //DOC: pipewrite-wakeup1
   release(&p->lock);
   return n;
 }
-801034a1:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801034a4:	5b                   	pop    %ebx
-801034a5:	5e                   	pop    %esi
-801034a6:	5f                   	pop    %edi
-801034a7:	5d                   	pop    %ebp
-801034a8:	c3                   	ret    
+80103521:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103524:	5b                   	pop    %ebx
+80103525:	5e                   	pop    %esi
+80103526:	5f                   	pop    %edi
+80103527:	5d                   	pop    %ebp
+80103528:	c3                   	ret    
     while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
-801034a9:	89 c2                	mov    %eax,%edx
-801034ab:	90                   	nop
-801034ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103529:	89 c2                	mov    %eax,%edx
+8010352b:	90                   	nop
+8010352c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     p->data[p->nwrite++ % PIPESIZE] = addr[i];
-801034b0:	8b 75 e4             	mov    -0x1c(%ebp),%esi
-801034b3:	8d 42 01             	lea    0x1(%edx),%eax
-801034b6:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
-801034bc:	89 83 38 02 00 00    	mov    %eax,0x238(%ebx)
-801034c2:	83 c6 01             	add    $0x1,%esi
-801034c5:	0f b6 4e ff          	movzbl -0x1(%esi),%ecx
+80103530:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+80103533:	8d 42 01             	lea    0x1(%edx),%eax
+80103536:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
+8010353c:	89 83 38 02 00 00    	mov    %eax,0x238(%ebx)
+80103542:	83 c6 01             	add    $0x1,%esi
+80103545:	0f b6 4e ff          	movzbl -0x1(%esi),%ecx
   for(i = 0; i < n; i++){
-801034c9:	3b 75 e0             	cmp    -0x20(%ebp),%esi
-801034cc:	89 75 e4             	mov    %esi,-0x1c(%ebp)
+80103549:	3b 75 e0             	cmp    -0x20(%ebp),%esi
+8010354c:	89 75 e4             	mov    %esi,-0x1c(%ebp)
     p->data[p->nwrite++ % PIPESIZE] = addr[i];
-801034cf:	88 4c 13 34          	mov    %cl,0x34(%ebx,%edx,1)
+8010354f:	88 4c 13 34          	mov    %cl,0x34(%ebx,%edx,1)
   for(i = 0; i < n; i++){
-801034d3:	0f 85 4f ff ff ff    	jne    80103428 <pipewrite+0x38>
+80103553:	0f 85 4f ff ff ff    	jne    801034a8 <pipewrite+0x38>
   wakeup(&p->nread);  //DOC: pipewrite-wakeup1
-801034d9:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
-801034df:	83 ec 0c             	sub    $0xc,%esp
-801034e2:	50                   	push   %eax
-801034e3:	e8 48 0a 00 00       	call   80103f30 <wakeup>
+80103559:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
+8010355f:	83 ec 0c             	sub    $0xc,%esp
+80103562:	50                   	push   %eax
+80103563:	e8 98 13 00 00       	call   80104900 <wakeup>
   release(&p->lock);
-801034e8:	89 1c 24             	mov    %ebx,(%esp)
-801034eb:	e8 50 12 00 00       	call   80104740 <release>
+80103568:	89 1c 24             	mov    %ebx,(%esp)
+8010356b:	e8 b0 1a 00 00       	call   80105020 <release>
   return n;
-801034f0:	83 c4 10             	add    $0x10,%esp
-801034f3:	8b 45 10             	mov    0x10(%ebp),%eax
-801034f6:	eb a9                	jmp    801034a1 <pipewrite+0xb1>
-801034f8:	90                   	nop
-801034f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103570:	83 c4 10             	add    $0x10,%esp
+80103573:	8b 45 10             	mov    0x10(%ebp),%eax
+80103576:	eb a9                	jmp    80103521 <pipewrite+0xb1>
+80103578:	90                   	nop
+80103579:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80103500 <piperead>:
+80103580 <piperead>:
 
 int
 piperead(struct pipe *p, char *addr, int n)
 {
-80103500:	55                   	push   %ebp
-80103501:	89 e5                	mov    %esp,%ebp
-80103503:	57                   	push   %edi
-80103504:	56                   	push   %esi
-80103505:	53                   	push   %ebx
-80103506:	83 ec 18             	sub    $0x18,%esp
-80103509:	8b 75 08             	mov    0x8(%ebp),%esi
-8010350c:	8b 7d 0c             	mov    0xc(%ebp),%edi
+80103580:	55                   	push   %ebp
+80103581:	89 e5                	mov    %esp,%ebp
+80103583:	57                   	push   %edi
+80103584:	56                   	push   %esi
+80103585:	53                   	push   %ebx
+80103586:	83 ec 18             	sub    $0x18,%esp
+80103589:	8b 75 08             	mov    0x8(%ebp),%esi
+8010358c:	8b 7d 0c             	mov    0xc(%ebp),%edi
   int i;
 
   acquire(&p->lock);
-8010350f:	56                   	push   %esi
-80103510:	e8 6b 11 00 00       	call   80104680 <acquire>
+8010358f:	56                   	push   %esi
+80103590:	e8 cb 19 00 00       	call   80104f60 <acquire>
   while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
-80103515:	83 c4 10             	add    $0x10,%esp
-80103518:	8b 8e 34 02 00 00    	mov    0x234(%esi),%ecx
-8010351e:	3b 8e 38 02 00 00    	cmp    0x238(%esi),%ecx
-80103524:	75 6a                	jne    80103590 <piperead+0x90>
-80103526:	8b 9e 40 02 00 00    	mov    0x240(%esi),%ebx
-8010352c:	85 db                	test   %ebx,%ebx
-8010352e:	0f 84 c4 00 00 00    	je     801035f8 <piperead+0xf8>
+80103595:	83 c4 10             	add    $0x10,%esp
+80103598:	8b 8e 34 02 00 00    	mov    0x234(%esi),%ecx
+8010359e:	3b 8e 38 02 00 00    	cmp    0x238(%esi),%ecx
+801035a4:	75 6a                	jne    80103610 <piperead+0x90>
+801035a6:	8b 9e 40 02 00 00    	mov    0x240(%esi),%ebx
+801035ac:	85 db                	test   %ebx,%ebx
+801035ae:	0f 84 c4 00 00 00    	je     80103678 <piperead+0xf8>
     if(myproc()->killed){
       release(&p->lock);
       return -1;
     }
     sleep(&p->nread, &p->lock); //DOC: piperead-sleep
-80103534:	8d 9e 34 02 00 00    	lea    0x234(%esi),%ebx
-8010353a:	eb 2d                	jmp    80103569 <piperead+0x69>
-8010353c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80103540:	83 ec 08             	sub    $0x8,%esp
-80103543:	56                   	push   %esi
-80103544:	53                   	push   %ebx
-80103545:	e8 36 08 00 00       	call   80103d80 <sleep>
+801035b4:	8d 9e 34 02 00 00    	lea    0x234(%esi),%ebx
+801035ba:	eb 2d                	jmp    801035e9 <piperead+0x69>
+801035bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801035c0:	83 ec 08             	sub    $0x8,%esp
+801035c3:	56                   	push   %esi
+801035c4:	53                   	push   %ebx
+801035c5:	e8 86 11 00 00       	call   80104750 <sleep>
   while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
-8010354a:	83 c4 10             	add    $0x10,%esp
-8010354d:	8b 8e 34 02 00 00    	mov    0x234(%esi),%ecx
-80103553:	3b 8e 38 02 00 00    	cmp    0x238(%esi),%ecx
-80103559:	75 35                	jne    80103590 <piperead+0x90>
-8010355b:	8b 96 40 02 00 00    	mov    0x240(%esi),%edx
-80103561:	85 d2                	test   %edx,%edx
-80103563:	0f 84 8f 00 00 00    	je     801035f8 <piperead+0xf8>
+801035ca:	83 c4 10             	add    $0x10,%esp
+801035cd:	8b 8e 34 02 00 00    	mov    0x234(%esi),%ecx
+801035d3:	3b 8e 38 02 00 00    	cmp    0x238(%esi),%ecx
+801035d9:	75 35                	jne    80103610 <piperead+0x90>
+801035db:	8b 96 40 02 00 00    	mov    0x240(%esi),%edx
+801035e1:	85 d2                	test   %edx,%edx
+801035e3:	0f 84 8f 00 00 00    	je     80103678 <piperead+0xf8>
     if(myproc()->killed){
-80103569:	e8 72 02 00 00       	call   801037e0 <myproc>
-8010356e:	8b 48 24             	mov    0x24(%eax),%ecx
-80103571:	85 c9                	test   %ecx,%ecx
-80103573:	74 cb                	je     80103540 <piperead+0x40>
+801035e9:	e8 62 08 00 00       	call   80103e50 <myproc>
+801035ee:	8b 48 24             	mov    0x24(%eax),%ecx
+801035f1:	85 c9                	test   %ecx,%ecx
+801035f3:	74 cb                	je     801035c0 <piperead+0x40>
       release(&p->lock);
-80103575:	83 ec 0c             	sub    $0xc,%esp
+801035f5:	83 ec 0c             	sub    $0xc,%esp
       return -1;
-80103578:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+801035f8:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
       release(&p->lock);
-8010357d:	56                   	push   %esi
-8010357e:	e8 bd 11 00 00       	call   80104740 <release>
+801035fd:	56                   	push   %esi
+801035fe:	e8 1d 1a 00 00       	call   80105020 <release>
       return -1;
-80103583:	83 c4 10             	add    $0x10,%esp
+80103603:	83 c4 10             	add    $0x10,%esp
     addr[i] = p->data[p->nread++ % PIPESIZE];
   }
   wakeup(&p->nwrite);  //DOC: piperead-wakeup
   release(&p->lock);
   return i;
 }
-80103586:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80103589:	89 d8                	mov    %ebx,%eax
-8010358b:	5b                   	pop    %ebx
-8010358c:	5e                   	pop    %esi
-8010358d:	5f                   	pop    %edi
-8010358e:	5d                   	pop    %ebp
-8010358f:	c3                   	ret    
+80103606:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103609:	89 d8                	mov    %ebx,%eax
+8010360b:	5b                   	pop    %ebx
+8010360c:	5e                   	pop    %esi
+8010360d:	5f                   	pop    %edi
+8010360e:	5d                   	pop    %ebp
+8010360f:	c3                   	ret    
   for(i = 0; i < n; i++){  //DOC: piperead-copy
-80103590:	8b 45 10             	mov    0x10(%ebp),%eax
-80103593:	85 c0                	test   %eax,%eax
-80103595:	7e 61                	jle    801035f8 <piperead+0xf8>
+80103610:	8b 45 10             	mov    0x10(%ebp),%eax
+80103613:	85 c0                	test   %eax,%eax
+80103615:	7e 61                	jle    80103678 <piperead+0xf8>
     if(p->nread == p->nwrite)
-80103597:	31 db                	xor    %ebx,%ebx
-80103599:	eb 13                	jmp    801035ae <piperead+0xae>
-8010359b:	90                   	nop
-8010359c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801035a0:	8b 8e 34 02 00 00    	mov    0x234(%esi),%ecx
-801035a6:	3b 8e 38 02 00 00    	cmp    0x238(%esi),%ecx
-801035ac:	74 1f                	je     801035cd <piperead+0xcd>
+80103617:	31 db                	xor    %ebx,%ebx
+80103619:	eb 13                	jmp    8010362e <piperead+0xae>
+8010361b:	90                   	nop
+8010361c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103620:	8b 8e 34 02 00 00    	mov    0x234(%esi),%ecx
+80103626:	3b 8e 38 02 00 00    	cmp    0x238(%esi),%ecx
+8010362c:	74 1f                	je     8010364d <piperead+0xcd>
     addr[i] = p->data[p->nread++ % PIPESIZE];
-801035ae:	8d 41 01             	lea    0x1(%ecx),%eax
-801035b1:	81 e1 ff 01 00 00    	and    $0x1ff,%ecx
-801035b7:	89 86 34 02 00 00    	mov    %eax,0x234(%esi)
-801035bd:	0f b6 44 0e 34       	movzbl 0x34(%esi,%ecx,1),%eax
-801035c2:	88 04 1f             	mov    %al,(%edi,%ebx,1)
+8010362e:	8d 41 01             	lea    0x1(%ecx),%eax
+80103631:	81 e1 ff 01 00 00    	and    $0x1ff,%ecx
+80103637:	89 86 34 02 00 00    	mov    %eax,0x234(%esi)
+8010363d:	0f b6 44 0e 34       	movzbl 0x34(%esi,%ecx,1),%eax
+80103642:	88 04 1f             	mov    %al,(%edi,%ebx,1)
   for(i = 0; i < n; i++){  //DOC: piperead-copy
-801035c5:	83 c3 01             	add    $0x1,%ebx
-801035c8:	39 5d 10             	cmp    %ebx,0x10(%ebp)
-801035cb:	75 d3                	jne    801035a0 <piperead+0xa0>
+80103645:	83 c3 01             	add    $0x1,%ebx
+80103648:	39 5d 10             	cmp    %ebx,0x10(%ebp)
+8010364b:	75 d3                	jne    80103620 <piperead+0xa0>
   wakeup(&p->nwrite);  //DOC: piperead-wakeup
-801035cd:	8d 86 38 02 00 00    	lea    0x238(%esi),%eax
-801035d3:	83 ec 0c             	sub    $0xc,%esp
-801035d6:	50                   	push   %eax
-801035d7:	e8 54 09 00 00       	call   80103f30 <wakeup>
+8010364d:	8d 86 38 02 00 00    	lea    0x238(%esi),%eax
+80103653:	83 ec 0c             	sub    $0xc,%esp
+80103656:	50                   	push   %eax
+80103657:	e8 a4 12 00 00       	call   80104900 <wakeup>
   release(&p->lock);
-801035dc:	89 34 24             	mov    %esi,(%esp)
-801035df:	e8 5c 11 00 00       	call   80104740 <release>
+8010365c:	89 34 24             	mov    %esi,(%esp)
+8010365f:	e8 bc 19 00 00       	call   80105020 <release>
   return i;
-801035e4:	83 c4 10             	add    $0x10,%esp
+80103664:	83 c4 10             	add    $0x10,%esp
 }
-801035e7:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801035ea:	89 d8                	mov    %ebx,%eax
-801035ec:	5b                   	pop    %ebx
-801035ed:	5e                   	pop    %esi
-801035ee:	5f                   	pop    %edi
-801035ef:	5d                   	pop    %ebp
-801035f0:	c3                   	ret    
-801035f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801035f8:	31 db                	xor    %ebx,%ebx
-801035fa:	eb d1                	jmp    801035cd <piperead+0xcd>
-801035fc:	66 90                	xchg   %ax,%ax
-801035fe:	66 90                	xchg   %ax,%ax
+80103667:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010366a:	89 d8                	mov    %ebx,%eax
+8010366c:	5b                   	pop    %ebx
+8010366d:	5e                   	pop    %esi
+8010366e:	5f                   	pop    %edi
+8010366f:	5d                   	pop    %ebp
+80103670:	c3                   	ret    
+80103671:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103678:	31 db                	xor    %ebx,%ebx
+8010367a:	eb d1                	jmp    8010364d <piperead+0xcd>
+8010367c:	66 90                	xchg   %ax,%ax
+8010367e:	66 90                	xchg   %ax,%ax
 
-80103600 <allocproc>:
+80103680 <allocproc>:
 // If found, change state to EMBRYO and initialize
 // state required to run in the kernel.
 // Otherwise return 0.
 static struct proc*
 allocproc(void)
 {
-80103600:	55                   	push   %ebp
-80103601:	89 e5                	mov    %esp,%ebp
-80103603:	53                   	push   %ebx
+80103680:	55                   	push   %ebp
+80103681:	89 e5                	mov    %esp,%ebp
+80103683:	53                   	push   %ebx
   struct proc *p;
   char *sp;
 
   acquire(&ptable.lock);
 
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103604:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
+80103684:	bb f4 3f 11 80       	mov    $0x80113ff4,%ebx
 {
-80103609:	83 ec 10             	sub    $0x10,%esp
+80103689:	83 ec 10             	sub    $0x10,%esp
   acquire(&ptable.lock);
-8010360c:	68 20 2d 11 80       	push   $0x80112d20
-80103611:	e8 6a 10 00 00       	call   80104680 <acquire>
-80103616:	83 c4 10             	add    $0x10,%esp
-80103619:	eb 10                	jmp    8010362b <allocproc+0x2b>
-8010361b:	90                   	nop
-8010361c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010368c:	68 c0 3f 11 80       	push   $0x80113fc0
+80103691:	e8 ca 18 00 00       	call   80104f60 <acquire>
+80103696:	83 c4 10             	add    $0x10,%esp
+80103699:	eb 10                	jmp    801036ab <allocproc+0x2b>
+8010369b:	90                   	nop
+8010369c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103620:	83 eb 80             	sub    $0xffffff80,%ebx
-80103623:	81 fb 54 4d 11 80    	cmp    $0x80114d54,%ebx
-80103629:	73 75                	jae    801036a0 <allocproc+0xa0>
+801036a0:	83 eb 80             	sub    $0xffffff80,%ebx
+801036a3:	81 fb f4 5f 11 80    	cmp    $0x80115ff4,%ebx
+801036a9:	73 75                	jae    80103720 <allocproc+0xa0>
     if(p->state == UNUSED)
-8010362b:	8b 43 0c             	mov    0xc(%ebx),%eax
-8010362e:	85 c0                	test   %eax,%eax
-80103630:	75 ee                	jne    80103620 <allocproc+0x20>
+801036ab:	8b 43 0c             	mov    0xc(%ebx),%eax
+801036ae:	85 c0                	test   %eax,%eax
+801036b0:	75 ee                	jne    801036a0 <allocproc+0x20>
   release(&ptable.lock);
   return 0;
 
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
-80103632:	a1 04 a0 10 80       	mov    0x8010a004,%eax
+801036b2:	a1 04 b0 10 80       	mov    0x8010b004,%eax
 
   release(&ptable.lock);
-80103637:	83 ec 0c             	sub    $0xc,%esp
+801036b7:	83 ec 0c             	sub    $0xc,%esp
   p->state = EMBRYO;
-8010363a:	c7 43 0c 01 00 00 00 	movl   $0x1,0xc(%ebx)
+801036ba:	c7 43 0c 01 00 00 00 	movl   $0x1,0xc(%ebx)
   p->pid = nextpid++;
-80103641:	8d 50 01             	lea    0x1(%eax),%edx
-80103644:	89 43 10             	mov    %eax,0x10(%ebx)
+801036c1:	8d 50 01             	lea    0x1(%eax),%edx
+801036c4:	89 43 10             	mov    %eax,0x10(%ebx)
   release(&ptable.lock);
-80103647:	68 20 2d 11 80       	push   $0x80112d20
+801036c7:	68 c0 3f 11 80       	push   $0x80113fc0
   p->pid = nextpid++;
-8010364c:	89 15 04 a0 10 80    	mov    %edx,0x8010a004
+801036cc:	89 15 04 b0 10 80    	mov    %edx,0x8010b004
   release(&ptable.lock);
-80103652:	e8 e9 10 00 00       	call   80104740 <release>
+801036d2:	e8 49 19 00 00       	call   80105020 <release>
 
   // Allocate kernel stack.
   if((p->kstack = kalloc()) == 0){
-80103657:	e8 64 ee ff ff       	call   801024c0 <kalloc>
-8010365c:	83 c4 10             	add    $0x10,%esp
-8010365f:	85 c0                	test   %eax,%eax
-80103661:	89 43 08             	mov    %eax,0x8(%ebx)
-80103664:	74 53                	je     801036b9 <allocproc+0xb9>
+801036d7:	e8 64 ee ff ff       	call   80102540 <kalloc>
+801036dc:	83 c4 10             	add    $0x10,%esp
+801036df:	85 c0                	test   %eax,%eax
+801036e1:	89 43 08             	mov    %eax,0x8(%ebx)
+801036e4:	74 53                	je     80103739 <allocproc+0xb9>
     return 0;
   }
   sp = p->kstack + KSTACKSIZE;
 
   // Leave room for trap frame.
   sp -= sizeof *p->tf;
-80103666:	8d 90 b4 0f 00 00    	lea    0xfb4(%eax),%edx
+801036e6:	8d 90 b4 0f 00 00    	lea    0xfb4(%eax),%edx
   sp -= 4;
   *(uint*)sp = (uint)trapret;
 
   sp -= sizeof *p->context;
   p->context = (struct context*)sp;
   memset(p->context, 0, sizeof *p->context);
-8010366c:	83 ec 04             	sub    $0x4,%esp
+801036ec:	83 ec 04             	sub    $0x4,%esp
   sp -= sizeof *p->context;
-8010366f:	05 9c 0f 00 00       	add    $0xf9c,%eax
+801036ef:	05 9c 0f 00 00       	add    $0xf9c,%eax
   sp -= sizeof *p->tf;
-80103674:	89 53 18             	mov    %edx,0x18(%ebx)
+801036f4:	89 53 18             	mov    %edx,0x18(%ebx)
   *(uint*)sp = (uint)trapret;
-80103677:	c7 40 14 97 5a 10 80 	movl   $0x80105a97,0x14(%eax)
+801036f7:	c7 40 14 e7 62 10 80 	movl   $0x801062e7,0x14(%eax)
   p->context = (struct context*)sp;
-8010367e:	89 43 1c             	mov    %eax,0x1c(%ebx)
+801036fe:	89 43 1c             	mov    %eax,0x1c(%ebx)
   memset(p->context, 0, sizeof *p->context);
-80103681:	6a 14                	push   $0x14
-80103683:	6a 00                	push   $0x0
-80103685:	50                   	push   %eax
-80103686:	e8 05 11 00 00       	call   80104790 <memset>
+80103701:	6a 14                	push   $0x14
+80103703:	6a 00                	push   $0x0
+80103705:	50                   	push   %eax
+80103706:	e8 65 19 00 00       	call   80105070 <memset>
   p->context->eip = (uint)forkret;
-8010368b:	8b 43 1c             	mov    0x1c(%ebx),%eax
+8010370b:	8b 43 1c             	mov    0x1c(%ebx),%eax
 
   return p;
-8010368e:	83 c4 10             	add    $0x10,%esp
+8010370e:	83 c4 10             	add    $0x10,%esp
   p->context->eip = (uint)forkret;
-80103691:	c7 40 10 d0 36 10 80 	movl   $0x801036d0,0x10(%eax)
+80103711:	c7 40 10 50 37 10 80 	movl   $0x80103750,0x10(%eax)
 }
-80103698:	89 d8                	mov    %ebx,%eax
-8010369a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-8010369d:	c9                   	leave  
-8010369e:	c3                   	ret    
-8010369f:	90                   	nop
+80103718:	89 d8                	mov    %ebx,%eax
+8010371a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010371d:	c9                   	leave  
+8010371e:	c3                   	ret    
+8010371f:	90                   	nop
   release(&ptable.lock);
-801036a0:	83 ec 0c             	sub    $0xc,%esp
+80103720:	83 ec 0c             	sub    $0xc,%esp
   return 0;
-801036a3:	31 db                	xor    %ebx,%ebx
+80103723:	31 db                	xor    %ebx,%ebx
   release(&ptable.lock);
-801036a5:	68 20 2d 11 80       	push   $0x80112d20
-801036aa:	e8 91 10 00 00       	call   80104740 <release>
+80103725:	68 c0 3f 11 80       	push   $0x80113fc0
+8010372a:	e8 f1 18 00 00       	call   80105020 <release>
 }
-801036af:	89 d8                	mov    %ebx,%eax
+8010372f:	89 d8                	mov    %ebx,%eax
   return 0;
-801036b1:	83 c4 10             	add    $0x10,%esp
+80103731:	83 c4 10             	add    $0x10,%esp
 }
-801036b4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801036b7:	c9                   	leave  
-801036b8:	c3                   	ret    
+80103734:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103737:	c9                   	leave  
+80103738:	c3                   	ret    
     p->state = UNUSED;
-801036b9:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+80103739:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
     return 0;
-801036c0:	31 db                	xor    %ebx,%ebx
-801036c2:	eb d4                	jmp    80103698 <allocproc+0x98>
-801036c4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-801036ca:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+80103740:	31 db                	xor    %ebx,%ebx
+80103742:	eb d4                	jmp    80103718 <allocproc+0x98>
+80103744:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010374a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
 
-801036d0 <forkret>:
+80103750 <forkret>:
 
 // A fork child's very first scheduling by scheduler()
 // will swtch here.  "Return" to user space.
 void
 forkret(void)
 {
-801036d0:	55                   	push   %ebp
-801036d1:	89 e5                	mov    %esp,%ebp
-801036d3:	83 ec 14             	sub    $0x14,%esp
+80103750:	55                   	push   %ebp
+80103751:	89 e5                	mov    %esp,%ebp
+80103753:	83 ec 14             	sub    $0x14,%esp
   static int first = 1;
   // Still holding ptable.lock from scheduler.
   release(&ptable.lock);
-801036d6:	68 20 2d 11 80       	push   $0x80112d20
-801036db:	e8 60 10 00 00       	call   80104740 <release>
+80103756:	68 c0 3f 11 80       	push   $0x80113fc0
+8010375b:	e8 c0 18 00 00       	call   80105020 <release>
 
   if (first) {
-801036e0:	a1 00 a0 10 80       	mov    0x8010a000,%eax
-801036e5:	83 c4 10             	add    $0x10,%esp
-801036e8:	85 c0                	test   %eax,%eax
-801036ea:	75 04                	jne    801036f0 <forkret+0x20>
+80103760:	a1 00 b0 10 80       	mov    0x8010b000,%eax
+80103765:	83 c4 10             	add    $0x10,%esp
+80103768:	85 c0                	test   %eax,%eax
+8010376a:	75 04                	jne    80103770 <forkret+0x20>
     iinit(ROOTDEV);
     initlog(ROOTDEV);
   }
 
   // Return to "caller", actually trapret (see allocproc).
 }
-801036ec:	c9                   	leave  
-801036ed:	c3                   	ret    
-801036ee:	66 90                	xchg   %ax,%ax
+8010376c:	c9                   	leave  
+8010376d:	c3                   	ret    
+8010376e:	66 90                	xchg   %ax,%ax
     iinit(ROOTDEV);
-801036f0:	83 ec 0c             	sub    $0xc,%esp
+80103770:	83 ec 0c             	sub    $0xc,%esp
     first = 0;
-801036f3:	c7 05 00 a0 10 80 00 	movl   $0x0,0x8010a000
-801036fa:	00 00 00 
+80103773:	c7 05 00 b0 10 80 00 	movl   $0x0,0x8010b000
+8010377a:	00 00 00 
     iinit(ROOTDEV);
-801036fd:	6a 01                	push   $0x1
-801036ff:	e8 7c dd ff ff       	call   80101480 <iinit>
+8010377d:	6a 01                	push   $0x1
+8010377f:	e8 fc dc ff ff       	call   80101480 <iinit>
     initlog(ROOTDEV);
-80103704:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-8010370b:	e8 f0 f3 ff ff       	call   80102b00 <initlog>
-80103710:	83 c4 10             	add    $0x10,%esp
-}
-80103713:	c9                   	leave  
-80103714:	c3                   	ret    
-80103715:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80103719:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-80103720 <pinit>:
-{
-80103720:	55                   	push   %ebp
-80103721:	89 e5                	mov    %esp,%ebp
-80103723:	83 ec 10             	sub    $0x10,%esp
+80103784:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+8010378b:	e8 f0 f3 ff ff       	call   80102b80 <initlog>
+80103790:	83 c4 10             	add    $0x10,%esp
+}
+80103793:	c9                   	leave  
+80103794:	c3                   	ret    
+80103795:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103799:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801037a0 <int_to_string.part.1>:
+void int_to_string(int x, char *c){
+801037a0:	55                   	push   %ebp
+  while(x>0){
+801037a1:	85 c0                	test   %eax,%eax
+void int_to_string(int x, char *c){
+801037a3:	89 e5                	mov    %esp,%ebp
+801037a5:	57                   	push   %edi
+801037a6:	56                   	push   %esi
+801037a7:	53                   	push   %ebx
+801037a8:	89 d3                	mov    %edx,%ebx
+  while(x>0){
+801037aa:	7e 64                	jle    80103810 <int_to_string.part.1+0x70>
+801037ac:	89 c1                	mov    %eax,%ecx
+  int i=0;
+801037ae:	31 f6                	xor    %esi,%esi
+    c[i]=x%10+'0';
+801037b0:	bf cd cc cc cc       	mov    $0xcccccccd,%edi
+801037b5:	8d 76 00             	lea    0x0(%esi),%esi
+801037b8:	89 c8                	mov    %ecx,%eax
+801037ba:	f7 e7                	mul    %edi
+801037bc:	c1 ea 03             	shr    $0x3,%edx
+801037bf:	8d 04 92             	lea    (%edx,%edx,4),%eax
+801037c2:	01 c0                	add    %eax,%eax
+801037c4:	29 c1                	sub    %eax,%ecx
+801037c6:	83 c1 30             	add    $0x30,%ecx
+801037c9:	88 0c 33             	mov    %cl,(%ebx,%esi,1)
+    i++;
+801037cc:	83 c6 01             	add    $0x1,%esi
+  while(x>0){
+801037cf:	85 d2                	test   %edx,%edx
+    x/=10;
+801037d1:	89 d1                	mov    %edx,%ecx
+  while(x>0){
+801037d3:	75 e3                	jne    801037b8 <int_to_string.part.1+0x18>
+  for(int j=0;j<i/2;j++){
+801037d5:	89 f2                	mov    %esi,%edx
+  c[i]='\0';
+801037d7:	c6 04 33 00          	movb   $0x0,(%ebx,%esi,1)
+  for(int j=0;j<i/2;j++){
+801037db:	d1 fa                	sar    %edx
+801037dd:	74 27                	je     80103806 <int_to_string.part.1+0x66>
+801037df:	8d 44 1e ff          	lea    -0x1(%esi,%ebx,1),%eax
+801037e3:	89 c6                	mov    %eax,%esi
+801037e5:	29 d6                	sub    %edx,%esi
+801037e7:	89 f6                	mov    %esi,%esi
+801037e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    char a=c[j];
+801037f0:	0f b6 13             	movzbl (%ebx),%edx
+    c[j]=c[i-j-1];
+801037f3:	0f b6 08             	movzbl (%eax),%ecx
+801037f6:	83 e8 01             	sub    $0x1,%eax
+801037f9:	83 c3 01             	add    $0x1,%ebx
+801037fc:	88 4b ff             	mov    %cl,-0x1(%ebx)
+    c[i-j-1]=a;
+801037ff:	88 50 01             	mov    %dl,0x1(%eax)
+  for(int j=0;j<i/2;j++){
+80103802:	39 f0                	cmp    %esi,%eax
+80103804:	75 ea                	jne    801037f0 <int_to_string.part.1+0x50>
+}
+80103806:	5b                   	pop    %ebx
+80103807:	5e                   	pop    %esi
+80103808:	5f                   	pop    %edi
+80103809:	5d                   	pop    %ebp
+8010380a:	c3                   	ret    
+8010380b:	90                   	nop
+8010380c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  c[i]='\0';
+80103810:	c6 02 00             	movb   $0x0,(%edx)
+}
+80103813:	5b                   	pop    %ebx
+80103814:	5e                   	pop    %esi
+80103815:	5f                   	pop    %edi
+80103816:	5d                   	pop    %ebp
+80103817:	c3                   	ret    
+80103818:	90                   	nop
+80103819:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80103820 <int_to_string>:
+void int_to_string(int x, char *c){
+80103820:	55                   	push   %ebp
+80103821:	89 e5                	mov    %esp,%ebp
+80103823:	8b 45 08             	mov    0x8(%ebp),%eax
+80103826:	8b 55 0c             	mov    0xc(%ebp),%edx
+  if(x==0){
+80103829:	85 c0                	test   %eax,%eax
+8010382b:	74 0b                	je     80103838 <int_to_string+0x18>
+}
+8010382d:	5d                   	pop    %ebp
+8010382e:	e9 6d ff ff ff       	jmp    801037a0 <int_to_string.part.1>
+80103833:	90                   	nop
+80103834:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c[0]='0';
+80103838:	b8 30 00 00 00       	mov    $0x30,%eax
+8010383d:	66 89 02             	mov    %ax,(%edx)
+}
+80103840:	5d                   	pop    %ebp
+80103841:	c3                   	ret    
+80103842:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103849:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80103850 <rpop>:
+struct proc* rpop(){
+80103850:	55                   	push   %ebp
+80103851:	89 e5                	mov    %esp,%ebp
+80103853:	53                   	push   %ebx
+80103854:	83 ec 10             	sub    $0x10,%esp
+  acquire(&rqueue.lock);
+80103857:	68 40 3d 11 80       	push   $0x80113d40
+8010385c:	e8 ff 16 00 00       	call   80104f60 <acquire>
+  if(rqueue.s==rqueue.e){
+80103861:	8b 15 74 3e 11 80    	mov    0x80113e74,%edx
+80103867:	83 c4 10             	add    $0x10,%esp
+8010386a:	3b 15 78 3e 11 80    	cmp    0x80113e78,%edx
+80103870:	74 3e                	je     801038b0 <rpop+0x60>
+  struct proc *p=rqueue.queue[rqueue.s];
+80103872:	8b 1c 95 74 3d 11 80 	mov    -0x7feec28c(,%edx,4),%ebx
+  (rqueue.s)++;
+80103879:	83 c2 01             	add    $0x1,%edx
+  release(&rqueue.lock);
+8010387c:	83 ec 0c             	sub    $0xc,%esp
+  (rqueue.s)%=NPROC;
+8010387f:	89 d0                	mov    %edx,%eax
+  release(&rqueue.lock);
+80103881:	68 40 3d 11 80       	push   $0x80113d40
+  (rqueue.s)%=NPROC;
+80103886:	c1 f8 1f             	sar    $0x1f,%eax
+80103889:	c1 e8 1a             	shr    $0x1a,%eax
+8010388c:	01 c2                	add    %eax,%edx
+8010388e:	83 e2 3f             	and    $0x3f,%edx
+80103891:	29 c2                	sub    %eax,%edx
+80103893:	89 15 74 3e 11 80    	mov    %edx,0x80113e74
+  release(&rqueue.lock);
+80103899:	e8 82 17 00 00       	call   80105020 <release>
+  return p;
+8010389e:	83 c4 10             	add    $0x10,%esp
+}
+801038a1:	89 d8                	mov    %ebx,%eax
+801038a3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801038a6:	c9                   	leave  
+801038a7:	c3                   	ret    
+801038a8:	90                   	nop
+801038a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  	release(&rqueue.lock);
+801038b0:	83 ec 0c             	sub    $0xc,%esp
+  	return 0;
+801038b3:	31 db                	xor    %ebx,%ebx
+  	release(&rqueue.lock);
+801038b5:	68 40 3d 11 80       	push   $0x80113d40
+801038ba:	e8 61 17 00 00       	call   80105020 <release>
+  	return 0;
+801038bf:	83 c4 10             	add    $0x10,%esp
+801038c2:	eb dd                	jmp    801038a1 <rpop+0x51>
+801038c4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801038ca:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+801038d0 <rpop2>:
+struct proc* rpop2(){
+801038d0:	55                   	push   %ebp
+801038d1:	89 e5                	mov    %esp,%ebp
+801038d3:	53                   	push   %ebx
+801038d4:	83 ec 10             	sub    $0x10,%esp
+	acquire(&rqueue2.lock);
+801038d7:	68 80 3e 11 80       	push   $0x80113e80
+801038dc:	e8 7f 16 00 00       	call   80104f60 <acquire>
+	if(rqueue2.s==rqueue2.e){
+801038e1:	8b 15 b4 3f 11 80    	mov    0x80113fb4,%edx
+801038e7:	83 c4 10             	add    $0x10,%esp
+801038ea:	3b 15 b8 3f 11 80    	cmp    0x80113fb8,%edx
+801038f0:	74 3e                	je     80103930 <rpop2+0x60>
+	struct proc* p=rqueue2.queue[rqueue2.s];
+801038f2:	8b 1c 95 b4 3e 11 80 	mov    -0x7feec14c(,%edx,4),%ebx
+	(rqueue2.s)++;
+801038f9:	83 c2 01             	add    $0x1,%edx
+	release(&rqueue2.lock);
+801038fc:	83 ec 0c             	sub    $0xc,%esp
+	(rqueue2.s)%=NPROC;
+801038ff:	89 d0                	mov    %edx,%eax
+	release(&rqueue2.lock);
+80103901:	68 80 3e 11 80       	push   $0x80113e80
+	(rqueue2.s)%=NPROC;
+80103906:	c1 f8 1f             	sar    $0x1f,%eax
+80103909:	c1 e8 1a             	shr    $0x1a,%eax
+8010390c:	01 c2                	add    %eax,%edx
+8010390e:	83 e2 3f             	and    $0x3f,%edx
+80103911:	29 c2                	sub    %eax,%edx
+80103913:	89 15 b4 3f 11 80    	mov    %edx,0x80113fb4
+	release(&rqueue2.lock);
+80103919:	e8 02 17 00 00       	call   80105020 <release>
+	return p;
+8010391e:	83 c4 10             	add    $0x10,%esp
+}
+80103921:	89 d8                	mov    %ebx,%eax
+80103923:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103926:	c9                   	leave  
+80103927:	c3                   	ret    
+80103928:	90                   	nop
+80103929:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+		release(&rqueue2.lock);
+80103930:	83 ec 0c             	sub    $0xc,%esp
+		return 0;
+80103933:	31 db                	xor    %ebx,%ebx
+		release(&rqueue2.lock);
+80103935:	68 80 3e 11 80       	push   $0x80113e80
+8010393a:	e8 e1 16 00 00       	call   80105020 <release>
+		return 0;
+8010393f:	83 c4 10             	add    $0x10,%esp
+80103942:	eb dd                	jmp    80103921 <rpop2+0x51>
+80103944:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010394a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+80103950 <rpush>:
+int rpush(struct proc *p){
+80103950:	55                   	push   %ebp
+80103951:	89 e5                	mov    %esp,%ebp
+80103953:	83 ec 14             	sub    $0x14,%esp
+  acquire(&rqueue.lock);
+80103956:	68 40 3d 11 80       	push   $0x80113d40
+8010395b:	e8 00 16 00 00       	call   80104f60 <acquire>
+  if((rqueue.e+1)%NPROC==rqueue.s){
+80103960:	8b 0d 78 3e 11 80    	mov    0x80113e78,%ecx
+80103966:	83 c4 10             	add    $0x10,%esp
+80103969:	8d 41 01             	lea    0x1(%ecx),%eax
+8010396c:	99                   	cltd   
+8010396d:	c1 ea 1a             	shr    $0x1a,%edx
+80103970:	01 d0                	add    %edx,%eax
+80103972:	83 e0 3f             	and    $0x3f,%eax
+80103975:	29 d0                	sub    %edx,%eax
+80103977:	3b 05 74 3e 11 80    	cmp    0x80113e74,%eax
+8010397d:	74 29                	je     801039a8 <rpush+0x58>
+  rqueue.queue[rqueue.e]=p;
+8010397f:	8b 55 08             	mov    0x8(%ebp),%edx
+  release(&rqueue.lock);
+80103982:	83 ec 0c             	sub    $0xc,%esp
+  (rqueue.e)%=NPROC;
+80103985:	a3 78 3e 11 80       	mov    %eax,0x80113e78
+  release(&rqueue.lock);
+8010398a:	68 40 3d 11 80       	push   $0x80113d40
+  rqueue.queue[rqueue.e]=p;
+8010398f:	89 14 8d 74 3d 11 80 	mov    %edx,-0x7feec28c(,%ecx,4)
+  release(&rqueue.lock);
+80103996:	e8 85 16 00 00       	call   80105020 <release>
+  return 1;
+8010399b:	83 c4 10             	add    $0x10,%esp
+8010399e:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+801039a3:	c9                   	leave  
+801039a4:	c3                   	ret    
+801039a5:	8d 76 00             	lea    0x0(%esi),%esi
+  	release(&rqueue.lock);
+801039a8:	83 ec 0c             	sub    $0xc,%esp
+801039ab:	68 40 3d 11 80       	push   $0x80113d40
+801039b0:	e8 6b 16 00 00       	call   80105020 <release>
+	return 0;
+801039b5:	83 c4 10             	add    $0x10,%esp
+801039b8:	31 c0                	xor    %eax,%eax
+}
+801039ba:	c9                   	leave  
+801039bb:	c3                   	ret    
+801039bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801039c0 <rpush2>:
+int rpush2(struct proc* p){
+801039c0:	55                   	push   %ebp
+801039c1:	89 e5                	mov    %esp,%ebp
+801039c3:	83 ec 14             	sub    $0x14,%esp
+	acquire(&rqueue2.lock);
+801039c6:	68 80 3e 11 80       	push   $0x80113e80
+801039cb:	e8 90 15 00 00       	call   80104f60 <acquire>
+	if((rqueue2.e+1)%NPROC==rqueue2.s){
+801039d0:	8b 0d b8 3f 11 80    	mov    0x80113fb8,%ecx
+801039d6:	83 c4 10             	add    $0x10,%esp
+801039d9:	8d 41 01             	lea    0x1(%ecx),%eax
+801039dc:	99                   	cltd   
+801039dd:	c1 ea 1a             	shr    $0x1a,%edx
+801039e0:	01 d0                	add    %edx,%eax
+801039e2:	83 e0 3f             	and    $0x3f,%eax
+801039e5:	29 d0                	sub    %edx,%eax
+801039e7:	3b 05 b4 3f 11 80    	cmp    0x80113fb4,%eax
+801039ed:	74 29                	je     80103a18 <rpush2+0x58>
+	rqueue2.queue[rqueue2.e]=p;
+801039ef:	8b 55 08             	mov    0x8(%ebp),%edx
+	release(&rqueue2.lock);
+801039f2:	83 ec 0c             	sub    $0xc,%esp
+	(rqueue2.e)%=NPROC;
+801039f5:	a3 b8 3f 11 80       	mov    %eax,0x80113fb8
+	release(&rqueue2.lock);
+801039fa:	68 80 3e 11 80       	push   $0x80113e80
+	rqueue2.queue[rqueue2.e]=p;
+801039ff:	89 14 8d b4 3e 11 80 	mov    %edx,-0x7feec14c(,%ecx,4)
+	release(&rqueue2.lock);
+80103a06:	e8 15 16 00 00       	call   80105020 <release>
+	return 1;
+80103a0b:	83 c4 10             	add    $0x10,%esp
+80103a0e:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+80103a13:	c9                   	leave  
+80103a14:	c3                   	ret    
+80103a15:	8d 76 00             	lea    0x0(%esi),%esi
+		release(&rqueue2.lock);
+80103a18:	83 ec 0c             	sub    $0xc,%esp
+80103a1b:	68 80 3e 11 80       	push   $0x80113e80
+80103a20:	e8 fb 15 00 00       	call   80105020 <release>
+		return 0;
+80103a25:	83 c4 10             	add    $0x10,%esp
+80103a28:	31 c0                	xor    %eax,%eax
+}
+80103a2a:	c9                   	leave  
+80103a2b:	c3                   	ret    
+80103a2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80103a30 <pinit>:
+{
+80103a30:	55                   	push   %ebp
+80103a31:	89 e5                	mov    %esp,%ebp
+80103a33:	83 ec 10             	sub    $0x10,%esp
   initlock(&ptable.lock, "ptable");
-80103726:	68 75 78 10 80       	push   $0x80107875
-8010372b:	68 20 2d 11 80       	push   $0x80112d20
-80103730:	e8 0b 0e 00 00       	call   80104540 <initlock>
-}
-80103735:	83 c4 10             	add    $0x10,%esp
-80103738:	c9                   	leave  
-80103739:	c3                   	ret    
-8010373a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80103740 <mycpu>:
-{
-80103740:	55                   	push   %ebp
-80103741:	89 e5                	mov    %esp,%ebp
-80103743:	56                   	push   %esi
-80103744:	53                   	push   %ebx
+80103a36:	68 b5 81 10 80       	push   $0x801081b5
+80103a3b:	68 c0 3f 11 80       	push   $0x80113fc0
+80103a40:	e8 db 13 00 00       	call   80104e20 <initlock>
+  initlock(&rqueue2.lock, "rqueue2");
+80103a45:	58                   	pop    %eax
+80103a46:	5a                   	pop    %edx
+80103a47:	68 bc 81 10 80       	push   $0x801081bc
+80103a4c:	68 80 3e 11 80       	push   $0x80113e80
+80103a51:	e8 ca 13 00 00       	call   80104e20 <initlock>
+  initlock(&rqueue.lock, "rqueue");
+80103a56:	59                   	pop    %ecx
+80103a57:	58                   	pop    %eax
+80103a58:	68 c4 81 10 80       	push   $0x801081c4
+80103a5d:	68 40 3d 11 80       	push   $0x80113d40
+80103a62:	e8 b9 13 00 00       	call   80104e20 <initlock>
+  initlock(&sleeping_channel_lock, "sleeping_channel");
+80103a67:	58                   	pop    %eax
+80103a68:	5a                   	pop    %edx
+80103a69:	68 cb 81 10 80       	push   $0x801081cb
+80103a6e:	68 a0 68 11 80       	push   $0x801168a0
+80103a73:	e8 a8 13 00 00       	call   80104e20 <initlock>
+}
+80103a78:	83 c4 10             	add    $0x10,%esp
+80103a7b:	c9                   	leave  
+80103a7c:	c3                   	ret    
+80103a7d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80103a80 <mycpu>:
+{
+80103a80:	55                   	push   %ebp
+80103a81:	89 e5                	mov    %esp,%ebp
+80103a83:	56                   	push   %esi
+80103a84:	53                   	push   %ebx
   asm volatile("pushfl; popl %0" : "=r" (eflags));
-80103745:	9c                   	pushf  
-80103746:	58                   	pop    %eax
+80103a85:	9c                   	pushf  
+80103a86:	58                   	pop    %eax
   if(readeflags()&FL_IF)
-80103747:	f6 c4 02             	test   $0x2,%ah
-8010374a:	75 5e                	jne    801037aa <mycpu+0x6a>
+80103a87:	f6 c4 02             	test   $0x2,%ah
+80103a8a:	75 5e                	jne    80103aea <mycpu+0x6a>
   apicid = lapicid();
-8010374c:	e8 df ef ff ff       	call   80102730 <lapicid>
+80103a8c:	e8 1f ed ff ff       	call   801027b0 <lapicid>
   for (i = 0; i < ncpu; ++i) {
-80103751:	8b 35 00 2d 11 80    	mov    0x80112d00,%esi
-80103757:	85 f6                	test   %esi,%esi
-80103759:	7e 42                	jle    8010379d <mycpu+0x5d>
+80103a91:	8b 35 20 3d 11 80    	mov    0x80113d20,%esi
+80103a97:	85 f6                	test   %esi,%esi
+80103a99:	7e 42                	jle    80103add <mycpu+0x5d>
     if (cpus[i].apicid == apicid)
-8010375b:	0f b6 15 80 27 11 80 	movzbl 0x80112780,%edx
-80103762:	39 d0                	cmp    %edx,%eax
-80103764:	74 30                	je     80103796 <mycpu+0x56>
-80103766:	b9 30 28 11 80       	mov    $0x80112830,%ecx
+80103a9b:	0f b6 15 a0 37 11 80 	movzbl 0x801137a0,%edx
+80103aa2:	39 d0                	cmp    %edx,%eax
+80103aa4:	74 30                	je     80103ad6 <mycpu+0x56>
+80103aa6:	b9 50 38 11 80       	mov    $0x80113850,%ecx
   for (i = 0; i < ncpu; ++i) {
-8010376b:	31 d2                	xor    %edx,%edx
-8010376d:	8d 76 00             	lea    0x0(%esi),%esi
-80103770:	83 c2 01             	add    $0x1,%edx
-80103773:	39 f2                	cmp    %esi,%edx
-80103775:	74 26                	je     8010379d <mycpu+0x5d>
+80103aab:	31 d2                	xor    %edx,%edx
+80103aad:	8d 76 00             	lea    0x0(%esi),%esi
+80103ab0:	83 c2 01             	add    $0x1,%edx
+80103ab3:	39 f2                	cmp    %esi,%edx
+80103ab5:	74 26                	je     80103add <mycpu+0x5d>
     if (cpus[i].apicid == apicid)
-80103777:	0f b6 19             	movzbl (%ecx),%ebx
-8010377a:	81 c1 b0 00 00 00    	add    $0xb0,%ecx
-80103780:	39 c3                	cmp    %eax,%ebx
-80103782:	75 ec                	jne    80103770 <mycpu+0x30>
-80103784:	69 c2 b0 00 00 00    	imul   $0xb0,%edx,%eax
-8010378a:	05 80 27 11 80       	add    $0x80112780,%eax
-}
-8010378f:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80103792:	5b                   	pop    %ebx
-80103793:	5e                   	pop    %esi
-80103794:	5d                   	pop    %ebp
-80103795:	c3                   	ret    
+80103ab7:	0f b6 19             	movzbl (%ecx),%ebx
+80103aba:	81 c1 b0 00 00 00    	add    $0xb0,%ecx
+80103ac0:	39 c3                	cmp    %eax,%ebx
+80103ac2:	75 ec                	jne    80103ab0 <mycpu+0x30>
+80103ac4:	69 c2 b0 00 00 00    	imul   $0xb0,%edx,%eax
+80103aca:	05 a0 37 11 80       	add    $0x801137a0,%eax
+}
+80103acf:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103ad2:	5b                   	pop    %ebx
+80103ad3:	5e                   	pop    %esi
+80103ad4:	5d                   	pop    %ebp
+80103ad5:	c3                   	ret    
     if (cpus[i].apicid == apicid)
-80103796:	b8 80 27 11 80       	mov    $0x80112780,%eax
+80103ad6:	b8 a0 37 11 80       	mov    $0x801137a0,%eax
       return &cpus[i];
-8010379b:	eb f2                	jmp    8010378f <mycpu+0x4f>
+80103adb:	eb f2                	jmp    80103acf <mycpu+0x4f>
   panic("unknown apicid\n");
-8010379d:	83 ec 0c             	sub    $0xc,%esp
-801037a0:	68 7c 78 10 80       	push   $0x8010787c
-801037a5:	e8 e6 cb ff ff       	call   80100390 <panic>
+80103add:	83 ec 0c             	sub    $0xc,%esp
+80103ae0:	68 dc 81 10 80       	push   $0x801081dc
+80103ae5:	e8 a6 c8 ff ff       	call   80100390 <panic>
     panic("mycpu called with interrupts enabled\n");
-801037aa:	83 ec 0c             	sub    $0xc,%esp
-801037ad:	68 58 79 10 80       	push   $0x80107958
-801037b2:	e8 d9 cb ff ff       	call   80100390 <panic>
-801037b7:	89 f6                	mov    %esi,%esi
-801037b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80103aea:	83 ec 0c             	sub    $0xc,%esp
+80103aed:	68 60 83 10 80       	push   $0x80108360
+80103af2:	e8 99 c8 ff ff       	call   80100390 <panic>
+80103af7:	89 f6                	mov    %esi,%esi
+80103af9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-801037c0 <cpuid>:
+80103b00 <cpuid>:
 cpuid() {
-801037c0:	55                   	push   %ebp
-801037c1:	89 e5                	mov    %esp,%ebp
-801037c3:	83 ec 08             	sub    $0x8,%esp
+80103b00:	55                   	push   %ebp
+80103b01:	89 e5                	mov    %esp,%ebp
+80103b03:	83 ec 08             	sub    $0x8,%esp
   return mycpu()-cpus;
-801037c6:	e8 75 ff ff ff       	call   80103740 <mycpu>
-801037cb:	2d 80 27 11 80       	sub    $0x80112780,%eax
+80103b06:	e8 75 ff ff ff       	call   80103a80 <mycpu>
+80103b0b:	2d a0 37 11 80       	sub    $0x801137a0,%eax
 }
-801037d0:	c9                   	leave  
+80103b10:	c9                   	leave  
   return mycpu()-cpus;
-801037d1:	c1 f8 04             	sar    $0x4,%eax
-801037d4:	69 c0 a3 8b 2e ba    	imul   $0xba2e8ba3,%eax,%eax
+80103b11:	c1 f8 04             	sar    $0x4,%eax
+80103b14:	69 c0 a3 8b 2e ba    	imul   $0xba2e8ba3,%eax,%eax
+}
+80103b1a:	c3                   	ret    
+80103b1b:	90                   	nop
+80103b1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80103b20 <proc_write>:
+int proc_write(int fd, char *p, int n){
+80103b20:	55                   	push   %ebp
+80103b21:	89 e5                	mov    %esp,%ebp
+80103b23:	57                   	push   %edi
+80103b24:	56                   	push   %esi
+80103b25:	53                   	push   %ebx
+80103b26:	83 ec 1c             	sub    $0x1c,%esp
+80103b29:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80103b2c:	8b 75 0c             	mov    0xc(%ebp),%esi
+80103b2f:	8b 7d 10             	mov    0x10(%ebp),%edi
+  if(fd>= NOFILE || fd<0|| (f=myproc()->ofile[fd])== 0)return -1;
+80103b32:	83 fb 0f             	cmp    $0xf,%ebx
+80103b35:	77 39                	ja     80103b70 <proc_write+0x50>
+  pushcli();
+80103b37:	e8 54 13 00 00       	call   80104e90 <pushcli>
+  c = mycpu();
+80103b3c:	e8 3f ff ff ff       	call   80103a80 <mycpu>
+  p = c->proc;
+80103b41:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
+80103b47:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  popcli();
+80103b4a:	e8 81 13 00 00       	call   80104ed0 <popcli>
+  if(fd>= NOFILE || fd<0|| (f=myproc()->ofile[fd])== 0)return -1;
+80103b4f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80103b52:	8b 44 98 28          	mov    0x28(%eax,%ebx,4),%eax
+80103b56:	85 c0                	test   %eax,%eax
+80103b58:	74 16                	je     80103b70 <proc_write+0x50>
+  return filewrite(f, p, n);
+80103b5a:	89 7d 10             	mov    %edi,0x10(%ebp)
+80103b5d:	89 75 0c             	mov    %esi,0xc(%ebp)
+80103b60:	89 45 08             	mov    %eax,0x8(%ebp)
+}
+80103b63:	83 c4 1c             	add    $0x1c,%esp
+80103b66:	5b                   	pop    %ebx
+80103b67:	5e                   	pop    %esi
+80103b68:	5f                   	pop    %edi
+80103b69:	5d                   	pop    %ebp
+  return filewrite(f, p, n);
+80103b6a:	e9 81 d4 ff ff       	jmp    80100ff0 <filewrite>
+80103b6f:	90                   	nop
+}
+80103b70:	83 c4 1c             	add    $0x1c,%esp
+80103b73:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80103b78:	5b                   	pop    %ebx
+80103b79:	5e                   	pop    %esi
+80103b7a:	5f                   	pop    %edi
+80103b7b:	5d                   	pop    %ebp
+80103b7c:	c3                   	ret    
+80103b7d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80103b80 <proc_close>:
+int proc_close(int fd){
+80103b80:	55                   	push   %ebp
+80103b81:	89 e5                	mov    %esp,%ebp
+80103b83:	57                   	push   %edi
+80103b84:	56                   	push   %esi
+80103b85:	53                   	push   %ebx
+80103b86:	83 ec 0c             	sub    $0xc,%esp
+80103b89:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)return -1;
+80103b8c:	83 fb 0f             	cmp    $0xf,%ebx
+80103b8f:	77 57                	ja     80103be8 <proc_close+0x68>
+  pushcli();
+80103b91:	e8 fa 12 00 00       	call   80104e90 <pushcli>
+  c = mycpu();
+80103b96:	e8 e5 fe ff ff       	call   80103a80 <mycpu>
+  p = c->proc;
+80103b9b:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)return -1;
+80103ba1:	83 c3 08             	add    $0x8,%ebx
+  popcli();
+80103ba4:	e8 27 13 00 00       	call   80104ed0 <popcli>
+  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)return -1;
+80103ba9:	8b 74 9e 08          	mov    0x8(%esi,%ebx,4),%esi
+80103bad:	85 f6                	test   %esi,%esi
+80103baf:	74 37                	je     80103be8 <proc_close+0x68>
+  pushcli();
+80103bb1:	e8 da 12 00 00       	call   80104e90 <pushcli>
+  c = mycpu();
+80103bb6:	e8 c5 fe ff ff       	call   80103a80 <mycpu>
+  p = c->proc;
+80103bbb:	8b b8 ac 00 00 00    	mov    0xac(%eax),%edi
+  popcli();
+80103bc1:	e8 0a 13 00 00       	call   80104ed0 <popcli>
+  fileclose(f);
+80103bc6:	83 ec 0c             	sub    $0xc,%esp
+  myproc()->ofile[fd] = 0;
+80103bc9:	c7 44 9f 08 00 00 00 	movl   $0x0,0x8(%edi,%ebx,4)
+80103bd0:	00 
+  fileclose(f);
+80103bd1:	56                   	push   %esi
+80103bd2:	e8 69 d2 ff ff       	call   80100e40 <fileclose>
+  return 0;
+80103bd7:	83 c4 10             	add    $0x10,%esp
+80103bda:	31 c0                	xor    %eax,%eax
+}
+80103bdc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103bdf:	5b                   	pop    %ebx
+80103be0:	5e                   	pop    %esi
+80103be1:	5f                   	pop    %edi
+80103be2:	5d                   	pop    %ebp
+80103be3:	c3                   	ret    
+80103be4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)return -1;
+80103be8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80103bed:	eb ed                	jmp    80103bdc <proc_close+0x5c>
+80103bef:	90                   	nop
+
+80103bf0 <proc_read>:
+int proc_read(int fd, int n, char *p){
+80103bf0:	55                   	push   %ebp
+80103bf1:	89 e5                	mov    %esp,%ebp
+80103bf3:	57                   	push   %edi
+80103bf4:	56                   	push   %esi
+80103bf5:	53                   	push   %ebx
+80103bf6:	83 ec 1c             	sub    $0x1c,%esp
+80103bf9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80103bfc:	8b 7d 0c             	mov    0xc(%ebp),%edi
+80103bff:	8b 75 10             	mov    0x10(%ebp),%esi
+  if(fd >= NOFILE|| fd<0 || (f=myproc()->ofile[fd]) == 0)return -1;
+80103c02:	83 fb 0f             	cmp    $0xf,%ebx
+80103c05:	77 39                	ja     80103c40 <proc_read+0x50>
+  pushcli();
+80103c07:	e8 84 12 00 00       	call   80104e90 <pushcli>
+  c = mycpu();
+80103c0c:	e8 6f fe ff ff       	call   80103a80 <mycpu>
+  p = c->proc;
+80103c11:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
+80103c17:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  popcli();
+80103c1a:	e8 b1 12 00 00       	call   80104ed0 <popcli>
+  if(fd >= NOFILE|| fd<0 || (f=myproc()->ofile[fd]) == 0)return -1;
+80103c1f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80103c22:	8b 44 98 28          	mov    0x28(%eax,%ebx,4),%eax
+80103c26:	85 c0                	test   %eax,%eax
+80103c28:	74 16                	je     80103c40 <proc_read+0x50>
+  return fileread(f, p, n);
+80103c2a:	89 7d 10             	mov    %edi,0x10(%ebp)
+80103c2d:	89 75 0c             	mov    %esi,0xc(%ebp)
+80103c30:	89 45 08             	mov    %eax,0x8(%ebp)
+}
+80103c33:	83 c4 1c             	add    $0x1c,%esp
+80103c36:	5b                   	pop    %ebx
+80103c37:	5e                   	pop    %esi
+80103c38:	5f                   	pop    %edi
+80103c39:	5d                   	pop    %ebp
+  return fileread(f, p, n);
+80103c3a:	e9 21 d3 ff ff       	jmp    80100f60 <fileread>
+80103c3f:	90                   	nop
 }
-801037da:	c3                   	ret    
-801037db:	90                   	nop
-801037dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103c40:	83 c4 1c             	add    $0x1c,%esp
+80103c43:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80103c48:	5b                   	pop    %ebx
+80103c49:	5e                   	pop    %esi
+80103c4a:	5f                   	pop    %edi
+80103c4b:	5d                   	pop    %ebp
+80103c4c:	c3                   	ret    
+80103c4d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80103c50 <proc_open>:
+int proc_open(char *path, int omode){
+80103c50:	55                   	push   %ebp
+80103c51:	89 e5                	mov    %esp,%ebp
+80103c53:	57                   	push   %edi
+80103c54:	56                   	push   %esi
+80103c55:	53                   	push   %ebx
+80103c56:	83 ec 2c             	sub    $0x2c,%esp
+80103c59:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  begin_op();
+80103c5c:	e8 bf ef ff ff       	call   80102c20 <begin_op>
+  if(omode & O_CREATE){
+80103c61:	f7 45 0c 00 02 00 00 	testl  $0x200,0xc(%ebp)
+80103c68:	74 76                	je     80103ce0 <proc_open+0x90>
+  if((dp = nameiparent(path, name)) == 0)
+80103c6a:	8d 7d da             	lea    -0x26(%ebp),%edi
+80103c6d:	83 ec 08             	sub    $0x8,%esp
+80103c70:	57                   	push   %edi
+80103c71:	53                   	push   %ebx
+80103c72:	e8 89 e2 ff ff       	call   80101f00 <nameiparent>
+80103c77:	83 c4 10             	add    $0x10,%esp
+80103c7a:	85 c0                	test   %eax,%eax
+80103c7c:	89 c6                	mov    %eax,%esi
+80103c7e:	74 49                	je     80103cc9 <proc_open+0x79>
+  ilock(dp);
+80103c80:	83 ec 0c             	sub    $0xc,%esp
+80103c83:	50                   	push   %eax
+80103c84:	e8 f7 d9 ff ff       	call   80101680 <ilock>
+  if((ip = dirlookup(dp, name, 0)) != 0){
+80103c89:	83 c4 0c             	add    $0xc,%esp
+80103c8c:	6a 00                	push   $0x0
+80103c8e:	57                   	push   %edi
+80103c8f:	56                   	push   %esi
+80103c90:	e8 1b df ff ff       	call   80101bb0 <dirlookup>
+80103c95:	83 c4 10             	add    $0x10,%esp
+80103c98:	85 c0                	test   %eax,%eax
+80103c9a:	89 c3                	mov    %eax,%ebx
+80103c9c:	0f 84 fe 00 00 00    	je     80103da0 <proc_open+0x150>
+    iunlockput(dp);
+80103ca2:	83 ec 0c             	sub    $0xc,%esp
+80103ca5:	56                   	push   %esi
+80103ca6:	e8 65 dc ff ff       	call   80101910 <iunlockput>
+    ilock(ip);
+80103cab:	89 1c 24             	mov    %ebx,(%esp)
+80103cae:	e8 cd d9 ff ff       	call   80101680 <ilock>
+    if(type == T_FILE && ip->type == T_FILE)
+80103cb3:	83 c4 10             	add    $0x10,%esp
+80103cb6:	66 83 7b 50 02       	cmpw   $0x2,0x50(%ebx)
+80103cbb:	74 53                	je     80103d10 <proc_open+0xc0>
+    iunlockput(ip);
+80103cbd:	83 ec 0c             	sub    $0xc,%esp
+80103cc0:	53                   	push   %ebx
+80103cc1:	e8 4a dc ff ff       	call   80101910 <iunlockput>
+80103cc6:	83 c4 10             	add    $0x10,%esp
+      end_op();
+80103cc9:	e8 c2 ef ff ff       	call   80102c90 <end_op>
+      return -1;
+80103cce:	be ff ff ff ff       	mov    $0xffffffff,%esi
+80103cd3:	e9 ba 00 00 00       	jmp    80103d92 <proc_open+0x142>
+80103cd8:	90                   	nop
+80103cd9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if((ip = namei(path)) == 0){
+80103ce0:	83 ec 0c             	sub    $0xc,%esp
+80103ce3:	53                   	push   %ebx
+80103ce4:	e8 f7 e1 ff ff       	call   80101ee0 <namei>
+80103ce9:	83 c4 10             	add    $0x10,%esp
+80103cec:	85 c0                	test   %eax,%eax
+80103cee:	89 c3                	mov    %eax,%ebx
+80103cf0:	74 d7                	je     80103cc9 <proc_open+0x79>
+    ilock(ip);
+80103cf2:	83 ec 0c             	sub    $0xc,%esp
+80103cf5:	50                   	push   %eax
+80103cf6:	e8 85 d9 ff ff       	call   80101680 <ilock>
+    if(ip->type == T_DIR && omode != O_RDONLY){
+80103cfb:	83 c4 10             	add    $0x10,%esp
+80103cfe:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80103d03:	75 0b                	jne    80103d10 <proc_open+0xc0>
+80103d05:	8b 55 0c             	mov    0xc(%ebp),%edx
+80103d08:	85 d2                	test   %edx,%edx
+80103d0a:	0f 85 fc 00 00 00    	jne    80103e0c <proc_open+0x1bc>
+  if((f = filealloc()) == 0 || (fd = proc_fdalloc(f)) < 0){
+80103d10:	e8 6b d0 ff ff       	call   80100d80 <filealloc>
+80103d15:	85 c0                	test   %eax,%eax
+80103d17:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+80103d1a:	0f 84 ec 00 00 00    	je     80103e0c <proc_open+0x1bc>
+  pushcli();
+80103d20:	e8 6b 11 00 00       	call   80104e90 <pushcli>
+  for(fd = 0; fd < NOFILE; fd++){
+80103d25:	31 f6                	xor    %esi,%esi
+  c = mycpu();
+80103d27:	e8 54 fd ff ff       	call   80103a80 <mycpu>
+  p = c->proc;
+80103d2c:	8b b8 ac 00 00 00    	mov    0xac(%eax),%edi
+  popcli();
+80103d32:	e8 99 11 00 00       	call   80104ed0 <popcli>
+  for(fd = 0; fd < NOFILE; fd++){
+80103d37:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+80103d3a:	eb 10                	jmp    80103d4c <proc_open+0xfc>
+80103d3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103d40:	83 c6 01             	add    $0x1,%esi
+80103d43:	83 fe 10             	cmp    $0x10,%esi
+80103d46:	0f 84 b4 00 00 00    	je     80103e00 <proc_open+0x1b0>
+    if(curproc->ofile[fd] == 0){
+80103d4c:	8b 44 b7 28          	mov    0x28(%edi,%esi,4),%eax
+80103d50:	85 c0                	test   %eax,%eax
+80103d52:	75 ec                	jne    80103d40 <proc_open+0xf0>
+  iunlock(ip);
+80103d54:	83 ec 0c             	sub    $0xc,%esp
+      curproc->ofile[fd] = f;
+80103d57:	89 54 b7 28          	mov    %edx,0x28(%edi,%esi,4)
+80103d5b:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  iunlock(ip);
+80103d5e:	53                   	push   %ebx
+80103d5f:	e8 fc d9 ff ff       	call   80101760 <iunlock>
+  end_op();
+80103d64:	e8 27 ef ff ff       	call   80102c90 <end_op>
+  f->readable = !(omode & O_WRONLY);
+80103d69:	8b 45 0c             	mov    0xc(%ebp),%eax
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+80103d6c:	83 c4 10             	add    $0x10,%esp
+  f->ip = ip;
+80103d6f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  f->readable = !(omode & O_WRONLY);
+80103d72:	f7 d0                	not    %eax
+  f->ip = ip;
+80103d74:	89 5a 10             	mov    %ebx,0x10(%edx)
+  f->off = 0;
+80103d77:	c7 42 14 00 00 00 00 	movl   $0x0,0x14(%edx)
+  f->readable = !(omode & O_WRONLY);
+80103d7e:	83 e0 01             	and    $0x1,%eax
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+80103d81:	f6 45 0c 03          	testb  $0x3,0xc(%ebp)
+  f->type = FD_INODE;
+80103d85:	c7 02 02 00 00 00    	movl   $0x2,(%edx)
+  f->readable = !(omode & O_WRONLY);
+80103d8b:	88 42 08             	mov    %al,0x8(%edx)
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+80103d8e:	0f 95 42 09          	setne  0x9(%edx)
+}
+80103d92:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103d95:	89 f0                	mov    %esi,%eax
+80103d97:	5b                   	pop    %ebx
+80103d98:	5e                   	pop    %esi
+80103d99:	5f                   	pop    %edi
+80103d9a:	5d                   	pop    %ebp
+80103d9b:	c3                   	ret    
+80103d9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  if((ip = ialloc(dp->dev, type)) == 0)
+80103da0:	83 ec 08             	sub    $0x8,%esp
+80103da3:	6a 02                	push   $0x2
+80103da5:	ff 36                	pushl  (%esi)
+80103da7:	e8 64 d7 ff ff       	call   80101510 <ialloc>
+80103dac:	83 c4 10             	add    $0x10,%esp
+80103daf:	85 c0                	test   %eax,%eax
+80103db1:	89 c3                	mov    %eax,%ebx
+80103db3:	74 7f                	je     80103e34 <proc_open+0x1e4>
+  ilock(ip);
+80103db5:	83 ec 0c             	sub    $0xc,%esp
+80103db8:	50                   	push   %eax
+80103db9:	e8 c2 d8 ff ff       	call   80101680 <ilock>
+  ip->minor = minor;
+80103dbe:	b9 01 00 00 00       	mov    $0x1,%ecx
+  ip->major = major;
+80103dc3:	c7 43 52 00 00 00 00 	movl   $0x0,0x52(%ebx)
+  ip->minor = minor;
+80103dca:	66 89 4b 56          	mov    %cx,0x56(%ebx)
+  iupdate(ip);
+80103dce:	89 1c 24             	mov    %ebx,(%esp)
+80103dd1:	e8 fa d7 ff ff       	call   801015d0 <iupdate>
+  if(dirlink(dp, name, ip->inum) < 0)panic("create: dirlink");
+80103dd6:	83 c4 0c             	add    $0xc,%esp
+80103dd9:	ff 73 04             	pushl  0x4(%ebx)
+80103ddc:	57                   	push   %edi
+80103ddd:	56                   	push   %esi
+80103dde:	e8 3d e0 ff ff       	call   80101e20 <dirlink>
+80103de3:	83 c4 10             	add    $0x10,%esp
+80103de6:	85 c0                	test   %eax,%eax
+80103de8:	78 3d                	js     80103e27 <proc_open+0x1d7>
+  iunlockput(dp);
+80103dea:	83 ec 0c             	sub    $0xc,%esp
+80103ded:	56                   	push   %esi
+80103dee:	e8 1d db ff ff       	call   80101910 <iunlockput>
+80103df3:	83 c4 10             	add    $0x10,%esp
+80103df6:	e9 15 ff ff ff       	jmp    80103d10 <proc_open+0xc0>
+80103dfb:	90                   	nop
+80103dfc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(f)fileclose(f);
+80103e00:	83 ec 0c             	sub    $0xc,%esp
+80103e03:	52                   	push   %edx
+80103e04:	e8 37 d0 ff ff       	call   80100e40 <fileclose>
+80103e09:	83 c4 10             	add    $0x10,%esp
+    iunlockput(ip);
+80103e0c:	83 ec 0c             	sub    $0xc,%esp
+    return -1;
+80103e0f:	be ff ff ff ff       	mov    $0xffffffff,%esi
+    iunlockput(ip);
+80103e14:	53                   	push   %ebx
+80103e15:	e8 f6 da ff ff       	call   80101910 <iunlockput>
+    end_op();
+80103e1a:	e8 71 ee ff ff       	call   80102c90 <end_op>
+    return -1;
+80103e1f:	83 c4 10             	add    $0x10,%esp
+80103e22:	e9 6b ff ff ff       	jmp    80103d92 <proc_open+0x142>
+  if(dirlink(dp, name, ip->inum) < 0)panic("create: dirlink");
+80103e27:	83 ec 0c             	sub    $0xc,%esp
+80103e2a:	68 fb 81 10 80       	push   $0x801081fb
+80103e2f:	e8 5c c5 ff ff       	call   80100390 <panic>
+    panic("create: ialloc");
+80103e34:	83 ec 0c             	sub    $0xc,%esp
+80103e37:	68 ec 81 10 80       	push   $0x801081ec
+80103e3c:	e8 4f c5 ff ff       	call   80100390 <panic>
+80103e41:	eb 0d                	jmp    80103e50 <myproc>
+80103e43:	90                   	nop
+80103e44:	90                   	nop
+80103e45:	90                   	nop
+80103e46:	90                   	nop
+80103e47:	90                   	nop
+80103e48:	90                   	nop
+80103e49:	90                   	nop
+80103e4a:	90                   	nop
+80103e4b:	90                   	nop
+80103e4c:	90                   	nop
+80103e4d:	90                   	nop
+80103e4e:	90                   	nop
+80103e4f:	90                   	nop
 
-801037e0 <myproc>:
+80103e50 <myproc>:
 myproc(void) {
-801037e0:	55                   	push   %ebp
-801037e1:	89 e5                	mov    %esp,%ebp
-801037e3:	53                   	push   %ebx
-801037e4:	83 ec 04             	sub    $0x4,%esp
+80103e50:	55                   	push   %ebp
+80103e51:	89 e5                	mov    %esp,%ebp
+80103e53:	53                   	push   %ebx
+80103e54:	83 ec 04             	sub    $0x4,%esp
   pushcli();
-801037e7:	e8 c4 0d 00 00       	call   801045b0 <pushcli>
+80103e57:	e8 34 10 00 00       	call   80104e90 <pushcli>
   c = mycpu();
-801037ec:	e8 4f ff ff ff       	call   80103740 <mycpu>
+80103e5c:	e8 1f fc ff ff       	call   80103a80 <mycpu>
   p = c->proc;
-801037f1:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80103e61:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-801037f7:	e8 f4 0d 00 00       	call   801045f0 <popcli>
+80103e67:	e8 64 10 00 00       	call   80104ed0 <popcli>
 }
-801037fc:	83 c4 04             	add    $0x4,%esp
-801037ff:	89 d8                	mov    %ebx,%eax
-80103801:	5b                   	pop    %ebx
-80103802:	5d                   	pop    %ebp
-80103803:	c3                   	ret    
-80103804:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-8010380a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
-
-80103810 <userinit>:
-{
-80103810:	55                   	push   %ebp
-80103811:	89 e5                	mov    %esp,%ebp
-80103813:	53                   	push   %ebx
-80103814:	83 ec 04             	sub    $0x4,%esp
+80103e6c:	83 c4 04             	add    $0x4,%esp
+80103e6f:	89 d8                	mov    %ebx,%eax
+80103e71:	5b                   	pop    %ebx
+80103e72:	5d                   	pop    %ebp
+80103e73:	c3                   	ret    
+80103e74:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80103e7a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+80103e80 <userinit>:
+{
+80103e80:	55                   	push   %ebp
+80103e81:	89 e5                	mov    %esp,%ebp
+80103e83:	53                   	push   %ebx
+80103e84:	83 ec 10             	sub    $0x10,%esp
+  acquire(&rqueue.lock);
+80103e87:	68 40 3d 11 80       	push   $0x80113d40
+80103e8c:	e8 cf 10 00 00       	call   80104f60 <acquire>
+  release(&rqueue.lock);
+80103e91:	c7 04 24 40 3d 11 80 	movl   $0x80113d40,(%esp)
+  rqueue.s=0;
+80103e98:	c7 05 74 3e 11 80 00 	movl   $0x0,0x80113e74
+80103e9f:	00 00 00 
+  rqueue.e=0;
+80103ea2:	c7 05 78 3e 11 80 00 	movl   $0x0,0x80113e78
+80103ea9:	00 00 00 
+  release(&rqueue.lock);
+80103eac:	e8 6f 11 00 00       	call   80105020 <release>
+  acquire(&rqueue2.lock);
+80103eb1:	c7 04 24 80 3e 11 80 	movl   $0x80113e80,(%esp)
+80103eb8:	e8 a3 10 00 00       	call   80104f60 <acquire>
+  release(&rqueue2.lock);
+80103ebd:	c7 04 24 80 3e 11 80 	movl   $0x80113e80,(%esp)
+  rqueue2.s=0;
+80103ec4:	c7 05 b4 3f 11 80 00 	movl   $0x0,0x80113fb4
+80103ecb:	00 00 00 
+  rqueue2.e=0;
+80103ece:	c7 05 b8 3f 11 80 00 	movl   $0x0,0x80113fb8
+80103ed5:	00 00 00 
+  release(&rqueue2.lock);
+80103ed8:	e8 43 11 00 00       	call   80105020 <release>
   p = allocproc();
-80103817:	e8 e4 fd ff ff       	call   80103600 <allocproc>
-8010381c:	89 c3                	mov    %eax,%ebx
+80103edd:	e8 9e f7 ff ff       	call   80103680 <allocproc>
+80103ee2:	89 c3                	mov    %eax,%ebx
   initproc = p;
-8010381e:	a3 b8 a5 10 80       	mov    %eax,0x8010a5b8
+80103ee4:	a3 c0 b5 10 80       	mov    %eax,0x8010b5c0
   if((p->pgdir = setupkvm()) == 0)
-80103823:	e8 48 38 00 00       	call   80107070 <setupkvm>
-80103828:	85 c0                	test   %eax,%eax
-8010382a:	89 43 04             	mov    %eax,0x4(%ebx)
-8010382d:	0f 84 bd 00 00 00    	je     801038f0 <userinit+0xe0>
+80103ee9:	e8 b2 3a 00 00       	call   801079a0 <setupkvm>
+80103eee:	83 c4 10             	add    $0x10,%esp
+80103ef1:	85 c0                	test   %eax,%eax
+80103ef3:	89 43 04             	mov    %eax,0x4(%ebx)
+80103ef6:	0f 84 bd 00 00 00    	je     80103fb9 <userinit+0x139>
   inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
-80103833:	83 ec 04             	sub    $0x4,%esp
-80103836:	68 2c 00 00 00       	push   $0x2c
-8010383b:	68 60 a4 10 80       	push   $0x8010a460
-80103840:	50                   	push   %eax
-80103841:	e8 0a 35 00 00       	call   80106d50 <inituvm>
+80103efc:	83 ec 04             	sub    $0x4,%esp
+80103eff:	68 2c 00 00 00       	push   $0x2c
+80103f04:	68 60 b4 10 80       	push   $0x8010b460
+80103f09:	50                   	push   %eax
+80103f0a:	e8 01 37 00 00       	call   80107610 <inituvm>
   memset(p->tf, 0, sizeof(*p->tf));
-80103846:	83 c4 0c             	add    $0xc,%esp
+80103f0f:	83 c4 0c             	add    $0xc,%esp
   p->sz = PGSIZE;
-80103849:	c7 03 00 10 00 00    	movl   $0x1000,(%ebx)
+80103f12:	c7 03 00 10 00 00    	movl   $0x1000,(%ebx)
   memset(p->tf, 0, sizeof(*p->tf));
-8010384f:	6a 4c                	push   $0x4c
-80103851:	6a 00                	push   $0x0
-80103853:	ff 73 18             	pushl  0x18(%ebx)
-80103856:	e8 35 0f 00 00       	call   80104790 <memset>
+80103f18:	6a 4c                	push   $0x4c
+80103f1a:	6a 00                	push   $0x0
+80103f1c:	ff 73 18             	pushl  0x18(%ebx)
+80103f1f:	e8 4c 11 00 00       	call   80105070 <memset>
   p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
-8010385b:	8b 43 18             	mov    0x18(%ebx),%eax
-8010385e:	ba 1b 00 00 00       	mov    $0x1b,%edx
+80103f24:	8b 43 18             	mov    0x18(%ebx),%eax
+80103f27:	ba 1b 00 00 00       	mov    $0x1b,%edx
   p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
-80103863:	b9 23 00 00 00       	mov    $0x23,%ecx
+80103f2c:	b9 23 00 00 00       	mov    $0x23,%ecx
   safestrcpy(p->name, "initcode", sizeof(p->name));
-80103868:	83 c4 0c             	add    $0xc,%esp
+80103f31:	83 c4 0c             	add    $0xc,%esp
   p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
-8010386b:	66 89 50 3c          	mov    %dx,0x3c(%eax)
+80103f34:	66 89 50 3c          	mov    %dx,0x3c(%eax)
   p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
-8010386f:	8b 43 18             	mov    0x18(%ebx),%eax
-80103872:	66 89 48 2c          	mov    %cx,0x2c(%eax)
+80103f38:	8b 43 18             	mov    0x18(%ebx),%eax
+80103f3b:	66 89 48 2c          	mov    %cx,0x2c(%eax)
   p->tf->es = p->tf->ds;
-80103876:	8b 43 18             	mov    0x18(%ebx),%eax
-80103879:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
-8010387d:	66 89 50 28          	mov    %dx,0x28(%eax)
+80103f3f:	8b 43 18             	mov    0x18(%ebx),%eax
+80103f42:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
+80103f46:	66 89 50 28          	mov    %dx,0x28(%eax)
   p->tf->ss = p->tf->ds;
-80103881:	8b 43 18             	mov    0x18(%ebx),%eax
-80103884:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
-80103888:	66 89 50 48          	mov    %dx,0x48(%eax)
+80103f4a:	8b 43 18             	mov    0x18(%ebx),%eax
+80103f4d:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
+80103f51:	66 89 50 48          	mov    %dx,0x48(%eax)
   p->tf->eflags = FL_IF;
-8010388c:	8b 43 18             	mov    0x18(%ebx),%eax
-8010388f:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
+80103f55:	8b 43 18             	mov    0x18(%ebx),%eax
+80103f58:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
   p->tf->esp = PGSIZE;
-80103896:	8b 43 18             	mov    0x18(%ebx),%eax
-80103899:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
+80103f5f:	8b 43 18             	mov    0x18(%ebx),%eax
+80103f62:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
   p->tf->eip = 0;  // beginning of initcode.S
-801038a0:	8b 43 18             	mov    0x18(%ebx),%eax
-801038a3:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
+80103f69:	8b 43 18             	mov    0x18(%ebx),%eax
+80103f6c:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
   safestrcpy(p->name, "initcode", sizeof(p->name));
-801038aa:	8d 43 6c             	lea    0x6c(%ebx),%eax
-801038ad:	6a 10                	push   $0x10
-801038af:	68 a5 78 10 80       	push   $0x801078a5
-801038b4:	50                   	push   %eax
-801038b5:	e8 b6 10 00 00       	call   80104970 <safestrcpy>
+80103f73:	8d 43 6c             	lea    0x6c(%ebx),%eax
+80103f76:	6a 10                	push   $0x10
+80103f78:	68 24 82 10 80       	push   $0x80108224
+80103f7d:	50                   	push   %eax
+80103f7e:	e8 cd 12 00 00       	call   80105250 <safestrcpy>
   p->cwd = namei("/");
-801038ba:	c7 04 24 ae 78 10 80 	movl   $0x801078ae,(%esp)
-801038c1:	e8 1a e6 ff ff       	call   80101ee0 <namei>
-801038c6:	89 43 68             	mov    %eax,0x68(%ebx)
+80103f83:	c7 04 24 2d 82 10 80 	movl   $0x8010822d,(%esp)
+80103f8a:	e8 51 df ff ff       	call   80101ee0 <namei>
+80103f8f:	89 43 68             	mov    %eax,0x68(%ebx)
   acquire(&ptable.lock);
-801038c9:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-801038d0:	e8 ab 0d 00 00       	call   80104680 <acquire>
+80103f92:	c7 04 24 c0 3f 11 80 	movl   $0x80113fc0,(%esp)
+80103f99:	e8 c2 0f 00 00       	call   80104f60 <acquire>
   p->state = RUNNABLE;
-801038d5:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+80103f9e:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
   release(&ptable.lock);
-801038dc:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-801038e3:	e8 58 0e 00 00       	call   80104740 <release>
+80103fa5:	c7 04 24 c0 3f 11 80 	movl   $0x80113fc0,(%esp)
+80103fac:	e8 6f 10 00 00       	call   80105020 <release>
 }
-801038e8:	83 c4 10             	add    $0x10,%esp
-801038eb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801038ee:	c9                   	leave  
-801038ef:	c3                   	ret    
+80103fb1:	83 c4 10             	add    $0x10,%esp
+80103fb4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103fb7:	c9                   	leave  
+80103fb8:	c3                   	ret    
     panic("userinit: out of memory?");
-801038f0:	83 ec 0c             	sub    $0xc,%esp
-801038f3:	68 8c 78 10 80       	push   $0x8010788c
-801038f8:	e8 93 ca ff ff       	call   80100390 <panic>
-801038fd:	8d 76 00             	lea    0x0(%esi),%esi
-
-80103900 <growproc>:
-{
-80103900:	55                   	push   %ebp
-80103901:	89 e5                	mov    %esp,%ebp
-80103903:	56                   	push   %esi
-80103904:	53                   	push   %ebx
-80103905:	8b 75 08             	mov    0x8(%ebp),%esi
+80103fb9:	83 ec 0c             	sub    $0xc,%esp
+80103fbc:	68 0b 82 10 80       	push   $0x8010820b
+80103fc1:	e8 ca c3 ff ff       	call   80100390 <panic>
+80103fc6:	8d 76 00             	lea    0x0(%esi),%esi
+80103fc9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80103fd0 <growproc>:
+{
+80103fd0:	55                   	push   %ebp
+80103fd1:	89 e5                	mov    %esp,%ebp
+80103fd3:	56                   	push   %esi
+80103fd4:	53                   	push   %ebx
+80103fd5:	8b 75 08             	mov    0x8(%ebp),%esi
   pushcli();
-80103908:	e8 a3 0c 00 00       	call   801045b0 <pushcli>
+80103fd8:	e8 b3 0e 00 00       	call   80104e90 <pushcli>
   c = mycpu();
-8010390d:	e8 2e fe ff ff       	call   80103740 <mycpu>
+80103fdd:	e8 9e fa ff ff       	call   80103a80 <mycpu>
   p = c->proc;
-80103912:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80103fe2:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103918:	e8 d3 0c 00 00       	call   801045f0 <popcli>
+80103fe8:	e8 e3 0e 00 00       	call   80104ed0 <popcli>
   if(n > 0){
-8010391d:	83 fe 00             	cmp    $0x0,%esi
+80103fed:	83 fe 00             	cmp    $0x0,%esi
   sz = curproc->sz;
-80103920:	8b 03                	mov    (%ebx),%eax
+80103ff0:	8b 03                	mov    (%ebx),%eax
   if(n > 0){
-80103922:	7f 1c                	jg     80103940 <growproc+0x40>
+80103ff2:	7f 1c                	jg     80104010 <growproc+0x40>
   } else if(n < 0){
-80103924:	75 3a                	jne    80103960 <growproc+0x60>
+80103ff4:	75 3a                	jne    80104030 <growproc+0x60>
   switchuvm(curproc);
-80103926:	83 ec 0c             	sub    $0xc,%esp
+80103ff6:	83 ec 0c             	sub    $0xc,%esp
   curproc->sz = sz;
-80103929:	89 03                	mov    %eax,(%ebx)
+80103ff9:	89 03                	mov    %eax,(%ebx)
   switchuvm(curproc);
-8010392b:	53                   	push   %ebx
-8010392c:	e8 0f 33 00 00       	call   80106c40 <switchuvm>
+80103ffb:	53                   	push   %ebx
+80103ffc:	e8 ff 34 00 00       	call   80107500 <switchuvm>
   return 0;
-80103931:	83 c4 10             	add    $0x10,%esp
-80103934:	31 c0                	xor    %eax,%eax
+80104001:	83 c4 10             	add    $0x10,%esp
+80104004:	31 c0                	xor    %eax,%eax
 }
-80103936:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80103939:	5b                   	pop    %ebx
-8010393a:	5e                   	pop    %esi
-8010393b:	5d                   	pop    %ebp
-8010393c:	c3                   	ret    
-8010393d:	8d 76 00             	lea    0x0(%esi),%esi
+80104006:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104009:	5b                   	pop    %ebx
+8010400a:	5e                   	pop    %esi
+8010400b:	5d                   	pop    %ebp
+8010400c:	c3                   	ret    
+8010400d:	8d 76 00             	lea    0x0(%esi),%esi
     if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
-80103940:	83 ec 04             	sub    $0x4,%esp
-80103943:	01 c6                	add    %eax,%esi
-80103945:	56                   	push   %esi
-80103946:	50                   	push   %eax
-80103947:	ff 73 04             	pushl  0x4(%ebx)
-8010394a:	e8 41 35 00 00       	call   80106e90 <allocuvm>
-8010394f:	83 c4 10             	add    $0x10,%esp
-80103952:	85 c0                	test   %eax,%eax
-80103954:	75 d0                	jne    80103926 <growproc+0x26>
+80104010:	83 ec 04             	sub    $0x4,%esp
+80104013:	01 c6                	add    %eax,%esi
+80104015:	56                   	push   %esi
+80104016:	50                   	push   %eax
+80104017:	ff 73 04             	pushl  0x4(%ebx)
+8010401a:	e8 31 37 00 00       	call   80107750 <allocuvm>
+8010401f:	83 c4 10             	add    $0x10,%esp
+80104022:	85 c0                	test   %eax,%eax
+80104024:	75 d0                	jne    80103ff6 <growproc+0x26>
       return -1;
-80103956:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010395b:	eb d9                	jmp    80103936 <growproc+0x36>
-8010395d:	8d 76 00             	lea    0x0(%esi),%esi
+80104026:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010402b:	eb d9                	jmp    80104006 <growproc+0x36>
+8010402d:	8d 76 00             	lea    0x0(%esi),%esi
     if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
-80103960:	83 ec 04             	sub    $0x4,%esp
-80103963:	01 c6                	add    %eax,%esi
-80103965:	56                   	push   %esi
-80103966:	50                   	push   %eax
-80103967:	ff 73 04             	pushl  0x4(%ebx)
-8010396a:	e8 51 36 00 00       	call   80106fc0 <deallocuvm>
-8010396f:	83 c4 10             	add    $0x10,%esp
-80103972:	85 c0                	test   %eax,%eax
-80103974:	75 b0                	jne    80103926 <growproc+0x26>
-80103976:	eb de                	jmp    80103956 <growproc+0x56>
-80103978:	90                   	nop
-80103979:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80103980 <fork>:
-{
-80103980:	55                   	push   %ebp
-80103981:	89 e5                	mov    %esp,%ebp
-80103983:	57                   	push   %edi
-80103984:	56                   	push   %esi
-80103985:	53                   	push   %ebx
-80103986:	83 ec 1c             	sub    $0x1c,%esp
+80104030:	83 ec 04             	sub    $0x4,%esp
+80104033:	01 c6                	add    %eax,%esi
+80104035:	56                   	push   %esi
+80104036:	50                   	push   %eax
+80104037:	ff 73 04             	pushl  0x4(%ebx)
+8010403a:	e8 b1 38 00 00       	call   801078f0 <deallocuvm>
+8010403f:	83 c4 10             	add    $0x10,%esp
+80104042:	85 c0                	test   %eax,%eax
+80104044:	75 b0                	jne    80103ff6 <growproc+0x26>
+80104046:	eb de                	jmp    80104026 <growproc+0x56>
+80104048:	90                   	nop
+80104049:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80104050 <fork>:
+{
+80104050:	55                   	push   %ebp
+80104051:	89 e5                	mov    %esp,%ebp
+80104053:	57                   	push   %edi
+80104054:	56                   	push   %esi
+80104055:	53                   	push   %ebx
+80104056:	83 ec 1c             	sub    $0x1c,%esp
   pushcli();
-80103989:	e8 22 0c 00 00       	call   801045b0 <pushcli>
+80104059:	e8 32 0e 00 00       	call   80104e90 <pushcli>
   c = mycpu();
-8010398e:	e8 ad fd ff ff       	call   80103740 <mycpu>
+8010405e:	e8 1d fa ff ff       	call   80103a80 <mycpu>
   p = c->proc;
-80103993:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80104063:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103999:	e8 52 0c 00 00       	call   801045f0 <popcli>
+80104069:	e8 62 0e 00 00       	call   80104ed0 <popcli>
   if((np = allocproc()) == 0){
-8010399e:	e8 5d fc ff ff       	call   80103600 <allocproc>
-801039a3:	85 c0                	test   %eax,%eax
-801039a5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-801039a8:	0f 84 b7 00 00 00    	je     80103a65 <fork+0xe5>
+8010406e:	e8 0d f6 ff ff       	call   80103680 <allocproc>
+80104073:	85 c0                	test   %eax,%eax
+80104075:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80104078:	0f 84 b7 00 00 00    	je     80104135 <fork+0xe5>
   if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
-801039ae:	83 ec 08             	sub    $0x8,%esp
-801039b1:	ff 33                	pushl  (%ebx)
-801039b3:	ff 73 04             	pushl  0x4(%ebx)
-801039b6:	89 c7                	mov    %eax,%edi
-801039b8:	e8 83 37 00 00       	call   80107140 <copyuvm>
-801039bd:	83 c4 10             	add    $0x10,%esp
-801039c0:	85 c0                	test   %eax,%eax
-801039c2:	89 47 04             	mov    %eax,0x4(%edi)
-801039c5:	0f 84 a1 00 00 00    	je     80103a6c <fork+0xec>
+8010407e:	83 ec 08             	sub    $0x8,%esp
+80104081:	ff 33                	pushl  (%ebx)
+80104083:	ff 73 04             	pushl  0x4(%ebx)
+80104086:	89 c7                	mov    %eax,%edi
+80104088:	e8 e3 39 00 00       	call   80107a70 <copyuvm>
+8010408d:	83 c4 10             	add    $0x10,%esp
+80104090:	85 c0                	test   %eax,%eax
+80104092:	89 47 04             	mov    %eax,0x4(%edi)
+80104095:	0f 84 a1 00 00 00    	je     8010413c <fork+0xec>
   np->sz = curproc->sz;
-801039cb:	8b 03                	mov    (%ebx),%eax
-801039cd:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-801039d0:	89 01                	mov    %eax,(%ecx)
+8010409b:	8b 03                	mov    (%ebx),%eax
+8010409d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+801040a0:	89 01                	mov    %eax,(%ecx)
   np->parent = curproc;
-801039d2:	89 59 14             	mov    %ebx,0x14(%ecx)
-801039d5:	89 c8                	mov    %ecx,%eax
+801040a2:	89 59 14             	mov    %ebx,0x14(%ecx)
+801040a5:	89 c8                	mov    %ecx,%eax
   *np->tf = *curproc->tf;
-801039d7:	8b 79 18             	mov    0x18(%ecx),%edi
-801039da:	8b 73 18             	mov    0x18(%ebx),%esi
-801039dd:	b9 13 00 00 00       	mov    $0x13,%ecx
-801039e2:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+801040a7:	8b 79 18             	mov    0x18(%ecx),%edi
+801040aa:	8b 73 18             	mov    0x18(%ebx),%esi
+801040ad:	b9 13 00 00 00       	mov    $0x13,%ecx
+801040b2:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
   for(i = 0; i < NOFILE; i++)
-801039e4:	31 f6                	xor    %esi,%esi
+801040b4:	31 f6                	xor    %esi,%esi
   np->tf->eax = 0;
-801039e6:	8b 40 18             	mov    0x18(%eax),%eax
-801039e9:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
+801040b6:	8b 40 18             	mov    0x18(%eax),%eax
+801040b9:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
     if(curproc->ofile[i])
-801039f0:	8b 44 b3 28          	mov    0x28(%ebx,%esi,4),%eax
-801039f4:	85 c0                	test   %eax,%eax
-801039f6:	74 13                	je     80103a0b <fork+0x8b>
+801040c0:	8b 44 b3 28          	mov    0x28(%ebx,%esi,4),%eax
+801040c4:	85 c0                	test   %eax,%eax
+801040c6:	74 13                	je     801040db <fork+0x8b>
       np->ofile[i] = filedup(curproc->ofile[i]);
-801039f8:	83 ec 0c             	sub    $0xc,%esp
-801039fb:	50                   	push   %eax
-801039fc:	e8 ef d3 ff ff       	call   80100df0 <filedup>
-80103a01:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-80103a04:	83 c4 10             	add    $0x10,%esp
-80103a07:	89 44 b2 28          	mov    %eax,0x28(%edx,%esi,4)
+801040c8:	83 ec 0c             	sub    $0xc,%esp
+801040cb:	50                   	push   %eax
+801040cc:	e8 1f cd ff ff       	call   80100df0 <filedup>
+801040d1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+801040d4:	83 c4 10             	add    $0x10,%esp
+801040d7:	89 44 b2 28          	mov    %eax,0x28(%edx,%esi,4)
   for(i = 0; i < NOFILE; i++)
-80103a0b:	83 c6 01             	add    $0x1,%esi
-80103a0e:	83 fe 10             	cmp    $0x10,%esi
-80103a11:	75 dd                	jne    801039f0 <fork+0x70>
+801040db:	83 c6 01             	add    $0x1,%esi
+801040de:	83 fe 10             	cmp    $0x10,%esi
+801040e1:	75 dd                	jne    801040c0 <fork+0x70>
   np->cwd = idup(curproc->cwd);
-80103a13:	83 ec 0c             	sub    $0xc,%esp
-80103a16:	ff 73 68             	pushl  0x68(%ebx)
+801040e3:	83 ec 0c             	sub    $0xc,%esp
+801040e6:	ff 73 68             	pushl  0x68(%ebx)
   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-80103a19:	83 c3 6c             	add    $0x6c,%ebx
+801040e9:	83 c3 6c             	add    $0x6c,%ebx
   np->cwd = idup(curproc->cwd);
-80103a1c:	e8 2f dc ff ff       	call   80101650 <idup>
-80103a21:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+801040ec:	e8 5f d5 ff ff       	call   80101650 <idup>
+801040f1:	8b 7d e4             	mov    -0x1c(%ebp),%edi
   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-80103a24:	83 c4 0c             	add    $0xc,%esp
+801040f4:	83 c4 0c             	add    $0xc,%esp
   np->cwd = idup(curproc->cwd);
-80103a27:	89 47 68             	mov    %eax,0x68(%edi)
+801040f7:	89 47 68             	mov    %eax,0x68(%edi)
   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-80103a2a:	8d 47 6c             	lea    0x6c(%edi),%eax
-80103a2d:	6a 10                	push   $0x10
-80103a2f:	53                   	push   %ebx
-80103a30:	50                   	push   %eax
-80103a31:	e8 3a 0f 00 00       	call   80104970 <safestrcpy>
+801040fa:	8d 47 6c             	lea    0x6c(%edi),%eax
+801040fd:	6a 10                	push   $0x10
+801040ff:	53                   	push   %ebx
+80104100:	50                   	push   %eax
+80104101:	e8 4a 11 00 00       	call   80105250 <safestrcpy>
   pid = np->pid;
-80103a36:	8b 5f 10             	mov    0x10(%edi),%ebx
+80104106:	8b 5f 10             	mov    0x10(%edi),%ebx
   acquire(&ptable.lock);
-80103a39:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103a40:	e8 3b 0c 00 00       	call   80104680 <acquire>
+80104109:	c7 04 24 c0 3f 11 80 	movl   $0x80113fc0,(%esp)
+80104110:	e8 4b 0e 00 00       	call   80104f60 <acquire>
   np->state = RUNNABLE;
-80103a45:	c7 47 0c 03 00 00 00 	movl   $0x3,0xc(%edi)
+80104115:	c7 47 0c 03 00 00 00 	movl   $0x3,0xc(%edi)
   release(&ptable.lock);
-80103a4c:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103a53:	e8 e8 0c 00 00       	call   80104740 <release>
+8010411c:	c7 04 24 c0 3f 11 80 	movl   $0x80113fc0,(%esp)
+80104123:	e8 f8 0e 00 00       	call   80105020 <release>
   return pid;
-80103a58:	83 c4 10             	add    $0x10,%esp
+80104128:	83 c4 10             	add    $0x10,%esp
 }
-80103a5b:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80103a5e:	89 d8                	mov    %ebx,%eax
-80103a60:	5b                   	pop    %ebx
-80103a61:	5e                   	pop    %esi
-80103a62:	5f                   	pop    %edi
-80103a63:	5d                   	pop    %ebp
-80103a64:	c3                   	ret    
+8010412b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010412e:	89 d8                	mov    %ebx,%eax
+80104130:	5b                   	pop    %ebx
+80104131:	5e                   	pop    %esi
+80104132:	5f                   	pop    %edi
+80104133:	5d                   	pop    %ebp
+80104134:	c3                   	ret    
     return -1;
-80103a65:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80103a6a:	eb ef                	jmp    80103a5b <fork+0xdb>
+80104135:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+8010413a:	eb ef                	jmp    8010412b <fork+0xdb>
     kfree(np->kstack);
-80103a6c:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
-80103a6f:	83 ec 0c             	sub    $0xc,%esp
-80103a72:	ff 73 08             	pushl  0x8(%ebx)
-80103a75:	e8 96 e8 ff ff       	call   80102310 <kfree>
+8010413c:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+8010413f:	83 ec 0c             	sub    $0xc,%esp
+80104142:	ff 73 08             	pushl  0x8(%ebx)
+80104145:	e8 c6 e1 ff ff       	call   80102310 <kfree>
     np->kstack = 0;
-80103a7a:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+8010414a:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
     np->state = UNUSED;
-80103a81:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+80104151:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
     return -1;
-80103a88:	83 c4 10             	add    $0x10,%esp
-80103a8b:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80103a90:	eb c9                	jmp    80103a5b <fork+0xdb>
-80103a92:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103a99:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-80103aa0 <scheduler>:
-{
-80103aa0:	55                   	push   %ebp
-80103aa1:	89 e5                	mov    %esp,%ebp
-80103aa3:	57                   	push   %edi
-80103aa4:	56                   	push   %esi
-80103aa5:	53                   	push   %ebx
-80103aa6:	83 ec 0c             	sub    $0xc,%esp
+80104158:	83 c4 10             	add    $0x10,%esp
+8010415b:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80104160:	eb c9                	jmp    8010412b <fork+0xdb>
+80104162:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104169:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104170 <scheduler>:
+{
+80104170:	55                   	push   %ebp
+80104171:	89 e5                	mov    %esp,%ebp
+80104173:	57                   	push   %edi
+80104174:	56                   	push   %esi
+80104175:	53                   	push   %ebx
+80104176:	83 ec 1c             	sub    $0x1c,%esp
   struct cpu *c = mycpu();
-80103aa9:	e8 92 fc ff ff       	call   80103740 <mycpu>
-80103aae:	8d 78 04             	lea    0x4(%eax),%edi
-80103ab1:	89 c6                	mov    %eax,%esi
+80104179:	e8 02 f9 ff ff       	call   80103a80 <mycpu>
   c->proc = 0;
-80103ab3:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
-80103aba:	00 00 00 
-80103abd:	8d 76 00             	lea    0x0(%esi),%esi
+8010417e:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
+80104185:	00 00 00 
+  struct cpu *c = mycpu();
+80104188:	89 c3                	mov    %eax,%ebx
+8010418a:	8d 40 04             	lea    0x4(%eax),%eax
+8010418d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   asm volatile("sti");
-80103ac0:	fb                   	sti    
+80104190:	fb                   	sti    
     acquire(&ptable.lock);
-80103ac1:	83 ec 0c             	sub    $0xc,%esp
+80104191:	83 ec 0c             	sub    $0xc,%esp
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103ac4:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
+80104194:	bf f4 3f 11 80       	mov    $0x80113ff4,%edi
     acquire(&ptable.lock);
-80103ac9:	68 20 2d 11 80       	push   $0x80112d20
-80103ace:	e8 ad 0b 00 00       	call   80104680 <acquire>
-80103ad3:	83 c4 10             	add    $0x10,%esp
-80103ad6:	8d 76 00             	lea    0x0(%esi),%esi
-80103ad9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80104199:	68 c0 3f 11 80       	push   $0x80113fc0
+8010419e:	e8 bd 0d 00 00       	call   80104f60 <acquire>
+801041a3:	83 c4 10             	add    $0x10,%esp
+801041a6:	eb 21                	jmp    801041c9 <scheduler+0x59>
+801041a8:	90                   	nop
+801041a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->state==UNUSED && p->name[0]=='*'){
+801041b0:	80 7f 6c 2a          	cmpb   $0x2a,0x6c(%edi)
+801041b4:	0f 84 d6 00 00 00    	je     80104290 <scheduler+0x120>
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+801041ba:	83 ef 80             	sub    $0xffffff80,%edi
+801041bd:	81 ff f4 5f 11 80    	cmp    $0x80115ff4,%edi
+801041c3:	0f 83 b1 00 00 00    	jae    8010427a <scheduler+0x10a>
+      if(p->state==UNUSED && p->name[0]=='*'){
+801041c9:	8b 47 0c             	mov    0xc(%edi),%eax
+801041cc:	85 c0                	test   %eax,%eax
+801041ce:	74 e0                	je     801041b0 <scheduler+0x40>
       if(p->state != RUNNABLE)
-80103ae0:	83 7b 0c 03          	cmpl   $0x3,0xc(%ebx)
-80103ae4:	75 33                	jne    80103b19 <scheduler+0x79>
+801041d0:	83 f8 03             	cmp    $0x3,%eax
+801041d3:	75 e5                	jne    801041ba <scheduler+0x4a>
+801041d5:	31 f6                	xor    %esi,%esi
+801041d7:	eb 12                	jmp    801041eb <scheduler+0x7b>
+801041d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801041e0:	83 c6 04             	add    $0x4,%esi
+      for(int i=0;i<NPDENTRIES;i++){
+801041e3:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+801041e9:	74 4b                	je     80104236 <scheduler+0xc6>
+        if(((p->pgdir)[i])&PTE_P && ((p->pgdir)[i])&PTE_A){
+801041eb:	8b 47 04             	mov    0x4(%edi),%eax
+801041ee:	8b 0c 30             	mov    (%eax,%esi,1),%ecx
+801041f1:	89 c8                	mov    %ecx,%eax
+801041f3:	83 e0 21             	and    $0x21,%eax
+801041f6:	83 f8 21             	cmp    $0x21,%eax
+801041f9:	75 e5                	jne    801041e0 <scheduler+0x70>
+          pte_t* pgtab = (pte_t*)P2V(PTE_ADDR((p->pgdir)[i]));
+801041fb:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
+80104201:	8d 81 00 00 00 80    	lea    -0x80000000(%ecx),%eax
+80104207:	81 e9 00 f0 ff 7f    	sub    $0x7ffff000,%ecx
+8010420d:	8d 76 00             	lea    0x0(%esi),%esi
+            if(pgtab[j]&PTE_A){
+80104210:	8b 10                	mov    (%eax),%edx
+80104212:	f6 c2 20             	test   $0x20,%dl
+80104215:	74 05                	je     8010421c <scheduler+0xac>
+              pgtab[j]^=PTE_A;
+80104217:	83 f2 20             	xor    $0x20,%edx
+8010421a:	89 10                	mov    %edx,(%eax)
+8010421c:	83 c0 04             	add    $0x4,%eax
+          for(int j=0;j<NPTENTRIES;j++){
+8010421f:	39 c1                	cmp    %eax,%ecx
+80104221:	75 ed                	jne    80104210 <scheduler+0xa0>
+          ((p->pgdir)[i])^=PTE_A;
+80104223:	8b 47 04             	mov    0x4(%edi),%eax
+80104226:	01 f0                	add    %esi,%eax
+80104228:	83 c6 04             	add    $0x4,%esi
+8010422b:	83 30 20             	xorl   $0x20,(%eax)
+      for(int i=0;i<NPDENTRIES;i++){
+8010422e:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+80104234:	75 b5                	jne    801041eb <scheduler+0x7b>
       switchuvm(p);
-80103ae6:	83 ec 0c             	sub    $0xc,%esp
+80104236:	83 ec 0c             	sub    $0xc,%esp
       c->proc = p;
-80103ae9:	89 9e ac 00 00 00    	mov    %ebx,0xac(%esi)
+80104239:	89 bb ac 00 00 00    	mov    %edi,0xac(%ebx)
       switchuvm(p);
-80103aef:	53                   	push   %ebx
-80103af0:	e8 4b 31 00 00       	call   80106c40 <switchuvm>
+8010423f:	57                   	push   %edi
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104240:	83 ef 80             	sub    $0xffffff80,%edi
+      switchuvm(p);
+80104243:	e8 b8 32 00 00       	call   80107500 <switchuvm>
       swtch(&(c->scheduler), p->context);
-80103af5:	58                   	pop    %eax
-80103af6:	5a                   	pop    %edx
-80103af7:	ff 73 1c             	pushl  0x1c(%ebx)
-80103afa:	57                   	push   %edi
+80104248:	58                   	pop    %eax
+80104249:	5a                   	pop    %edx
+8010424a:	ff 77 9c             	pushl  -0x64(%edi)
+8010424d:	ff 75 e4             	pushl  -0x1c(%ebp)
       p->state = RUNNING;
-80103afb:	c7 43 0c 04 00 00 00 	movl   $0x4,0xc(%ebx)
+80104250:	c7 47 8c 04 00 00 00 	movl   $0x4,-0x74(%edi)
       swtch(&(c->scheduler), p->context);
-80103b02:	e8 c4 0e 00 00       	call   801049cb <swtch>
+80104257:	e8 4f 10 00 00       	call   801052ab <swtch>
       switchkvm();
-80103b07:	e8 14 31 00 00       	call   80106c20 <switchkvm>
+8010425c:	e8 7f 32 00 00       	call   801074e0 <switchkvm>
+      c->proc = 0;
+80104261:	83 c4 10             	add    $0x10,%esp
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104264:	81 ff f4 5f 11 80    	cmp    $0x80115ff4,%edi
       c->proc = 0;
-80103b0c:	c7 86 ac 00 00 00 00 	movl   $0x0,0xac(%esi)
-80103b13:	00 00 00 
-80103b16:	83 c4 10             	add    $0x10,%esp
+8010426a:	c7 83 ac 00 00 00 00 	movl   $0x0,0xac(%ebx)
+80104271:	00 00 00 
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103b19:	83 eb 80             	sub    $0xffffff80,%ebx
-80103b1c:	81 fb 54 4d 11 80    	cmp    $0x80114d54,%ebx
-80103b22:	72 bc                	jb     80103ae0 <scheduler+0x40>
+80104274:	0f 82 4f ff ff ff    	jb     801041c9 <scheduler+0x59>
     release(&ptable.lock);
-80103b24:	83 ec 0c             	sub    $0xc,%esp
-80103b27:	68 20 2d 11 80       	push   $0x80112d20
-80103b2c:	e8 0f 0c 00 00       	call   80104740 <release>
+8010427a:	83 ec 0c             	sub    $0xc,%esp
+8010427d:	68 c0 3f 11 80       	push   $0x80113fc0
+80104282:	e8 99 0d 00 00       	call   80105020 <release>
     sti();
-80103b31:	83 c4 10             	add    $0x10,%esp
-80103b34:	eb 8a                	jmp    80103ac0 <scheduler+0x20>
-80103b36:	8d 76 00             	lea    0x0(%esi),%esi
-80103b39:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-80103b40 <sched>:
-{
-80103b40:	55                   	push   %ebp
-80103b41:	89 e5                	mov    %esp,%ebp
-80103b43:	56                   	push   %esi
-80103b44:	53                   	push   %ebx
+80104287:	83 c4 10             	add    $0x10,%esp
+8010428a:	e9 01 ff ff ff       	jmp    80104190 <scheduler+0x20>
+8010428f:	90                   	nop
+        kfree(p->kstack);
+80104290:	83 ec 0c             	sub    $0xc,%esp
+80104293:	ff 77 08             	pushl  0x8(%edi)
+80104296:	e8 75 e0 ff ff       	call   80102310 <kfree>
+        p->pid=0;
+8010429b:	c7 47 10 00 00 00 00 	movl   $0x0,0x10(%edi)
+        p->kstack=0;
+801042a2:	c7 47 08 00 00 00 00 	movl   $0x0,0x8(%edi)
+801042a9:	83 c4 10             	add    $0x10,%esp
+        p->name[0]=0;
+801042ac:	c6 47 6c 00          	movb   $0x0,0x6c(%edi)
+801042b0:	8b 47 0c             	mov    0xc(%edi),%eax
+801042b3:	e9 18 ff ff ff       	jmp    801041d0 <scheduler+0x60>
+801042b8:	90                   	nop
+801042b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801042c0 <sched>:
+{
+801042c0:	55                   	push   %ebp
+801042c1:	89 e5                	mov    %esp,%ebp
+801042c3:	56                   	push   %esi
+801042c4:	53                   	push   %ebx
   pushcli();
-80103b45:	e8 66 0a 00 00       	call   801045b0 <pushcli>
+801042c5:	e8 c6 0b 00 00       	call   80104e90 <pushcli>
   c = mycpu();
-80103b4a:	e8 f1 fb ff ff       	call   80103740 <mycpu>
+801042ca:	e8 b1 f7 ff ff       	call   80103a80 <mycpu>
   p = c->proc;
-80103b4f:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+801042cf:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103b55:	e8 96 0a 00 00       	call   801045f0 <popcli>
+801042d5:	e8 f6 0b 00 00       	call   80104ed0 <popcli>
   if(!holding(&ptable.lock))
-80103b5a:	83 ec 0c             	sub    $0xc,%esp
-80103b5d:	68 20 2d 11 80       	push   $0x80112d20
-80103b62:	e8 e9 0a 00 00       	call   80104650 <holding>
-80103b67:	83 c4 10             	add    $0x10,%esp
-80103b6a:	85 c0                	test   %eax,%eax
-80103b6c:	74 4f                	je     80103bbd <sched+0x7d>
+801042da:	83 ec 0c             	sub    $0xc,%esp
+801042dd:	68 c0 3f 11 80       	push   $0x80113fc0
+801042e2:	e8 49 0c 00 00       	call   80104f30 <holding>
+801042e7:	83 c4 10             	add    $0x10,%esp
+801042ea:	85 c0                	test   %eax,%eax
+801042ec:	74 4f                	je     8010433d <sched+0x7d>
   if(mycpu()->ncli != 1)
-80103b6e:	e8 cd fb ff ff       	call   80103740 <mycpu>
-80103b73:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
-80103b7a:	75 68                	jne    80103be4 <sched+0xa4>
+801042ee:	e8 8d f7 ff ff       	call   80103a80 <mycpu>
+801042f3:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
+801042fa:	75 68                	jne    80104364 <sched+0xa4>
   if(p->state == RUNNING)
-80103b7c:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
-80103b80:	74 55                	je     80103bd7 <sched+0x97>
+801042fc:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
+80104300:	74 55                	je     80104357 <sched+0x97>
   asm volatile("pushfl; popl %0" : "=r" (eflags));
-80103b82:	9c                   	pushf  
-80103b83:	58                   	pop    %eax
+80104302:	9c                   	pushf  
+80104303:	58                   	pop    %eax
   if(readeflags()&FL_IF)
-80103b84:	f6 c4 02             	test   $0x2,%ah
-80103b87:	75 41                	jne    80103bca <sched+0x8a>
+80104304:	f6 c4 02             	test   $0x2,%ah
+80104307:	75 41                	jne    8010434a <sched+0x8a>
   intena = mycpu()->intena;
-80103b89:	e8 b2 fb ff ff       	call   80103740 <mycpu>
+80104309:	e8 72 f7 ff ff       	call   80103a80 <mycpu>
   swtch(&p->context, mycpu()->scheduler);
-80103b8e:	83 c3 1c             	add    $0x1c,%ebx
+8010430e:	83 c3 1c             	add    $0x1c,%ebx
   intena = mycpu()->intena;
-80103b91:	8b b0 a8 00 00 00    	mov    0xa8(%eax),%esi
+80104311:	8b b0 a8 00 00 00    	mov    0xa8(%eax),%esi
   swtch(&p->context, mycpu()->scheduler);
-80103b97:	e8 a4 fb ff ff       	call   80103740 <mycpu>
-80103b9c:	83 ec 08             	sub    $0x8,%esp
-80103b9f:	ff 70 04             	pushl  0x4(%eax)
-80103ba2:	53                   	push   %ebx
-80103ba3:	e8 23 0e 00 00       	call   801049cb <swtch>
+80104317:	e8 64 f7 ff ff       	call   80103a80 <mycpu>
+8010431c:	83 ec 08             	sub    $0x8,%esp
+8010431f:	ff 70 04             	pushl  0x4(%eax)
+80104322:	53                   	push   %ebx
+80104323:	e8 83 0f 00 00       	call   801052ab <swtch>
   mycpu()->intena = intena;
-80103ba8:	e8 93 fb ff ff       	call   80103740 <mycpu>
+80104328:	e8 53 f7 ff ff       	call   80103a80 <mycpu>
 }
-80103bad:	83 c4 10             	add    $0x10,%esp
+8010432d:	83 c4 10             	add    $0x10,%esp
   mycpu()->intena = intena;
-80103bb0:	89 b0 a8 00 00 00    	mov    %esi,0xa8(%eax)
+80104330:	89 b0 a8 00 00 00    	mov    %esi,0xa8(%eax)
 }
-80103bb6:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80103bb9:	5b                   	pop    %ebx
-80103bba:	5e                   	pop    %esi
-80103bbb:	5d                   	pop    %ebp
-80103bbc:	c3                   	ret    
+80104336:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104339:	5b                   	pop    %ebx
+8010433a:	5e                   	pop    %esi
+8010433b:	5d                   	pop    %ebp
+8010433c:	c3                   	ret    
     panic("sched ptable.lock");
-80103bbd:	83 ec 0c             	sub    $0xc,%esp
-80103bc0:	68 b0 78 10 80       	push   $0x801078b0
-80103bc5:	e8 c6 c7 ff ff       	call   80100390 <panic>
+8010433d:	83 ec 0c             	sub    $0xc,%esp
+80104340:	68 2f 82 10 80       	push   $0x8010822f
+80104345:	e8 46 c0 ff ff       	call   80100390 <panic>
     panic("sched interruptible");
-80103bca:	83 ec 0c             	sub    $0xc,%esp
-80103bcd:	68 dc 78 10 80       	push   $0x801078dc
-80103bd2:	e8 b9 c7 ff ff       	call   80100390 <panic>
+8010434a:	83 ec 0c             	sub    $0xc,%esp
+8010434d:	68 5b 82 10 80       	push   $0x8010825b
+80104352:	e8 39 c0 ff ff       	call   80100390 <panic>
     panic("sched running");
-80103bd7:	83 ec 0c             	sub    $0xc,%esp
-80103bda:	68 ce 78 10 80       	push   $0x801078ce
-80103bdf:	e8 ac c7 ff ff       	call   80100390 <panic>
+80104357:	83 ec 0c             	sub    $0xc,%esp
+8010435a:	68 4d 82 10 80       	push   $0x8010824d
+8010435f:	e8 2c c0 ff ff       	call   80100390 <panic>
     panic("sched locks");
-80103be4:	83 ec 0c             	sub    $0xc,%esp
-80103be7:	68 c2 78 10 80       	push   $0x801078c2
-80103bec:	e8 9f c7 ff ff       	call   80100390 <panic>
-80103bf1:	eb 0d                	jmp    80103c00 <exit>
-80103bf3:	90                   	nop
-80103bf4:	90                   	nop
-80103bf5:	90                   	nop
-80103bf6:	90                   	nop
-80103bf7:	90                   	nop
-80103bf8:	90                   	nop
-80103bf9:	90                   	nop
-80103bfa:	90                   	nop
-80103bfb:	90                   	nop
-80103bfc:	90                   	nop
-80103bfd:	90                   	nop
-80103bfe:	90                   	nop
-80103bff:	90                   	nop
-
-80103c00 <exit>:
-{
-80103c00:	55                   	push   %ebp
-80103c01:	89 e5                	mov    %esp,%ebp
-80103c03:	57                   	push   %edi
-80103c04:	56                   	push   %esi
-80103c05:	53                   	push   %ebx
-80103c06:	83 ec 0c             	sub    $0xc,%esp
+80104364:	83 ec 0c             	sub    $0xc,%esp
+80104367:	68 41 82 10 80       	push   $0x80108241
+8010436c:	e8 1f c0 ff ff       	call   80100390 <panic>
+80104371:	eb 0d                	jmp    80104380 <swap_out_process_function>
+80104373:	90                   	nop
+80104374:	90                   	nop
+80104375:	90                   	nop
+80104376:	90                   	nop
+80104377:	90                   	nop
+80104378:	90                   	nop
+80104379:	90                   	nop
+8010437a:	90                   	nop
+8010437b:	90                   	nop
+8010437c:	90                   	nop
+8010437d:	90                   	nop
+8010437e:	90                   	nop
+8010437f:	90                   	nop
+
+80104380 <swap_out_process_function>:
+void swap_out_process_function(){
+80104380:	55                   	push   %ebp
+80104381:	89 e5                	mov    %esp,%ebp
+80104383:	57                   	push   %edi
+80104384:	56                   	push   %esi
+80104385:	53                   	push   %ebx
+80104386:	83 ec 68             	sub    $0x68,%esp
+  acquire(&rqueue.lock);
+80104389:	68 40 3d 11 80       	push   $0x80113d40
+8010438e:	e8 cd 0b 00 00       	call   80104f60 <acquire>
+  while(rqueue.s!=rqueue.e){
+80104393:	83 c4 10             	add    $0x10,%esp
+80104396:	a1 78 3e 11 80       	mov    0x80113e78,%eax
+8010439b:	39 05 74 3e 11 80    	cmp    %eax,0x80113e74
+801043a1:	74 75                	je     80104418 <swap_out_process_function+0x98>
+801043a3:	90                   	nop
+801043a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    struct proc *p=rpop();
+801043a8:	e8 a3 f4 ff ff       	call   80103850 <rpop>
+801043ad:	89 45 9c             	mov    %eax,-0x64(%ebp)
+    pde_t* pd = p->pgdir;
+801043b0:	8b 40 04             	mov    0x4(%eax),%eax
+    for(int i=0;i<NPDENTRIES;i++){
+801043b3:	31 f6                	xor    %esi,%esi
+    pde_t* pd = p->pgdir;
+801043b5:	89 45 a0             	mov    %eax,-0x60(%ebp)
+801043b8:	90                   	nop
+801043b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(pd[i]&PTE_A)continue;
+801043c0:	8b 45 a0             	mov    -0x60(%ebp),%eax
+801043c3:	8b 1c b0             	mov    (%eax,%esi,4),%ebx
+801043c6:	f6 c3 20             	test   $0x20,%bl
+801043c9:	75 35                	jne    80104400 <swap_out_process_function+0x80>
+      pte_t *pgtab = (pte_t*)P2V(PTE_ADDR(pd[i]));
+801043cb:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+      for(int j=0;j<NPTENTRIES;j++){
+801043d1:	31 d2                	xor    %edx,%edx
+      pte_t *pgtab = (pte_t*)P2V(PTE_ADDR(pd[i]));
+801043d3:	81 c3 00 00 00 80    	add    $0x80000000,%ebx
+        if((pgtab[j]&PTE_A) || !(pgtab[j]&PTE_P))continue;
+801043d9:	8b 03                	mov    (%ebx),%eax
+801043db:	89 c1                	mov    %eax,%ecx
+801043dd:	83 e1 21             	and    $0x21,%ecx
+801043e0:	83 f9 01             	cmp    $0x1,%ecx
+801043e3:	0f 84 8f 00 00 00    	je     80104478 <swap_out_process_function+0xf8>
+      for(int j=0;j<NPTENTRIES;j++){
+801043e9:	83 c2 01             	add    $0x1,%edx
+801043ec:	83 c3 04             	add    $0x4,%ebx
+801043ef:	81 fa 00 04 00 00    	cmp    $0x400,%edx
+801043f5:	75 e2                	jne    801043d9 <swap_out_process_function+0x59>
+801043f7:	89 f6                	mov    %esi,%esi
+801043f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    for(int i=0;i<NPDENTRIES;i++){
+80104400:	83 c6 01             	add    $0x1,%esi
+80104403:	81 fe 00 04 00 00    	cmp    $0x400,%esi
+80104409:	75 b5                	jne    801043c0 <swap_out_process_function+0x40>
+  while(rqueue.s!=rqueue.e){
+8010440b:	a1 78 3e 11 80       	mov    0x80113e78,%eax
+80104410:	39 05 74 3e 11 80    	cmp    %eax,0x80113e74
+80104416:	75 90                	jne    801043a8 <swap_out_process_function+0x28>
+  release(&rqueue.lock);
+80104418:	83 ec 0c             	sub    $0xc,%esp
+8010441b:	68 40 3d 11 80       	push   $0x80113d40
+80104420:	e8 fb 0b 00 00       	call   80105020 <release>
   pushcli();
-80103c09:	e8 a2 09 00 00       	call   801045b0 <pushcli>
+80104425:	e8 66 0a 00 00       	call   80104e90 <pushcli>
   c = mycpu();
-80103c0e:	e8 2d fb ff ff       	call   80103740 <mycpu>
+8010442a:	e8 51 f6 ff ff       	call   80103a80 <mycpu>
   p = c->proc;
-80103c13:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+8010442f:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103c19:	e8 d2 09 00 00       	call   801045f0 <popcli>
+80104435:	e8 96 0a 00 00       	call   80104ed0 <popcli>
+  if((p=myproc())==0) panic("swap out process");
+8010443a:	83 c4 10             	add    $0x10,%esp
+8010443d:	85 db                	test   %ebx,%ebx
+8010443f:	0f 84 71 01 00 00    	je     801045b6 <swap_out_process_function+0x236>
+  p->killed = 0;
+80104445:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
+  p->state = UNUSED;
+8010444c:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+  p->parent = 0;
+80104453:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
+  p->name[0] = '*';
+8010445a:	c6 43 6c 2a          	movb   $0x2a,0x6c(%ebx)
+  swap_out_process_exists=0;
+8010445e:	c7 05 b8 b5 10 80 00 	movl   $0x0,0x8010b5b8
+80104465:	00 00 00 
+  sched();
+80104468:	e8 53 fe ff ff       	call   801042c0 <sched>
+}
+8010446d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104470:	5b                   	pop    %ebx
+80104471:	5e                   	pop    %esi
+80104472:	5f                   	pop    %edi
+80104473:	5d                   	pop    %ebp
+80104474:	c3                   	ret    
+80104475:	8d 76 00             	lea    0x0(%esi),%esi
+        pte_t *pte=(pte_t*)P2V(PTE_ADDR(pgtab[j]));
+80104478:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+        int virt = ((1<<22)*i)+((1<<12)*j);
+8010447d:	89 f7                	mov    %esi,%edi
+        pte_t *pte=(pte_t*)P2V(PTE_ADDR(pgtab[j]));
+8010447f:	05 00 00 00 80       	add    $0x80000000,%eax
+        int virt = ((1<<22)*i)+((1<<12)*j);
+80104484:	c1 e7 0a             	shl    $0xa,%edi
+        pte_t *pte=(pte_t*)P2V(PTE_ADDR(pgtab[j]));
+80104487:	89 45 a4             	mov    %eax,-0x5c(%ebp)
+        int pid=p->pid;
+8010448a:	8b 45 9c             	mov    -0x64(%ebp),%eax
+        int virt = ((1<<22)*i)+((1<<12)*j);
+8010448d:	01 d7                	add    %edx,%edi
+8010448f:	c1 e7 0c             	shl    $0xc,%edi
+        int pid=p->pid;
+80104492:	8b 40 10             	mov    0x10(%eax),%eax
+  if(x==0){
+80104495:	85 c0                	test   %eax,%eax
+80104497:	0f 85 c3 00 00 00    	jne    80104560 <swap_out_process_function+0x1e0>
+    c[0]='0';
+8010449d:	b8 30 00 00 00       	mov    $0x30,%eax
+801044a2:	66 89 45 b6          	mov    %ax,-0x4a(%ebp)
+        int x=strlen(c);
+801044a6:	8d 45 b6             	lea    -0x4a(%ebp),%eax
+801044a9:	83 ec 0c             	sub    $0xc,%esp
+801044ac:	50                   	push   %eax
+801044ad:	e8 de 0d 00 00       	call   80105290 <strlen>
+  if(x==0){
+801044b2:	83 c4 10             	add    $0x10,%esp
+801044b5:	85 ff                	test   %edi,%edi
+        c[x]='_';
+801044b7:	c6 44 05 b6 5f       	movb   $0x5f,-0x4a(%ebp,%eax,1)
+        int_to_string(virt,c+x+1);
+801044bc:	8d 54 05 b7          	lea    -0x49(%ebp,%eax,1),%edx
+  if(x==0){
+801044c0:	0f 85 aa 00 00 00    	jne    80104570 <swap_out_process_function+0x1f0>
+    c[0]='0';
+801044c6:	bf 30 00 00 00       	mov    $0x30,%edi
+801044cb:	66 89 3a             	mov    %di,(%edx)
+        safestrcpy(c+strlen(c),".swp",5);
+801044ce:	8d 45 b6             	lea    -0x4a(%ebp),%eax
+801044d1:	83 ec 0c             	sub    $0xc,%esp
+801044d4:	50                   	push   %eax
+801044d5:	e8 b6 0d 00 00       	call   80105290 <strlen>
+801044da:	8d 4d b6             	lea    -0x4a(%ebp),%ecx
+801044dd:	83 c4 0c             	add    $0xc,%esp
+801044e0:	6a 05                	push   $0x5
+801044e2:	68 6f 82 10 80       	push   $0x8010826f
+801044e7:	01 c8                	add    %ecx,%eax
+801044e9:	50                   	push   %eax
+801044ea:	e8 61 0d 00 00       	call   80105250 <safestrcpy>
+        int fd=proc_open(c, O_CREATE | O_RDWR);
+801044ef:	5a                   	pop    %edx
+801044f0:	8d 45 b6             	lea    -0x4a(%ebp),%eax
+801044f3:	59                   	pop    %ecx
+801044f4:	68 02 02 00 00       	push   $0x202
+801044f9:	50                   	push   %eax
+801044fa:	e8 51 f7 ff ff       	call   80103c50 <proc_open>
+        if(fd<0){
+801044ff:	83 c4 10             	add    $0x10,%esp
+80104502:	85 c0                	test   %eax,%eax
+        int fd=proc_open(c, O_CREATE | O_RDWR);
+80104504:	89 c7                	mov    %eax,%edi
+        if(fd<0){
+80104506:	78 74                	js     8010457c <swap_out_process_function+0x1fc>
+        if(proc_write(fd,(char *)pte, PGSIZE) != PGSIZE){
+80104508:	83 ec 04             	sub    $0x4,%esp
+8010450b:	68 00 10 00 00       	push   $0x1000
+80104510:	ff 75 a4             	pushl  -0x5c(%ebp)
+80104513:	50                   	push   %eax
+80104514:	e8 07 f6 ff ff       	call   80103b20 <proc_write>
+80104519:	83 c4 10             	add    $0x10,%esp
+8010451c:	3d 00 10 00 00       	cmp    $0x1000,%eax
+80104521:	75 76                	jne    80104599 <swap_out_process_function+0x219>
+        proc_close(fd);
+80104523:	83 ec 0c             	sub    $0xc,%esp
+    for(int i=0;i<NPDENTRIES;i++){
+80104526:	83 c6 01             	add    $0x1,%esi
+        proc_close(fd);
+80104529:	57                   	push   %edi
+8010452a:	e8 51 f6 ff ff       	call   80103b80 <proc_close>
+        kfree((char*)pte);
+8010452f:	58                   	pop    %eax
+80104530:	ff 75 a4             	pushl  -0x5c(%ebp)
+80104533:	e8 d8 dd ff ff       	call   80102310 <kfree>
+        memset(&pgtab[j],0,sizeof(pgtab[j]));
+80104538:	83 c4 0c             	add    $0xc,%esp
+8010453b:	6a 04                	push   $0x4
+8010453d:	6a 00                	push   $0x0
+8010453f:	53                   	push   %ebx
+80104540:	e8 2b 0b 00 00       	call   80105070 <memset>
+        pgtab[j]=((pgtab[j])^(0x080));
+80104545:	81 33 80 00 00 00    	xorl   $0x80,(%ebx)
+        break;
+8010454b:	83 c4 10             	add    $0x10,%esp
+    for(int i=0;i<NPDENTRIES;i++){
+8010454e:	81 fe 00 04 00 00    	cmp    $0x400,%esi
+80104554:	0f 85 66 fe ff ff    	jne    801043c0 <swap_out_process_function+0x40>
+8010455a:	e9 ac fe ff ff       	jmp    8010440b <swap_out_process_function+0x8b>
+8010455f:	90                   	nop
+80104560:	8d 55 b6             	lea    -0x4a(%ebp),%edx
+80104563:	e8 38 f2 ff ff       	call   801037a0 <int_to_string.part.1>
+80104568:	e9 39 ff ff ff       	jmp    801044a6 <swap_out_process_function+0x126>
+8010456d:	8d 76 00             	lea    0x0(%esi),%esi
+80104570:	89 f8                	mov    %edi,%eax
+80104572:	e8 29 f2 ff ff       	call   801037a0 <int_to_string.part.1>
+80104577:	e9 52 ff ff ff       	jmp    801044ce <swap_out_process_function+0x14e>
+          cprintf("error creating or opening file: %s\n", c);
+8010457c:	8d 45 b6             	lea    -0x4a(%ebp),%eax
+8010457f:	83 ec 08             	sub    $0x8,%esp
+80104582:	50                   	push   %eax
+80104583:	68 88 83 10 80       	push   $0x80108388
+80104588:	e8 d3 c0 ff ff       	call   80100660 <cprintf>
+          panic("swap_out_process");
+8010458d:	c7 04 24 74 82 10 80 	movl   $0x80108274,(%esp)
+80104594:	e8 f7 bd ff ff       	call   80100390 <panic>
+          cprintf("error writing to file: %s\n", c);
+80104599:	8d 45 b6             	lea    -0x4a(%ebp),%eax
+8010459c:	83 ec 08             	sub    $0x8,%esp
+8010459f:	50                   	push   %eax
+801045a0:	68 85 82 10 80       	push   $0x80108285
+801045a5:	e8 b6 c0 ff ff       	call   80100660 <cprintf>
+          panic("swap_out_process");
+801045aa:	c7 04 24 74 82 10 80 	movl   $0x80108274,(%esp)
+801045b1:	e8 da bd ff ff       	call   80100390 <panic>
+  if((p=myproc())==0) panic("swap out process");
+801045b6:	83 ec 0c             	sub    $0xc,%esp
+801045b9:	68 a0 82 10 80       	push   $0x801082a0
+801045be:	e8 cd bd ff ff       	call   80100390 <panic>
+801045c3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801045c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801045d0 <exit>:
+{
+801045d0:	55                   	push   %ebp
+801045d1:	89 e5                	mov    %esp,%ebp
+801045d3:	57                   	push   %edi
+801045d4:	56                   	push   %esi
+801045d5:	53                   	push   %ebx
+801045d6:	83 ec 0c             	sub    $0xc,%esp
+  pushcli();
+801045d9:	e8 b2 08 00 00       	call   80104e90 <pushcli>
+  c = mycpu();
+801045de:	e8 9d f4 ff ff       	call   80103a80 <mycpu>
+  p = c->proc;
+801045e3:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+  popcli();
+801045e9:	e8 e2 08 00 00       	call   80104ed0 <popcli>
   if(curproc == initproc)
-80103c1e:	39 35 b8 a5 10 80    	cmp    %esi,0x8010a5b8
-80103c24:	8d 5e 28             	lea    0x28(%esi),%ebx
-80103c27:	8d 7e 68             	lea    0x68(%esi),%edi
-80103c2a:	0f 84 e7 00 00 00    	je     80103d17 <exit+0x117>
+801045ee:	39 35 c0 b5 10 80    	cmp    %esi,0x8010b5c0
+801045f4:	8d 5e 28             	lea    0x28(%esi),%ebx
+801045f7:	8d 7e 68             	lea    0x68(%esi),%edi
+801045fa:	0f 84 e7 00 00 00    	je     801046e7 <exit+0x117>
     if(curproc->ofile[fd]){
-80103c30:	8b 03                	mov    (%ebx),%eax
-80103c32:	85 c0                	test   %eax,%eax
-80103c34:	74 12                	je     80103c48 <exit+0x48>
+80104600:	8b 03                	mov    (%ebx),%eax
+80104602:	85 c0                	test   %eax,%eax
+80104604:	74 12                	je     80104618 <exit+0x48>
       fileclose(curproc->ofile[fd]);
-80103c36:	83 ec 0c             	sub    $0xc,%esp
-80103c39:	50                   	push   %eax
-80103c3a:	e8 01 d2 ff ff       	call   80100e40 <fileclose>
+80104606:	83 ec 0c             	sub    $0xc,%esp
+80104609:	50                   	push   %eax
+8010460a:	e8 31 c8 ff ff       	call   80100e40 <fileclose>
       curproc->ofile[fd] = 0;
-80103c3f:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
-80103c45:	83 c4 10             	add    $0x10,%esp
-80103c48:	83 c3 04             	add    $0x4,%ebx
+8010460f:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+80104615:	83 c4 10             	add    $0x10,%esp
+80104618:	83 c3 04             	add    $0x4,%ebx
   for(fd = 0; fd < NOFILE; fd++){
-80103c4b:	39 fb                	cmp    %edi,%ebx
-80103c4d:	75 e1                	jne    80103c30 <exit+0x30>
+8010461b:	39 fb                	cmp    %edi,%ebx
+8010461d:	75 e1                	jne    80104600 <exit+0x30>
   begin_op();
-80103c4f:	e8 4c ef ff ff       	call   80102ba0 <begin_op>
+8010461f:	e8 fc e5 ff ff       	call   80102c20 <begin_op>
   iput(curproc->cwd);
-80103c54:	83 ec 0c             	sub    $0xc,%esp
-80103c57:	ff 76 68             	pushl  0x68(%esi)
-80103c5a:	e8 51 db ff ff       	call   801017b0 <iput>
+80104624:	83 ec 0c             	sub    $0xc,%esp
+80104627:	ff 76 68             	pushl  0x68(%esi)
+8010462a:	e8 81 d1 ff ff       	call   801017b0 <iput>
   end_op();
-80103c5f:	e8 ac ef ff ff       	call   80102c10 <end_op>
+8010462f:	e8 5c e6 ff ff       	call   80102c90 <end_op>
   curproc->cwd = 0;
-80103c64:	c7 46 68 00 00 00 00 	movl   $0x0,0x68(%esi)
+80104634:	c7 46 68 00 00 00 00 	movl   $0x0,0x68(%esi)
   acquire(&ptable.lock);
-80103c6b:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103c72:	e8 09 0a 00 00       	call   80104680 <acquire>
+8010463b:	c7 04 24 c0 3f 11 80 	movl   $0x80113fc0,(%esp)
+80104642:	e8 19 09 00 00       	call   80104f60 <acquire>
   wakeup1(curproc->parent);
-80103c77:	8b 56 14             	mov    0x14(%esi),%edx
-80103c7a:	83 c4 10             	add    $0x10,%esp
+80104647:	8b 56 14             	mov    0x14(%esi),%edx
+8010464a:	83 c4 10             	add    $0x10,%esp
 static void
 wakeup1(void *chan)
 {
   struct proc *p;
 
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103c7d:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
-80103c82:	eb 0e                	jmp    80103c92 <exit+0x92>
-80103c84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80103c88:	83 e8 80             	sub    $0xffffff80,%eax
-80103c8b:	3d 54 4d 11 80       	cmp    $0x80114d54,%eax
-80103c90:	73 1c                	jae    80103cae <exit+0xae>
+8010464d:	b8 f4 3f 11 80       	mov    $0x80113ff4,%eax
+80104652:	eb 0e                	jmp    80104662 <exit+0x92>
+80104654:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104658:	83 e8 80             	sub    $0xffffff80,%eax
+8010465b:	3d f4 5f 11 80       	cmp    $0x80115ff4,%eax
+80104660:	73 1c                	jae    8010467e <exit+0xae>
     if(p->state == SLEEPING && p->chan == chan)
-80103c92:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-80103c96:	75 f0                	jne    80103c88 <exit+0x88>
-80103c98:	3b 50 20             	cmp    0x20(%eax),%edx
-80103c9b:	75 eb                	jne    80103c88 <exit+0x88>
+80104662:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80104666:	75 f0                	jne    80104658 <exit+0x88>
+80104668:	3b 50 20             	cmp    0x20(%eax),%edx
+8010466b:	75 eb                	jne    80104658 <exit+0x88>
       p->state = RUNNABLE;
-80103c9d:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+8010466d:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103ca4:	83 e8 80             	sub    $0xffffff80,%eax
-80103ca7:	3d 54 4d 11 80       	cmp    $0x80114d54,%eax
-80103cac:	72 e4                	jb     80103c92 <exit+0x92>
+80104674:	83 e8 80             	sub    $0xffffff80,%eax
+80104677:	3d f4 5f 11 80       	cmp    $0x80115ff4,%eax
+8010467c:	72 e4                	jb     80104662 <exit+0x92>
       p->parent = initproc;
-80103cae:	8b 0d b8 a5 10 80    	mov    0x8010a5b8,%ecx
+8010467e:	8b 0d c0 b5 10 80    	mov    0x8010b5c0,%ecx
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103cb4:	ba 54 2d 11 80       	mov    $0x80112d54,%edx
-80103cb9:	eb 10                	jmp    80103ccb <exit+0xcb>
-80103cbb:	90                   	nop
-80103cbc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80103cc0:	83 ea 80             	sub    $0xffffff80,%edx
-80103cc3:	81 fa 54 4d 11 80    	cmp    $0x80114d54,%edx
-80103cc9:	73 33                	jae    80103cfe <exit+0xfe>
+80104684:	ba f4 3f 11 80       	mov    $0x80113ff4,%edx
+80104689:	eb 10                	jmp    8010469b <exit+0xcb>
+8010468b:	90                   	nop
+8010468c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104690:	83 ea 80             	sub    $0xffffff80,%edx
+80104693:	81 fa f4 5f 11 80    	cmp    $0x80115ff4,%edx
+80104699:	73 33                	jae    801046ce <exit+0xfe>
     if(p->parent == curproc){
-80103ccb:	39 72 14             	cmp    %esi,0x14(%edx)
-80103cce:	75 f0                	jne    80103cc0 <exit+0xc0>
+8010469b:	39 72 14             	cmp    %esi,0x14(%edx)
+8010469e:	75 f0                	jne    80104690 <exit+0xc0>
       if(p->state == ZOMBIE)
-80103cd0:	83 7a 0c 05          	cmpl   $0x5,0xc(%edx)
+801046a0:	83 7a 0c 05          	cmpl   $0x5,0xc(%edx)
       p->parent = initproc;
-80103cd4:	89 4a 14             	mov    %ecx,0x14(%edx)
+801046a4:	89 4a 14             	mov    %ecx,0x14(%edx)
       if(p->state == ZOMBIE)
-80103cd7:	75 e7                	jne    80103cc0 <exit+0xc0>
+801046a7:	75 e7                	jne    80104690 <exit+0xc0>
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103cd9:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
-80103cde:	eb 0a                	jmp    80103cea <exit+0xea>
-80103ce0:	83 e8 80             	sub    $0xffffff80,%eax
-80103ce3:	3d 54 4d 11 80       	cmp    $0x80114d54,%eax
-80103ce8:	73 d6                	jae    80103cc0 <exit+0xc0>
+801046a9:	b8 f4 3f 11 80       	mov    $0x80113ff4,%eax
+801046ae:	eb 0a                	jmp    801046ba <exit+0xea>
+801046b0:	83 e8 80             	sub    $0xffffff80,%eax
+801046b3:	3d f4 5f 11 80       	cmp    $0x80115ff4,%eax
+801046b8:	73 d6                	jae    80104690 <exit+0xc0>
     if(p->state == SLEEPING && p->chan == chan)
-80103cea:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-80103cee:	75 f0                	jne    80103ce0 <exit+0xe0>
-80103cf0:	3b 48 20             	cmp    0x20(%eax),%ecx
-80103cf3:	75 eb                	jne    80103ce0 <exit+0xe0>
+801046ba:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+801046be:	75 f0                	jne    801046b0 <exit+0xe0>
+801046c0:	3b 48 20             	cmp    0x20(%eax),%ecx
+801046c3:	75 eb                	jne    801046b0 <exit+0xe0>
       p->state = RUNNABLE;
-80103cf5:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
-80103cfc:	eb e2                	jmp    80103ce0 <exit+0xe0>
+801046c5:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+801046cc:	eb e2                	jmp    801046b0 <exit+0xe0>
   curproc->state = ZOMBIE;
-80103cfe:	c7 46 0c 05 00 00 00 	movl   $0x5,0xc(%esi)
+801046ce:	c7 46 0c 05 00 00 00 	movl   $0x5,0xc(%esi)
   sched();
-80103d05:	e8 36 fe ff ff       	call   80103b40 <sched>
+801046d5:	e8 e6 fb ff ff       	call   801042c0 <sched>
   panic("zombie exit");
-80103d0a:	83 ec 0c             	sub    $0xc,%esp
-80103d0d:	68 fd 78 10 80       	push   $0x801078fd
-80103d12:	e8 79 c6 ff ff       	call   80100390 <panic>
+801046da:	83 ec 0c             	sub    $0xc,%esp
+801046dd:	68 be 82 10 80       	push   $0x801082be
+801046e2:	e8 a9 bc ff ff       	call   80100390 <panic>
     panic("init exiting");
-80103d17:	83 ec 0c             	sub    $0xc,%esp
-80103d1a:	68 f0 78 10 80       	push   $0x801078f0
-80103d1f:	e8 6c c6 ff ff       	call   80100390 <panic>
-80103d24:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80103d2a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
-
-80103d30 <yield>:
-{
-80103d30:	55                   	push   %ebp
-80103d31:	89 e5                	mov    %esp,%ebp
-80103d33:	53                   	push   %ebx
-80103d34:	83 ec 10             	sub    $0x10,%esp
+801046e7:	83 ec 0c             	sub    $0xc,%esp
+801046ea:	68 b1 82 10 80       	push   $0x801082b1
+801046ef:	e8 9c bc ff ff       	call   80100390 <panic>
+801046f4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801046fa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+80104700 <yield>:
+{
+80104700:	55                   	push   %ebp
+80104701:	89 e5                	mov    %esp,%ebp
+80104703:	53                   	push   %ebx
+80104704:	83 ec 10             	sub    $0x10,%esp
   acquire(&ptable.lock);  //DOC: yieldlock
-80103d37:	68 20 2d 11 80       	push   $0x80112d20
-80103d3c:	e8 3f 09 00 00       	call   80104680 <acquire>
+80104707:	68 c0 3f 11 80       	push   $0x80113fc0
+8010470c:	e8 4f 08 00 00       	call   80104f60 <acquire>
   pushcli();
-80103d41:	e8 6a 08 00 00       	call   801045b0 <pushcli>
+80104711:	e8 7a 07 00 00       	call   80104e90 <pushcli>
   c = mycpu();
-80103d46:	e8 f5 f9 ff ff       	call   80103740 <mycpu>
+80104716:	e8 65 f3 ff ff       	call   80103a80 <mycpu>
   p = c->proc;
-80103d4b:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+8010471b:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103d51:	e8 9a 08 00 00       	call   801045f0 <popcli>
+80104721:	e8 aa 07 00 00       	call   80104ed0 <popcli>
   myproc()->state = RUNNABLE;
-80103d56:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+80104726:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
   sched();
-80103d5d:	e8 de fd ff ff       	call   80103b40 <sched>
+8010472d:	e8 8e fb ff ff       	call   801042c0 <sched>
   release(&ptable.lock);
-80103d62:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103d69:	e8 d2 09 00 00       	call   80104740 <release>
+80104732:	c7 04 24 c0 3f 11 80 	movl   $0x80113fc0,(%esp)
+80104739:	e8 e2 08 00 00       	call   80105020 <release>
 }
-80103d6e:	83 c4 10             	add    $0x10,%esp
-80103d71:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80103d74:	c9                   	leave  
-80103d75:	c3                   	ret    
-80103d76:	8d 76 00             	lea    0x0(%esi),%esi
-80103d79:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-80103d80 <sleep>:
-{
-80103d80:	55                   	push   %ebp
-80103d81:	89 e5                	mov    %esp,%ebp
-80103d83:	57                   	push   %edi
-80103d84:	56                   	push   %esi
-80103d85:	53                   	push   %ebx
-80103d86:	83 ec 0c             	sub    $0xc,%esp
-80103d89:	8b 7d 08             	mov    0x8(%ebp),%edi
-80103d8c:	8b 75 0c             	mov    0xc(%ebp),%esi
+8010473e:	83 c4 10             	add    $0x10,%esp
+80104741:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104744:	c9                   	leave  
+80104745:	c3                   	ret    
+80104746:	8d 76 00             	lea    0x0(%esi),%esi
+80104749:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104750 <sleep>:
+{
+80104750:	55                   	push   %ebp
+80104751:	89 e5                	mov    %esp,%ebp
+80104753:	57                   	push   %edi
+80104754:	56                   	push   %esi
+80104755:	53                   	push   %ebx
+80104756:	83 ec 0c             	sub    $0xc,%esp
+80104759:	8b 7d 08             	mov    0x8(%ebp),%edi
+8010475c:	8b 75 0c             	mov    0xc(%ebp),%esi
   pushcli();
-80103d8f:	e8 1c 08 00 00       	call   801045b0 <pushcli>
+8010475f:	e8 2c 07 00 00       	call   80104e90 <pushcli>
   c = mycpu();
-80103d94:	e8 a7 f9 ff ff       	call   80103740 <mycpu>
+80104764:	e8 17 f3 ff ff       	call   80103a80 <mycpu>
   p = c->proc;
-80103d99:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80104769:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103d9f:	e8 4c 08 00 00       	call   801045f0 <popcli>
+8010476f:	e8 5c 07 00 00       	call   80104ed0 <popcli>
   if(p == 0)
-80103da4:	85 db                	test   %ebx,%ebx
-80103da6:	0f 84 87 00 00 00    	je     80103e33 <sleep+0xb3>
+80104774:	85 db                	test   %ebx,%ebx
+80104776:	0f 84 87 00 00 00    	je     80104803 <sleep+0xb3>
   if(lk == 0)
-80103dac:	85 f6                	test   %esi,%esi
-80103dae:	74 76                	je     80103e26 <sleep+0xa6>
+8010477c:	85 f6                	test   %esi,%esi
+8010477e:	74 76                	je     801047f6 <sleep+0xa6>
   if(lk != &ptable.lock){  //DOC: sleeplock0
-80103db0:	81 fe 20 2d 11 80    	cmp    $0x80112d20,%esi
-80103db6:	74 50                	je     80103e08 <sleep+0x88>
+80104780:	81 fe c0 3f 11 80    	cmp    $0x80113fc0,%esi
+80104786:	74 50                	je     801047d8 <sleep+0x88>
     acquire(&ptable.lock);  //DOC: sleeplock1
-80103db8:	83 ec 0c             	sub    $0xc,%esp
-80103dbb:	68 20 2d 11 80       	push   $0x80112d20
-80103dc0:	e8 bb 08 00 00       	call   80104680 <acquire>
+80104788:	83 ec 0c             	sub    $0xc,%esp
+8010478b:	68 c0 3f 11 80       	push   $0x80113fc0
+80104790:	e8 cb 07 00 00       	call   80104f60 <acquire>
     release(lk);
-80103dc5:	89 34 24             	mov    %esi,(%esp)
-80103dc8:	e8 73 09 00 00       	call   80104740 <release>
+80104795:	89 34 24             	mov    %esi,(%esp)
+80104798:	e8 83 08 00 00       	call   80105020 <release>
   p->chan = chan;
-80103dcd:	89 7b 20             	mov    %edi,0x20(%ebx)
+8010479d:	89 7b 20             	mov    %edi,0x20(%ebx)
   p->state = SLEEPING;
-80103dd0:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+801047a0:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
   sched();
-80103dd7:	e8 64 fd ff ff       	call   80103b40 <sched>
+801047a7:	e8 14 fb ff ff       	call   801042c0 <sched>
   p->chan = 0;
-80103ddc:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+801047ac:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
     release(&ptable.lock);
-80103de3:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103dea:	e8 51 09 00 00       	call   80104740 <release>
+801047b3:	c7 04 24 c0 3f 11 80 	movl   $0x80113fc0,(%esp)
+801047ba:	e8 61 08 00 00       	call   80105020 <release>
     acquire(lk);
-80103def:	89 75 08             	mov    %esi,0x8(%ebp)
-80103df2:	83 c4 10             	add    $0x10,%esp
+801047bf:	89 75 08             	mov    %esi,0x8(%ebp)
+801047c2:	83 c4 10             	add    $0x10,%esp
 }
-80103df5:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80103df8:	5b                   	pop    %ebx
-80103df9:	5e                   	pop    %esi
-80103dfa:	5f                   	pop    %edi
-80103dfb:	5d                   	pop    %ebp
+801047c5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801047c8:	5b                   	pop    %ebx
+801047c9:	5e                   	pop    %esi
+801047ca:	5f                   	pop    %edi
+801047cb:	5d                   	pop    %ebp
     acquire(lk);
-80103dfc:	e9 7f 08 00 00       	jmp    80104680 <acquire>
-80103e01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801047cc:	e9 8f 07 00 00       	jmp    80104f60 <acquire>
+801047d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   p->chan = chan;
-80103e08:	89 7b 20             	mov    %edi,0x20(%ebx)
+801047d8:	89 7b 20             	mov    %edi,0x20(%ebx)
   p->state = SLEEPING;
-80103e0b:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+801047db:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
   sched();
-80103e12:	e8 29 fd ff ff       	call   80103b40 <sched>
+801047e2:	e8 d9 fa ff ff       	call   801042c0 <sched>
   p->chan = 0;
-80103e17:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+801047e7:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
 }
-80103e1e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80103e21:	5b                   	pop    %ebx
-80103e22:	5e                   	pop    %esi
-80103e23:	5f                   	pop    %edi
-80103e24:	5d                   	pop    %ebp
-80103e25:	c3                   	ret    
+801047ee:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801047f1:	5b                   	pop    %ebx
+801047f2:	5e                   	pop    %esi
+801047f3:	5f                   	pop    %edi
+801047f4:	5d                   	pop    %ebp
+801047f5:	c3                   	ret    
     panic("sleep without lk");
-80103e26:	83 ec 0c             	sub    $0xc,%esp
-80103e29:	68 0f 79 10 80       	push   $0x8010790f
-80103e2e:	e8 5d c5 ff ff       	call   80100390 <panic>
+801047f6:	83 ec 0c             	sub    $0xc,%esp
+801047f9:	68 d0 82 10 80       	push   $0x801082d0
+801047fe:	e8 8d bb ff ff       	call   80100390 <panic>
     panic("sleep");
-80103e33:	83 ec 0c             	sub    $0xc,%esp
-80103e36:	68 09 79 10 80       	push   $0x80107909
-80103e3b:	e8 50 c5 ff ff       	call   80100390 <panic>
-
-80103e40 <wait>:
-{
-80103e40:	55                   	push   %ebp
-80103e41:	89 e5                	mov    %esp,%ebp
-80103e43:	56                   	push   %esi
-80103e44:	53                   	push   %ebx
+80104803:	83 ec 0c             	sub    $0xc,%esp
+80104806:	68 ca 82 10 80       	push   $0x801082ca
+8010480b:	e8 80 bb ff ff       	call   80100390 <panic>
+
+80104810 <wait>:
+{
+80104810:	55                   	push   %ebp
+80104811:	89 e5                	mov    %esp,%ebp
+80104813:	56                   	push   %esi
+80104814:	53                   	push   %ebx
   pushcli();
-80103e45:	e8 66 07 00 00       	call   801045b0 <pushcli>
+80104815:	e8 76 06 00 00       	call   80104e90 <pushcli>
   c = mycpu();
-80103e4a:	e8 f1 f8 ff ff       	call   80103740 <mycpu>
+8010481a:	e8 61 f2 ff ff       	call   80103a80 <mycpu>
   p = c->proc;
-80103e4f:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+8010481f:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
   popcli();
-80103e55:	e8 96 07 00 00       	call   801045f0 <popcli>
+80104825:	e8 a6 06 00 00       	call   80104ed0 <popcli>
   acquire(&ptable.lock);
-80103e5a:	83 ec 0c             	sub    $0xc,%esp
-80103e5d:	68 20 2d 11 80       	push   $0x80112d20
-80103e62:	e8 19 08 00 00       	call   80104680 <acquire>
-80103e67:	83 c4 10             	add    $0x10,%esp
+8010482a:	83 ec 0c             	sub    $0xc,%esp
+8010482d:	68 c0 3f 11 80       	push   $0x80113fc0
+80104832:	e8 29 07 00 00       	call   80104f60 <acquire>
+80104837:	83 c4 10             	add    $0x10,%esp
     havekids = 0;
-80103e6a:	31 c0                	xor    %eax,%eax
+8010483a:	31 c0                	xor    %eax,%eax
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103e6c:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
-80103e71:	eb 10                	jmp    80103e83 <wait+0x43>
-80103e73:	90                   	nop
-80103e74:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80103e78:	83 eb 80             	sub    $0xffffff80,%ebx
-80103e7b:	81 fb 54 4d 11 80    	cmp    $0x80114d54,%ebx
-80103e81:	73 1b                	jae    80103e9e <wait+0x5e>
+8010483c:	bb f4 3f 11 80       	mov    $0x80113ff4,%ebx
+80104841:	eb 10                	jmp    80104853 <wait+0x43>
+80104843:	90                   	nop
+80104844:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104848:	83 eb 80             	sub    $0xffffff80,%ebx
+8010484b:	81 fb f4 5f 11 80    	cmp    $0x80115ff4,%ebx
+80104851:	73 1b                	jae    8010486e <wait+0x5e>
       if(p->parent != curproc)
-80103e83:	39 73 14             	cmp    %esi,0x14(%ebx)
-80103e86:	75 f0                	jne    80103e78 <wait+0x38>
+80104853:	39 73 14             	cmp    %esi,0x14(%ebx)
+80104856:	75 f0                	jne    80104848 <wait+0x38>
       if(p->state == ZOMBIE){
-80103e88:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
-80103e8c:	74 32                	je     80103ec0 <wait+0x80>
+80104858:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
+8010485c:	74 32                	je     80104890 <wait+0x80>
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103e8e:	83 eb 80             	sub    $0xffffff80,%ebx
+8010485e:	83 eb 80             	sub    $0xffffff80,%ebx
       havekids = 1;
-80103e91:	b8 01 00 00 00       	mov    $0x1,%eax
+80104861:	b8 01 00 00 00       	mov    $0x1,%eax
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103e96:	81 fb 54 4d 11 80    	cmp    $0x80114d54,%ebx
-80103e9c:	72 e5                	jb     80103e83 <wait+0x43>
+80104866:	81 fb f4 5f 11 80    	cmp    $0x80115ff4,%ebx
+8010486c:	72 e5                	jb     80104853 <wait+0x43>
     if(!havekids || curproc->killed){
-80103e9e:	85 c0                	test   %eax,%eax
-80103ea0:	74 74                	je     80103f16 <wait+0xd6>
-80103ea2:	8b 46 24             	mov    0x24(%esi),%eax
-80103ea5:	85 c0                	test   %eax,%eax
-80103ea7:	75 6d                	jne    80103f16 <wait+0xd6>
+8010486e:	85 c0                	test   %eax,%eax
+80104870:	74 74                	je     801048e6 <wait+0xd6>
+80104872:	8b 46 24             	mov    0x24(%esi),%eax
+80104875:	85 c0                	test   %eax,%eax
+80104877:	75 6d                	jne    801048e6 <wait+0xd6>
     sleep(curproc, &ptable.lock);  //DOC: wait-sleep
-80103ea9:	83 ec 08             	sub    $0x8,%esp
-80103eac:	68 20 2d 11 80       	push   $0x80112d20
-80103eb1:	56                   	push   %esi
-80103eb2:	e8 c9 fe ff ff       	call   80103d80 <sleep>
+80104879:	83 ec 08             	sub    $0x8,%esp
+8010487c:	68 c0 3f 11 80       	push   $0x80113fc0
+80104881:	56                   	push   %esi
+80104882:	e8 c9 fe ff ff       	call   80104750 <sleep>
     havekids = 0;
-80103eb7:	83 c4 10             	add    $0x10,%esp
-80103eba:	eb ae                	jmp    80103e6a <wait+0x2a>
-80103ebc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104887:	83 c4 10             	add    $0x10,%esp
+8010488a:	eb ae                	jmp    8010483a <wait+0x2a>
+8010488c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         kfree(p->kstack);
-80103ec0:	83 ec 0c             	sub    $0xc,%esp
-80103ec3:	ff 73 08             	pushl  0x8(%ebx)
+80104890:	83 ec 0c             	sub    $0xc,%esp
+80104893:	ff 73 08             	pushl  0x8(%ebx)
         pid = p->pid;
-80103ec6:	8b 73 10             	mov    0x10(%ebx),%esi
+80104896:	8b 73 10             	mov    0x10(%ebx),%esi
         kfree(p->kstack);
-80103ec9:	e8 42 e4 ff ff       	call   80102310 <kfree>
+80104899:	e8 72 da ff ff       	call   80102310 <kfree>
         freevm(p->pgdir);
-80103ece:	5a                   	pop    %edx
-80103ecf:	ff 73 04             	pushl  0x4(%ebx)
+8010489e:	5a                   	pop    %edx
+8010489f:	ff 73 04             	pushl  0x4(%ebx)
         p->kstack = 0;
-80103ed2:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+801048a2:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
         freevm(p->pgdir);
-80103ed9:	e8 12 31 00 00       	call   80106ff0 <freevm>
+801048a9:	e8 72 30 00 00       	call   80107920 <freevm>
         release(&ptable.lock);
-80103ede:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+801048ae:	c7 04 24 c0 3f 11 80 	movl   $0x80113fc0,(%esp)
         p->pid = 0;
-80103ee5:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
+801048b5:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
         p->parent = 0;
-80103eec:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
+801048bc:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
         p->name[0] = 0;
-80103ef3:	c6 43 6c 00          	movb   $0x0,0x6c(%ebx)
+801048c3:	c6 43 6c 00          	movb   $0x0,0x6c(%ebx)
         p->killed = 0;
-80103ef7:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
+801048c7:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
         p->state = UNUSED;
-80103efe:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+801048ce:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
         release(&ptable.lock);
-80103f05:	e8 36 08 00 00       	call   80104740 <release>
+801048d5:	e8 46 07 00 00       	call   80105020 <release>
         return pid;
-80103f0a:	83 c4 10             	add    $0x10,%esp
+801048da:	83 c4 10             	add    $0x10,%esp
 }
-80103f0d:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80103f10:	89 f0                	mov    %esi,%eax
-80103f12:	5b                   	pop    %ebx
-80103f13:	5e                   	pop    %esi
-80103f14:	5d                   	pop    %ebp
-80103f15:	c3                   	ret    
+801048dd:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801048e0:	89 f0                	mov    %esi,%eax
+801048e2:	5b                   	pop    %ebx
+801048e3:	5e                   	pop    %esi
+801048e4:	5d                   	pop    %ebp
+801048e5:	c3                   	ret    
       release(&ptable.lock);
-80103f16:	83 ec 0c             	sub    $0xc,%esp
+801048e6:	83 ec 0c             	sub    $0xc,%esp
       return -1;
-80103f19:	be ff ff ff ff       	mov    $0xffffffff,%esi
+801048e9:	be ff ff ff ff       	mov    $0xffffffff,%esi
       release(&ptable.lock);
-80103f1e:	68 20 2d 11 80       	push   $0x80112d20
-80103f23:	e8 18 08 00 00       	call   80104740 <release>
+801048ee:	68 c0 3f 11 80       	push   $0x80113fc0
+801048f3:	e8 28 07 00 00       	call   80105020 <release>
       return -1;
-80103f28:	83 c4 10             	add    $0x10,%esp
-80103f2b:	eb e0                	jmp    80103f0d <wait+0xcd>
-80103f2d:	8d 76 00             	lea    0x0(%esi),%esi
+801048f8:	83 c4 10             	add    $0x10,%esp
+801048fb:	eb e0                	jmp    801048dd <wait+0xcd>
+801048fd:	8d 76 00             	lea    0x0(%esi),%esi
 
-80103f30 <wakeup>:
+80104900 <wakeup>:
 }
 
 // Wake up all processes sleeping on chan.
 void
 wakeup(void *chan)
 {
-80103f30:	55                   	push   %ebp
-80103f31:	89 e5                	mov    %esp,%ebp
-80103f33:	53                   	push   %ebx
-80103f34:	83 ec 10             	sub    $0x10,%esp
-80103f37:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104900:	55                   	push   %ebp
+80104901:	89 e5                	mov    %esp,%ebp
+80104903:	53                   	push   %ebx
+80104904:	83 ec 10             	sub    $0x10,%esp
+80104907:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&ptable.lock);
-80103f3a:	68 20 2d 11 80       	push   $0x80112d20
-80103f3f:	e8 3c 07 00 00       	call   80104680 <acquire>
-80103f44:	83 c4 10             	add    $0x10,%esp
+8010490a:	68 c0 3f 11 80       	push   $0x80113fc0
+8010490f:	e8 4c 06 00 00       	call   80104f60 <acquire>
+80104914:	83 c4 10             	add    $0x10,%esp
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103f47:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
-80103f4c:	eb 0c                	jmp    80103f5a <wakeup+0x2a>
-80103f4e:	66 90                	xchg   %ax,%ax
-80103f50:	83 e8 80             	sub    $0xffffff80,%eax
-80103f53:	3d 54 4d 11 80       	cmp    $0x80114d54,%eax
-80103f58:	73 1c                	jae    80103f76 <wakeup+0x46>
+80104917:	b8 f4 3f 11 80       	mov    $0x80113ff4,%eax
+8010491c:	eb 0c                	jmp    8010492a <wakeup+0x2a>
+8010491e:	66 90                	xchg   %ax,%ax
+80104920:	83 e8 80             	sub    $0xffffff80,%eax
+80104923:	3d f4 5f 11 80       	cmp    $0x80115ff4,%eax
+80104928:	73 1c                	jae    80104946 <wakeup+0x46>
     if(p->state == SLEEPING && p->chan == chan)
-80103f5a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-80103f5e:	75 f0                	jne    80103f50 <wakeup+0x20>
-80103f60:	3b 58 20             	cmp    0x20(%eax),%ebx
-80103f63:	75 eb                	jne    80103f50 <wakeup+0x20>
+8010492a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+8010492e:	75 f0                	jne    80104920 <wakeup+0x20>
+80104930:	3b 58 20             	cmp    0x20(%eax),%ebx
+80104933:	75 eb                	jne    80104920 <wakeup+0x20>
       p->state = RUNNABLE;
-80103f65:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+80104935:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103f6c:	83 e8 80             	sub    $0xffffff80,%eax
-80103f6f:	3d 54 4d 11 80       	cmp    $0x80114d54,%eax
-80103f74:	72 e4                	jb     80103f5a <wakeup+0x2a>
+8010493c:	83 e8 80             	sub    $0xffffff80,%eax
+8010493f:	3d f4 5f 11 80       	cmp    $0x80115ff4,%eax
+80104944:	72 e4                	jb     8010492a <wakeup+0x2a>
   wakeup1(chan);
   release(&ptable.lock);
-80103f76:	c7 45 08 20 2d 11 80 	movl   $0x80112d20,0x8(%ebp)
+80104946:	c7 45 08 c0 3f 11 80 	movl   $0x80113fc0,0x8(%ebp)
 }
-80103f7d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80103f80:	c9                   	leave  
+8010494d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104950:	c9                   	leave  
   release(&ptable.lock);
-80103f81:	e9 ba 07 00 00       	jmp    80104740 <release>
-80103f86:	8d 76 00             	lea    0x0(%esi),%esi
-80103f89:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80104951:	e9 ca 06 00 00       	jmp    80105020 <release>
+80104956:	8d 76 00             	lea    0x0(%esi),%esi
+80104959:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104960 <swap_in_process_function>:
+void swap_in_process_function(){
+80104960:	55                   	push   %ebp
+80104961:	89 e5                	mov    %esp,%ebp
+80104963:	57                   	push   %edi
+80104964:	56                   	push   %esi
+80104965:	53                   	push   %ebx
+80104966:	83 ec 68             	sub    $0x68,%esp
+	acquire(&rqueue2.lock);
+80104969:	68 80 3e 11 80       	push   $0x80113e80
+8010496e:	e8 ed 05 00 00       	call   80104f60 <acquire>
+	while(rqueue2.s!=rqueue2.e){
+80104973:	83 c4 10             	add    $0x10,%esp
+80104976:	a1 b4 3f 11 80       	mov    0x80113fb4,%eax
+8010497b:	39 05 b8 3f 11 80    	cmp    %eax,0x80113fb8
+80104981:	0f 84 01 01 00 00    	je     80104a88 <swap_in_process_function+0x128>
+80104987:	8d 5d b6             	lea    -0x4a(%ebp),%ebx
+8010498a:	e9 bf 00 00 00       	jmp    80104a4e <swap_in_process_function+0xee>
+8010498f:	90                   	nop
+    c[0]='0';
+80104990:	b8 30 00 00 00       	mov    $0x30,%eax
+80104995:	66 89 45 b6          	mov    %ax,-0x4a(%ebp)
+	    	int x=strlen(c);
+80104999:	83 ec 0c             	sub    $0xc,%esp
+8010499c:	53                   	push   %ebx
+8010499d:	e8 ee 08 00 00       	call   80105290 <strlen>
+  if(x==0){
+801049a2:	83 c4 10             	add    $0x10,%esp
+801049a5:	85 f6                	test   %esi,%esi
+	    	c[x]='_';
+801049a7:	c6 44 05 b6 5f       	movb   $0x5f,-0x4a(%ebp,%eax,1)
+	    	int_to_string(virt,c+x+1);
+801049ac:	8d 54 03 01          	lea    0x1(%ebx,%eax,1),%edx
+  if(x==0){
+801049b0:	0f 85 c2 00 00 00    	jne    80104a78 <swap_in_process_function+0x118>
+    c[0]='0';
+801049b6:	b8 30 00 00 00       	mov    $0x30,%eax
+801049bb:	66 89 02             	mov    %ax,(%edx)
+	    	safestrcpy(c+strlen(c),".swp",5);
+801049be:	83 ec 0c             	sub    $0xc,%esp
+801049c1:	53                   	push   %ebx
+801049c2:	e8 c9 08 00 00       	call   80105290 <strlen>
+801049c7:	83 c4 0c             	add    $0xc,%esp
+801049ca:	01 d8                	add    %ebx,%eax
+801049cc:	6a 05                	push   $0x5
+801049ce:	68 6f 82 10 80       	push   $0x8010826f
+801049d3:	50                   	push   %eax
+801049d4:	e8 77 08 00 00       	call   80105250 <safestrcpy>
+	    	int fd=proc_open(c,O_RDONLY);
+801049d9:	59                   	pop    %ecx
+801049da:	58                   	pop    %eax
+801049db:	6a 00                	push   $0x0
+801049dd:	53                   	push   %ebx
+801049de:	e8 6d f2 ff ff       	call   80103c50 <proc_open>
+	    	if(fd<0){
+801049e3:	83 c4 10             	add    $0x10,%esp
+801049e6:	85 c0                	test   %eax,%eax
+801049e8:	0f 88 f3 00 00 00    	js     80104ae1 <swap_in_process_function+0x181>
+801049ee:	89 45 a0             	mov    %eax,-0x60(%ebp)
+	    	char *mem=kalloc();
+801049f1:	e8 4a db ff ff       	call   80102540 <kalloc>
+	    	proc_read(fd,PGSIZE,mem);
+801049f6:	8b 4d a0             	mov    -0x60(%ebp),%ecx
+801049f9:	83 ec 04             	sub    $0x4,%esp
+801049fc:	89 45 a4             	mov    %eax,-0x5c(%ebp)
+801049ff:	50                   	push   %eax
+80104a00:	68 00 10 00 00       	push   $0x1000
+80104a05:	51                   	push   %ecx
+80104a06:	e8 e5 f1 ff ff       	call   80103bf0 <proc_read>
+	    	if(mappages(p->pgdir, (void *)virt, PGSIZE, V2P(mem), PTE_W|PTE_U)<0){
+80104a0b:	8b 55 a4             	mov    -0x5c(%ebp),%edx
+80104a0e:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
+80104a15:	81 c2 00 00 00 80    	add    $0x80000000,%edx
+80104a1b:	52                   	push   %edx
+80104a1c:	68 00 10 00 00       	push   $0x1000
+80104a21:	56                   	push   %esi
+80104a22:	ff 77 04             	pushl  0x4(%edi)
+80104a25:	e8 26 2a 00 00       	call   80107450 <mappages>
+80104a2a:	83 c4 20             	add    $0x20,%esp
+80104a2d:	85 c0                	test   %eax,%eax
+80104a2f:	0f 88 d2 00 00 00    	js     80104b07 <swap_in_process_function+0x1a7>
+	    	wakeup(p);
+80104a35:	83 ec 0c             	sub    $0xc,%esp
+80104a38:	57                   	push   %edi
+80104a39:	e8 c2 fe ff ff       	call   80104900 <wakeup>
+	while(rqueue2.s!=rqueue2.e){
+80104a3e:	83 c4 10             	add    $0x10,%esp
+80104a41:	a1 b8 3f 11 80       	mov    0x80113fb8,%eax
+80104a46:	39 05 b4 3f 11 80    	cmp    %eax,0x80113fb4
+80104a4c:	74 3a                	je     80104a88 <swap_in_process_function+0x128>
+		struct proc *p=rpop2();
+80104a4e:	e8 7d ee ff ff       	call   801038d0 <rpop2>
+80104a53:	89 c7                	mov    %eax,%edi
+		int pid=p->pid;
+80104a55:	8b 40 10             	mov    0x10(%eax),%eax
+		int virt=PTE_ADDR(p->addr);
+80104a58:	8b 77 7c             	mov    0x7c(%edi),%esi
+80104a5b:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
+  if(x==0){
+80104a61:	85 c0                	test   %eax,%eax
+80104a63:	0f 84 27 ff ff ff    	je     80104990 <swap_in_process_function+0x30>
+80104a69:	89 da                	mov    %ebx,%edx
+80104a6b:	e8 30 ed ff ff       	call   801037a0 <int_to_string.part.1>
+80104a70:	e9 24 ff ff ff       	jmp    80104999 <swap_in_process_function+0x39>
+80104a75:	8d 76 00             	lea    0x0(%esi),%esi
+80104a78:	89 f0                	mov    %esi,%eax
+80104a7a:	e8 21 ed ff ff       	call   801037a0 <int_to_string.part.1>
+80104a7f:	e9 3a ff ff ff       	jmp    801049be <swap_in_process_function+0x5e>
+80104a84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    release(&rqueue2.lock);
+80104a88:	83 ec 0c             	sub    $0xc,%esp
+80104a8b:	68 80 3e 11 80       	push   $0x80113e80
+80104a90:	e8 8b 05 00 00       	call   80105020 <release>
+  pushcli();
+80104a95:	e8 f6 03 00 00       	call   80104e90 <pushcli>
+  c = mycpu();
+80104a9a:	e8 e1 ef ff ff       	call   80103a80 <mycpu>
+  p = c->proc;
+80104a9f:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80104aa5:	e8 26 04 00 00       	call   80104ed0 <popcli>
+	if((p=myproc())==0)panic("swap_in_process");
+80104aaa:	83 c4 10             	add    $0x10,%esp
+80104aad:	85 db                	test   %ebx,%ebx
+80104aaf:	74 6f                	je     80104b20 <swap_in_process_function+0x1c0>
+	p->killed = 0;
+80104ab1:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
+	p->state = UNUSED;
+80104ab8:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+	p->parent = 0;
+80104abf:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
+	p->name[0] = '*';
+80104ac6:	c6 43 6c 2a          	movb   $0x2a,0x6c(%ebx)
+	swap_in_process_exists=0;
+80104aca:	c7 05 bc b5 10 80 00 	movl   $0x0,0x8010b5bc
+80104ad1:	00 00 00 
+	sched();
+80104ad4:	e8 e7 f7 ff ff       	call   801042c0 <sched>
+}
+80104ad9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104adc:	5b                   	pop    %ebx
+80104add:	5e                   	pop    %esi
+80104ade:	5f                   	pop    %edi
+80104adf:	5d                   	pop    %ebp
+80104ae0:	c3                   	ret    
+	    		release(&rqueue2.lock);
+80104ae1:	83 ec 0c             	sub    $0xc,%esp
+80104ae4:	68 80 3e 11 80       	push   $0x80113e80
+80104ae9:	e8 32 05 00 00       	call   80105020 <release>
+	    		cprintf("could not find page file in memory: %s\n", c);
+80104aee:	58                   	pop    %eax
+80104aef:	5a                   	pop    %edx
+80104af0:	53                   	push   %ebx
+80104af1:	68 ac 83 10 80       	push   $0x801083ac
+80104af6:	e8 65 bb ff ff       	call   80100660 <cprintf>
+	    		panic("swap_in_process");
+80104afb:	c7 04 24 e1 82 10 80 	movl   $0x801082e1,(%esp)
+80104b02:	e8 89 b8 ff ff       	call   80100390 <panic>
+	    		release(&rqueue2.lock);
+80104b07:	83 ec 0c             	sub    $0xc,%esp
+80104b0a:	68 80 3e 11 80       	push   $0x80113e80
+80104b0f:	e8 0c 05 00 00       	call   80105020 <release>
+	    		panic("mappages");
+80104b14:	c7 04 24 f1 82 10 80 	movl   $0x801082f1,(%esp)
+80104b1b:	e8 70 b8 ff ff       	call   80100390 <panic>
+	if((p=myproc())==0)panic("swap_in_process");
+80104b20:	83 ec 0c             	sub    $0xc,%esp
+80104b23:	68 e1 82 10 80       	push   $0x801082e1
+80104b28:	e8 63 b8 ff ff       	call   80100390 <panic>
+80104b2d:	8d 76 00             	lea    0x0(%esi),%esi
 
-80103f90 <kill>:
+80104b30 <kill>:
 // Kill the process with the given pid.
 // Process won't exit until it returns
 // to user space (see trap in trap.c).
 int
 kill(int pid)
 {
-80103f90:	55                   	push   %ebp
-80103f91:	89 e5                	mov    %esp,%ebp
-80103f93:	53                   	push   %ebx
-80103f94:	83 ec 10             	sub    $0x10,%esp
-80103f97:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104b30:	55                   	push   %ebp
+80104b31:	89 e5                	mov    %esp,%ebp
+80104b33:	53                   	push   %ebx
+80104b34:	83 ec 10             	sub    $0x10,%esp
+80104b37:	8b 5d 08             	mov    0x8(%ebp),%ebx
   struct proc *p;
 
   acquire(&ptable.lock);
-80103f9a:	68 20 2d 11 80       	push   $0x80112d20
-80103f9f:	e8 dc 06 00 00       	call   80104680 <acquire>
-80103fa4:	83 c4 10             	add    $0x10,%esp
+80104b3a:	68 c0 3f 11 80       	push   $0x80113fc0
+80104b3f:	e8 1c 04 00 00       	call   80104f60 <acquire>
+80104b44:	83 c4 10             	add    $0x10,%esp
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103fa7:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
-80103fac:	eb 0c                	jmp    80103fba <kill+0x2a>
-80103fae:	66 90                	xchg   %ax,%ax
-80103fb0:	83 e8 80             	sub    $0xffffff80,%eax
-80103fb3:	3d 54 4d 11 80       	cmp    $0x80114d54,%eax
-80103fb8:	73 36                	jae    80103ff0 <kill+0x60>
+80104b47:	b8 f4 3f 11 80       	mov    $0x80113ff4,%eax
+80104b4c:	eb 0c                	jmp    80104b5a <kill+0x2a>
+80104b4e:	66 90                	xchg   %ax,%ax
+80104b50:	83 e8 80             	sub    $0xffffff80,%eax
+80104b53:	3d f4 5f 11 80       	cmp    $0x80115ff4,%eax
+80104b58:	73 36                	jae    80104b90 <kill+0x60>
     if(p->pid == pid){
-80103fba:	39 58 10             	cmp    %ebx,0x10(%eax)
-80103fbd:	75 f1                	jne    80103fb0 <kill+0x20>
+80104b5a:	39 58 10             	cmp    %ebx,0x10(%eax)
+80104b5d:	75 f1                	jne    80104b50 <kill+0x20>
       p->killed = 1;
       // Wake process from sleep if necessary.
       if(p->state == SLEEPING)
-80103fbf:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80104b5f:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
       p->killed = 1;
-80103fc3:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+80104b63:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
       if(p->state == SLEEPING)
-80103fca:	75 07                	jne    80103fd3 <kill+0x43>
+80104b6a:	75 07                	jne    80104b73 <kill+0x43>
         p->state = RUNNABLE;
-80103fcc:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+80104b6c:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
       release(&ptable.lock);
-80103fd3:	83 ec 0c             	sub    $0xc,%esp
-80103fd6:	68 20 2d 11 80       	push   $0x80112d20
-80103fdb:	e8 60 07 00 00       	call   80104740 <release>
+80104b73:	83 ec 0c             	sub    $0xc,%esp
+80104b76:	68 c0 3f 11 80       	push   $0x80113fc0
+80104b7b:	e8 a0 04 00 00       	call   80105020 <release>
       return 0;
-80103fe0:	83 c4 10             	add    $0x10,%esp
-80103fe3:	31 c0                	xor    %eax,%eax
+80104b80:	83 c4 10             	add    $0x10,%esp
+80104b83:	31 c0                	xor    %eax,%eax
     }
   }
   release(&ptable.lock);
   return -1;
 }
-80103fe5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80103fe8:	c9                   	leave  
-80103fe9:	c3                   	ret    
-80103fea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104b85:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104b88:	c9                   	leave  
+80104b89:	c3                   	ret    
+80104b8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   release(&ptable.lock);
-80103ff0:	83 ec 0c             	sub    $0xc,%esp
-80103ff3:	68 20 2d 11 80       	push   $0x80112d20
-80103ff8:	e8 43 07 00 00       	call   80104740 <release>
+80104b90:	83 ec 0c             	sub    $0xc,%esp
+80104b93:	68 c0 3f 11 80       	push   $0x80113fc0
+80104b98:	e8 83 04 00 00       	call   80105020 <release>
   return -1;
-80103ffd:	83 c4 10             	add    $0x10,%esp
-80104000:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104b9d:	83 c4 10             	add    $0x10,%esp
+80104ba0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80104005:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104008:	c9                   	leave  
-80104009:	c3                   	ret    
-8010400a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104ba5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104ba8:	c9                   	leave  
+80104ba9:	c3                   	ret    
+80104baa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80104010 <procdump>:
+80104bb0 <procdump>:
 // Print a process listing to console.  For debugging.
 // Runs when user types ^P on console.
 // No lock to avoid wedging a stuck machine further.
 void
 procdump(void)
 {
-80104010:	55                   	push   %ebp
-80104011:	89 e5                	mov    %esp,%ebp
-80104013:	57                   	push   %edi
-80104014:	56                   	push   %esi
-80104015:	53                   	push   %ebx
-80104016:	8d 75 e8             	lea    -0x18(%ebp),%esi
+80104bb0:	55                   	push   %ebp
+80104bb1:	89 e5                	mov    %esp,%ebp
+80104bb3:	57                   	push   %edi
+80104bb4:	56                   	push   %esi
+80104bb5:	53                   	push   %ebx
+80104bb6:	8d 75 e8             	lea    -0x18(%ebp),%esi
   int i;
   struct proc *p;
   char *state;
   uint pc[10];
 
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104019:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
+80104bb9:	bb f4 3f 11 80       	mov    $0x80113ff4,%ebx
 {
-8010401e:	83 ec 3c             	sub    $0x3c,%esp
-80104021:	eb 24                	jmp    80104047 <procdump+0x37>
-80104023:	90                   	nop
-80104024:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104bbe:	83 ec 3c             	sub    $0x3c,%esp
+80104bc1:	eb 24                	jmp    80104be7 <procdump+0x37>
+80104bc3:	90                   	nop
+80104bc4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(p->state == SLEEPING){
       getcallerpcs((uint*)p->context->ebp+2, pc);
       for(i=0; i<10 && pc[i] != 0; i++)
         cprintf(" %p", pc[i]);
     }
     cprintf("\n");
-80104028:	83 ec 0c             	sub    $0xc,%esp
-8010402b:	68 93 7d 10 80       	push   $0x80107d93
-80104030:	e8 2b c6 ff ff       	call   80100660 <cprintf>
-80104035:	83 c4 10             	add    $0x10,%esp
+80104bc8:	83 ec 0c             	sub    $0xc,%esp
+80104bcb:	68 bb 87 10 80       	push   $0x801087bb
+80104bd0:	e8 8b ba ff ff       	call   80100660 <cprintf>
+80104bd5:	83 c4 10             	add    $0x10,%esp
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104038:	83 eb 80             	sub    $0xffffff80,%ebx
-8010403b:	81 fb 54 4d 11 80    	cmp    $0x80114d54,%ebx
-80104041:	0f 83 81 00 00 00    	jae    801040c8 <procdump+0xb8>
+80104bd8:	83 eb 80             	sub    $0xffffff80,%ebx
+80104bdb:	81 fb f4 5f 11 80    	cmp    $0x80115ff4,%ebx
+80104be1:	0f 83 81 00 00 00    	jae    80104c68 <procdump+0xb8>
     if(p->state == UNUSED)
-80104047:	8b 43 0c             	mov    0xc(%ebx),%eax
-8010404a:	85 c0                	test   %eax,%eax
-8010404c:	74 ea                	je     80104038 <procdump+0x28>
+80104be7:	8b 43 0c             	mov    0xc(%ebx),%eax
+80104bea:	85 c0                	test   %eax,%eax
+80104bec:	74 ea                	je     80104bd8 <procdump+0x28>
     if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
-8010404e:	83 f8 05             	cmp    $0x5,%eax
+80104bee:	83 f8 05             	cmp    $0x5,%eax
       state = "???";
-80104051:	ba 20 79 10 80       	mov    $0x80107920,%edx
+80104bf1:	ba fa 82 10 80       	mov    $0x801082fa,%edx
     if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
-80104056:	77 11                	ja     80104069 <procdump+0x59>
-80104058:	8b 14 85 80 79 10 80 	mov    -0x7fef8680(,%eax,4),%edx
+80104bf6:	77 11                	ja     80104c09 <procdump+0x59>
+80104bf8:	8b 14 85 d4 83 10 80 	mov    -0x7fef7c2c(,%eax,4),%edx
       state = "???";
-8010405f:	b8 20 79 10 80       	mov    $0x80107920,%eax
-80104064:	85 d2                	test   %edx,%edx
-80104066:	0f 44 d0             	cmove  %eax,%edx
+80104bff:	b8 fa 82 10 80       	mov    $0x801082fa,%eax
+80104c04:	85 d2                	test   %edx,%edx
+80104c06:	0f 44 d0             	cmove  %eax,%edx
     cprintf("%d %s %s", p->pid, state, p->name);
-80104069:	8d 43 6c             	lea    0x6c(%ebx),%eax
-8010406c:	50                   	push   %eax
-8010406d:	52                   	push   %edx
-8010406e:	ff 73 10             	pushl  0x10(%ebx)
-80104071:	68 24 79 10 80       	push   $0x80107924
-80104076:	e8 e5 c5 ff ff       	call   80100660 <cprintf>
+80104c09:	8d 43 6c             	lea    0x6c(%ebx),%eax
+80104c0c:	50                   	push   %eax
+80104c0d:	52                   	push   %edx
+80104c0e:	ff 73 10             	pushl  0x10(%ebx)
+80104c11:	68 fe 82 10 80       	push   $0x801082fe
+80104c16:	e8 45 ba ff ff       	call   80100660 <cprintf>
     if(p->state == SLEEPING){
-8010407b:	83 c4 10             	add    $0x10,%esp
-8010407e:	83 7b 0c 02          	cmpl   $0x2,0xc(%ebx)
-80104082:	75 a4                	jne    80104028 <procdump+0x18>
+80104c1b:	83 c4 10             	add    $0x10,%esp
+80104c1e:	83 7b 0c 02          	cmpl   $0x2,0xc(%ebx)
+80104c22:	75 a4                	jne    80104bc8 <procdump+0x18>
       getcallerpcs((uint*)p->context->ebp+2, pc);
-80104084:	8d 45 c0             	lea    -0x40(%ebp),%eax
-80104087:	83 ec 08             	sub    $0x8,%esp
-8010408a:	8d 7d c0             	lea    -0x40(%ebp),%edi
-8010408d:	50                   	push   %eax
-8010408e:	8b 43 1c             	mov    0x1c(%ebx),%eax
-80104091:	8b 40 0c             	mov    0xc(%eax),%eax
-80104094:	83 c0 08             	add    $0x8,%eax
-80104097:	50                   	push   %eax
-80104098:	e8 c3 04 00 00       	call   80104560 <getcallerpcs>
-8010409d:	83 c4 10             	add    $0x10,%esp
+80104c24:	8d 45 c0             	lea    -0x40(%ebp),%eax
+80104c27:	83 ec 08             	sub    $0x8,%esp
+80104c2a:	8d 7d c0             	lea    -0x40(%ebp),%edi
+80104c2d:	50                   	push   %eax
+80104c2e:	8b 43 1c             	mov    0x1c(%ebx),%eax
+80104c31:	8b 40 0c             	mov    0xc(%eax),%eax
+80104c34:	83 c0 08             	add    $0x8,%eax
+80104c37:	50                   	push   %eax
+80104c38:	e8 03 02 00 00       	call   80104e40 <getcallerpcs>
+80104c3d:	83 c4 10             	add    $0x10,%esp
       for(i=0; i<10 && pc[i] != 0; i++)
-801040a0:	8b 17                	mov    (%edi),%edx
-801040a2:	85 d2                	test   %edx,%edx
-801040a4:	74 82                	je     80104028 <procdump+0x18>
+80104c40:	8b 17                	mov    (%edi),%edx
+80104c42:	85 d2                	test   %edx,%edx
+80104c44:	74 82                	je     80104bc8 <procdump+0x18>
         cprintf(" %p", pc[i]);
-801040a6:	83 ec 08             	sub    $0x8,%esp
-801040a9:	83 c7 04             	add    $0x4,%edi
-801040ac:	52                   	push   %edx
-801040ad:	68 61 73 10 80       	push   $0x80107361
-801040b2:	e8 a9 c5 ff ff       	call   80100660 <cprintf>
+80104c46:	83 ec 08             	sub    $0x8,%esp
+80104c49:	83 c7 04             	add    $0x4,%edi
+80104c4c:	52                   	push   %edx
+80104c4d:	68 a1 7c 10 80       	push   $0x80107ca1
+80104c52:	e8 09 ba ff ff       	call   80100660 <cprintf>
       for(i=0; i<10 && pc[i] != 0; i++)
-801040b7:	83 c4 10             	add    $0x10,%esp
-801040ba:	39 fe                	cmp    %edi,%esi
-801040bc:	75 e2                	jne    801040a0 <procdump+0x90>
-801040be:	e9 65 ff ff ff       	jmp    80104028 <procdump+0x18>
-801040c3:	90                   	nop
-801040c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  }
-}
-801040c8:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801040cb:	5b                   	pop    %ebx
-801040cc:	5e                   	pop    %esi
-801040cd:	5f                   	pop    %edi
-801040ce:	5d                   	pop    %ebp
-801040cf:	c3                   	ret    
-
-801040d0 <thread_create>:
-
-// our addition to the code starts from here
-
-int thread_create(void (*fcn)(void *),void *arg,void* stack){
-801040d0:	55                   	push   %ebp
-801040d1:	89 e5                	mov    %esp,%ebp
-801040d3:	57                   	push   %edi
-801040d4:	56                   	push   %esi
-801040d5:	53                   	push   %ebx
-801040d6:	83 ec 1c             	sub    $0x1c,%esp
-  if((uint)stack==0) return -1;
-801040d9:	8b 45 10             	mov    0x10(%ebp),%eax
-801040dc:	85 c0                	test   %eax,%eax
-801040de:	0f 84 11 01 00 00    	je     801041f5 <thread_create+0x125>
-  pushcli();
-801040e4:	e8 c7 04 00 00       	call   801045b0 <pushcli>
-  c = mycpu();
-801040e9:	e8 52 f6 ff ff       	call   80103740 <mycpu>
-  p = c->proc;
-801040ee:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
-801040f4:	89 55 e4             	mov    %edx,-0x1c(%ebp)
-  popcli();
-801040f7:	e8 f4 04 00 00       	call   801045f0 <popcli>
-  int i,par_id;
-  struct proc *newproc;
-  struct proc *curproc = myproc();  //Current process in which thread is being created
-
-  if((newproc=allocproc())==0)return -1;
-801040fc:	e8 ff f4 ff ff       	call   80103600 <allocproc>
-80104101:	85 c0                	test   %eax,%eax
-80104103:	89 c3                	mov    %eax,%ebx
-80104105:	0f 84 ea 00 00 00    	je     801041f5 <thread_create+0x125>
-  newproc->pgdir = curproc->pgdir;
-8010410b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-  newproc->sz = curproc->sz;
-  newproc->parent = curproc;
-  *newproc->tf = *curproc->tf;
-8010410e:	8b 7b 18             	mov    0x18(%ebx),%edi
-80104111:	b9 13 00 00 00       	mov    $0x13,%ecx
-  newproc->pgdir = curproc->pgdir;
-80104116:	8b 42 04             	mov    0x4(%edx),%eax
-80104119:	89 43 04             	mov    %eax,0x4(%ebx)
-  newproc->sz = curproc->sz;
-8010411c:	8b 02                	mov    (%edx),%eax
-  newproc->parent = curproc;
-8010411e:	89 53 14             	mov    %edx,0x14(%ebx)
-  newproc->sz = curproc->sz;
-80104121:	89 03                	mov    %eax,(%ebx)
-  *newproc->tf = *curproc->tf;
-80104123:	8b 72 18             	mov    0x18(%edx),%esi
-80104126:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
-
-  newproc->isThread = 1;
-80104128:	c7 43 7c 01 00 00 00 	movl   $0x1,0x7c(%ebx)
-
-  newproc->tf->eax = 0;
-
-  newproc->tf->eip = (int)fcn;
-8010412f:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  newproc->tf->esp = (int) stack + 4096;
-  newproc->tf->esp -= 4;
-  *((int*)(newproc->tf->esp)) = (int) arg;
-  newproc->tf->esp-=4;
-  *((int*)(newproc->tf->esp)) = 0xffffffff;
-  for(i=0;i<NOFILE;++i){
-80104132:	31 f6                	xor    %esi,%esi
-80104134:	89 d7                	mov    %edx,%edi
-  newproc->tf->eax = 0;
-80104136:	8b 43 18             	mov    0x18(%ebx),%eax
-80104139:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
-  newproc->tf->eip = (int)fcn;
-80104140:	8b 43 18             	mov    0x18(%ebx),%eax
-80104143:	89 48 38             	mov    %ecx,0x38(%eax)
-  newproc->tf->esp = (int) stack + 4096;
-80104146:	8b 45 10             	mov    0x10(%ebp),%eax
-80104149:	8b 4b 18             	mov    0x18(%ebx),%ecx
-8010414c:	05 00 10 00 00       	add    $0x1000,%eax
-80104151:	89 41 44             	mov    %eax,0x44(%ecx)
-  newproc->tf->esp -= 4;
-80104154:	8b 43 18             	mov    0x18(%ebx),%eax
-  *((int*)(newproc->tf->esp)) = (int) arg;
-80104157:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-  newproc->tf->esp -= 4;
-8010415a:	83 68 44 04          	subl   $0x4,0x44(%eax)
-  *((int*)(newproc->tf->esp)) = (int) arg;
-8010415e:	8b 43 18             	mov    0x18(%ebx),%eax
-80104161:	8b 40 44             	mov    0x44(%eax),%eax
-80104164:	89 08                	mov    %ecx,(%eax)
-  newproc->tf->esp-=4;
-80104166:	8b 43 18             	mov    0x18(%ebx),%eax
-80104169:	83 68 44 04          	subl   $0x4,0x44(%eax)
-  *((int*)(newproc->tf->esp)) = 0xffffffff;
-8010416d:	8b 43 18             	mov    0x18(%ebx),%eax
-80104170:	8b 40 44             	mov    0x44(%eax),%eax
-80104173:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
-80104179:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  	if(curproc->ofile[i]) newproc->ofile[i] = filedup(curproc->ofile[i]);	
-80104180:	8b 44 b7 28          	mov    0x28(%edi,%esi,4),%eax
-80104184:	85 c0                	test   %eax,%eax
-80104186:	74 10                	je     80104198 <thread_create+0xc8>
-80104188:	83 ec 0c             	sub    $0xc,%esp
-8010418b:	50                   	push   %eax
-8010418c:	e8 5f cc ff ff       	call   80100df0 <filedup>
-80104191:	83 c4 10             	add    $0x10,%esp
-80104194:	89 44 b3 28          	mov    %eax,0x28(%ebx,%esi,4)
-  for(i=0;i<NOFILE;++i){
-80104198:	83 c6 01             	add    $0x1,%esi
-8010419b:	83 fe 10             	cmp    $0x10,%esi
-8010419e:	75 e0                	jne    80104180 <thread_create+0xb0>
-  }	
-  newproc->cwd = idup(curproc->cwd);
-801041a0:	83 ec 0c             	sub    $0xc,%esp
-801041a3:	ff 77 68             	pushl  0x68(%edi)
-801041a6:	89 7d e4             	mov    %edi,-0x1c(%ebp)
-801041a9:	e8 a2 d4 ff ff       	call   80101650 <idup>
-  safestrcpy(newproc->name,curproc->name,sizeof(curproc->name));
-801041ae:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-  newproc->cwd = idup(curproc->cwd);
-801041b1:	89 43 68             	mov    %eax,0x68(%ebx)
-  safestrcpy(newproc->name,curproc->name,sizeof(curproc->name));
-801041b4:	8d 43 6c             	lea    0x6c(%ebx),%eax
-801041b7:	83 c4 0c             	add    $0xc,%esp
-801041ba:	6a 10                	push   $0x10
-801041bc:	83 c2 6c             	add    $0x6c,%edx
-801041bf:	52                   	push   %edx
-801041c0:	50                   	push   %eax
-801041c1:	e8 aa 07 00 00       	call   80104970 <safestrcpy>
-  par_id = newproc->pid;
-801041c6:	8b 73 10             	mov    0x10(%ebx),%esi
+80104c57:	83 c4 10             	add    $0x10,%esp
+80104c5a:	39 fe                	cmp    %edi,%esi
+80104c5c:	75 e2                	jne    80104c40 <procdump+0x90>
+80104c5e:	e9 65 ff ff ff       	jmp    80104bc8 <procdump+0x18>
+80104c63:	90                   	nop
+80104c64:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  }
+}
+80104c68:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104c6b:	5b                   	pop    %ebx
+80104c6c:	5e                   	pop    %esi
+80104c6d:	5f                   	pop    %edi
+80104c6e:	5d                   	pop    %ebp
+80104c6f:	c3                   	ret    
+
+80104c70 <create_kernel_process>:
+
+void create_kernel_process(const char *name, void (*entrypoint)()){
+80104c70:	55                   	push   %ebp
+80104c71:	89 e5                	mov    %esp,%ebp
+80104c73:	57                   	push   %edi
+80104c74:	56                   	push   %esi
+80104c75:	53                   	push   %ebx
+80104c76:	83 ec 0c             	sub    $0xc,%esp
+80104c79:	8b 75 08             	mov    0x8(%ebp),%esi
+80104c7c:	8b 7d 0c             	mov    0xc(%ebp),%edi
+    
+  struct proc *p = allocproc();
+80104c7f:	e8 fc e9 ff ff       	call   80103680 <allocproc>
+  if(p == 0) panic("create_kernel_process failed");
+80104c84:	85 c0                	test   %eax,%eax
+80104c86:	74 4c                	je     80104cd4 <create_kernel_process+0x64>
+80104c88:	89 c3                	mov    %eax,%ebx
+  if((p->pgdir = setupkvm()) == 0) panic("setupkvm failed");
+80104c8a:	e8 11 2d 00 00       	call   801079a0 <setupkvm>
+80104c8f:	85 c0                	test   %eax,%eax
+80104c91:	89 43 04             	mov    %eax,0x4(%ebx)
+80104c94:	74 4b                	je     80104ce1 <create_kernel_process+0x71>
+
+  //This is a kernel process. Trap frame stores user space registers. We don't need to initialise tf. Also, since this doesn't need to have a userspace, we don't need to assign a size to this process. eip stores address of next instruction to be executed
+  p->context->eip = (uint)entrypoint;
+80104c96:	8b 43 1c             	mov    0x1c(%ebx),%eax
+  safestrcpy(p->name, name, sizeof(p->name));
+80104c99:	83 ec 04             	sub    $0x4,%esp
+  p->context->eip = (uint)entrypoint;
+80104c9c:	89 78 10             	mov    %edi,0x10(%eax)
+  safestrcpy(p->name, name, sizeof(p->name));
+80104c9f:	8d 43 6c             	lea    0x6c(%ebx),%eax
+80104ca2:	6a 10                	push   $0x10
+80104ca4:	56                   	push   %esi
+80104ca5:	50                   	push   %eax
+80104ca6:	e8 a5 05 00 00       	call   80105250 <safestrcpy>
+
   acquire(&ptable.lock);
-801041c9:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-801041d0:	e8 ab 04 00 00       	call   80104680 <acquire>
-  newproc->state = RUNNABLE;
-801041d5:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+80104cab:	c7 04 24 c0 3f 11 80 	movl   $0x80113fc0,(%esp)
+80104cb2:	e8 a9 02 00 00       	call   80104f60 <acquire>
+  p->state = RUNNABLE;
+80104cb7:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
   release(&ptable.lock);
-801041dc:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-801041e3:	e8 58 05 00 00       	call   80104740 <release>
-  return par_id;	
-801041e8:	83 c4 10             	add    $0x10,%esp
-}
-801041eb:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801041ee:	89 f0                	mov    %esi,%eax
-801041f0:	5b                   	pop    %ebx
-801041f1:	5e                   	pop    %esi
-801041f2:	5f                   	pop    %edi
-801041f3:	5d                   	pop    %ebp
-801041f4:	c3                   	ret    
-  if((uint)stack==0) return -1;
-801041f5:	be ff ff ff ff       	mov    $0xffffffff,%esi
-801041fa:	eb ef                	jmp    801041eb <thread_create+0x11b>
-801041fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80104200 <thread_join>:
-
-int thread_join(void){
-80104200:	55                   	push   %ebp
-80104201:	89 e5                	mov    %esp,%ebp
-80104203:	53                   	push   %ebx
-80104204:	83 ec 04             	sub    $0x4,%esp
-  pushcli();
-80104207:	e8 a4 03 00 00       	call   801045b0 <pushcli>
-  c = mycpu();
-8010420c:	e8 2f f5 ff ff       	call   80103740 <mycpu>
-  p = c->proc;
-80104211:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
-  popcli();
-80104217:	e8 d4 03 00 00       	call   801045f0 <popcli>
-	struct proc *p;
-	int havekids, pid;
-	struct proc *curproc = myproc();
-
-	acquire(&ptable.lock);
-8010421c:	83 ec 0c             	sub    $0xc,%esp
-8010421f:	68 20 2d 11 80       	push   $0x80112d20
-80104224:	e8 57 04 00 00       	call   80104680 <acquire>
-80104229:	83 c4 10             	add    $0x10,%esp
-	while(1){
-		havekids = 0;
-8010422c:	31 c0                	xor    %eax,%eax
-		for(p = ptable.proc;p< &ptable.proc[NPROC];++p){
-8010422e:	ba 54 2d 11 80       	mov    $0x80112d54,%edx
-80104233:	eb 0e                	jmp    80104243 <thread_join+0x43>
-80104235:	8d 76 00             	lea    0x0(%esi),%esi
-80104238:	83 ea 80             	sub    $0xffffff80,%edx
-8010423b:	81 fa 54 4d 11 80    	cmp    $0x80114d54,%edx
-80104241:	73 22                	jae    80104265 <thread_join+0x65>
-			if(p->isThread==0||p->parent!=curproc)continue;	
-80104243:	8b 4a 7c             	mov    0x7c(%edx),%ecx
-80104246:	85 c9                	test   %ecx,%ecx
-80104248:	74 ee                	je     80104238 <thread_join+0x38>
-8010424a:	39 5a 14             	cmp    %ebx,0x14(%edx)
-8010424d:	75 e9                	jne    80104238 <thread_join+0x38>
-			havekids = 1;
-			if(p->state==ZOMBIE){
-8010424f:	83 7a 0c 05          	cmpl   $0x5,0xc(%edx)
-80104253:	74 33                	je     80104288 <thread_join+0x88>
-		for(p = ptable.proc;p< &ptable.proc[NPROC];++p){
-80104255:	83 ea 80             	sub    $0xffffff80,%edx
-			havekids = 1;
-80104258:	b8 01 00 00 00       	mov    $0x1,%eax
-		for(p = ptable.proc;p< &ptable.proc[NPROC];++p){
-8010425d:	81 fa 54 4d 11 80    	cmp    $0x80114d54,%edx
-80104263:	72 de                	jb     80104243 <thread_join+0x43>
-				p->state = UNUSED;
-				release(&ptable.lock);
-				return pid;
-			}
-		}
-		if(!havekids||curproc->killed){
-80104265:	85 c0                	test   %eax,%eax
-80104267:	74 60                	je     801042c9 <thread_join+0xc9>
-80104269:	8b 43 24             	mov    0x24(%ebx),%eax
-8010426c:	85 c0                	test   %eax,%eax
-8010426e:	75 59                	jne    801042c9 <thread_join+0xc9>
-			release(&ptable.lock);
-			return -1;
-		}
-		sleep(curproc,&ptable.lock);
-80104270:	83 ec 08             	sub    $0x8,%esp
-80104273:	68 20 2d 11 80       	push   $0x80112d20
-80104278:	53                   	push   %ebx
-80104279:	e8 02 fb ff ff       	call   80103d80 <sleep>
-		havekids = 0;
-8010427e:	83 c4 10             	add    $0x10,%esp
-80104281:	eb a9                	jmp    8010422c <thread_join+0x2c>
-80104283:	90                   	nop
-80104284:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-				release(&ptable.lock);
-80104288:	83 ec 0c             	sub    $0xc,%esp
-				pid = p->pid;
-8010428b:	8b 5a 10             	mov    0x10(%edx),%ebx
-				p->kstack = 0;
-8010428e:	c7 42 08 00 00 00 00 	movl   $0x0,0x8(%edx)
-				p->pid = 0;
-80104295:	c7 42 10 00 00 00 00 	movl   $0x0,0x10(%edx)
-				p->parent = 0;
-8010429c:	c7 42 14 00 00 00 00 	movl   $0x0,0x14(%edx)
-				p->name[0] = 0;
-801042a3:	c6 42 6c 00          	movb   $0x0,0x6c(%edx)
-				p->killed = 0;
-801042a7:	c7 42 24 00 00 00 00 	movl   $0x0,0x24(%edx)
-				p->state = UNUSED;
-801042ae:	c7 42 0c 00 00 00 00 	movl   $0x0,0xc(%edx)
-				release(&ptable.lock);
-801042b5:	68 20 2d 11 80       	push   $0x80112d20
-801042ba:	e8 81 04 00 00       	call   80104740 <release>
-				return pid;
-801042bf:	83 c4 10             	add    $0x10,%esp
-	}
-
-}
-801042c2:	89 d8                	mov    %ebx,%eax
-801042c4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801042c7:	c9                   	leave  
-801042c8:	c3                   	ret    
-			release(&ptable.lock);
-801042c9:	83 ec 0c             	sub    $0xc,%esp
-			return -1;
-801042cc:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-			release(&ptable.lock);
-801042d1:	68 20 2d 11 80       	push   $0x80112d20
-801042d6:	e8 65 04 00 00       	call   80104740 <release>
-			return -1;
-801042db:	83 c4 10             	add    $0x10,%esp
-801042de:	eb e2                	jmp    801042c2 <thread_join+0xc2>
-
-801042e0 <thread_exit>:
-
-
-int thread_exit(){
-801042e0:	55                   	push   %ebp
-801042e1:	89 e5                	mov    %esp,%ebp
-801042e3:	57                   	push   %edi
-801042e4:	56                   	push   %esi
-801042e5:	53                   	push   %ebx
-801042e6:	83 ec 0c             	sub    $0xc,%esp
-  pushcli();
-801042e9:	e8 c2 02 00 00       	call   801045b0 <pushcli>
-  c = mycpu();
-801042ee:	e8 4d f4 ff ff       	call   80103740 <mycpu>
-  p = c->proc;
-801042f3:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
-  popcli();
-801042f9:	e8 f2 02 00 00       	call   801045f0 <popcli>
-	struct proc *curproc = myproc();
-	struct proc *p;
-	int fd;
-
-	if(curproc==initproc)
-801042fe:	39 35 b8 a5 10 80    	cmp    %esi,0x8010a5b8
-80104304:	8d 5e 28             	lea    0x28(%esi),%ebx
-80104307:	8d 7e 68             	lea    0x68(%esi),%edi
-8010430a:	0f 84 e7 00 00 00    	je     801043f7 <thread_exit+0x117>
-	{
-		panic("init exiting");
-	}
-	for(fd = 0;fd<NOFILE;fd++){
-		if(curproc->ofile[fd]){
-80104310:	8b 03                	mov    (%ebx),%eax
-80104312:	85 c0                	test   %eax,%eax
-80104314:	74 12                	je     80104328 <thread_exit+0x48>
-			fileclose(curproc->ofile[fd]);
-80104316:	83 ec 0c             	sub    $0xc,%esp
-80104319:	50                   	push   %eax
-8010431a:	e8 21 cb ff ff       	call   80100e40 <fileclose>
-			curproc->ofile[fd] = 0;
-8010431f:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
-80104325:	83 c4 10             	add    $0x10,%esp
-80104328:	83 c3 04             	add    $0x4,%ebx
-	for(fd = 0;fd<NOFILE;fd++){
-8010432b:	39 fb                	cmp    %edi,%ebx
-8010432d:	75 e1                	jne    80104310 <thread_exit+0x30>
-		}
-	}
-	begin_op();
-8010432f:	e8 6c e8 ff ff       	call   80102ba0 <begin_op>
-	iput(curproc->cwd);
-80104334:	83 ec 0c             	sub    $0xc,%esp
-80104337:	ff 76 68             	pushl  0x68(%esi)
-8010433a:	e8 71 d4 ff ff       	call   801017b0 <iput>
-	end_op();
-8010433f:	e8 cc e8 ff ff       	call   80102c10 <end_op>
-	curproc->cwd = 0;
-80104344:	c7 46 68 00 00 00 00 	movl   $0x0,0x68(%esi)
-	acquire(&ptable.lock);
-8010434b:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80104352:	e8 29 03 00 00       	call   80104680 <acquire>
-
-	wakeup1(curproc->parent);
-80104357:	8b 56 14             	mov    0x14(%esi),%edx
-8010435a:	83 c4 10             	add    $0x10,%esp
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-8010435d:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
-80104362:	eb 0e                	jmp    80104372 <thread_exit+0x92>
-80104364:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104368:	83 e8 80             	sub    $0xffffff80,%eax
-8010436b:	3d 54 4d 11 80       	cmp    $0x80114d54,%eax
-80104370:	73 1c                	jae    8010438e <thread_exit+0xae>
-    if(p->state == SLEEPING && p->chan == chan)
-80104372:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-80104376:	75 f0                	jne    80104368 <thread_exit+0x88>
-80104378:	3b 50 20             	cmp    0x20(%eax),%edx
-8010437b:	75 eb                	jne    80104368 <thread_exit+0x88>
-      p->state = RUNNABLE;
-8010437d:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80104384:	83 e8 80             	sub    $0xffffff80,%eax
-80104387:	3d 54 4d 11 80       	cmp    $0x80114d54,%eax
-8010438c:	72 e4                	jb     80104372 <thread_exit+0x92>
-	
-	for(p=ptable.proc;p<&ptable.proc[NPROC];++p){
-		if(p->parent==curproc){
-			p->parent = initproc;
-8010438e:	8b 0d b8 a5 10 80    	mov    0x8010a5b8,%ecx
-	for(p=ptable.proc;p<&ptable.proc[NPROC];++p){
-80104394:	ba 54 2d 11 80       	mov    $0x80112d54,%edx
-80104399:	eb 10                	jmp    801043ab <thread_exit+0xcb>
-8010439b:	90                   	nop
-8010439c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801043a0:	83 ea 80             	sub    $0xffffff80,%edx
-801043a3:	81 fa 54 4d 11 80    	cmp    $0x80114d54,%edx
-801043a9:	73 33                	jae    801043de <thread_exit+0xfe>
-		if(p->parent==curproc){
-801043ab:	39 72 14             	cmp    %esi,0x14(%edx)
-801043ae:	75 f0                	jne    801043a0 <thread_exit+0xc0>
-			if(p->state==ZOMBIE){
-801043b0:	83 7a 0c 05          	cmpl   $0x5,0xc(%edx)
-			p->parent = initproc;
-801043b4:	89 4a 14             	mov    %ecx,0x14(%edx)
-			if(p->state==ZOMBIE){
-801043b7:	75 e7                	jne    801043a0 <thread_exit+0xc0>
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-801043b9:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
-801043be:	eb 0a                	jmp    801043ca <thread_exit+0xea>
-801043c0:	83 e8 80             	sub    $0xffffff80,%eax
-801043c3:	3d 54 4d 11 80       	cmp    $0x80114d54,%eax
-801043c8:	73 d6                	jae    801043a0 <thread_exit+0xc0>
-    if(p->state == SLEEPING && p->chan == chan)
-801043ca:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-801043ce:	75 f0                	jne    801043c0 <thread_exit+0xe0>
-801043d0:	3b 48 20             	cmp    0x20(%eax),%ecx
-801043d3:	75 eb                	jne    801043c0 <thread_exit+0xe0>
-      p->state = RUNNABLE;
-801043d5:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
-801043dc:	eb e2                	jmp    801043c0 <thread_exit+0xe0>
-				wakeup1(initproc);
-			}
-		}
-	}
-	curproc->state = ZOMBIE;
-801043de:	c7 46 0c 05 00 00 00 	movl   $0x5,0xc(%esi)
-	sched();
-801043e5:	e8 56 f7 ff ff       	call   80103b40 <sched>
-	panic("zombie exit");
-801043ea:	83 ec 0c             	sub    $0xc,%esp
-801043ed:	68 fd 78 10 80       	push   $0x801078fd
-801043f2:	e8 99 bf ff ff       	call   80100390 <panic>
-		panic("init exiting");
-801043f7:	83 ec 0c             	sub    $0xc,%esp
-801043fa:	68 f0 78 10 80       	push   $0x801078f0
-801043ff:	e8 8c bf ff ff       	call   80100390 <panic>
-80104404:	66 90                	xchg   %ax,%ax
-80104406:	66 90                	xchg   %ax,%ax
-80104408:	66 90                	xchg   %ax,%ax
-8010440a:	66 90                	xchg   %ax,%ax
-8010440c:	66 90                	xchg   %ax,%ax
-8010440e:	66 90                	xchg   %ax,%ax
+80104cbe:	83 c4 10             	add    $0x10,%esp
+80104cc1:	c7 45 08 c0 3f 11 80 	movl   $0x80113fc0,0x8(%ebp)
+
+}
+80104cc8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104ccb:	5b                   	pop    %ebx
+80104ccc:	5e                   	pop    %esi
+80104ccd:	5f                   	pop    %edi
+80104cce:	5d                   	pop    %ebp
+  release(&ptable.lock);
+80104ccf:	e9 4c 03 00 00       	jmp    80105020 <release>
+  if(p == 0) panic("create_kernel_process failed");
+80104cd4:	83 ec 0c             	sub    $0xc,%esp
+80104cd7:	68 07 83 10 80       	push   $0x80108307
+80104cdc:	e8 af b6 ff ff       	call   80100390 <panic>
+  if((p->pgdir = setupkvm()) == 0) panic("setupkvm failed");
+80104ce1:	83 ec 0c             	sub    $0xc,%esp
+80104ce4:	68 24 83 10 80       	push   $0x80108324
+80104ce9:	e8 a2 b6 ff ff       	call   80100390 <panic>
+80104cee:	66 90                	xchg   %ax,%ax
 
-80104410 <initsleeplock>:
+80104cf0 <initsleeplock>:
 #include "spinlock.h"
 #include "sleeplock.h"
 
 void
 initsleeplock(struct sleeplock *lk, char *name)
 {
-80104410:	55                   	push   %ebp
-80104411:	89 e5                	mov    %esp,%ebp
-80104413:	53                   	push   %ebx
-80104414:	83 ec 0c             	sub    $0xc,%esp
-80104417:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104cf0:	55                   	push   %ebp
+80104cf1:	89 e5                	mov    %esp,%ebp
+80104cf3:	53                   	push   %ebx
+80104cf4:	83 ec 0c             	sub    $0xc,%esp
+80104cf7:	8b 5d 08             	mov    0x8(%ebp),%ebx
   initlock(&lk->lk, "sleep lock");
-8010441a:	68 98 79 10 80       	push   $0x80107998
-8010441f:	8d 43 04             	lea    0x4(%ebx),%eax
-80104422:	50                   	push   %eax
-80104423:	e8 18 01 00 00       	call   80104540 <initlock>
+80104cfa:	68 ec 83 10 80       	push   $0x801083ec
+80104cff:	8d 43 04             	lea    0x4(%ebx),%eax
+80104d02:	50                   	push   %eax
+80104d03:	e8 18 01 00 00       	call   80104e20 <initlock>
   lk->name = name;
-80104428:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104d08:	8b 45 0c             	mov    0xc(%ebp),%eax
   lk->locked = 0;
-8010442b:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+80104d0b:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
   lk->pid = 0;
 }
-80104431:	83 c4 10             	add    $0x10,%esp
+80104d11:	83 c4 10             	add    $0x10,%esp
   lk->pid = 0;
-80104434:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+80104d14:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
   lk->name = name;
-8010443b:	89 43 38             	mov    %eax,0x38(%ebx)
+80104d1b:	89 43 38             	mov    %eax,0x38(%ebx)
 }
-8010443e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104441:	c9                   	leave  
-80104442:	c3                   	ret    
-80104443:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80104449:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80104d1e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104d21:	c9                   	leave  
+80104d22:	c3                   	ret    
+80104d23:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104d29:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80104450 <acquiresleep>:
+80104d30 <acquiresleep>:
 
 void
 acquiresleep(struct sleeplock *lk)
 {
-80104450:	55                   	push   %ebp
-80104451:	89 e5                	mov    %esp,%ebp
-80104453:	56                   	push   %esi
-80104454:	53                   	push   %ebx
-80104455:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104d30:	55                   	push   %ebp
+80104d31:	89 e5                	mov    %esp,%ebp
+80104d33:	56                   	push   %esi
+80104d34:	53                   	push   %ebx
+80104d35:	8b 5d 08             	mov    0x8(%ebp),%ebx
+
   acquire(&lk->lk);
-80104458:	83 ec 0c             	sub    $0xc,%esp
-8010445b:	8d 73 04             	lea    0x4(%ebx),%esi
-8010445e:	56                   	push   %esi
-8010445f:	e8 1c 02 00 00       	call   80104680 <acquire>
+80104d38:	83 ec 0c             	sub    $0xc,%esp
+80104d3b:	8d 73 04             	lea    0x4(%ebx),%esi
+80104d3e:	56                   	push   %esi
+80104d3f:	e8 1c 02 00 00       	call   80104f60 <acquire>
+
   while (lk->locked) {
-80104464:	8b 13                	mov    (%ebx),%edx
-80104466:	83 c4 10             	add    $0x10,%esp
-80104469:	85 d2                	test   %edx,%edx
-8010446b:	74 16                	je     80104483 <acquiresleep+0x33>
-8010446d:	8d 76 00             	lea    0x0(%esi),%esi
+80104d44:	8b 13                	mov    (%ebx),%edx
+80104d46:	83 c4 10             	add    $0x10,%esp
+80104d49:	85 d2                	test   %edx,%edx
+80104d4b:	74 16                	je     80104d63 <acquiresleep+0x33>
+80104d4d:	8d 76 00             	lea    0x0(%esi),%esi
     sleep(lk, &lk->lk);
-80104470:	83 ec 08             	sub    $0x8,%esp
-80104473:	56                   	push   %esi
-80104474:	53                   	push   %ebx
-80104475:	e8 06 f9 ff ff       	call   80103d80 <sleep>
+80104d50:	83 ec 08             	sub    $0x8,%esp
+80104d53:	56                   	push   %esi
+80104d54:	53                   	push   %ebx
+80104d55:	e8 f6 f9 ff ff       	call   80104750 <sleep>
   while (lk->locked) {
-8010447a:	8b 03                	mov    (%ebx),%eax
-8010447c:	83 c4 10             	add    $0x10,%esp
-8010447f:	85 c0                	test   %eax,%eax
-80104481:	75 ed                	jne    80104470 <acquiresleep+0x20>
+80104d5a:	8b 03                	mov    (%ebx),%eax
+80104d5c:	83 c4 10             	add    $0x10,%esp
+80104d5f:	85 c0                	test   %eax,%eax
+80104d61:	75 ed                	jne    80104d50 <acquiresleep+0x20>
   }
+
   lk->locked = 1;
-80104483:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
+80104d63:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
   lk->pid = myproc()->pid;
-80104489:	e8 52 f3 ff ff       	call   801037e0 <myproc>
-8010448e:	8b 40 10             	mov    0x10(%eax),%eax
-80104491:	89 43 3c             	mov    %eax,0x3c(%ebx)
+80104d69:	e8 e2 f0 ff ff       	call   80103e50 <myproc>
+80104d6e:	8b 40 10             	mov    0x10(%eax),%eax
+80104d71:	89 43 3c             	mov    %eax,0x3c(%ebx)
   release(&lk->lk);
-80104494:	89 75 08             	mov    %esi,0x8(%ebp)
+80104d74:	89 75 08             	mov    %esi,0x8(%ebp)
 }
-80104497:	8d 65 f8             	lea    -0x8(%ebp),%esp
-8010449a:	5b                   	pop    %ebx
-8010449b:	5e                   	pop    %esi
-8010449c:	5d                   	pop    %ebp
+80104d77:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104d7a:	5b                   	pop    %ebx
+80104d7b:	5e                   	pop    %esi
+80104d7c:	5d                   	pop    %ebp
   release(&lk->lk);
-8010449d:	e9 9e 02 00 00       	jmp    80104740 <release>
-801044a2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801044a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80104d7d:	e9 9e 02 00 00       	jmp    80105020 <release>
+80104d82:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104d89:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-801044b0 <releasesleep>:
+80104d90 <releasesleep>:
 
 void
 releasesleep(struct sleeplock *lk)
 {
-801044b0:	55                   	push   %ebp
-801044b1:	89 e5                	mov    %esp,%ebp
-801044b3:	56                   	push   %esi
-801044b4:	53                   	push   %ebx
-801044b5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104d90:	55                   	push   %ebp
+80104d91:	89 e5                	mov    %esp,%ebp
+80104d93:	56                   	push   %esi
+80104d94:	53                   	push   %ebx
+80104d95:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&lk->lk);
-801044b8:	83 ec 0c             	sub    $0xc,%esp
-801044bb:	8d 73 04             	lea    0x4(%ebx),%esi
-801044be:	56                   	push   %esi
-801044bf:	e8 bc 01 00 00       	call   80104680 <acquire>
+80104d98:	83 ec 0c             	sub    $0xc,%esp
+80104d9b:	8d 73 04             	lea    0x4(%ebx),%esi
+80104d9e:	56                   	push   %esi
+80104d9f:	e8 bc 01 00 00       	call   80104f60 <acquire>
   lk->locked = 0;
-801044c4:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+80104da4:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
   lk->pid = 0;
-801044ca:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+80104daa:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
   wakeup(lk);
-801044d1:	89 1c 24             	mov    %ebx,(%esp)
-801044d4:	e8 57 fa ff ff       	call   80103f30 <wakeup>
+80104db1:	89 1c 24             	mov    %ebx,(%esp)
+80104db4:	e8 47 fb ff ff       	call   80104900 <wakeup>
   release(&lk->lk);
-801044d9:	89 75 08             	mov    %esi,0x8(%ebp)
-801044dc:	83 c4 10             	add    $0x10,%esp
+80104db9:	89 75 08             	mov    %esi,0x8(%ebp)
+80104dbc:	83 c4 10             	add    $0x10,%esp
 }
-801044df:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801044e2:	5b                   	pop    %ebx
-801044e3:	5e                   	pop    %esi
-801044e4:	5d                   	pop    %ebp
+80104dbf:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104dc2:	5b                   	pop    %ebx
+80104dc3:	5e                   	pop    %esi
+80104dc4:	5d                   	pop    %ebp
   release(&lk->lk);
-801044e5:	e9 56 02 00 00       	jmp    80104740 <release>
-801044ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104dc5:	e9 56 02 00 00       	jmp    80105020 <release>
+80104dca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-801044f0 <holdingsleep>:
+80104dd0 <holdingsleep>:
 
 int
 holdingsleep(struct sleeplock *lk)
 {
-801044f0:	55                   	push   %ebp
-801044f1:	89 e5                	mov    %esp,%ebp
-801044f3:	57                   	push   %edi
-801044f4:	56                   	push   %esi
-801044f5:	53                   	push   %ebx
-801044f6:	31 ff                	xor    %edi,%edi
-801044f8:	83 ec 18             	sub    $0x18,%esp
-801044fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104dd0:	55                   	push   %ebp
+80104dd1:	89 e5                	mov    %esp,%ebp
+80104dd3:	57                   	push   %edi
+80104dd4:	56                   	push   %esi
+80104dd5:	53                   	push   %ebx
+80104dd6:	31 ff                	xor    %edi,%edi
+80104dd8:	83 ec 18             	sub    $0x18,%esp
+80104ddb:	8b 5d 08             	mov    0x8(%ebp),%ebx
   int r;
   
   acquire(&lk->lk);
-801044fe:	8d 73 04             	lea    0x4(%ebx),%esi
-80104501:	56                   	push   %esi
-80104502:	e8 79 01 00 00       	call   80104680 <acquire>
+80104dde:	8d 73 04             	lea    0x4(%ebx),%esi
+80104de1:	56                   	push   %esi
+80104de2:	e8 79 01 00 00       	call   80104f60 <acquire>
   r = lk->locked && (lk->pid == myproc()->pid);
-80104507:	8b 03                	mov    (%ebx),%eax
-80104509:	83 c4 10             	add    $0x10,%esp
-8010450c:	85 c0                	test   %eax,%eax
-8010450e:	74 13                	je     80104523 <holdingsleep+0x33>
-80104510:	8b 5b 3c             	mov    0x3c(%ebx),%ebx
-80104513:	e8 c8 f2 ff ff       	call   801037e0 <myproc>
-80104518:	39 58 10             	cmp    %ebx,0x10(%eax)
-8010451b:	0f 94 c0             	sete   %al
-8010451e:	0f b6 c0             	movzbl %al,%eax
-80104521:	89 c7                	mov    %eax,%edi
+80104de7:	8b 03                	mov    (%ebx),%eax
+80104de9:	83 c4 10             	add    $0x10,%esp
+80104dec:	85 c0                	test   %eax,%eax
+80104dee:	74 13                	je     80104e03 <holdingsleep+0x33>
+80104df0:	8b 5b 3c             	mov    0x3c(%ebx),%ebx
+80104df3:	e8 58 f0 ff ff       	call   80103e50 <myproc>
+80104df8:	39 58 10             	cmp    %ebx,0x10(%eax)
+80104dfb:	0f 94 c0             	sete   %al
+80104dfe:	0f b6 c0             	movzbl %al,%eax
+80104e01:	89 c7                	mov    %eax,%edi
   release(&lk->lk);
-80104523:	83 ec 0c             	sub    $0xc,%esp
-80104526:	56                   	push   %esi
-80104527:	e8 14 02 00 00       	call   80104740 <release>
+80104e03:	83 ec 0c             	sub    $0xc,%esp
+80104e06:	56                   	push   %esi
+80104e07:	e8 14 02 00 00       	call   80105020 <release>
   return r;
 }
-8010452c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010452f:	89 f8                	mov    %edi,%eax
-80104531:	5b                   	pop    %ebx
-80104532:	5e                   	pop    %esi
-80104533:	5f                   	pop    %edi
-80104534:	5d                   	pop    %ebp
-80104535:	c3                   	ret    
-80104536:	66 90                	xchg   %ax,%ax
-80104538:	66 90                	xchg   %ax,%ax
-8010453a:	66 90                	xchg   %ax,%ax
-8010453c:	66 90                	xchg   %ax,%ax
-8010453e:	66 90                	xchg   %ax,%ax
+80104e0c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104e0f:	89 f8                	mov    %edi,%eax
+80104e11:	5b                   	pop    %ebx
+80104e12:	5e                   	pop    %esi
+80104e13:	5f                   	pop    %edi
+80104e14:	5d                   	pop    %ebp
+80104e15:	c3                   	ret    
+80104e16:	66 90                	xchg   %ax,%ax
+80104e18:	66 90                	xchg   %ax,%ax
+80104e1a:	66 90                	xchg   %ax,%ax
+80104e1c:	66 90                	xchg   %ax,%ax
+80104e1e:	66 90                	xchg   %ax,%ax
 
-80104540 <initlock>:
+80104e20 <initlock>:
 #include "proc.h"
 #include "spinlock.h"
 
 void
 initlock(struct spinlock *lk, char *name)
 {
-80104540:	55                   	push   %ebp
-80104541:	89 e5                	mov    %esp,%ebp
-80104543:	8b 45 08             	mov    0x8(%ebp),%eax
+80104e20:	55                   	push   %ebp
+80104e21:	89 e5                	mov    %esp,%ebp
+80104e23:	8b 45 08             	mov    0x8(%ebp),%eax
   lk->name = name;
-80104546:	8b 55 0c             	mov    0xc(%ebp),%edx
+80104e26:	8b 55 0c             	mov    0xc(%ebp),%edx
   lk->locked = 0;
-80104549:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+80104e29:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   lk->name = name;
-8010454f:	89 50 04             	mov    %edx,0x4(%eax)
+80104e2f:	89 50 04             	mov    %edx,0x4(%eax)
   lk->cpu = 0;
-80104552:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+80104e32:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
 }
-80104559:	5d                   	pop    %ebp
-8010455a:	c3                   	ret    
-8010455b:	90                   	nop
-8010455c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104e39:	5d                   	pop    %ebp
+80104e3a:	c3                   	ret    
+80104e3b:	90                   	nop
+80104e3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80104560 <getcallerpcs>:
+80104e40 <getcallerpcs>:
 }
 
 // Record the current call stack in pcs[] by following the %ebp chain.
 void
 getcallerpcs(void *v, uint pcs[])
 {
-80104560:	55                   	push   %ebp
+80104e40:	55                   	push   %ebp
   uint *ebp;
   int i;
 
   ebp = (uint*)v - 2;
   for(i = 0; i < 10; i++){
-80104561:	31 d2                	xor    %edx,%edx
+80104e41:	31 d2                	xor    %edx,%edx
 {
-80104563:	89 e5                	mov    %esp,%ebp
-80104565:	53                   	push   %ebx
+80104e43:	89 e5                	mov    %esp,%ebp
+80104e45:	53                   	push   %ebx
   ebp = (uint*)v - 2;
-80104566:	8b 45 08             	mov    0x8(%ebp),%eax
+80104e46:	8b 45 08             	mov    0x8(%ebp),%eax
 {
-80104569:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80104e49:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   ebp = (uint*)v - 2;
-8010456c:	83 e8 08             	sub    $0x8,%eax
-8010456f:	90                   	nop
+80104e4c:	83 e8 08             	sub    $0x8,%eax
+80104e4f:	90                   	nop
     if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
-80104570:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
-80104576:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
-8010457c:	77 1a                	ja     80104598 <getcallerpcs+0x38>
+80104e50:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
+80104e56:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
+80104e5c:	77 1a                	ja     80104e78 <getcallerpcs+0x38>
       break;
     pcs[i] = ebp[1];     // saved %eip
-8010457e:	8b 58 04             	mov    0x4(%eax),%ebx
-80104581:	89 1c 91             	mov    %ebx,(%ecx,%edx,4)
+80104e5e:	8b 58 04             	mov    0x4(%eax),%ebx
+80104e61:	89 1c 91             	mov    %ebx,(%ecx,%edx,4)
   for(i = 0; i < 10; i++){
-80104584:	83 c2 01             	add    $0x1,%edx
+80104e64:	83 c2 01             	add    $0x1,%edx
     ebp = (uint*)ebp[0]; // saved %ebp
-80104587:	8b 00                	mov    (%eax),%eax
+80104e67:	8b 00                	mov    (%eax),%eax
   for(i = 0; i < 10; i++){
-80104589:	83 fa 0a             	cmp    $0xa,%edx
-8010458c:	75 e2                	jne    80104570 <getcallerpcs+0x10>
+80104e69:	83 fa 0a             	cmp    $0xa,%edx
+80104e6c:	75 e2                	jne    80104e50 <getcallerpcs+0x10>
   }
   for(; i < 10; i++)
     pcs[i] = 0;
 }
-8010458e:	5b                   	pop    %ebx
-8010458f:	5d                   	pop    %ebp
-80104590:	c3                   	ret    
-80104591:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104598:	8d 04 91             	lea    (%ecx,%edx,4),%eax
-8010459b:	83 c1 28             	add    $0x28,%ecx
-8010459e:	66 90                	xchg   %ax,%ax
+80104e6e:	5b                   	pop    %ebx
+80104e6f:	5d                   	pop    %ebp
+80104e70:	c3                   	ret    
+80104e71:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104e78:	8d 04 91             	lea    (%ecx,%edx,4),%eax
+80104e7b:	83 c1 28             	add    $0x28,%ecx
+80104e7e:	66 90                	xchg   %ax,%ax
     pcs[i] = 0;
-801045a0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
-801045a6:	83 c0 04             	add    $0x4,%eax
+80104e80:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+80104e86:	83 c0 04             	add    $0x4,%eax
   for(; i < 10; i++)
-801045a9:	39 c1                	cmp    %eax,%ecx
-801045ab:	75 f3                	jne    801045a0 <getcallerpcs+0x40>
+80104e89:	39 c1                	cmp    %eax,%ecx
+80104e8b:	75 f3                	jne    80104e80 <getcallerpcs+0x40>
 }
-801045ad:	5b                   	pop    %ebx
-801045ae:	5d                   	pop    %ebp
-801045af:	c3                   	ret    
+80104e8d:	5b                   	pop    %ebx
+80104e8e:	5d                   	pop    %ebp
+80104e8f:	c3                   	ret    
 
-801045b0 <pushcli>:
+80104e90 <pushcli>:
 // it takes two popcli to undo two pushcli.  Also, if interrupts
 // are off, then pushcli, popcli leaves them off.
 
 void
 pushcli(void)
 {
-801045b0:	55                   	push   %ebp
-801045b1:	89 e5                	mov    %esp,%ebp
-801045b3:	53                   	push   %ebx
-801045b4:	83 ec 04             	sub    $0x4,%esp
-801045b7:	9c                   	pushf  
-801045b8:	5b                   	pop    %ebx
+80104e90:	55                   	push   %ebp
+80104e91:	89 e5                	mov    %esp,%ebp
+80104e93:	53                   	push   %ebx
+80104e94:	83 ec 04             	sub    $0x4,%esp
+80104e97:	9c                   	pushf  
+80104e98:	5b                   	pop    %ebx
   asm volatile("cli");
-801045b9:	fa                   	cli    
+80104e99:	fa                   	cli    
   int eflags;
 
   eflags = readeflags();
   cli();
   if(mycpu()->ncli == 0)
-801045ba:	e8 81 f1 ff ff       	call   80103740 <mycpu>
-801045bf:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
-801045c5:	85 c0                	test   %eax,%eax
-801045c7:	75 11                	jne    801045da <pushcli+0x2a>
+80104e9a:	e8 e1 eb ff ff       	call   80103a80 <mycpu>
+80104e9f:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
+80104ea5:	85 c0                	test   %eax,%eax
+80104ea7:	75 11                	jne    80104eba <pushcli+0x2a>
     mycpu()->intena = eflags & FL_IF;
-801045c9:	81 e3 00 02 00 00    	and    $0x200,%ebx
-801045cf:	e8 6c f1 ff ff       	call   80103740 <mycpu>
-801045d4:	89 98 a8 00 00 00    	mov    %ebx,0xa8(%eax)
+80104ea9:	81 e3 00 02 00 00    	and    $0x200,%ebx
+80104eaf:	e8 cc eb ff ff       	call   80103a80 <mycpu>
+80104eb4:	89 98 a8 00 00 00    	mov    %ebx,0xa8(%eax)
   mycpu()->ncli += 1;
-801045da:	e8 61 f1 ff ff       	call   80103740 <mycpu>
-801045df:	83 80 a4 00 00 00 01 	addl   $0x1,0xa4(%eax)
+80104eba:	e8 c1 eb ff ff       	call   80103a80 <mycpu>
+80104ebf:	83 80 a4 00 00 00 01 	addl   $0x1,0xa4(%eax)
 }
-801045e6:	83 c4 04             	add    $0x4,%esp
-801045e9:	5b                   	pop    %ebx
-801045ea:	5d                   	pop    %ebp
-801045eb:	c3                   	ret    
-801045ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104ec6:	83 c4 04             	add    $0x4,%esp
+80104ec9:	5b                   	pop    %ebx
+80104eca:	5d                   	pop    %ebp
+80104ecb:	c3                   	ret    
+80104ecc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-801045f0 <popcli>:
+80104ed0 <popcli>:
 
 void
 popcli(void)
 {
-801045f0:	55                   	push   %ebp
-801045f1:	89 e5                	mov    %esp,%ebp
-801045f3:	83 ec 08             	sub    $0x8,%esp
+80104ed0:	55                   	push   %ebp
+80104ed1:	89 e5                	mov    %esp,%ebp
+80104ed3:	83 ec 08             	sub    $0x8,%esp
   asm volatile("pushfl; popl %0" : "=r" (eflags));
-801045f6:	9c                   	pushf  
-801045f7:	58                   	pop    %eax
+80104ed6:	9c                   	pushf  
+80104ed7:	58                   	pop    %eax
   if(readeflags()&FL_IF)
-801045f8:	f6 c4 02             	test   $0x2,%ah
-801045fb:	75 35                	jne    80104632 <popcli+0x42>
+80104ed8:	f6 c4 02             	test   $0x2,%ah
+80104edb:	75 35                	jne    80104f12 <popcli+0x42>
     panic("popcli - interruptible");
   if(--mycpu()->ncli < 0)
-801045fd:	e8 3e f1 ff ff       	call   80103740 <mycpu>
-80104602:	83 a8 a4 00 00 00 01 	subl   $0x1,0xa4(%eax)
-80104609:	78 34                	js     8010463f <popcli+0x4f>
+80104edd:	e8 9e eb ff ff       	call   80103a80 <mycpu>
+80104ee2:	83 a8 a4 00 00 00 01 	subl   $0x1,0xa4(%eax)
+80104ee9:	78 34                	js     80104f1f <popcli+0x4f>
     panic("popcli");
   if(mycpu()->ncli == 0 && mycpu()->intena)
-8010460b:	e8 30 f1 ff ff       	call   80103740 <mycpu>
-80104610:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
-80104616:	85 d2                	test   %edx,%edx
-80104618:	74 06                	je     80104620 <popcli+0x30>
+80104eeb:	e8 90 eb ff ff       	call   80103a80 <mycpu>
+80104ef0:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
+80104ef6:	85 d2                	test   %edx,%edx
+80104ef8:	74 06                	je     80104f00 <popcli+0x30>
     sti();
 }
-8010461a:	c9                   	leave  
-8010461b:	c3                   	ret    
-8010461c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104efa:	c9                   	leave  
+80104efb:	c3                   	ret    
+80104efc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   if(mycpu()->ncli == 0 && mycpu()->intena)
-80104620:	e8 1b f1 ff ff       	call   80103740 <mycpu>
-80104625:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
-8010462b:	85 c0                	test   %eax,%eax
-8010462d:	74 eb                	je     8010461a <popcli+0x2a>
+80104f00:	e8 7b eb ff ff       	call   80103a80 <mycpu>
+80104f05:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
+80104f0b:	85 c0                	test   %eax,%eax
+80104f0d:	74 eb                	je     80104efa <popcli+0x2a>
   asm volatile("sti");
-8010462f:	fb                   	sti    
+80104f0f:	fb                   	sti    
 }
-80104630:	c9                   	leave  
-80104631:	c3                   	ret    
+80104f10:	c9                   	leave  
+80104f11:	c3                   	ret    
     panic("popcli - interruptible");
-80104632:	83 ec 0c             	sub    $0xc,%esp
-80104635:	68 a3 79 10 80       	push   $0x801079a3
-8010463a:	e8 51 bd ff ff       	call   80100390 <panic>
+80104f12:	83 ec 0c             	sub    $0xc,%esp
+80104f15:	68 f7 83 10 80       	push   $0x801083f7
+80104f1a:	e8 71 b4 ff ff       	call   80100390 <panic>
     panic("popcli");
-8010463f:	83 ec 0c             	sub    $0xc,%esp
-80104642:	68 ba 79 10 80       	push   $0x801079ba
-80104647:	e8 44 bd ff ff       	call   80100390 <panic>
-8010464c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80104650 <holding>:
-{
-80104650:	55                   	push   %ebp
-80104651:	89 e5                	mov    %esp,%ebp
-80104653:	56                   	push   %esi
-80104654:	53                   	push   %ebx
-80104655:	8b 75 08             	mov    0x8(%ebp),%esi
-80104658:	31 db                	xor    %ebx,%ebx
+80104f1f:	83 ec 0c             	sub    $0xc,%esp
+80104f22:	68 0e 84 10 80       	push   $0x8010840e
+80104f27:	e8 64 b4 ff ff       	call   80100390 <panic>
+80104f2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80104f30 <holding>:
+{
+80104f30:	55                   	push   %ebp
+80104f31:	89 e5                	mov    %esp,%ebp
+80104f33:	56                   	push   %esi
+80104f34:	53                   	push   %ebx
+80104f35:	8b 75 08             	mov    0x8(%ebp),%esi
+80104f38:	31 db                	xor    %ebx,%ebx
   pushcli();
-8010465a:	e8 51 ff ff ff       	call   801045b0 <pushcli>
+80104f3a:	e8 51 ff ff ff       	call   80104e90 <pushcli>
   r = lock->locked && lock->cpu == mycpu();
-8010465f:	8b 06                	mov    (%esi),%eax
-80104661:	85 c0                	test   %eax,%eax
-80104663:	74 10                	je     80104675 <holding+0x25>
-80104665:	8b 5e 08             	mov    0x8(%esi),%ebx
-80104668:	e8 d3 f0 ff ff       	call   80103740 <mycpu>
-8010466d:	39 c3                	cmp    %eax,%ebx
-8010466f:	0f 94 c3             	sete   %bl
-80104672:	0f b6 db             	movzbl %bl,%ebx
+80104f3f:	8b 06                	mov    (%esi),%eax
+80104f41:	85 c0                	test   %eax,%eax
+80104f43:	74 10                	je     80104f55 <holding+0x25>
+80104f45:	8b 5e 08             	mov    0x8(%esi),%ebx
+80104f48:	e8 33 eb ff ff       	call   80103a80 <mycpu>
+80104f4d:	39 c3                	cmp    %eax,%ebx
+80104f4f:	0f 94 c3             	sete   %bl
+80104f52:	0f b6 db             	movzbl %bl,%ebx
   popcli();
-80104675:	e8 76 ff ff ff       	call   801045f0 <popcli>
+80104f55:	e8 76 ff ff ff       	call   80104ed0 <popcli>
 }
-8010467a:	89 d8                	mov    %ebx,%eax
-8010467c:	5b                   	pop    %ebx
-8010467d:	5e                   	pop    %esi
-8010467e:	5d                   	pop    %ebp
-8010467f:	c3                   	ret    
-
-80104680 <acquire>:
-{
-80104680:	55                   	push   %ebp
-80104681:	89 e5                	mov    %esp,%ebp
-80104683:	56                   	push   %esi
-80104684:	53                   	push   %ebx
+80104f5a:	89 d8                	mov    %ebx,%eax
+80104f5c:	5b                   	pop    %ebx
+80104f5d:	5e                   	pop    %esi
+80104f5e:	5d                   	pop    %ebp
+80104f5f:	c3                   	ret    
+
+80104f60 <acquire>:
+{
+80104f60:	55                   	push   %ebp
+80104f61:	89 e5                	mov    %esp,%ebp
+80104f63:	56                   	push   %esi
+80104f64:	53                   	push   %ebx
   pushcli(); // disable interrupts to avoid deadlock.
-80104685:	e8 26 ff ff ff       	call   801045b0 <pushcli>
+80104f65:	e8 26 ff ff ff       	call   80104e90 <pushcli>
   if(holding(lk))
-8010468a:	8b 5d 08             	mov    0x8(%ebp),%ebx
-8010468d:	83 ec 0c             	sub    $0xc,%esp
-80104690:	53                   	push   %ebx
-80104691:	e8 ba ff ff ff       	call   80104650 <holding>
-80104696:	83 c4 10             	add    $0x10,%esp
-80104699:	85 c0                	test   %eax,%eax
-8010469b:	0f 85 83 00 00 00    	jne    80104724 <acquire+0xa4>
-801046a1:	89 c6                	mov    %eax,%esi
+80104f6a:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104f6d:	83 ec 0c             	sub    $0xc,%esp
+80104f70:	53                   	push   %ebx
+80104f71:	e8 ba ff ff ff       	call   80104f30 <holding>
+80104f76:	83 c4 10             	add    $0x10,%esp
+80104f79:	85 c0                	test   %eax,%eax
+80104f7b:	0f 85 83 00 00 00    	jne    80105004 <acquire+0xa4>
+80104f81:	89 c6                	mov    %eax,%esi
   asm volatile("lock; xchgl %0, %1" :
-801046a3:	ba 01 00 00 00       	mov    $0x1,%edx
-801046a8:	eb 09                	jmp    801046b3 <acquire+0x33>
-801046aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-801046b0:	8b 5d 08             	mov    0x8(%ebp),%ebx
-801046b3:	89 d0                	mov    %edx,%eax
-801046b5:	f0 87 03             	lock xchg %eax,(%ebx)
+80104f83:	ba 01 00 00 00       	mov    $0x1,%edx
+80104f88:	eb 09                	jmp    80104f93 <acquire+0x33>
+80104f8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104f90:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104f93:	89 d0                	mov    %edx,%eax
+80104f95:	f0 87 03             	lock xchg %eax,(%ebx)
   while(xchg(&lk->locked, 1) != 0)
-801046b8:	85 c0                	test   %eax,%eax
-801046ba:	75 f4                	jne    801046b0 <acquire+0x30>
+80104f98:	85 c0                	test   %eax,%eax
+80104f9a:	75 f4                	jne    80104f90 <acquire+0x30>
   __sync_synchronize();
-801046bc:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+80104f9c:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
   lk->cpu = mycpu();
-801046c1:	8b 5d 08             	mov    0x8(%ebp),%ebx
-801046c4:	e8 77 f0 ff ff       	call   80103740 <mycpu>
+80104fa1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104fa4:	e8 d7 ea ff ff       	call   80103a80 <mycpu>
   getcallerpcs(&lk, lk->pcs);
-801046c9:	8d 53 0c             	lea    0xc(%ebx),%edx
+80104fa9:	8d 53 0c             	lea    0xc(%ebx),%edx
   lk->cpu = mycpu();
-801046cc:	89 43 08             	mov    %eax,0x8(%ebx)
+80104fac:	89 43 08             	mov    %eax,0x8(%ebx)
   ebp = (uint*)v - 2;
-801046cf:	89 e8                	mov    %ebp,%eax
-801046d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104faf:	89 e8                	mov    %ebp,%eax
+80104fb1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
-801046d8:	8d 88 00 00 00 80    	lea    -0x80000000(%eax),%ecx
-801046de:	81 f9 fe ff ff 7f    	cmp    $0x7ffffffe,%ecx
-801046e4:	77 1a                	ja     80104700 <acquire+0x80>
+80104fb8:	8d 88 00 00 00 80    	lea    -0x80000000(%eax),%ecx
+80104fbe:	81 f9 fe ff ff 7f    	cmp    $0x7ffffffe,%ecx
+80104fc4:	77 1a                	ja     80104fe0 <acquire+0x80>
     pcs[i] = ebp[1];     // saved %eip
-801046e6:	8b 48 04             	mov    0x4(%eax),%ecx
-801046e9:	89 0c b2             	mov    %ecx,(%edx,%esi,4)
+80104fc6:	8b 48 04             	mov    0x4(%eax),%ecx
+80104fc9:	89 0c b2             	mov    %ecx,(%edx,%esi,4)
   for(i = 0; i < 10; i++){
-801046ec:	83 c6 01             	add    $0x1,%esi
+80104fcc:	83 c6 01             	add    $0x1,%esi
     ebp = (uint*)ebp[0]; // saved %ebp
-801046ef:	8b 00                	mov    (%eax),%eax
+80104fcf:	8b 00                	mov    (%eax),%eax
   for(i = 0; i < 10; i++){
-801046f1:	83 fe 0a             	cmp    $0xa,%esi
-801046f4:	75 e2                	jne    801046d8 <acquire+0x58>
+80104fd1:	83 fe 0a             	cmp    $0xa,%esi
+80104fd4:	75 e2                	jne    80104fb8 <acquire+0x58>
 }
-801046f6:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801046f9:	5b                   	pop    %ebx
-801046fa:	5e                   	pop    %esi
-801046fb:	5d                   	pop    %ebp
-801046fc:	c3                   	ret    
-801046fd:	8d 76 00             	lea    0x0(%esi),%esi
-80104700:	8d 04 b2             	lea    (%edx,%esi,4),%eax
-80104703:	83 c2 28             	add    $0x28,%edx
-80104706:	8d 76 00             	lea    0x0(%esi),%esi
-80104709:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80104fd6:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104fd9:	5b                   	pop    %ebx
+80104fda:	5e                   	pop    %esi
+80104fdb:	5d                   	pop    %ebp
+80104fdc:	c3                   	ret    
+80104fdd:	8d 76 00             	lea    0x0(%esi),%esi
+80104fe0:	8d 04 b2             	lea    (%edx,%esi,4),%eax
+80104fe3:	83 c2 28             	add    $0x28,%edx
+80104fe6:	8d 76 00             	lea    0x0(%esi),%esi
+80104fe9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
     pcs[i] = 0;
-80104710:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
-80104716:	83 c0 04             	add    $0x4,%eax
+80104ff0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+80104ff6:	83 c0 04             	add    $0x4,%eax
   for(; i < 10; i++)
-80104719:	39 d0                	cmp    %edx,%eax
-8010471b:	75 f3                	jne    80104710 <acquire+0x90>
+80104ff9:	39 d0                	cmp    %edx,%eax
+80104ffb:	75 f3                	jne    80104ff0 <acquire+0x90>
 }
-8010471d:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104720:	5b                   	pop    %ebx
-80104721:	5e                   	pop    %esi
-80104722:	5d                   	pop    %ebp
-80104723:	c3                   	ret    
+80104ffd:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105000:	5b                   	pop    %ebx
+80105001:	5e                   	pop    %esi
+80105002:	5d                   	pop    %ebp
+80105003:	c3                   	ret    
     panic("acquire");
-80104724:	83 ec 0c             	sub    $0xc,%esp
-80104727:	68 c1 79 10 80       	push   $0x801079c1
-8010472c:	e8 5f bc ff ff       	call   80100390 <panic>
-80104731:	eb 0d                	jmp    80104740 <release>
-80104733:	90                   	nop
-80104734:	90                   	nop
-80104735:	90                   	nop
-80104736:	90                   	nop
-80104737:	90                   	nop
-80104738:	90                   	nop
-80104739:	90                   	nop
-8010473a:	90                   	nop
-8010473b:	90                   	nop
-8010473c:	90                   	nop
-8010473d:	90                   	nop
-8010473e:	90                   	nop
-8010473f:	90                   	nop
-
-80104740 <release>:
-{
-80104740:	55                   	push   %ebp
-80104741:	89 e5                	mov    %esp,%ebp
-80104743:	53                   	push   %ebx
-80104744:	83 ec 10             	sub    $0x10,%esp
-80104747:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80105004:	83 ec 0c             	sub    $0xc,%esp
+80105007:	68 15 84 10 80       	push   $0x80108415
+8010500c:	e8 7f b3 ff ff       	call   80100390 <panic>
+80105011:	eb 0d                	jmp    80105020 <release>
+80105013:	90                   	nop
+80105014:	90                   	nop
+80105015:	90                   	nop
+80105016:	90                   	nop
+80105017:	90                   	nop
+80105018:	90                   	nop
+80105019:	90                   	nop
+8010501a:	90                   	nop
+8010501b:	90                   	nop
+8010501c:	90                   	nop
+8010501d:	90                   	nop
+8010501e:	90                   	nop
+8010501f:	90                   	nop
+
+80105020 <release>:
+{
+80105020:	55                   	push   %ebp
+80105021:	89 e5                	mov    %esp,%ebp
+80105023:	53                   	push   %ebx
+80105024:	83 ec 10             	sub    $0x10,%esp
+80105027:	8b 5d 08             	mov    0x8(%ebp),%ebx
   if(!holding(lk))
-8010474a:	53                   	push   %ebx
-8010474b:	e8 00 ff ff ff       	call   80104650 <holding>
-80104750:	83 c4 10             	add    $0x10,%esp
-80104753:	85 c0                	test   %eax,%eax
-80104755:	74 22                	je     80104779 <release+0x39>
+8010502a:	53                   	push   %ebx
+8010502b:	e8 00 ff ff ff       	call   80104f30 <holding>
+80105030:	83 c4 10             	add    $0x10,%esp
+80105033:	85 c0                	test   %eax,%eax
+80105035:	74 22                	je     80105059 <release+0x39>
   lk->pcs[0] = 0;
-80104757:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+80105037:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
   lk->cpu = 0;
-8010475e:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+8010503e:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
   __sync_synchronize();
-80104765:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+80105045:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
   asm volatile("movl $0, %0" : "+m" (lk->locked) : );
-8010476a:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+8010504a:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
 }
-80104770:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104773:	c9                   	leave  
+80105050:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105053:	c9                   	leave  
   popcli();
-80104774:	e9 77 fe ff ff       	jmp    801045f0 <popcli>
+80105054:	e9 77 fe ff ff       	jmp    80104ed0 <popcli>
     panic("release");
-80104779:	83 ec 0c             	sub    $0xc,%esp
-8010477c:	68 c9 79 10 80       	push   $0x801079c9
-80104781:	e8 0a bc ff ff       	call   80100390 <panic>
-80104786:	66 90                	xchg   %ax,%ax
-80104788:	66 90                	xchg   %ax,%ax
-8010478a:	66 90                	xchg   %ax,%ax
-8010478c:	66 90                	xchg   %ax,%ax
-8010478e:	66 90                	xchg   %ax,%ax
+80105059:	83 ec 0c             	sub    $0xc,%esp
+8010505c:	68 1d 84 10 80       	push   $0x8010841d
+80105061:	e8 2a b3 ff ff       	call   80100390 <panic>
+80105066:	66 90                	xchg   %ax,%ax
+80105068:	66 90                	xchg   %ax,%ax
+8010506a:	66 90                	xchg   %ax,%ax
+8010506c:	66 90                	xchg   %ax,%ax
+8010506e:	66 90                	xchg   %ax,%ax
 
-80104790 <memset>:
+80105070 <memset>:
 #include "types.h"
 #include "x86.h"
 
 void*
 memset(void *dst, int c, uint n)
 {
-80104790:	55                   	push   %ebp
-80104791:	89 e5                	mov    %esp,%ebp
-80104793:	57                   	push   %edi
-80104794:	53                   	push   %ebx
-80104795:	8b 55 08             	mov    0x8(%ebp),%edx
-80104798:	8b 4d 10             	mov    0x10(%ebp),%ecx
+80105070:	55                   	push   %ebp
+80105071:	89 e5                	mov    %esp,%ebp
+80105073:	57                   	push   %edi
+80105074:	53                   	push   %ebx
+80105075:	8b 55 08             	mov    0x8(%ebp),%edx
+80105078:	8b 4d 10             	mov    0x10(%ebp),%ecx
   if ((int)dst%4 == 0 && n%4 == 0){
-8010479b:	f6 c2 03             	test   $0x3,%dl
-8010479e:	75 05                	jne    801047a5 <memset+0x15>
-801047a0:	f6 c1 03             	test   $0x3,%cl
-801047a3:	74 13                	je     801047b8 <memset+0x28>
+8010507b:	f6 c2 03             	test   $0x3,%dl
+8010507e:	75 05                	jne    80105085 <memset+0x15>
+80105080:	f6 c1 03             	test   $0x3,%cl
+80105083:	74 13                	je     80105098 <memset+0x28>
   asm volatile("cld; rep stosb" :
-801047a5:	89 d7                	mov    %edx,%edi
-801047a7:	8b 45 0c             	mov    0xc(%ebp),%eax
-801047aa:	fc                   	cld    
-801047ab:	f3 aa                	rep stos %al,%es:(%edi)
+80105085:	89 d7                	mov    %edx,%edi
+80105087:	8b 45 0c             	mov    0xc(%ebp),%eax
+8010508a:	fc                   	cld    
+8010508b:	f3 aa                	rep stos %al,%es:(%edi)
     c &= 0xFF;
     stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
   } else
     stosb(dst, c, n);
   return dst;
 }
-801047ad:	5b                   	pop    %ebx
-801047ae:	89 d0                	mov    %edx,%eax
-801047b0:	5f                   	pop    %edi
-801047b1:	5d                   	pop    %ebp
-801047b2:	c3                   	ret    
-801047b3:	90                   	nop
-801047b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010508d:	5b                   	pop    %ebx
+8010508e:	89 d0                	mov    %edx,%eax
+80105090:	5f                   	pop    %edi
+80105091:	5d                   	pop    %ebp
+80105092:	c3                   	ret    
+80105093:	90                   	nop
+80105094:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     c &= 0xFF;
-801047b8:	0f b6 7d 0c          	movzbl 0xc(%ebp),%edi
+80105098:	0f b6 7d 0c          	movzbl 0xc(%ebp),%edi
     stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
-801047bc:	c1 e9 02             	shr    $0x2,%ecx
-801047bf:	89 f8                	mov    %edi,%eax
-801047c1:	89 fb                	mov    %edi,%ebx
-801047c3:	c1 e0 18             	shl    $0x18,%eax
-801047c6:	c1 e3 10             	shl    $0x10,%ebx
-801047c9:	09 d8                	or     %ebx,%eax
-801047cb:	09 f8                	or     %edi,%eax
-801047cd:	c1 e7 08             	shl    $0x8,%edi
-801047d0:	09 f8                	or     %edi,%eax
+8010509c:	c1 e9 02             	shr    $0x2,%ecx
+8010509f:	89 f8                	mov    %edi,%eax
+801050a1:	89 fb                	mov    %edi,%ebx
+801050a3:	c1 e0 18             	shl    $0x18,%eax
+801050a6:	c1 e3 10             	shl    $0x10,%ebx
+801050a9:	09 d8                	or     %ebx,%eax
+801050ab:	09 f8                	or     %edi,%eax
+801050ad:	c1 e7 08             	shl    $0x8,%edi
+801050b0:	09 f8                	or     %edi,%eax
   asm volatile("cld; rep stosl" :
-801047d2:	89 d7                	mov    %edx,%edi
-801047d4:	fc                   	cld    
-801047d5:	f3 ab                	rep stos %eax,%es:(%edi)
-}
-801047d7:	5b                   	pop    %ebx
-801047d8:	89 d0                	mov    %edx,%eax
-801047da:	5f                   	pop    %edi
-801047db:	5d                   	pop    %ebp
-801047dc:	c3                   	ret    
-801047dd:	8d 76 00             	lea    0x0(%esi),%esi
+801050b2:	89 d7                	mov    %edx,%edi
+801050b4:	fc                   	cld    
+801050b5:	f3 ab                	rep stos %eax,%es:(%edi)
+}
+801050b7:	5b                   	pop    %ebx
+801050b8:	89 d0                	mov    %edx,%eax
+801050ba:	5f                   	pop    %edi
+801050bb:	5d                   	pop    %ebp
+801050bc:	c3                   	ret    
+801050bd:	8d 76 00             	lea    0x0(%esi),%esi
 
-801047e0 <memcmp>:
+801050c0 <memcmp>:
 
 int
 memcmp(const void *v1, const void *v2, uint n)
 {
-801047e0:	55                   	push   %ebp
-801047e1:	89 e5                	mov    %esp,%ebp
-801047e3:	57                   	push   %edi
-801047e4:	56                   	push   %esi
-801047e5:	53                   	push   %ebx
-801047e6:	8b 5d 10             	mov    0x10(%ebp),%ebx
-801047e9:	8b 75 08             	mov    0x8(%ebp),%esi
-801047ec:	8b 7d 0c             	mov    0xc(%ebp),%edi
+801050c0:	55                   	push   %ebp
+801050c1:	89 e5                	mov    %esp,%ebp
+801050c3:	57                   	push   %edi
+801050c4:	56                   	push   %esi
+801050c5:	53                   	push   %ebx
+801050c6:	8b 5d 10             	mov    0x10(%ebp),%ebx
+801050c9:	8b 75 08             	mov    0x8(%ebp),%esi
+801050cc:	8b 7d 0c             	mov    0xc(%ebp),%edi
   const uchar *s1, *s2;
 
   s1 = v1;
   s2 = v2;
   while(n-- > 0){
-801047ef:	85 db                	test   %ebx,%ebx
-801047f1:	74 29                	je     8010481c <memcmp+0x3c>
+801050cf:	85 db                	test   %ebx,%ebx
+801050d1:	74 29                	je     801050fc <memcmp+0x3c>
     if(*s1 != *s2)
-801047f3:	0f b6 16             	movzbl (%esi),%edx
-801047f6:	0f b6 0f             	movzbl (%edi),%ecx
-801047f9:	38 d1                	cmp    %dl,%cl
-801047fb:	75 2b                	jne    80104828 <memcmp+0x48>
-801047fd:	b8 01 00 00 00       	mov    $0x1,%eax
-80104802:	eb 14                	jmp    80104818 <memcmp+0x38>
-80104804:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104808:	0f b6 14 06          	movzbl (%esi,%eax,1),%edx
-8010480c:	83 c0 01             	add    $0x1,%eax
-8010480f:	0f b6 4c 07 ff       	movzbl -0x1(%edi,%eax,1),%ecx
-80104814:	38 ca                	cmp    %cl,%dl
-80104816:	75 10                	jne    80104828 <memcmp+0x48>
+801050d3:	0f b6 16             	movzbl (%esi),%edx
+801050d6:	0f b6 0f             	movzbl (%edi),%ecx
+801050d9:	38 d1                	cmp    %dl,%cl
+801050db:	75 2b                	jne    80105108 <memcmp+0x48>
+801050dd:	b8 01 00 00 00       	mov    $0x1,%eax
+801050e2:	eb 14                	jmp    801050f8 <memcmp+0x38>
+801050e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801050e8:	0f b6 14 06          	movzbl (%esi,%eax,1),%edx
+801050ec:	83 c0 01             	add    $0x1,%eax
+801050ef:	0f b6 4c 07 ff       	movzbl -0x1(%edi,%eax,1),%ecx
+801050f4:	38 ca                	cmp    %cl,%dl
+801050f6:	75 10                	jne    80105108 <memcmp+0x48>
   while(n-- > 0){
-80104818:	39 d8                	cmp    %ebx,%eax
-8010481a:	75 ec                	jne    80104808 <memcmp+0x28>
+801050f8:	39 d8                	cmp    %ebx,%eax
+801050fa:	75 ec                	jne    801050e8 <memcmp+0x28>
       return *s1 - *s2;
     s1++, s2++;
   }
 
   return 0;
 }
-8010481c:	5b                   	pop    %ebx
+801050fc:	5b                   	pop    %ebx
   return 0;
-8010481d:	31 c0                	xor    %eax,%eax
+801050fd:	31 c0                	xor    %eax,%eax
 }
-8010481f:	5e                   	pop    %esi
-80104820:	5f                   	pop    %edi
-80104821:	5d                   	pop    %ebp
-80104822:	c3                   	ret    
-80104823:	90                   	nop
-80104824:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801050ff:	5e                   	pop    %esi
+80105100:	5f                   	pop    %edi
+80105101:	5d                   	pop    %ebp
+80105102:	c3                   	ret    
+80105103:	90                   	nop
+80105104:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       return *s1 - *s2;
-80104828:	0f b6 c2             	movzbl %dl,%eax
+80105108:	0f b6 c2             	movzbl %dl,%eax
 }
-8010482b:	5b                   	pop    %ebx
+8010510b:	5b                   	pop    %ebx
       return *s1 - *s2;
-8010482c:	29 c8                	sub    %ecx,%eax
+8010510c:	29 c8                	sub    %ecx,%eax
 }
-8010482e:	5e                   	pop    %esi
-8010482f:	5f                   	pop    %edi
-80104830:	5d                   	pop    %ebp
-80104831:	c3                   	ret    
-80104832:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104839:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+8010510e:	5e                   	pop    %esi
+8010510f:	5f                   	pop    %edi
+80105110:	5d                   	pop    %ebp
+80105111:	c3                   	ret    
+80105112:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105119:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80104840 <memmove>:
+80105120 <memmove>:
 
 void*
 memmove(void *dst, const void *src, uint n)
 {
-80104840:	55                   	push   %ebp
-80104841:	89 e5                	mov    %esp,%ebp
-80104843:	56                   	push   %esi
-80104844:	53                   	push   %ebx
-80104845:	8b 45 08             	mov    0x8(%ebp),%eax
-80104848:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-8010484b:	8b 75 10             	mov    0x10(%ebp),%esi
+80105120:	55                   	push   %ebp
+80105121:	89 e5                	mov    %esp,%ebp
+80105123:	56                   	push   %esi
+80105124:	53                   	push   %ebx
+80105125:	8b 45 08             	mov    0x8(%ebp),%eax
+80105128:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+8010512b:	8b 75 10             	mov    0x10(%ebp),%esi
   const char *s;
   char *d;
 
   s = src;
   d = dst;
   if(s < d && s + n > d){
-8010484e:	39 c3                	cmp    %eax,%ebx
-80104850:	73 26                	jae    80104878 <memmove+0x38>
-80104852:	8d 0c 33             	lea    (%ebx,%esi,1),%ecx
-80104855:	39 c8                	cmp    %ecx,%eax
-80104857:	73 1f                	jae    80104878 <memmove+0x38>
+8010512e:	39 c3                	cmp    %eax,%ebx
+80105130:	73 26                	jae    80105158 <memmove+0x38>
+80105132:	8d 0c 33             	lea    (%ebx,%esi,1),%ecx
+80105135:	39 c8                	cmp    %ecx,%eax
+80105137:	73 1f                	jae    80105158 <memmove+0x38>
     s += n;
     d += n;
     while(n-- > 0)
-80104859:	85 f6                	test   %esi,%esi
-8010485b:	8d 56 ff             	lea    -0x1(%esi),%edx
-8010485e:	74 0f                	je     8010486f <memmove+0x2f>
+80105139:	85 f6                	test   %esi,%esi
+8010513b:	8d 56 ff             	lea    -0x1(%esi),%edx
+8010513e:	74 0f                	je     8010514f <memmove+0x2f>
       *--d = *--s;
-80104860:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
-80104864:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+80105140:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
+80105144:	88 0c 10             	mov    %cl,(%eax,%edx,1)
     while(n-- > 0)
-80104867:	83 ea 01             	sub    $0x1,%edx
-8010486a:	83 fa ff             	cmp    $0xffffffff,%edx
-8010486d:	75 f1                	jne    80104860 <memmove+0x20>
+80105147:	83 ea 01             	sub    $0x1,%edx
+8010514a:	83 fa ff             	cmp    $0xffffffff,%edx
+8010514d:	75 f1                	jne    80105140 <memmove+0x20>
   } else
     while(n-- > 0)
       *d++ = *s++;
 
   return dst;
 }
-8010486f:	5b                   	pop    %ebx
-80104870:	5e                   	pop    %esi
-80104871:	5d                   	pop    %ebp
-80104872:	c3                   	ret    
-80104873:	90                   	nop
-80104874:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010514f:	5b                   	pop    %ebx
+80105150:	5e                   	pop    %esi
+80105151:	5d                   	pop    %ebp
+80105152:	c3                   	ret    
+80105153:	90                   	nop
+80105154:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     while(n-- > 0)
-80104878:	31 d2                	xor    %edx,%edx
-8010487a:	85 f6                	test   %esi,%esi
-8010487c:	74 f1                	je     8010486f <memmove+0x2f>
-8010487e:	66 90                	xchg   %ax,%ax
+80105158:	31 d2                	xor    %edx,%edx
+8010515a:	85 f6                	test   %esi,%esi
+8010515c:	74 f1                	je     8010514f <memmove+0x2f>
+8010515e:	66 90                	xchg   %ax,%ax
       *d++ = *s++;
-80104880:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
-80104884:	88 0c 10             	mov    %cl,(%eax,%edx,1)
-80104887:	83 c2 01             	add    $0x1,%edx
+80105160:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
+80105164:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+80105167:	83 c2 01             	add    $0x1,%edx
     while(n-- > 0)
-8010488a:	39 d6                	cmp    %edx,%esi
-8010488c:	75 f2                	jne    80104880 <memmove+0x40>
+8010516a:	39 d6                	cmp    %edx,%esi
+8010516c:	75 f2                	jne    80105160 <memmove+0x40>
 }
-8010488e:	5b                   	pop    %ebx
-8010488f:	5e                   	pop    %esi
-80104890:	5d                   	pop    %ebp
-80104891:	c3                   	ret    
-80104892:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104899:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+8010516e:	5b                   	pop    %ebx
+8010516f:	5e                   	pop    %esi
+80105170:	5d                   	pop    %ebp
+80105171:	c3                   	ret    
+80105172:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105179:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-801048a0 <memcpy>:
+80105180 <memcpy>:
 
 // memcpy exists to placate GCC.  Use memmove.
 void*
 memcpy(void *dst, const void *src, uint n)
 {
-801048a0:	55                   	push   %ebp
-801048a1:	89 e5                	mov    %esp,%ebp
+80105180:	55                   	push   %ebp
+80105181:	89 e5                	mov    %esp,%ebp
   return memmove(dst, src, n);
 }
-801048a3:	5d                   	pop    %ebp
+80105183:	5d                   	pop    %ebp
   return memmove(dst, src, n);
-801048a4:	eb 9a                	jmp    80104840 <memmove>
-801048a6:	8d 76 00             	lea    0x0(%esi),%esi
-801048a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80105184:	eb 9a                	jmp    80105120 <memmove>
+80105186:	8d 76 00             	lea    0x0(%esi),%esi
+80105189:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-801048b0 <strncmp>:
+80105190 <strncmp>:
 
 int
 strncmp(const char *p, const char *q, uint n)
 {
-801048b0:	55                   	push   %ebp
-801048b1:	89 e5                	mov    %esp,%ebp
-801048b3:	57                   	push   %edi
-801048b4:	56                   	push   %esi
-801048b5:	8b 7d 10             	mov    0x10(%ebp),%edi
-801048b8:	53                   	push   %ebx
-801048b9:	8b 4d 08             	mov    0x8(%ebp),%ecx
-801048bc:	8b 75 0c             	mov    0xc(%ebp),%esi
+80105190:	55                   	push   %ebp
+80105191:	89 e5                	mov    %esp,%ebp
+80105193:	57                   	push   %edi
+80105194:	56                   	push   %esi
+80105195:	8b 7d 10             	mov    0x10(%ebp),%edi
+80105198:	53                   	push   %ebx
+80105199:	8b 4d 08             	mov    0x8(%ebp),%ecx
+8010519c:	8b 75 0c             	mov    0xc(%ebp),%esi
   while(n > 0 && *p && *p == *q)
-801048bf:	85 ff                	test   %edi,%edi
-801048c1:	74 2f                	je     801048f2 <strncmp+0x42>
-801048c3:	0f b6 01             	movzbl (%ecx),%eax
-801048c6:	0f b6 1e             	movzbl (%esi),%ebx
-801048c9:	84 c0                	test   %al,%al
-801048cb:	74 37                	je     80104904 <strncmp+0x54>
-801048cd:	38 c3                	cmp    %al,%bl
-801048cf:	75 33                	jne    80104904 <strncmp+0x54>
-801048d1:	01 f7                	add    %esi,%edi
-801048d3:	eb 13                	jmp    801048e8 <strncmp+0x38>
-801048d5:	8d 76 00             	lea    0x0(%esi),%esi
-801048d8:	0f b6 01             	movzbl (%ecx),%eax
-801048db:	84 c0                	test   %al,%al
-801048dd:	74 21                	je     80104900 <strncmp+0x50>
-801048df:	0f b6 1a             	movzbl (%edx),%ebx
-801048e2:	89 d6                	mov    %edx,%esi
-801048e4:	38 d8                	cmp    %bl,%al
-801048e6:	75 1c                	jne    80104904 <strncmp+0x54>
+8010519f:	85 ff                	test   %edi,%edi
+801051a1:	74 2f                	je     801051d2 <strncmp+0x42>
+801051a3:	0f b6 01             	movzbl (%ecx),%eax
+801051a6:	0f b6 1e             	movzbl (%esi),%ebx
+801051a9:	84 c0                	test   %al,%al
+801051ab:	74 37                	je     801051e4 <strncmp+0x54>
+801051ad:	38 c3                	cmp    %al,%bl
+801051af:	75 33                	jne    801051e4 <strncmp+0x54>
+801051b1:	01 f7                	add    %esi,%edi
+801051b3:	eb 13                	jmp    801051c8 <strncmp+0x38>
+801051b5:	8d 76 00             	lea    0x0(%esi),%esi
+801051b8:	0f b6 01             	movzbl (%ecx),%eax
+801051bb:	84 c0                	test   %al,%al
+801051bd:	74 21                	je     801051e0 <strncmp+0x50>
+801051bf:	0f b6 1a             	movzbl (%edx),%ebx
+801051c2:	89 d6                	mov    %edx,%esi
+801051c4:	38 d8                	cmp    %bl,%al
+801051c6:	75 1c                	jne    801051e4 <strncmp+0x54>
     n--, p++, q++;
-801048e8:	8d 56 01             	lea    0x1(%esi),%edx
-801048eb:	83 c1 01             	add    $0x1,%ecx
+801051c8:	8d 56 01             	lea    0x1(%esi),%edx
+801051cb:	83 c1 01             	add    $0x1,%ecx
   while(n > 0 && *p && *p == *q)
-801048ee:	39 fa                	cmp    %edi,%edx
-801048f0:	75 e6                	jne    801048d8 <strncmp+0x28>
+801051ce:	39 fa                	cmp    %edi,%edx
+801051d0:	75 e6                	jne    801051b8 <strncmp+0x28>
   if(n == 0)
     return 0;
   return (uchar)*p - (uchar)*q;
 }
-801048f2:	5b                   	pop    %ebx
+801051d2:	5b                   	pop    %ebx
     return 0;
-801048f3:	31 c0                	xor    %eax,%eax
+801051d3:	31 c0                	xor    %eax,%eax
 }
-801048f5:	5e                   	pop    %esi
-801048f6:	5f                   	pop    %edi
-801048f7:	5d                   	pop    %ebp
-801048f8:	c3                   	ret    
-801048f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104900:	0f b6 5e 01          	movzbl 0x1(%esi),%ebx
+801051d5:	5e                   	pop    %esi
+801051d6:	5f                   	pop    %edi
+801051d7:	5d                   	pop    %ebp
+801051d8:	c3                   	ret    
+801051d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801051e0:	0f b6 5e 01          	movzbl 0x1(%esi),%ebx
   return (uchar)*p - (uchar)*q;
-80104904:	29 d8                	sub    %ebx,%eax
+801051e4:	29 d8                	sub    %ebx,%eax
 }
-80104906:	5b                   	pop    %ebx
-80104907:	5e                   	pop    %esi
-80104908:	5f                   	pop    %edi
-80104909:	5d                   	pop    %ebp
-8010490a:	c3                   	ret    
-8010490b:	90                   	nop
-8010490c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801051e6:	5b                   	pop    %ebx
+801051e7:	5e                   	pop    %esi
+801051e8:	5f                   	pop    %edi
+801051e9:	5d                   	pop    %ebp
+801051ea:	c3                   	ret    
+801051eb:	90                   	nop
+801051ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80104910 <strncpy>:
+801051f0 <strncpy>:
 
 char*
 strncpy(char *s, const char *t, int n)
 {
-80104910:	55                   	push   %ebp
-80104911:	89 e5                	mov    %esp,%ebp
-80104913:	56                   	push   %esi
-80104914:	53                   	push   %ebx
-80104915:	8b 45 08             	mov    0x8(%ebp),%eax
-80104918:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-8010491b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+801051f0:	55                   	push   %ebp
+801051f1:	89 e5                	mov    %esp,%ebp
+801051f3:	56                   	push   %esi
+801051f4:	53                   	push   %ebx
+801051f5:	8b 45 08             	mov    0x8(%ebp),%eax
+801051f8:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+801051fb:	8b 4d 10             	mov    0x10(%ebp),%ecx
   char *os;
 
   os = s;
   while(n-- > 0 && (*s++ = *t++) != 0)
-8010491e:	89 c2                	mov    %eax,%edx
-80104920:	eb 19                	jmp    8010493b <strncpy+0x2b>
-80104922:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80104928:	83 c3 01             	add    $0x1,%ebx
-8010492b:	0f b6 4b ff          	movzbl -0x1(%ebx),%ecx
-8010492f:	83 c2 01             	add    $0x1,%edx
-80104932:	84 c9                	test   %cl,%cl
-80104934:	88 4a ff             	mov    %cl,-0x1(%edx)
-80104937:	74 09                	je     80104942 <strncpy+0x32>
-80104939:	89 f1                	mov    %esi,%ecx
-8010493b:	85 c9                	test   %ecx,%ecx
-8010493d:	8d 71 ff             	lea    -0x1(%ecx),%esi
-80104940:	7f e6                	jg     80104928 <strncpy+0x18>
+801051fe:	89 c2                	mov    %eax,%edx
+80105200:	eb 19                	jmp    8010521b <strncpy+0x2b>
+80105202:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105208:	83 c3 01             	add    $0x1,%ebx
+8010520b:	0f b6 4b ff          	movzbl -0x1(%ebx),%ecx
+8010520f:	83 c2 01             	add    $0x1,%edx
+80105212:	84 c9                	test   %cl,%cl
+80105214:	88 4a ff             	mov    %cl,-0x1(%edx)
+80105217:	74 09                	je     80105222 <strncpy+0x32>
+80105219:	89 f1                	mov    %esi,%ecx
+8010521b:	85 c9                	test   %ecx,%ecx
+8010521d:	8d 71 ff             	lea    -0x1(%ecx),%esi
+80105220:	7f e6                	jg     80105208 <strncpy+0x18>
     ;
   while(n-- > 0)
-80104942:	31 c9                	xor    %ecx,%ecx
-80104944:	85 f6                	test   %esi,%esi
-80104946:	7e 17                	jle    8010495f <strncpy+0x4f>
-80104948:	90                   	nop
-80104949:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105222:	31 c9                	xor    %ecx,%ecx
+80105224:	85 f6                	test   %esi,%esi
+80105226:	7e 17                	jle    8010523f <strncpy+0x4f>
+80105228:	90                   	nop
+80105229:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     *s++ = 0;
-80104950:	c6 04 0a 00          	movb   $0x0,(%edx,%ecx,1)
-80104954:	89 f3                	mov    %esi,%ebx
-80104956:	83 c1 01             	add    $0x1,%ecx
-80104959:	29 cb                	sub    %ecx,%ebx
+80105230:	c6 04 0a 00          	movb   $0x0,(%edx,%ecx,1)
+80105234:	89 f3                	mov    %esi,%ebx
+80105236:	83 c1 01             	add    $0x1,%ecx
+80105239:	29 cb                	sub    %ecx,%ebx
   while(n-- > 0)
-8010495b:	85 db                	test   %ebx,%ebx
-8010495d:	7f f1                	jg     80104950 <strncpy+0x40>
+8010523b:	85 db                	test   %ebx,%ebx
+8010523d:	7f f1                	jg     80105230 <strncpy+0x40>
   return os;
 }
-8010495f:	5b                   	pop    %ebx
-80104960:	5e                   	pop    %esi
-80104961:	5d                   	pop    %ebp
-80104962:	c3                   	ret    
-80104963:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80104969:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+8010523f:	5b                   	pop    %ebx
+80105240:	5e                   	pop    %esi
+80105241:	5d                   	pop    %ebp
+80105242:	c3                   	ret    
+80105243:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105249:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80104970 <safestrcpy>:
+80105250 <safestrcpy>:
 
 // Like strncpy but guaranteed to NUL-terminate.
 char*
 safestrcpy(char *s, const char *t, int n)
 {
-80104970:	55                   	push   %ebp
-80104971:	89 e5                	mov    %esp,%ebp
-80104973:	56                   	push   %esi
-80104974:	53                   	push   %ebx
-80104975:	8b 4d 10             	mov    0x10(%ebp),%ecx
-80104978:	8b 45 08             	mov    0x8(%ebp),%eax
-8010497b:	8b 55 0c             	mov    0xc(%ebp),%edx
+80105250:	55                   	push   %ebp
+80105251:	89 e5                	mov    %esp,%ebp
+80105253:	56                   	push   %esi
+80105254:	53                   	push   %ebx
+80105255:	8b 4d 10             	mov    0x10(%ebp),%ecx
+80105258:	8b 45 08             	mov    0x8(%ebp),%eax
+8010525b:	8b 55 0c             	mov    0xc(%ebp),%edx
   char *os;
 
   os = s;
   if(n <= 0)
-8010497e:	85 c9                	test   %ecx,%ecx
-80104980:	7e 26                	jle    801049a8 <safestrcpy+0x38>
-80104982:	8d 74 0a ff          	lea    -0x1(%edx,%ecx,1),%esi
-80104986:	89 c1                	mov    %eax,%ecx
-80104988:	eb 17                	jmp    801049a1 <safestrcpy+0x31>
-8010498a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010525e:	85 c9                	test   %ecx,%ecx
+80105260:	7e 26                	jle    80105288 <safestrcpy+0x38>
+80105262:	8d 74 0a ff          	lea    -0x1(%edx,%ecx,1),%esi
+80105266:	89 c1                	mov    %eax,%ecx
+80105268:	eb 17                	jmp    80105281 <safestrcpy+0x31>
+8010526a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     return os;
   while(--n > 0 && (*s++ = *t++) != 0)
-80104990:	83 c2 01             	add    $0x1,%edx
-80104993:	0f b6 5a ff          	movzbl -0x1(%edx),%ebx
-80104997:	83 c1 01             	add    $0x1,%ecx
-8010499a:	84 db                	test   %bl,%bl
-8010499c:	88 59 ff             	mov    %bl,-0x1(%ecx)
-8010499f:	74 04                	je     801049a5 <safestrcpy+0x35>
-801049a1:	39 f2                	cmp    %esi,%edx
-801049a3:	75 eb                	jne    80104990 <safestrcpy+0x20>
+80105270:	83 c2 01             	add    $0x1,%edx
+80105273:	0f b6 5a ff          	movzbl -0x1(%edx),%ebx
+80105277:	83 c1 01             	add    $0x1,%ecx
+8010527a:	84 db                	test   %bl,%bl
+8010527c:	88 59 ff             	mov    %bl,-0x1(%ecx)
+8010527f:	74 04                	je     80105285 <safestrcpy+0x35>
+80105281:	39 f2                	cmp    %esi,%edx
+80105283:	75 eb                	jne    80105270 <safestrcpy+0x20>
     ;
   *s = 0;
-801049a5:	c6 01 00             	movb   $0x0,(%ecx)
+80105285:	c6 01 00             	movb   $0x0,(%ecx)
   return os;
 }
-801049a8:	5b                   	pop    %ebx
-801049a9:	5e                   	pop    %esi
-801049aa:	5d                   	pop    %ebp
-801049ab:	c3                   	ret    
-801049ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105288:	5b                   	pop    %ebx
+80105289:	5e                   	pop    %esi
+8010528a:	5d                   	pop    %ebp
+8010528b:	c3                   	ret    
+8010528c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-801049b0 <strlen>:
+80105290 <strlen>:
 
 int
 strlen(const char *s)
 {
-801049b0:	55                   	push   %ebp
+80105290:	55                   	push   %ebp
   int n;
 
   for(n = 0; s[n]; n++)
-801049b1:	31 c0                	xor    %eax,%eax
+80105291:	31 c0                	xor    %eax,%eax
 {
-801049b3:	89 e5                	mov    %esp,%ebp
-801049b5:	8b 55 08             	mov    0x8(%ebp),%edx
+80105293:	89 e5                	mov    %esp,%ebp
+80105295:	8b 55 08             	mov    0x8(%ebp),%edx
   for(n = 0; s[n]; n++)
-801049b8:	80 3a 00             	cmpb   $0x0,(%edx)
-801049bb:	74 0c                	je     801049c9 <strlen+0x19>
-801049bd:	8d 76 00             	lea    0x0(%esi),%esi
-801049c0:	83 c0 01             	add    $0x1,%eax
-801049c3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
-801049c7:	75 f7                	jne    801049c0 <strlen+0x10>
+80105298:	80 3a 00             	cmpb   $0x0,(%edx)
+8010529b:	74 0c                	je     801052a9 <strlen+0x19>
+8010529d:	8d 76 00             	lea    0x0(%esi),%esi
+801052a0:	83 c0 01             	add    $0x1,%eax
+801052a3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+801052a7:	75 f7                	jne    801052a0 <strlen+0x10>
     ;
   return n;
 }
-801049c9:	5d                   	pop    %ebp
-801049ca:	c3                   	ret    
+801052a9:	5d                   	pop    %ebp
+801052aa:	c3                   	ret    
 
-801049cb <swtch>:
+801052ab <swtch>:
 # a struct context, and save its address in *old.
 # Switch stacks to new and pop previously-saved registers.
 
 .globl swtch
 swtch:
   movl 4(%esp), %eax
-801049cb:	8b 44 24 04          	mov    0x4(%esp),%eax
+801052ab:	8b 44 24 04          	mov    0x4(%esp),%eax
   movl 8(%esp), %edx
-801049cf:	8b 54 24 08          	mov    0x8(%esp),%edx
+801052af:	8b 54 24 08          	mov    0x8(%esp),%edx
 
   # Save old callee-saved registers
   pushl %ebp
-801049d3:	55                   	push   %ebp
+801052b3:	55                   	push   %ebp
   pushl %ebx
-801049d4:	53                   	push   %ebx
+801052b4:	53                   	push   %ebx
   pushl %esi
-801049d5:	56                   	push   %esi
+801052b5:	56                   	push   %esi
   pushl %edi
-801049d6:	57                   	push   %edi
+801052b6:	57                   	push   %edi
 
   # Switch stacks
   movl %esp, (%eax)
-801049d7:	89 20                	mov    %esp,(%eax)
+801052b7:	89 20                	mov    %esp,(%eax)
   movl %edx, %esp
-801049d9:	89 d4                	mov    %edx,%esp
+801052b9:	89 d4                	mov    %edx,%esp
 
   # Load new callee-saved registers
   popl %edi
-801049db:	5f                   	pop    %edi
+801052bb:	5f                   	pop    %edi
   popl %esi
-801049dc:	5e                   	pop    %esi
+801052bc:	5e                   	pop    %esi
   popl %ebx
-801049dd:	5b                   	pop    %ebx
+801052bd:	5b                   	pop    %ebx
   popl %ebp
-801049de:	5d                   	pop    %ebp
+801052be:	5d                   	pop    %ebp
   ret
-801049df:	c3                   	ret    
+801052bf:	c3                   	ret    
 
-801049e0 <fetchint>:
+801052c0 <fetchint>:
 // to a saved program counter, and then the first argument.
 
 // Fetch the int at addr from the current process.
 int
 fetchint(uint addr, int *ip)
 {
-801049e0:	55                   	push   %ebp
-801049e1:	89 e5                	mov    %esp,%ebp
-801049e3:	53                   	push   %ebx
-801049e4:	83 ec 04             	sub    $0x4,%esp
-801049e7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801052c0:	55                   	push   %ebp
+801052c1:	89 e5                	mov    %esp,%ebp
+801052c3:	53                   	push   %ebx
+801052c4:	83 ec 04             	sub    $0x4,%esp
+801052c7:	8b 5d 08             	mov    0x8(%ebp),%ebx
   struct proc *curproc = myproc();
-801049ea:	e8 f1 ed ff ff       	call   801037e0 <myproc>
+801052ca:	e8 81 eb ff ff       	call   80103e50 <myproc>
 
   if(addr >= curproc->sz || addr+4 > curproc->sz)
-801049ef:	8b 00                	mov    (%eax),%eax
-801049f1:	39 d8                	cmp    %ebx,%eax
-801049f3:	76 1b                	jbe    80104a10 <fetchint+0x30>
-801049f5:	8d 53 04             	lea    0x4(%ebx),%edx
-801049f8:	39 d0                	cmp    %edx,%eax
-801049fa:	72 14                	jb     80104a10 <fetchint+0x30>
+801052cf:	8b 00                	mov    (%eax),%eax
+801052d1:	39 d8                	cmp    %ebx,%eax
+801052d3:	76 1b                	jbe    801052f0 <fetchint+0x30>
+801052d5:	8d 53 04             	lea    0x4(%ebx),%edx
+801052d8:	39 d0                	cmp    %edx,%eax
+801052da:	72 14                	jb     801052f0 <fetchint+0x30>
     return -1;
   *ip = *(int*)(addr);
-801049fc:	8b 45 0c             	mov    0xc(%ebp),%eax
-801049ff:	8b 13                	mov    (%ebx),%edx
-80104a01:	89 10                	mov    %edx,(%eax)
+801052dc:	8b 45 0c             	mov    0xc(%ebp),%eax
+801052df:	8b 13                	mov    (%ebx),%edx
+801052e1:	89 10                	mov    %edx,(%eax)
   return 0;
-80104a03:	31 c0                	xor    %eax,%eax
+801052e3:	31 c0                	xor    %eax,%eax
 }
-80104a05:	83 c4 04             	add    $0x4,%esp
-80104a08:	5b                   	pop    %ebx
-80104a09:	5d                   	pop    %ebp
-80104a0a:	c3                   	ret    
-80104a0b:	90                   	nop
-80104a0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    return -1;
-80104a10:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104a15:	eb ee                	jmp    80104a05 <fetchint+0x25>
-80104a17:	89 f6                	mov    %esi,%esi
-80104a19:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+801052e5:	83 c4 04             	add    $0x4,%esp
+801052e8:	5b                   	pop    %ebx
+801052e9:	5d                   	pop    %ebp
+801052ea:	c3                   	ret    
+801052eb:	90                   	nop
+801052ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+801052f0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801052f5:	eb ee                	jmp    801052e5 <fetchint+0x25>
+801052f7:	89 f6                	mov    %esi,%esi
+801052f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80104a20 <fetchstr>:
+80105300 <fetchstr>:
 // Fetch the nul-terminated string at addr from the current process.
 // Doesn't actually copy the string - just sets *pp to point at it.
 // Returns length of string, not including nul.
 int
 fetchstr(uint addr, char **pp)
 {
-80104a20:	55                   	push   %ebp
-80104a21:	89 e5                	mov    %esp,%ebp
-80104a23:	53                   	push   %ebx
-80104a24:	83 ec 04             	sub    $0x4,%esp
-80104a27:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80105300:	55                   	push   %ebp
+80105301:	89 e5                	mov    %esp,%ebp
+80105303:	53                   	push   %ebx
+80105304:	83 ec 04             	sub    $0x4,%esp
+80105307:	8b 5d 08             	mov    0x8(%ebp),%ebx
   char *s, *ep;
   struct proc *curproc = myproc();
-80104a2a:	e8 b1 ed ff ff       	call   801037e0 <myproc>
+8010530a:	e8 41 eb ff ff       	call   80103e50 <myproc>
 
   if(addr >= curproc->sz)
-80104a2f:	39 18                	cmp    %ebx,(%eax)
-80104a31:	76 29                	jbe    80104a5c <fetchstr+0x3c>
+8010530f:	39 18                	cmp    %ebx,(%eax)
+80105311:	76 29                	jbe    8010533c <fetchstr+0x3c>
     return -1;
   *pp = (char*)addr;
-80104a33:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-80104a36:	89 da                	mov    %ebx,%edx
-80104a38:	89 19                	mov    %ebx,(%ecx)
+80105313:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80105316:	89 da                	mov    %ebx,%edx
+80105318:	89 19                	mov    %ebx,(%ecx)
   ep = (char*)curproc->sz;
-80104a3a:	8b 00                	mov    (%eax),%eax
+8010531a:	8b 00                	mov    (%eax),%eax
   for(s = *pp; s < ep; s++){
-80104a3c:	39 c3                	cmp    %eax,%ebx
-80104a3e:	73 1c                	jae    80104a5c <fetchstr+0x3c>
+8010531c:	39 c3                	cmp    %eax,%ebx
+8010531e:	73 1c                	jae    8010533c <fetchstr+0x3c>
     if(*s == 0)
-80104a40:	80 3b 00             	cmpb   $0x0,(%ebx)
-80104a43:	75 10                	jne    80104a55 <fetchstr+0x35>
-80104a45:	eb 39                	jmp    80104a80 <fetchstr+0x60>
-80104a47:	89 f6                	mov    %esi,%esi
-80104a49:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-80104a50:	80 3a 00             	cmpb   $0x0,(%edx)
-80104a53:	74 1b                	je     80104a70 <fetchstr+0x50>
+80105320:	80 3b 00             	cmpb   $0x0,(%ebx)
+80105323:	75 10                	jne    80105335 <fetchstr+0x35>
+80105325:	eb 39                	jmp    80105360 <fetchstr+0x60>
+80105327:	89 f6                	mov    %esi,%esi
+80105329:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80105330:	80 3a 00             	cmpb   $0x0,(%edx)
+80105333:	74 1b                	je     80105350 <fetchstr+0x50>
   for(s = *pp; s < ep; s++){
-80104a55:	83 c2 01             	add    $0x1,%edx
-80104a58:	39 d0                	cmp    %edx,%eax
-80104a5a:	77 f4                	ja     80104a50 <fetchstr+0x30>
+80105335:	83 c2 01             	add    $0x1,%edx
+80105338:	39 d0                	cmp    %edx,%eax
+8010533a:	77 f4                	ja     80105330 <fetchstr+0x30>
     return -1;
-80104a5c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010533c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
       return s - *pp;
   }
   return -1;
 }
-80104a61:	83 c4 04             	add    $0x4,%esp
-80104a64:	5b                   	pop    %ebx
-80104a65:	5d                   	pop    %ebp
-80104a66:	c3                   	ret    
-80104a67:	89 f6                	mov    %esi,%esi
-80104a69:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-80104a70:	83 c4 04             	add    $0x4,%esp
-80104a73:	89 d0                	mov    %edx,%eax
-80104a75:	29 d8                	sub    %ebx,%eax
-80104a77:	5b                   	pop    %ebx
-80104a78:	5d                   	pop    %ebp
-80104a79:	c3                   	ret    
-80104a7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105341:	83 c4 04             	add    $0x4,%esp
+80105344:	5b                   	pop    %ebx
+80105345:	5d                   	pop    %ebp
+80105346:	c3                   	ret    
+80105347:	89 f6                	mov    %esi,%esi
+80105349:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80105350:	83 c4 04             	add    $0x4,%esp
+80105353:	89 d0                	mov    %edx,%eax
+80105355:	29 d8                	sub    %ebx,%eax
+80105357:	5b                   	pop    %ebx
+80105358:	5d                   	pop    %ebp
+80105359:	c3                   	ret    
+8010535a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(*s == 0)
-80104a80:	31 c0                	xor    %eax,%eax
+80105360:	31 c0                	xor    %eax,%eax
       return s - *pp;
-80104a82:	eb dd                	jmp    80104a61 <fetchstr+0x41>
-80104a84:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80104a8a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+80105362:	eb dd                	jmp    80105341 <fetchstr+0x41>
+80105364:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010536a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
 
-80104a90 <argint>:
+80105370 <argint>:
 
 // Fetch the nth 32-bit system call argument.
 int
 argint(int n, int *ip)
 {
-80104a90:	55                   	push   %ebp
-80104a91:	89 e5                	mov    %esp,%ebp
-80104a93:	56                   	push   %esi
-80104a94:	53                   	push   %ebx
+80105370:	55                   	push   %ebp
+80105371:	89 e5                	mov    %esp,%ebp
+80105373:	56                   	push   %esi
+80105374:	53                   	push   %ebx
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104a95:	e8 46 ed ff ff       	call   801037e0 <myproc>
-80104a9a:	8b 40 18             	mov    0x18(%eax),%eax
-80104a9d:	8b 55 08             	mov    0x8(%ebp),%edx
-80104aa0:	8b 40 44             	mov    0x44(%eax),%eax
-80104aa3:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
+80105375:	e8 d6 ea ff ff       	call   80103e50 <myproc>
+8010537a:	8b 40 18             	mov    0x18(%eax),%eax
+8010537d:	8b 55 08             	mov    0x8(%ebp),%edx
+80105380:	8b 40 44             	mov    0x44(%eax),%eax
+80105383:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
   struct proc *curproc = myproc();
-80104aa6:	e8 35 ed ff ff       	call   801037e0 <myproc>
+80105386:	e8 c5 ea ff ff       	call   80103e50 <myproc>
   if(addr >= curproc->sz || addr+4 > curproc->sz)
-80104aab:	8b 00                	mov    (%eax),%eax
+8010538b:	8b 00                	mov    (%eax),%eax
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104aad:	8d 73 04             	lea    0x4(%ebx),%esi
+8010538d:	8d 73 04             	lea    0x4(%ebx),%esi
   if(addr >= curproc->sz || addr+4 > curproc->sz)
-80104ab0:	39 c6                	cmp    %eax,%esi
-80104ab2:	73 1c                	jae    80104ad0 <argint+0x40>
-80104ab4:	8d 53 08             	lea    0x8(%ebx),%edx
-80104ab7:	39 d0                	cmp    %edx,%eax
-80104ab9:	72 15                	jb     80104ad0 <argint+0x40>
+80105390:	39 c6                	cmp    %eax,%esi
+80105392:	73 1c                	jae    801053b0 <argint+0x40>
+80105394:	8d 53 08             	lea    0x8(%ebx),%edx
+80105397:	39 d0                	cmp    %edx,%eax
+80105399:	72 15                	jb     801053b0 <argint+0x40>
   *ip = *(int*)(addr);
-80104abb:	8b 45 0c             	mov    0xc(%ebp),%eax
-80104abe:	8b 53 04             	mov    0x4(%ebx),%edx
-80104ac1:	89 10                	mov    %edx,(%eax)
+8010539b:	8b 45 0c             	mov    0xc(%ebp),%eax
+8010539e:	8b 53 04             	mov    0x4(%ebx),%edx
+801053a1:	89 10                	mov    %edx,(%eax)
   return 0;
-80104ac3:	31 c0                	xor    %eax,%eax
+801053a3:	31 c0                	xor    %eax,%eax
 }
-80104ac5:	5b                   	pop    %ebx
-80104ac6:	5e                   	pop    %esi
-80104ac7:	5d                   	pop    %ebp
-80104ac8:	c3                   	ret    
-80104ac9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801053a5:	5b                   	pop    %ebx
+801053a6:	5e                   	pop    %esi
+801053a7:	5d                   	pop    %ebp
+801053a8:	c3                   	ret    
+801053a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     return -1;
-80104ad0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801053b0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104ad5:	eb ee                	jmp    80104ac5 <argint+0x35>
-80104ad7:	89 f6                	mov    %esi,%esi
-80104ad9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+801053b5:	eb ee                	jmp    801053a5 <argint+0x35>
+801053b7:	89 f6                	mov    %esi,%esi
+801053b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80104ae0 <argptr>:
+801053c0 <argptr>:
 // Fetch the nth word-sized system call argument as a pointer
 // to a block of memory of size bytes.  Check that the pointer
 // lies within the process address space.
 int
 argptr(int n, char **pp, int size)
 {
-80104ae0:	55                   	push   %ebp
-80104ae1:	89 e5                	mov    %esp,%ebp
-80104ae3:	56                   	push   %esi
-80104ae4:	53                   	push   %ebx
-80104ae5:	83 ec 10             	sub    $0x10,%esp
-80104ae8:	8b 5d 10             	mov    0x10(%ebp),%ebx
+801053c0:	55                   	push   %ebp
+801053c1:	89 e5                	mov    %esp,%ebp
+801053c3:	56                   	push   %esi
+801053c4:	53                   	push   %ebx
+801053c5:	83 ec 10             	sub    $0x10,%esp
+801053c8:	8b 5d 10             	mov    0x10(%ebp),%ebx
   int i;
   struct proc *curproc = myproc();
-80104aeb:	e8 f0 ec ff ff       	call   801037e0 <myproc>
-80104af0:	89 c6                	mov    %eax,%esi
+801053cb:	e8 80 ea ff ff       	call   80103e50 <myproc>
+801053d0:	89 c6                	mov    %eax,%esi
  
   if(argint(n, &i) < 0)
-80104af2:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80104af5:	83 ec 08             	sub    $0x8,%esp
-80104af8:	50                   	push   %eax
-80104af9:	ff 75 08             	pushl  0x8(%ebp)
-80104afc:	e8 8f ff ff ff       	call   80104a90 <argint>
+801053d2:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801053d5:	83 ec 08             	sub    $0x8,%esp
+801053d8:	50                   	push   %eax
+801053d9:	ff 75 08             	pushl  0x8(%ebp)
+801053dc:	e8 8f ff ff ff       	call   80105370 <argint>
     return -1;
   if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
-80104b01:	83 c4 10             	add    $0x10,%esp
-80104b04:	85 c0                	test   %eax,%eax
-80104b06:	78 28                	js     80104b30 <argptr+0x50>
-80104b08:	85 db                	test   %ebx,%ebx
-80104b0a:	78 24                	js     80104b30 <argptr+0x50>
-80104b0c:	8b 16                	mov    (%esi),%edx
-80104b0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104b11:	39 c2                	cmp    %eax,%edx
-80104b13:	76 1b                	jbe    80104b30 <argptr+0x50>
-80104b15:	01 c3                	add    %eax,%ebx
-80104b17:	39 da                	cmp    %ebx,%edx
-80104b19:	72 15                	jb     80104b30 <argptr+0x50>
+801053e1:	83 c4 10             	add    $0x10,%esp
+801053e4:	85 c0                	test   %eax,%eax
+801053e6:	78 28                	js     80105410 <argptr+0x50>
+801053e8:	85 db                	test   %ebx,%ebx
+801053ea:	78 24                	js     80105410 <argptr+0x50>
+801053ec:	8b 16                	mov    (%esi),%edx
+801053ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801053f1:	39 c2                	cmp    %eax,%edx
+801053f3:	76 1b                	jbe    80105410 <argptr+0x50>
+801053f5:	01 c3                	add    %eax,%ebx
+801053f7:	39 da                	cmp    %ebx,%edx
+801053f9:	72 15                	jb     80105410 <argptr+0x50>
     return -1;
   *pp = (char*)i;
-80104b1b:	8b 55 0c             	mov    0xc(%ebp),%edx
-80104b1e:	89 02                	mov    %eax,(%edx)
+801053fb:	8b 55 0c             	mov    0xc(%ebp),%edx
+801053fe:	89 02                	mov    %eax,(%edx)
   return 0;
-80104b20:	31 c0                	xor    %eax,%eax
+80105400:	31 c0                	xor    %eax,%eax
 }
-80104b22:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104b25:	5b                   	pop    %ebx
-80104b26:	5e                   	pop    %esi
-80104b27:	5d                   	pop    %ebp
-80104b28:	c3                   	ret    
-80104b29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    return -1;
-80104b30:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104b35:	eb eb                	jmp    80104b22 <argptr+0x42>
-80104b37:	89 f6                	mov    %esi,%esi
-80104b39:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80105402:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105405:	5b                   	pop    %ebx
+80105406:	5e                   	pop    %esi
+80105407:	5d                   	pop    %ebp
+80105408:	c3                   	ret    
+80105409:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+80105410:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105415:	eb eb                	jmp    80105402 <argptr+0x42>
+80105417:	89 f6                	mov    %esi,%esi
+80105419:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80104b40 <argstr>:
+80105420 <argstr>:
 // Check that the pointer is valid and the string is nul-terminated.
 // (There is no shared writable memory, so the string can't change
 // between this check and being used by the kernel.)
 int
 argstr(int n, char **pp)
 {
-80104b40:	55                   	push   %ebp
-80104b41:	89 e5                	mov    %esp,%ebp
-80104b43:	83 ec 20             	sub    $0x20,%esp
+80105420:	55                   	push   %ebp
+80105421:	89 e5                	mov    %esp,%ebp
+80105423:	83 ec 20             	sub    $0x20,%esp
   int addr;
   if(argint(n, &addr) < 0)
-80104b46:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80104b49:	50                   	push   %eax
-80104b4a:	ff 75 08             	pushl  0x8(%ebp)
-80104b4d:	e8 3e ff ff ff       	call   80104a90 <argint>
-80104b52:	83 c4 10             	add    $0x10,%esp
-80104b55:	85 c0                	test   %eax,%eax
-80104b57:	78 17                	js     80104b70 <argstr+0x30>
+80105426:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105429:	50                   	push   %eax
+8010542a:	ff 75 08             	pushl  0x8(%ebp)
+8010542d:	e8 3e ff ff ff       	call   80105370 <argint>
+80105432:	83 c4 10             	add    $0x10,%esp
+80105435:	85 c0                	test   %eax,%eax
+80105437:	78 17                	js     80105450 <argstr+0x30>
     return -1;
   return fetchstr(addr, pp);
-80104b59:	83 ec 08             	sub    $0x8,%esp
-80104b5c:	ff 75 0c             	pushl  0xc(%ebp)
-80104b5f:	ff 75 f4             	pushl  -0xc(%ebp)
-80104b62:	e8 b9 fe ff ff       	call   80104a20 <fetchstr>
-80104b67:	83 c4 10             	add    $0x10,%esp
-}
-80104b6a:	c9                   	leave  
-80104b6b:	c3                   	ret    
-80104b6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    return -1;
-80104b70:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104b75:	c9                   	leave  
-80104b76:	c3                   	ret    
-80104b77:	89 f6                	mov    %esi,%esi
-80104b79:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80105439:	83 ec 08             	sub    $0x8,%esp
+8010543c:	ff 75 0c             	pushl  0xc(%ebp)
+8010543f:	ff 75 f4             	pushl  -0xc(%ebp)
+80105442:	e8 b9 fe ff ff       	call   80105300 <fetchstr>
+80105447:	83 c4 10             	add    $0x10,%esp
+}
+8010544a:	c9                   	leave  
+8010544b:	c3                   	ret    
+8010544c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+80105450:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105455:	c9                   	leave  
+80105456:	c3                   	ret    
+80105457:	89 f6                	mov    %esi,%esi
+80105459:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80104b80 <syscall>:
-[SYS_draw]    sys_draw,
+80105460 <syscall>:
+[SYS_draw]  sys_draw,
 };
 
 void
 syscall(void)
 {
-80104b80:	55                   	push   %ebp
-80104b81:	89 e5                	mov    %esp,%ebp
-80104b83:	53                   	push   %ebx
-80104b84:	83 ec 04             	sub    $0x4,%esp
+80105460:	55                   	push   %ebp
+80105461:	89 e5                	mov    %esp,%ebp
+80105463:	53                   	push   %ebx
+80105464:	83 ec 04             	sub    $0x4,%esp
   int num;
   struct proc *curproc = myproc();
-80104b87:	e8 54 ec ff ff       	call   801037e0 <myproc>
-80104b8c:	89 c3                	mov    %eax,%ebx
+80105467:	e8 e4 e9 ff ff       	call   80103e50 <myproc>
+8010546c:	89 c3                	mov    %eax,%ebx
 
   num = curproc->tf->eax;
-80104b8e:	8b 40 18             	mov    0x18(%eax),%eax
-80104b91:	8b 40 1c             	mov    0x1c(%eax),%eax
+8010546e:	8b 40 18             	mov    0x18(%eax),%eax
+80105471:	8b 40 1c             	mov    0x1c(%eax),%eax
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
-80104b94:	8d 50 ff             	lea    -0x1(%eax),%edx
-80104b97:	83 fa 18             	cmp    $0x18,%edx
-80104b9a:	77 1c                	ja     80104bb8 <syscall+0x38>
-80104b9c:	8b 14 85 00 7a 10 80 	mov    -0x7fef8600(,%eax,4),%edx
-80104ba3:	85 d2                	test   %edx,%edx
-80104ba5:	74 11                	je     80104bb8 <syscall+0x38>
+80105474:	8d 50 ff             	lea    -0x1(%eax),%edx
+80105477:	83 fa 15             	cmp    $0x15,%edx
+8010547a:	77 1c                	ja     80105498 <syscall+0x38>
+8010547c:	8b 14 85 60 84 10 80 	mov    -0x7fef7ba0(,%eax,4),%edx
+80105483:	85 d2                	test   %edx,%edx
+80105485:	74 11                	je     80105498 <syscall+0x38>
     curproc->tf->eax = syscalls[num]();
-80104ba7:	ff d2                	call   *%edx
-80104ba9:	8b 53 18             	mov    0x18(%ebx),%edx
-80104bac:	89 42 1c             	mov    %eax,0x1c(%edx)
+80105487:	ff d2                	call   *%edx
+80105489:	8b 53 18             	mov    0x18(%ebx),%edx
+8010548c:	89 42 1c             	mov    %eax,0x1c(%edx)
   } else {
     cprintf("%d %s: unknown sys call %d\n",
             curproc->pid, curproc->name, num);
     curproc->tf->eax = -1;
   }
 }
-80104baf:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104bb2:	c9                   	leave  
-80104bb3:	c3                   	ret    
-80104bb4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010548f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105492:	c9                   	leave  
+80105493:	c3                   	ret    
+80105494:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     cprintf("%d %s: unknown sys call %d\n",
-80104bb8:	50                   	push   %eax
+80105498:	50                   	push   %eax
             curproc->pid, curproc->name, num);
-80104bb9:	8d 43 6c             	lea    0x6c(%ebx),%eax
+80105499:	8d 43 6c             	lea    0x6c(%ebx),%eax
     cprintf("%d %s: unknown sys call %d\n",
-80104bbc:	50                   	push   %eax
-80104bbd:	ff 73 10             	pushl  0x10(%ebx)
-80104bc0:	68 d1 79 10 80       	push   $0x801079d1
-80104bc5:	e8 96 ba ff ff       	call   80100660 <cprintf>
+8010549c:	50                   	push   %eax
+8010549d:	ff 73 10             	pushl  0x10(%ebx)
+801054a0:	68 25 84 10 80       	push   $0x80108425
+801054a5:	e8 b6 b1 ff ff       	call   80100660 <cprintf>
     curproc->tf->eax = -1;
-80104bca:	8b 43 18             	mov    0x18(%ebx),%eax
-80104bcd:	83 c4 10             	add    $0x10,%esp
-80104bd0:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
-}
-80104bd7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104bda:	c9                   	leave  
-80104bdb:	c3                   	ret    
-80104bdc:	66 90                	xchg   %ax,%ax
-80104bde:	66 90                	xchg   %ax,%ax
+801054aa:	8b 43 18             	mov    0x18(%ebx),%eax
+801054ad:	83 c4 10             	add    $0x10,%esp
+801054b0:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
+}
+801054b7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801054ba:	c9                   	leave  
+801054bb:	c3                   	ret    
+801054bc:	66 90                	xchg   %ax,%ax
+801054be:	66 90                	xchg   %ax,%ax
 
-80104be0 <create>:
+801054c0 <create>:
   return -1;
 }
 
 static struct inode*
 create(char *path, short type, short major, short minor)
 {
-80104be0:	55                   	push   %ebp
-80104be1:	89 e5                	mov    %esp,%ebp
-80104be3:	57                   	push   %edi
-80104be4:	56                   	push   %esi
-80104be5:	53                   	push   %ebx
+801054c0:	55                   	push   %ebp
+801054c1:	89 e5                	mov    %esp,%ebp
+801054c3:	57                   	push   %edi
+801054c4:	56                   	push   %esi
+801054c5:	53                   	push   %ebx
   struct inode *ip, *dp;
   char name[DIRSIZ];
 
   if((dp = nameiparent(path, name)) == 0)
-80104be6:	8d 75 da             	lea    -0x26(%ebp),%esi
+801054c6:	8d 75 da             	lea    -0x26(%ebp),%esi
 {
-80104be9:	83 ec 34             	sub    $0x34,%esp
-80104bec:	89 4d d0             	mov    %ecx,-0x30(%ebp)
-80104bef:	8b 4d 08             	mov    0x8(%ebp),%ecx
+801054c9:	83 ec 34             	sub    $0x34,%esp
+801054cc:	89 4d d0             	mov    %ecx,-0x30(%ebp)
+801054cf:	8b 4d 08             	mov    0x8(%ebp),%ecx
   if((dp = nameiparent(path, name)) == 0)
-80104bf2:	56                   	push   %esi
-80104bf3:	50                   	push   %eax
+801054d2:	56                   	push   %esi
+801054d3:	50                   	push   %eax
 {
-80104bf4:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-80104bf7:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+801054d4:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+801054d7:	89 4d cc             	mov    %ecx,-0x34(%ebp)
   if((dp = nameiparent(path, name)) == 0)
-80104bfa:	e8 01 d3 ff ff       	call   80101f00 <nameiparent>
-80104bff:	83 c4 10             	add    $0x10,%esp
-80104c02:	85 c0                	test   %eax,%eax
-80104c04:	0f 84 46 01 00 00    	je     80104d50 <create+0x170>
+801054da:	e8 21 ca ff ff       	call   80101f00 <nameiparent>
+801054df:	83 c4 10             	add    $0x10,%esp
+801054e2:	85 c0                	test   %eax,%eax
+801054e4:	0f 84 46 01 00 00    	je     80105630 <create+0x170>
     return 0;
   ilock(dp);
-80104c0a:	83 ec 0c             	sub    $0xc,%esp
-80104c0d:	89 c3                	mov    %eax,%ebx
-80104c0f:	50                   	push   %eax
-80104c10:	e8 6b ca ff ff       	call   80101680 <ilock>
+801054ea:	83 ec 0c             	sub    $0xc,%esp
+801054ed:	89 c3                	mov    %eax,%ebx
+801054ef:	50                   	push   %eax
+801054f0:	e8 8b c1 ff ff       	call   80101680 <ilock>
 
   if((ip = dirlookup(dp, name, 0)) != 0){
-80104c15:	83 c4 0c             	add    $0xc,%esp
-80104c18:	6a 00                	push   $0x0
-80104c1a:	56                   	push   %esi
-80104c1b:	53                   	push   %ebx
-80104c1c:	e8 8f cf ff ff       	call   80101bb0 <dirlookup>
-80104c21:	83 c4 10             	add    $0x10,%esp
-80104c24:	85 c0                	test   %eax,%eax
-80104c26:	89 c7                	mov    %eax,%edi
-80104c28:	74 36                	je     80104c60 <create+0x80>
+801054f5:	83 c4 0c             	add    $0xc,%esp
+801054f8:	6a 00                	push   $0x0
+801054fa:	56                   	push   %esi
+801054fb:	53                   	push   %ebx
+801054fc:	e8 af c6 ff ff       	call   80101bb0 <dirlookup>
+80105501:	83 c4 10             	add    $0x10,%esp
+80105504:	85 c0                	test   %eax,%eax
+80105506:	89 c7                	mov    %eax,%edi
+80105508:	74 36                	je     80105540 <create+0x80>
     iunlockput(dp);
-80104c2a:	83 ec 0c             	sub    $0xc,%esp
-80104c2d:	53                   	push   %ebx
-80104c2e:	e8 dd cc ff ff       	call   80101910 <iunlockput>
+8010550a:	83 ec 0c             	sub    $0xc,%esp
+8010550d:	53                   	push   %ebx
+8010550e:	e8 fd c3 ff ff       	call   80101910 <iunlockput>
     ilock(ip);
-80104c33:	89 3c 24             	mov    %edi,(%esp)
-80104c36:	e8 45 ca ff ff       	call   80101680 <ilock>
+80105513:	89 3c 24             	mov    %edi,(%esp)
+80105516:	e8 65 c1 ff ff       	call   80101680 <ilock>
     if(type == T_FILE && ip->type == T_FILE)
-80104c3b:	83 c4 10             	add    $0x10,%esp
-80104c3e:	66 83 7d d4 02       	cmpw   $0x2,-0x2c(%ebp)
-80104c43:	0f 85 97 00 00 00    	jne    80104ce0 <create+0x100>
-80104c49:	66 83 7f 50 02       	cmpw   $0x2,0x50(%edi)
-80104c4e:	0f 85 8c 00 00 00    	jne    80104ce0 <create+0x100>
+8010551b:	83 c4 10             	add    $0x10,%esp
+8010551e:	66 83 7d d4 02       	cmpw   $0x2,-0x2c(%ebp)
+80105523:	0f 85 97 00 00 00    	jne    801055c0 <create+0x100>
+80105529:	66 83 7f 50 02       	cmpw   $0x2,0x50(%edi)
+8010552e:	0f 85 8c 00 00 00    	jne    801055c0 <create+0x100>
     panic("create: dirlink");
 
   iunlockput(dp);
 
   return ip;
 }
-80104c54:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104c57:	89 f8                	mov    %edi,%eax
-80104c59:	5b                   	pop    %ebx
-80104c5a:	5e                   	pop    %esi
-80104c5b:	5f                   	pop    %edi
-80104c5c:	5d                   	pop    %ebp
-80104c5d:	c3                   	ret    
-80104c5e:	66 90                	xchg   %ax,%ax
+80105534:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105537:	89 f8                	mov    %edi,%eax
+80105539:	5b                   	pop    %ebx
+8010553a:	5e                   	pop    %esi
+8010553b:	5f                   	pop    %edi
+8010553c:	5d                   	pop    %ebp
+8010553d:	c3                   	ret    
+8010553e:	66 90                	xchg   %ax,%ax
   if((ip = ialloc(dp->dev, type)) == 0)
-80104c60:	0f bf 45 d4          	movswl -0x2c(%ebp),%eax
-80104c64:	83 ec 08             	sub    $0x8,%esp
-80104c67:	50                   	push   %eax
-80104c68:	ff 33                	pushl  (%ebx)
-80104c6a:	e8 a1 c8 ff ff       	call   80101510 <ialloc>
-80104c6f:	83 c4 10             	add    $0x10,%esp
-80104c72:	85 c0                	test   %eax,%eax
-80104c74:	89 c7                	mov    %eax,%edi
-80104c76:	0f 84 e8 00 00 00    	je     80104d64 <create+0x184>
+80105540:	0f bf 45 d4          	movswl -0x2c(%ebp),%eax
+80105544:	83 ec 08             	sub    $0x8,%esp
+80105547:	50                   	push   %eax
+80105548:	ff 33                	pushl  (%ebx)
+8010554a:	e8 c1 bf ff ff       	call   80101510 <ialloc>
+8010554f:	83 c4 10             	add    $0x10,%esp
+80105552:	85 c0                	test   %eax,%eax
+80105554:	89 c7                	mov    %eax,%edi
+80105556:	0f 84 e8 00 00 00    	je     80105644 <create+0x184>
   ilock(ip);
-80104c7c:	83 ec 0c             	sub    $0xc,%esp
-80104c7f:	50                   	push   %eax
-80104c80:	e8 fb c9 ff ff       	call   80101680 <ilock>
+8010555c:	83 ec 0c             	sub    $0xc,%esp
+8010555f:	50                   	push   %eax
+80105560:	e8 1b c1 ff ff       	call   80101680 <ilock>
   ip->major = major;
-80104c85:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
-80104c89:	66 89 47 52          	mov    %ax,0x52(%edi)
+80105565:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
+80105569:	66 89 47 52          	mov    %ax,0x52(%edi)
   ip->minor = minor;
-80104c8d:	0f b7 45 cc          	movzwl -0x34(%ebp),%eax
-80104c91:	66 89 47 54          	mov    %ax,0x54(%edi)
+8010556d:	0f b7 45 cc          	movzwl -0x34(%ebp),%eax
+80105571:	66 89 47 54          	mov    %ax,0x54(%edi)
   ip->nlink = 1;
-80104c95:	b8 01 00 00 00       	mov    $0x1,%eax
-80104c9a:	66 89 47 56          	mov    %ax,0x56(%edi)
+80105575:	b8 01 00 00 00       	mov    $0x1,%eax
+8010557a:	66 89 47 56          	mov    %ax,0x56(%edi)
   iupdate(ip);
-80104c9e:	89 3c 24             	mov    %edi,(%esp)
-80104ca1:	e8 2a c9 ff ff       	call   801015d0 <iupdate>
+8010557e:	89 3c 24             	mov    %edi,(%esp)
+80105581:	e8 4a c0 ff ff       	call   801015d0 <iupdate>
   if(type == T_DIR){  // Create . and .. entries.
-80104ca6:	83 c4 10             	add    $0x10,%esp
-80104ca9:	66 83 7d d4 01       	cmpw   $0x1,-0x2c(%ebp)
-80104cae:	74 50                	je     80104d00 <create+0x120>
+80105586:	83 c4 10             	add    $0x10,%esp
+80105589:	66 83 7d d4 01       	cmpw   $0x1,-0x2c(%ebp)
+8010558e:	74 50                	je     801055e0 <create+0x120>
   if(dirlink(dp, name, ip->inum) < 0)
-80104cb0:	83 ec 04             	sub    $0x4,%esp
-80104cb3:	ff 77 04             	pushl  0x4(%edi)
-80104cb6:	56                   	push   %esi
-80104cb7:	53                   	push   %ebx
-80104cb8:	e8 63 d1 ff ff       	call   80101e20 <dirlink>
-80104cbd:	83 c4 10             	add    $0x10,%esp
-80104cc0:	85 c0                	test   %eax,%eax
-80104cc2:	0f 88 8f 00 00 00    	js     80104d57 <create+0x177>
+80105590:	83 ec 04             	sub    $0x4,%esp
+80105593:	ff 77 04             	pushl  0x4(%edi)
+80105596:	56                   	push   %esi
+80105597:	53                   	push   %ebx
+80105598:	e8 83 c8 ff ff       	call   80101e20 <dirlink>
+8010559d:	83 c4 10             	add    $0x10,%esp
+801055a0:	85 c0                	test   %eax,%eax
+801055a2:	0f 88 8f 00 00 00    	js     80105637 <create+0x177>
   iunlockput(dp);
-80104cc8:	83 ec 0c             	sub    $0xc,%esp
-80104ccb:	53                   	push   %ebx
-80104ccc:	e8 3f cc ff ff       	call   80101910 <iunlockput>
+801055a8:	83 ec 0c             	sub    $0xc,%esp
+801055ab:	53                   	push   %ebx
+801055ac:	e8 5f c3 ff ff       	call   80101910 <iunlockput>
   return ip;
-80104cd1:	83 c4 10             	add    $0x10,%esp
+801055b1:	83 c4 10             	add    $0x10,%esp
 }
-80104cd4:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104cd7:	89 f8                	mov    %edi,%eax
-80104cd9:	5b                   	pop    %ebx
-80104cda:	5e                   	pop    %esi
-80104cdb:	5f                   	pop    %edi
-80104cdc:	5d                   	pop    %ebp
-80104cdd:	c3                   	ret    
-80104cde:	66 90                	xchg   %ax,%ax
+801055b4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801055b7:	89 f8                	mov    %edi,%eax
+801055b9:	5b                   	pop    %ebx
+801055ba:	5e                   	pop    %esi
+801055bb:	5f                   	pop    %edi
+801055bc:	5d                   	pop    %ebp
+801055bd:	c3                   	ret    
+801055be:	66 90                	xchg   %ax,%ax
     iunlockput(ip);
-80104ce0:	83 ec 0c             	sub    $0xc,%esp
-80104ce3:	57                   	push   %edi
+801055c0:	83 ec 0c             	sub    $0xc,%esp
+801055c3:	57                   	push   %edi
     return 0;
-80104ce4:	31 ff                	xor    %edi,%edi
+801055c4:	31 ff                	xor    %edi,%edi
     iunlockput(ip);
-80104ce6:	e8 25 cc ff ff       	call   80101910 <iunlockput>
+801055c6:	e8 45 c3 ff ff       	call   80101910 <iunlockput>
     return 0;
-80104ceb:	83 c4 10             	add    $0x10,%esp
+801055cb:	83 c4 10             	add    $0x10,%esp
 }
-80104cee:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104cf1:	89 f8                	mov    %edi,%eax
-80104cf3:	5b                   	pop    %ebx
-80104cf4:	5e                   	pop    %esi
-80104cf5:	5f                   	pop    %edi
-80104cf6:	5d                   	pop    %ebp
-80104cf7:	c3                   	ret    
-80104cf8:	90                   	nop
-80104cf9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801055ce:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801055d1:	89 f8                	mov    %edi,%eax
+801055d3:	5b                   	pop    %ebx
+801055d4:	5e                   	pop    %esi
+801055d5:	5f                   	pop    %edi
+801055d6:	5d                   	pop    %ebp
+801055d7:	c3                   	ret    
+801055d8:	90                   	nop
+801055d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     dp->nlink++;  // for ".."
-80104d00:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
+801055e0:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
     iupdate(dp);
-80104d05:	83 ec 0c             	sub    $0xc,%esp
-80104d08:	53                   	push   %ebx
-80104d09:	e8 c2 c8 ff ff       	call   801015d0 <iupdate>
+801055e5:	83 ec 0c             	sub    $0xc,%esp
+801055e8:	53                   	push   %ebx
+801055e9:	e8 e2 bf ff ff       	call   801015d0 <iupdate>
     if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
-80104d0e:	83 c4 0c             	add    $0xc,%esp
-80104d11:	ff 77 04             	pushl  0x4(%edi)
-80104d14:	68 84 7a 10 80       	push   $0x80107a84
-80104d19:	57                   	push   %edi
-80104d1a:	e8 01 d1 ff ff       	call   80101e20 <dirlink>
-80104d1f:	83 c4 10             	add    $0x10,%esp
-80104d22:	85 c0                	test   %eax,%eax
-80104d24:	78 1c                	js     80104d42 <create+0x162>
-80104d26:	83 ec 04             	sub    $0x4,%esp
-80104d29:	ff 73 04             	pushl  0x4(%ebx)
-80104d2c:	68 83 7a 10 80       	push   $0x80107a83
-80104d31:	57                   	push   %edi
-80104d32:	e8 e9 d0 ff ff       	call   80101e20 <dirlink>
-80104d37:	83 c4 10             	add    $0x10,%esp
-80104d3a:	85 c0                	test   %eax,%eax
-80104d3c:	0f 89 6e ff ff ff    	jns    80104cb0 <create+0xd0>
+801055ee:	83 c4 0c             	add    $0xc,%esp
+801055f1:	ff 77 04             	pushl  0x4(%edi)
+801055f4:	68 c9 84 10 80       	push   $0x801084c9
+801055f9:	57                   	push   %edi
+801055fa:	e8 21 c8 ff ff       	call   80101e20 <dirlink>
+801055ff:	83 c4 10             	add    $0x10,%esp
+80105602:	85 c0                	test   %eax,%eax
+80105604:	78 1c                	js     80105622 <create+0x162>
+80105606:	83 ec 04             	sub    $0x4,%esp
+80105609:	ff 73 04             	pushl  0x4(%ebx)
+8010560c:	68 c8 84 10 80       	push   $0x801084c8
+80105611:	57                   	push   %edi
+80105612:	e8 09 c8 ff ff       	call   80101e20 <dirlink>
+80105617:	83 c4 10             	add    $0x10,%esp
+8010561a:	85 c0                	test   %eax,%eax
+8010561c:	0f 89 6e ff ff ff    	jns    80105590 <create+0xd0>
       panic("create dots");
-80104d42:	83 ec 0c             	sub    $0xc,%esp
-80104d45:	68 77 7a 10 80       	push   $0x80107a77
-80104d4a:	e8 41 b6 ff ff       	call   80100390 <panic>
-80104d4f:	90                   	nop
+80105622:	83 ec 0c             	sub    $0xc,%esp
+80105625:	68 bc 84 10 80       	push   $0x801084bc
+8010562a:	e8 61 ad ff ff       	call   80100390 <panic>
+8010562f:	90                   	nop
     return 0;
-80104d50:	31 ff                	xor    %edi,%edi
-80104d52:	e9 fd fe ff ff       	jmp    80104c54 <create+0x74>
+80105630:	31 ff                	xor    %edi,%edi
+80105632:	e9 fd fe ff ff       	jmp    80105534 <create+0x74>
     panic("create: dirlink");
-80104d57:	83 ec 0c             	sub    $0xc,%esp
-80104d5a:	68 86 7a 10 80       	push   $0x80107a86
-80104d5f:	e8 2c b6 ff ff       	call   80100390 <panic>
+80105637:	83 ec 0c             	sub    $0xc,%esp
+8010563a:	68 fb 81 10 80       	push   $0x801081fb
+8010563f:	e8 4c ad ff ff       	call   80100390 <panic>
     panic("create: ialloc");
-80104d64:	83 ec 0c             	sub    $0xc,%esp
-80104d67:	68 68 7a 10 80       	push   $0x80107a68
-80104d6c:	e8 1f b6 ff ff       	call   80100390 <panic>
-80104d71:	eb 0d                	jmp    80104d80 <argfd.constprop.0>
-80104d73:	90                   	nop
-80104d74:	90                   	nop
-80104d75:	90                   	nop
-80104d76:	90                   	nop
-80104d77:	90                   	nop
-80104d78:	90                   	nop
-80104d79:	90                   	nop
-80104d7a:	90                   	nop
-80104d7b:	90                   	nop
-80104d7c:	90                   	nop
-80104d7d:	90                   	nop
-80104d7e:	90                   	nop
-80104d7f:	90                   	nop
+80105644:	83 ec 0c             	sub    $0xc,%esp
+80105647:	68 ec 81 10 80       	push   $0x801081ec
+8010564c:	e8 3f ad ff ff       	call   80100390 <panic>
+80105651:	eb 0d                	jmp    80105660 <argfd.constprop.0>
+80105653:	90                   	nop
+80105654:	90                   	nop
+80105655:	90                   	nop
+80105656:	90                   	nop
+80105657:	90                   	nop
+80105658:	90                   	nop
+80105659:	90                   	nop
+8010565a:	90                   	nop
+8010565b:	90                   	nop
+8010565c:	90                   	nop
+8010565d:	90                   	nop
+8010565e:	90                   	nop
+8010565f:	90                   	nop
 
-80104d80 <argfd.constprop.0>:
+80105660 <argfd.constprop.0>:
 argfd(int n, int *pfd, struct file **pf)
-80104d80:	55                   	push   %ebp
-80104d81:	89 e5                	mov    %esp,%ebp
-80104d83:	56                   	push   %esi
-80104d84:	53                   	push   %ebx
-80104d85:	89 c3                	mov    %eax,%ebx
+80105660:	55                   	push   %ebp
+80105661:	89 e5                	mov    %esp,%ebp
+80105663:	56                   	push   %esi
+80105664:	53                   	push   %ebx
+80105665:	89 c3                	mov    %eax,%ebx
   if(argint(n, &fd) < 0)
-80104d87:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105667:	8d 45 f4             	lea    -0xc(%ebp),%eax
 argfd(int n, int *pfd, struct file **pf)
-80104d8a:	89 d6                	mov    %edx,%esi
-80104d8c:	83 ec 18             	sub    $0x18,%esp
+8010566a:	89 d6                	mov    %edx,%esi
+8010566c:	83 ec 18             	sub    $0x18,%esp
   if(argint(n, &fd) < 0)
-80104d8f:	50                   	push   %eax
-80104d90:	6a 00                	push   $0x0
-80104d92:	e8 f9 fc ff ff       	call   80104a90 <argint>
-80104d97:	83 c4 10             	add    $0x10,%esp
-80104d9a:	85 c0                	test   %eax,%eax
-80104d9c:	78 2a                	js     80104dc8 <argfd.constprop.0+0x48>
+8010566f:	50                   	push   %eax
+80105670:	6a 00                	push   $0x0
+80105672:	e8 f9 fc ff ff       	call   80105370 <argint>
+80105677:	83 c4 10             	add    $0x10,%esp
+8010567a:	85 c0                	test   %eax,%eax
+8010567c:	78 2a                	js     801056a8 <argfd.constprop.0+0x48>
   if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
-80104d9e:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
-80104da2:	77 24                	ja     80104dc8 <argfd.constprop.0+0x48>
-80104da4:	e8 37 ea ff ff       	call   801037e0 <myproc>
-80104da9:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80104dac:	8b 44 90 28          	mov    0x28(%eax,%edx,4),%eax
-80104db0:	85 c0                	test   %eax,%eax
-80104db2:	74 14                	je     80104dc8 <argfd.constprop.0+0x48>
+8010567e:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+80105682:	77 24                	ja     801056a8 <argfd.constprop.0+0x48>
+80105684:	e8 c7 e7 ff ff       	call   80103e50 <myproc>
+80105689:	8b 55 f4             	mov    -0xc(%ebp),%edx
+8010568c:	8b 44 90 28          	mov    0x28(%eax,%edx,4),%eax
+80105690:	85 c0                	test   %eax,%eax
+80105692:	74 14                	je     801056a8 <argfd.constprop.0+0x48>
   if(pfd)
-80104db4:	85 db                	test   %ebx,%ebx
-80104db6:	74 02                	je     80104dba <argfd.constprop.0+0x3a>
+80105694:	85 db                	test   %ebx,%ebx
+80105696:	74 02                	je     8010569a <argfd.constprop.0+0x3a>
     *pfd = fd;
-80104db8:	89 13                	mov    %edx,(%ebx)
+80105698:	89 13                	mov    %edx,(%ebx)
     *pf = f;
-80104dba:	89 06                	mov    %eax,(%esi)
+8010569a:	89 06                	mov    %eax,(%esi)
   return 0;
-80104dbc:	31 c0                	xor    %eax,%eax
+8010569c:	31 c0                	xor    %eax,%eax
 }
-80104dbe:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104dc1:	5b                   	pop    %ebx
-80104dc2:	5e                   	pop    %esi
-80104dc3:	5d                   	pop    %ebp
-80104dc4:	c3                   	ret    
-80104dc5:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
-80104dc8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104dcd:	eb ef                	jmp    80104dbe <argfd.constprop.0+0x3e>
-80104dcf:	90                   	nop
+8010569e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801056a1:	5b                   	pop    %ebx
+801056a2:	5e                   	pop    %esi
+801056a3:	5d                   	pop    %ebp
+801056a4:	c3                   	ret    
+801056a5:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+801056a8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801056ad:	eb ef                	jmp    8010569e <argfd.constprop.0+0x3e>
+801056af:	90                   	nop
 
-80104dd0 <sys_dup>:
+801056b0 <sys_dup>:
 {
-80104dd0:	55                   	push   %ebp
+801056b0:	55                   	push   %ebp
   if(argfd(0, 0, &f) < 0)
-80104dd1:	31 c0                	xor    %eax,%eax
+801056b1:	31 c0                	xor    %eax,%eax
 {
-80104dd3:	89 e5                	mov    %esp,%ebp
-80104dd5:	56                   	push   %esi
-80104dd6:	53                   	push   %ebx
+801056b3:	89 e5                	mov    %esp,%ebp
+801056b5:	56                   	push   %esi
+801056b6:	53                   	push   %ebx
   if(argfd(0, 0, &f) < 0)
-80104dd7:	8d 55 f4             	lea    -0xc(%ebp),%edx
+801056b7:	8d 55 f4             	lea    -0xc(%ebp),%edx
 {
-80104dda:	83 ec 10             	sub    $0x10,%esp
+801056ba:	83 ec 10             	sub    $0x10,%esp
   if(argfd(0, 0, &f) < 0)
-80104ddd:	e8 9e ff ff ff       	call   80104d80 <argfd.constprop.0>
-80104de2:	85 c0                	test   %eax,%eax
-80104de4:	78 42                	js     80104e28 <sys_dup+0x58>
+801056bd:	e8 9e ff ff ff       	call   80105660 <argfd.constprop.0>
+801056c2:	85 c0                	test   %eax,%eax
+801056c4:	78 42                	js     80105708 <sys_dup+0x58>
   if((fd=fdalloc(f)) < 0)
-80104de6:	8b 75 f4             	mov    -0xc(%ebp),%esi
+801056c6:	8b 75 f4             	mov    -0xc(%ebp),%esi
   for(fd = 0; fd < NOFILE; fd++){
-80104de9:	31 db                	xor    %ebx,%ebx
+801056c9:	31 db                	xor    %ebx,%ebx
   struct proc *curproc = myproc();
-80104deb:	e8 f0 e9 ff ff       	call   801037e0 <myproc>
-80104df0:	eb 0e                	jmp    80104e00 <sys_dup+0x30>
-80104df2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801056cb:	e8 80 e7 ff ff       	call   80103e50 <myproc>
+801056d0:	eb 0e                	jmp    801056e0 <sys_dup+0x30>
+801056d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(fd = 0; fd < NOFILE; fd++){
-80104df8:	83 c3 01             	add    $0x1,%ebx
-80104dfb:	83 fb 10             	cmp    $0x10,%ebx
-80104dfe:	74 28                	je     80104e28 <sys_dup+0x58>
+801056d8:	83 c3 01             	add    $0x1,%ebx
+801056db:	83 fb 10             	cmp    $0x10,%ebx
+801056de:	74 28                	je     80105708 <sys_dup+0x58>
     if(curproc->ofile[fd] == 0){
-80104e00:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
-80104e04:	85 d2                	test   %edx,%edx
-80104e06:	75 f0                	jne    80104df8 <sys_dup+0x28>
+801056e0:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
+801056e4:	85 d2                	test   %edx,%edx
+801056e6:	75 f0                	jne    801056d8 <sys_dup+0x28>
       curproc->ofile[fd] = f;
-80104e08:	89 74 98 28          	mov    %esi,0x28(%eax,%ebx,4)
+801056e8:	89 74 98 28          	mov    %esi,0x28(%eax,%ebx,4)
   filedup(f);
-80104e0c:	83 ec 0c             	sub    $0xc,%esp
-80104e0f:	ff 75 f4             	pushl  -0xc(%ebp)
-80104e12:	e8 d9 bf ff ff       	call   80100df0 <filedup>
+801056ec:	83 ec 0c             	sub    $0xc,%esp
+801056ef:	ff 75 f4             	pushl  -0xc(%ebp)
+801056f2:	e8 f9 b6 ff ff       	call   80100df0 <filedup>
   return fd;
-80104e17:	83 c4 10             	add    $0x10,%esp
+801056f7:	83 c4 10             	add    $0x10,%esp
+}
+801056fa:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801056fd:	89 d8                	mov    %ebx,%eax
+801056ff:	5b                   	pop    %ebx
+80105700:	5e                   	pop    %esi
+80105701:	5d                   	pop    %ebp
+80105702:	c3                   	ret    
+80105703:	90                   	nop
+80105704:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105708:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    return -1;
+8010570b:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
 }
-80104e1a:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104e1d:	89 d8                	mov    %ebx,%eax
-80104e1f:	5b                   	pop    %ebx
-80104e20:	5e                   	pop    %esi
-80104e21:	5d                   	pop    %ebp
-80104e22:	c3                   	ret    
-80104e23:	90                   	nop
-80104e24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104e28:	8d 65 f8             	lea    -0x8(%ebp),%esp
-    return -1;
-80104e2b:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-}
-80104e30:	89 d8                	mov    %ebx,%eax
-80104e32:	5b                   	pop    %ebx
-80104e33:	5e                   	pop    %esi
-80104e34:	5d                   	pop    %ebp
-80104e35:	c3                   	ret    
-80104e36:	8d 76 00             	lea    0x0(%esi),%esi
-80104e39:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80105710:	89 d8                	mov    %ebx,%eax
+80105712:	5b                   	pop    %ebx
+80105713:	5e                   	pop    %esi
+80105714:	5d                   	pop    %ebp
+80105715:	c3                   	ret    
+80105716:	8d 76 00             	lea    0x0(%esi),%esi
+80105719:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80104e40 <sys_read>:
+80105720 <sys_read>:
 {
-80104e40:	55                   	push   %ebp
+80105720:	55                   	push   %ebp
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80104e41:	31 c0                	xor    %eax,%eax
+80105721:	31 c0                	xor    %eax,%eax
 {
-80104e43:	89 e5                	mov    %esp,%ebp
-80104e45:	83 ec 18             	sub    $0x18,%esp
+80105723:	89 e5                	mov    %esp,%ebp
+80105725:	83 ec 18             	sub    $0x18,%esp
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80104e48:	8d 55 ec             	lea    -0x14(%ebp),%edx
-80104e4b:	e8 30 ff ff ff       	call   80104d80 <argfd.constprop.0>
-80104e50:	85 c0                	test   %eax,%eax
-80104e52:	78 4c                	js     80104ea0 <sys_read+0x60>
-80104e54:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80104e57:	83 ec 08             	sub    $0x8,%esp
-80104e5a:	50                   	push   %eax
-80104e5b:	6a 02                	push   $0x2
-80104e5d:	e8 2e fc ff ff       	call   80104a90 <argint>
-80104e62:	83 c4 10             	add    $0x10,%esp
-80104e65:	85 c0                	test   %eax,%eax
-80104e67:	78 37                	js     80104ea0 <sys_read+0x60>
-80104e69:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80104e6c:	83 ec 04             	sub    $0x4,%esp
-80104e6f:	ff 75 f0             	pushl  -0x10(%ebp)
-80104e72:	50                   	push   %eax
-80104e73:	6a 01                	push   $0x1
-80104e75:	e8 66 fc ff ff       	call   80104ae0 <argptr>
-80104e7a:	83 c4 10             	add    $0x10,%esp
-80104e7d:	85 c0                	test   %eax,%eax
-80104e7f:	78 1f                	js     80104ea0 <sys_read+0x60>
+80105728:	8d 55 ec             	lea    -0x14(%ebp),%edx
+8010572b:	e8 30 ff ff ff       	call   80105660 <argfd.constprop.0>
+80105730:	85 c0                	test   %eax,%eax
+80105732:	78 4c                	js     80105780 <sys_read+0x60>
+80105734:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80105737:	83 ec 08             	sub    $0x8,%esp
+8010573a:	50                   	push   %eax
+8010573b:	6a 02                	push   $0x2
+8010573d:	e8 2e fc ff ff       	call   80105370 <argint>
+80105742:	83 c4 10             	add    $0x10,%esp
+80105745:	85 c0                	test   %eax,%eax
+80105747:	78 37                	js     80105780 <sys_read+0x60>
+80105749:	8d 45 f4             	lea    -0xc(%ebp),%eax
+8010574c:	83 ec 04             	sub    $0x4,%esp
+8010574f:	ff 75 f0             	pushl  -0x10(%ebp)
+80105752:	50                   	push   %eax
+80105753:	6a 01                	push   $0x1
+80105755:	e8 66 fc ff ff       	call   801053c0 <argptr>
+8010575a:	83 c4 10             	add    $0x10,%esp
+8010575d:	85 c0                	test   %eax,%eax
+8010575f:	78 1f                	js     80105780 <sys_read+0x60>
   return fileread(f, p, n);
-80104e81:	83 ec 04             	sub    $0x4,%esp
-80104e84:	ff 75 f0             	pushl  -0x10(%ebp)
-80104e87:	ff 75 f4             	pushl  -0xc(%ebp)
-80104e8a:	ff 75 ec             	pushl  -0x14(%ebp)
-80104e8d:	e8 ce c0 ff ff       	call   80100f60 <fileread>
-80104e92:	83 c4 10             	add    $0x10,%esp
-}
-80104e95:	c9                   	leave  
-80104e96:	c3                   	ret    
-80104e97:	89 f6                	mov    %esi,%esi
-80104e99:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-    return -1;
-80104ea0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104ea5:	c9                   	leave  
-80104ea6:	c3                   	ret    
-80104ea7:	89 f6                	mov    %esi,%esi
-80104ea9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80105761:	83 ec 04             	sub    $0x4,%esp
+80105764:	ff 75 f0             	pushl  -0x10(%ebp)
+80105767:	ff 75 f4             	pushl  -0xc(%ebp)
+8010576a:	ff 75 ec             	pushl  -0x14(%ebp)
+8010576d:	e8 ee b7 ff ff       	call   80100f60 <fileread>
+80105772:	83 c4 10             	add    $0x10,%esp
+}
+80105775:	c9                   	leave  
+80105776:	c3                   	ret    
+80105777:	89 f6                	mov    %esi,%esi
+80105779:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    return -1;
+80105780:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105785:	c9                   	leave  
+80105786:	c3                   	ret    
+80105787:	89 f6                	mov    %esi,%esi
+80105789:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80104eb0 <sys_write>:
+80105790 <sys_write>:
 {
-80104eb0:	55                   	push   %ebp
+80105790:	55                   	push   %ebp
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80104eb1:	31 c0                	xor    %eax,%eax
+80105791:	31 c0                	xor    %eax,%eax
 {
-80104eb3:	89 e5                	mov    %esp,%ebp
-80104eb5:	83 ec 18             	sub    $0x18,%esp
+80105793:	89 e5                	mov    %esp,%ebp
+80105795:	83 ec 18             	sub    $0x18,%esp
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80104eb8:	8d 55 ec             	lea    -0x14(%ebp),%edx
-80104ebb:	e8 c0 fe ff ff       	call   80104d80 <argfd.constprop.0>
-80104ec0:	85 c0                	test   %eax,%eax
-80104ec2:	78 4c                	js     80104f10 <sys_write+0x60>
-80104ec4:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80104ec7:	83 ec 08             	sub    $0x8,%esp
-80104eca:	50                   	push   %eax
-80104ecb:	6a 02                	push   $0x2
-80104ecd:	e8 be fb ff ff       	call   80104a90 <argint>
-80104ed2:	83 c4 10             	add    $0x10,%esp
-80104ed5:	85 c0                	test   %eax,%eax
-80104ed7:	78 37                	js     80104f10 <sys_write+0x60>
-80104ed9:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80104edc:	83 ec 04             	sub    $0x4,%esp
-80104edf:	ff 75 f0             	pushl  -0x10(%ebp)
-80104ee2:	50                   	push   %eax
-80104ee3:	6a 01                	push   $0x1
-80104ee5:	e8 f6 fb ff ff       	call   80104ae0 <argptr>
-80104eea:	83 c4 10             	add    $0x10,%esp
-80104eed:	85 c0                	test   %eax,%eax
-80104eef:	78 1f                	js     80104f10 <sys_write+0x60>
+80105798:	8d 55 ec             	lea    -0x14(%ebp),%edx
+8010579b:	e8 c0 fe ff ff       	call   80105660 <argfd.constprop.0>
+801057a0:	85 c0                	test   %eax,%eax
+801057a2:	78 4c                	js     801057f0 <sys_write+0x60>
+801057a4:	8d 45 f0             	lea    -0x10(%ebp),%eax
+801057a7:	83 ec 08             	sub    $0x8,%esp
+801057aa:	50                   	push   %eax
+801057ab:	6a 02                	push   $0x2
+801057ad:	e8 be fb ff ff       	call   80105370 <argint>
+801057b2:	83 c4 10             	add    $0x10,%esp
+801057b5:	85 c0                	test   %eax,%eax
+801057b7:	78 37                	js     801057f0 <sys_write+0x60>
+801057b9:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801057bc:	83 ec 04             	sub    $0x4,%esp
+801057bf:	ff 75 f0             	pushl  -0x10(%ebp)
+801057c2:	50                   	push   %eax
+801057c3:	6a 01                	push   $0x1
+801057c5:	e8 f6 fb ff ff       	call   801053c0 <argptr>
+801057ca:	83 c4 10             	add    $0x10,%esp
+801057cd:	85 c0                	test   %eax,%eax
+801057cf:	78 1f                	js     801057f0 <sys_write+0x60>
   return filewrite(f, p, n);
-80104ef1:	83 ec 04             	sub    $0x4,%esp
-80104ef4:	ff 75 f0             	pushl  -0x10(%ebp)
-80104ef7:	ff 75 f4             	pushl  -0xc(%ebp)
-80104efa:	ff 75 ec             	pushl  -0x14(%ebp)
-80104efd:	e8 ee c0 ff ff       	call   80100ff0 <filewrite>
-80104f02:	83 c4 10             	add    $0x10,%esp
-}
-80104f05:	c9                   	leave  
-80104f06:	c3                   	ret    
-80104f07:	89 f6                	mov    %esi,%esi
-80104f09:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-    return -1;
-80104f10:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104f15:	c9                   	leave  
-80104f16:	c3                   	ret    
-80104f17:	89 f6                	mov    %esi,%esi
-80104f19:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-80104f20 <sys_close>:
-{
-80104f20:	55                   	push   %ebp
-80104f21:	89 e5                	mov    %esp,%ebp
-80104f23:	83 ec 18             	sub    $0x18,%esp
+801057d1:	83 ec 04             	sub    $0x4,%esp
+801057d4:	ff 75 f0             	pushl  -0x10(%ebp)
+801057d7:	ff 75 f4             	pushl  -0xc(%ebp)
+801057da:	ff 75 ec             	pushl  -0x14(%ebp)
+801057dd:	e8 0e b8 ff ff       	call   80100ff0 <filewrite>
+801057e2:	83 c4 10             	add    $0x10,%esp
+}
+801057e5:	c9                   	leave  
+801057e6:	c3                   	ret    
+801057e7:	89 f6                	mov    %esi,%esi
+801057e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    return -1;
+801057f0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801057f5:	c9                   	leave  
+801057f6:	c3                   	ret    
+801057f7:	89 f6                	mov    %esi,%esi
+801057f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80105800 <sys_close>:
+{
+80105800:	55                   	push   %ebp
+80105801:	89 e5                	mov    %esp,%ebp
+80105803:	83 ec 18             	sub    $0x18,%esp
   if(argfd(0, &fd, &f) < 0)
-80104f26:	8d 55 f4             	lea    -0xc(%ebp),%edx
-80104f29:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80104f2c:	e8 4f fe ff ff       	call   80104d80 <argfd.constprop.0>
-80104f31:	85 c0                	test   %eax,%eax
-80104f33:	78 2b                	js     80104f60 <sys_close+0x40>
+80105806:	8d 55 f4             	lea    -0xc(%ebp),%edx
+80105809:	8d 45 f0             	lea    -0x10(%ebp),%eax
+8010580c:	e8 4f fe ff ff       	call   80105660 <argfd.constprop.0>
+80105811:	85 c0                	test   %eax,%eax
+80105813:	78 2b                	js     80105840 <sys_close+0x40>
   myproc()->ofile[fd] = 0;
-80104f35:	e8 a6 e8 ff ff       	call   801037e0 <myproc>
-80104f3a:	8b 55 f0             	mov    -0x10(%ebp),%edx
+80105815:	e8 36 e6 ff ff       	call   80103e50 <myproc>
+8010581a:	8b 55 f0             	mov    -0x10(%ebp),%edx
   fileclose(f);
-80104f3d:	83 ec 0c             	sub    $0xc,%esp
+8010581d:	83 ec 0c             	sub    $0xc,%esp
   myproc()->ofile[fd] = 0;
-80104f40:	c7 44 90 28 00 00 00 	movl   $0x0,0x28(%eax,%edx,4)
-80104f47:	00 
+80105820:	c7 44 90 28 00 00 00 	movl   $0x0,0x28(%eax,%edx,4)
+80105827:	00 
   fileclose(f);
-80104f48:	ff 75 f4             	pushl  -0xc(%ebp)
-80104f4b:	e8 f0 be ff ff       	call   80100e40 <fileclose>
+80105828:	ff 75 f4             	pushl  -0xc(%ebp)
+8010582b:	e8 10 b6 ff ff       	call   80100e40 <fileclose>
   return 0;
-80104f50:	83 c4 10             	add    $0x10,%esp
-80104f53:	31 c0                	xor    %eax,%eax
+80105830:	83 c4 10             	add    $0x10,%esp
+80105833:	31 c0                	xor    %eax,%eax
 }
-80104f55:	c9                   	leave  
-80104f56:	c3                   	ret    
-80104f57:	89 f6                	mov    %esi,%esi
-80104f59:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80105835:	c9                   	leave  
+80105836:	c3                   	ret    
+80105837:	89 f6                	mov    %esi,%esi
+80105839:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
     return -1;
-80104f60:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105840:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80104f65:	c9                   	leave  
-80104f66:	c3                   	ret    
-80104f67:	89 f6                	mov    %esi,%esi
-80104f69:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80105845:	c9                   	leave  
+80105846:	c3                   	ret    
+80105847:	89 f6                	mov    %esi,%esi
+80105849:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80104f70 <sys_fstat>:
+80105850 <sys_fstat>:
 {
-80104f70:	55                   	push   %ebp
+80105850:	55                   	push   %ebp
   if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
-80104f71:	31 c0                	xor    %eax,%eax
+80105851:	31 c0                	xor    %eax,%eax
 {
-80104f73:	89 e5                	mov    %esp,%ebp
-80104f75:	83 ec 18             	sub    $0x18,%esp
+80105853:	89 e5                	mov    %esp,%ebp
+80105855:	83 ec 18             	sub    $0x18,%esp
   if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
-80104f78:	8d 55 f0             	lea    -0x10(%ebp),%edx
-80104f7b:	e8 00 fe ff ff       	call   80104d80 <argfd.constprop.0>
-80104f80:	85 c0                	test   %eax,%eax
-80104f82:	78 2c                	js     80104fb0 <sys_fstat+0x40>
-80104f84:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80104f87:	83 ec 04             	sub    $0x4,%esp
-80104f8a:	6a 14                	push   $0x14
-80104f8c:	50                   	push   %eax
-80104f8d:	6a 01                	push   $0x1
-80104f8f:	e8 4c fb ff ff       	call   80104ae0 <argptr>
-80104f94:	83 c4 10             	add    $0x10,%esp
-80104f97:	85 c0                	test   %eax,%eax
-80104f99:	78 15                	js     80104fb0 <sys_fstat+0x40>
+80105858:	8d 55 f0             	lea    -0x10(%ebp),%edx
+8010585b:	e8 00 fe ff ff       	call   80105660 <argfd.constprop.0>
+80105860:	85 c0                	test   %eax,%eax
+80105862:	78 2c                	js     80105890 <sys_fstat+0x40>
+80105864:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105867:	83 ec 04             	sub    $0x4,%esp
+8010586a:	6a 14                	push   $0x14
+8010586c:	50                   	push   %eax
+8010586d:	6a 01                	push   $0x1
+8010586f:	e8 4c fb ff ff       	call   801053c0 <argptr>
+80105874:	83 c4 10             	add    $0x10,%esp
+80105877:	85 c0                	test   %eax,%eax
+80105879:	78 15                	js     80105890 <sys_fstat+0x40>
   return filestat(f, st);
-80104f9b:	83 ec 08             	sub    $0x8,%esp
-80104f9e:	ff 75 f4             	pushl  -0xc(%ebp)
-80104fa1:	ff 75 f0             	pushl  -0x10(%ebp)
-80104fa4:	e8 67 bf ff ff       	call   80100f10 <filestat>
-80104fa9:	83 c4 10             	add    $0x10,%esp
-}
-80104fac:	c9                   	leave  
-80104fad:	c3                   	ret    
-80104fae:	66 90                	xchg   %ax,%ax
-    return -1;
-80104fb0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104fb5:	c9                   	leave  
-80104fb6:	c3                   	ret    
-80104fb7:	89 f6                	mov    %esi,%esi
-80104fb9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-80104fc0 <sys_link>:
-{
-80104fc0:	55                   	push   %ebp
-80104fc1:	89 e5                	mov    %esp,%ebp
-80104fc3:	57                   	push   %edi
-80104fc4:	56                   	push   %esi
-80104fc5:	53                   	push   %ebx
+8010587b:	83 ec 08             	sub    $0x8,%esp
+8010587e:	ff 75 f4             	pushl  -0xc(%ebp)
+80105881:	ff 75 f0             	pushl  -0x10(%ebp)
+80105884:	e8 87 b6 ff ff       	call   80100f10 <filestat>
+80105889:	83 c4 10             	add    $0x10,%esp
+}
+8010588c:	c9                   	leave  
+8010588d:	c3                   	ret    
+8010588e:	66 90                	xchg   %ax,%ax
+    return -1;
+80105890:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105895:	c9                   	leave  
+80105896:	c3                   	ret    
+80105897:	89 f6                	mov    %esi,%esi
+80105899:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801058a0 <sys_link>:
+{
+801058a0:	55                   	push   %ebp
+801058a1:	89 e5                	mov    %esp,%ebp
+801058a3:	57                   	push   %edi
+801058a4:	56                   	push   %esi
+801058a5:	53                   	push   %ebx
   if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
-80104fc6:	8d 45 d4             	lea    -0x2c(%ebp),%eax
+801058a6:	8d 45 d4             	lea    -0x2c(%ebp),%eax
 {
-80104fc9:	83 ec 34             	sub    $0x34,%esp
+801058a9:	83 ec 34             	sub    $0x34,%esp
   if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
-80104fcc:	50                   	push   %eax
-80104fcd:	6a 00                	push   $0x0
-80104fcf:	e8 6c fb ff ff       	call   80104b40 <argstr>
-80104fd4:	83 c4 10             	add    $0x10,%esp
-80104fd7:	85 c0                	test   %eax,%eax
-80104fd9:	0f 88 fb 00 00 00    	js     801050da <sys_link+0x11a>
-80104fdf:	8d 45 d0             	lea    -0x30(%ebp),%eax
-80104fe2:	83 ec 08             	sub    $0x8,%esp
-80104fe5:	50                   	push   %eax
-80104fe6:	6a 01                	push   $0x1
-80104fe8:	e8 53 fb ff ff       	call   80104b40 <argstr>
-80104fed:	83 c4 10             	add    $0x10,%esp
-80104ff0:	85 c0                	test   %eax,%eax
-80104ff2:	0f 88 e2 00 00 00    	js     801050da <sys_link+0x11a>
+801058ac:	50                   	push   %eax
+801058ad:	6a 00                	push   $0x0
+801058af:	e8 6c fb ff ff       	call   80105420 <argstr>
+801058b4:	83 c4 10             	add    $0x10,%esp
+801058b7:	85 c0                	test   %eax,%eax
+801058b9:	0f 88 fb 00 00 00    	js     801059ba <sys_link+0x11a>
+801058bf:	8d 45 d0             	lea    -0x30(%ebp),%eax
+801058c2:	83 ec 08             	sub    $0x8,%esp
+801058c5:	50                   	push   %eax
+801058c6:	6a 01                	push   $0x1
+801058c8:	e8 53 fb ff ff       	call   80105420 <argstr>
+801058cd:	83 c4 10             	add    $0x10,%esp
+801058d0:	85 c0                	test   %eax,%eax
+801058d2:	0f 88 e2 00 00 00    	js     801059ba <sys_link+0x11a>
   begin_op();
-80104ff8:	e8 a3 db ff ff       	call   80102ba0 <begin_op>
+801058d8:	e8 43 d3 ff ff       	call   80102c20 <begin_op>
   if((ip = namei(old)) == 0){
-80104ffd:	83 ec 0c             	sub    $0xc,%esp
-80105000:	ff 75 d4             	pushl  -0x2c(%ebp)
-80105003:	e8 d8 ce ff ff       	call   80101ee0 <namei>
-80105008:	83 c4 10             	add    $0x10,%esp
-8010500b:	85 c0                	test   %eax,%eax
-8010500d:	89 c3                	mov    %eax,%ebx
-8010500f:	0f 84 ea 00 00 00    	je     801050ff <sys_link+0x13f>
+801058dd:	83 ec 0c             	sub    $0xc,%esp
+801058e0:	ff 75 d4             	pushl  -0x2c(%ebp)
+801058e3:	e8 f8 c5 ff ff       	call   80101ee0 <namei>
+801058e8:	83 c4 10             	add    $0x10,%esp
+801058eb:	85 c0                	test   %eax,%eax
+801058ed:	89 c3                	mov    %eax,%ebx
+801058ef:	0f 84 ea 00 00 00    	je     801059df <sys_link+0x13f>
   ilock(ip);
-80105015:	83 ec 0c             	sub    $0xc,%esp
-80105018:	50                   	push   %eax
-80105019:	e8 62 c6 ff ff       	call   80101680 <ilock>
+801058f5:	83 ec 0c             	sub    $0xc,%esp
+801058f8:	50                   	push   %eax
+801058f9:	e8 82 bd ff ff       	call   80101680 <ilock>
   if(ip->type == T_DIR){
-8010501e:	83 c4 10             	add    $0x10,%esp
-80105021:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-80105026:	0f 84 bb 00 00 00    	je     801050e7 <sys_link+0x127>
+801058fe:	83 c4 10             	add    $0x10,%esp
+80105901:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80105906:	0f 84 bb 00 00 00    	je     801059c7 <sys_link+0x127>
   ip->nlink++;
-8010502c:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
+8010590c:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
   iupdate(ip);
-80105031:	83 ec 0c             	sub    $0xc,%esp
+80105911:	83 ec 0c             	sub    $0xc,%esp
   if((dp = nameiparent(new, name)) == 0)
-80105034:	8d 7d da             	lea    -0x26(%ebp),%edi
+80105914:	8d 7d da             	lea    -0x26(%ebp),%edi
   iupdate(ip);
-80105037:	53                   	push   %ebx
-80105038:	e8 93 c5 ff ff       	call   801015d0 <iupdate>
+80105917:	53                   	push   %ebx
+80105918:	e8 b3 bc ff ff       	call   801015d0 <iupdate>
   iunlock(ip);
-8010503d:	89 1c 24             	mov    %ebx,(%esp)
-80105040:	e8 1b c7 ff ff       	call   80101760 <iunlock>
+8010591d:	89 1c 24             	mov    %ebx,(%esp)
+80105920:	e8 3b be ff ff       	call   80101760 <iunlock>
   if((dp = nameiparent(new, name)) == 0)
-80105045:	58                   	pop    %eax
-80105046:	5a                   	pop    %edx
-80105047:	57                   	push   %edi
-80105048:	ff 75 d0             	pushl  -0x30(%ebp)
-8010504b:	e8 b0 ce ff ff       	call   80101f00 <nameiparent>
-80105050:	83 c4 10             	add    $0x10,%esp
-80105053:	85 c0                	test   %eax,%eax
-80105055:	89 c6                	mov    %eax,%esi
-80105057:	74 5b                	je     801050b4 <sys_link+0xf4>
+80105925:	58                   	pop    %eax
+80105926:	5a                   	pop    %edx
+80105927:	57                   	push   %edi
+80105928:	ff 75 d0             	pushl  -0x30(%ebp)
+8010592b:	e8 d0 c5 ff ff       	call   80101f00 <nameiparent>
+80105930:	83 c4 10             	add    $0x10,%esp
+80105933:	85 c0                	test   %eax,%eax
+80105935:	89 c6                	mov    %eax,%esi
+80105937:	74 5b                	je     80105994 <sys_link+0xf4>
   ilock(dp);
-80105059:	83 ec 0c             	sub    $0xc,%esp
-8010505c:	50                   	push   %eax
-8010505d:	e8 1e c6 ff ff       	call   80101680 <ilock>
+80105939:	83 ec 0c             	sub    $0xc,%esp
+8010593c:	50                   	push   %eax
+8010593d:	e8 3e bd ff ff       	call   80101680 <ilock>
   if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
-80105062:	83 c4 10             	add    $0x10,%esp
-80105065:	8b 03                	mov    (%ebx),%eax
-80105067:	39 06                	cmp    %eax,(%esi)
-80105069:	75 3d                	jne    801050a8 <sys_link+0xe8>
-8010506b:	83 ec 04             	sub    $0x4,%esp
-8010506e:	ff 73 04             	pushl  0x4(%ebx)
-80105071:	57                   	push   %edi
-80105072:	56                   	push   %esi
-80105073:	e8 a8 cd ff ff       	call   80101e20 <dirlink>
-80105078:	83 c4 10             	add    $0x10,%esp
-8010507b:	85 c0                	test   %eax,%eax
-8010507d:	78 29                	js     801050a8 <sys_link+0xe8>
+80105942:	83 c4 10             	add    $0x10,%esp
+80105945:	8b 03                	mov    (%ebx),%eax
+80105947:	39 06                	cmp    %eax,(%esi)
+80105949:	75 3d                	jne    80105988 <sys_link+0xe8>
+8010594b:	83 ec 04             	sub    $0x4,%esp
+8010594e:	ff 73 04             	pushl  0x4(%ebx)
+80105951:	57                   	push   %edi
+80105952:	56                   	push   %esi
+80105953:	e8 c8 c4 ff ff       	call   80101e20 <dirlink>
+80105958:	83 c4 10             	add    $0x10,%esp
+8010595b:	85 c0                	test   %eax,%eax
+8010595d:	78 29                	js     80105988 <sys_link+0xe8>
   iunlockput(dp);
-8010507f:	83 ec 0c             	sub    $0xc,%esp
-80105082:	56                   	push   %esi
-80105083:	e8 88 c8 ff ff       	call   80101910 <iunlockput>
+8010595f:	83 ec 0c             	sub    $0xc,%esp
+80105962:	56                   	push   %esi
+80105963:	e8 a8 bf ff ff       	call   80101910 <iunlockput>
   iput(ip);
-80105088:	89 1c 24             	mov    %ebx,(%esp)
-8010508b:	e8 20 c7 ff ff       	call   801017b0 <iput>
+80105968:	89 1c 24             	mov    %ebx,(%esp)
+8010596b:	e8 40 be ff ff       	call   801017b0 <iput>
   end_op();
-80105090:	e8 7b db ff ff       	call   80102c10 <end_op>
+80105970:	e8 1b d3 ff ff       	call   80102c90 <end_op>
   return 0;
-80105095:	83 c4 10             	add    $0x10,%esp
-80105098:	31 c0                	xor    %eax,%eax
+80105975:	83 c4 10             	add    $0x10,%esp
+80105978:	31 c0                	xor    %eax,%eax
 }
-8010509a:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010509d:	5b                   	pop    %ebx
-8010509e:	5e                   	pop    %esi
-8010509f:	5f                   	pop    %edi
-801050a0:	5d                   	pop    %ebp
-801050a1:	c3                   	ret    
-801050a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010597a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010597d:	5b                   	pop    %ebx
+8010597e:	5e                   	pop    %esi
+8010597f:	5f                   	pop    %edi
+80105980:	5d                   	pop    %ebp
+80105981:	c3                   	ret    
+80105982:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     iunlockput(dp);
-801050a8:	83 ec 0c             	sub    $0xc,%esp
-801050ab:	56                   	push   %esi
-801050ac:	e8 5f c8 ff ff       	call   80101910 <iunlockput>
+80105988:	83 ec 0c             	sub    $0xc,%esp
+8010598b:	56                   	push   %esi
+8010598c:	e8 7f bf ff ff       	call   80101910 <iunlockput>
     goto bad;
-801050b1:	83 c4 10             	add    $0x10,%esp
+80105991:	83 c4 10             	add    $0x10,%esp
   ilock(ip);
-801050b4:	83 ec 0c             	sub    $0xc,%esp
-801050b7:	53                   	push   %ebx
-801050b8:	e8 c3 c5 ff ff       	call   80101680 <ilock>
+80105994:	83 ec 0c             	sub    $0xc,%esp
+80105997:	53                   	push   %ebx
+80105998:	e8 e3 bc ff ff       	call   80101680 <ilock>
   ip->nlink--;
-801050bd:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+8010599d:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
   iupdate(ip);
-801050c2:	89 1c 24             	mov    %ebx,(%esp)
-801050c5:	e8 06 c5 ff ff       	call   801015d0 <iupdate>
+801059a2:	89 1c 24             	mov    %ebx,(%esp)
+801059a5:	e8 26 bc ff ff       	call   801015d0 <iupdate>
   iunlockput(ip);
-801050ca:	89 1c 24             	mov    %ebx,(%esp)
-801050cd:	e8 3e c8 ff ff       	call   80101910 <iunlockput>
+801059aa:	89 1c 24             	mov    %ebx,(%esp)
+801059ad:	e8 5e bf ff ff       	call   80101910 <iunlockput>
   end_op();
-801050d2:	e8 39 db ff ff       	call   80102c10 <end_op>
+801059b2:	e8 d9 d2 ff ff       	call   80102c90 <end_op>
   return -1;
-801050d7:	83 c4 10             	add    $0x10,%esp
+801059b7:	83 c4 10             	add    $0x10,%esp
 }
-801050da:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801059ba:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return -1;
-801050dd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801059bd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-801050e2:	5b                   	pop    %ebx
-801050e3:	5e                   	pop    %esi
-801050e4:	5f                   	pop    %edi
-801050e5:	5d                   	pop    %ebp
-801050e6:	c3                   	ret    
+801059c2:	5b                   	pop    %ebx
+801059c3:	5e                   	pop    %esi
+801059c4:	5f                   	pop    %edi
+801059c5:	5d                   	pop    %ebp
+801059c6:	c3                   	ret    
     iunlockput(ip);
-801050e7:	83 ec 0c             	sub    $0xc,%esp
-801050ea:	53                   	push   %ebx
-801050eb:	e8 20 c8 ff ff       	call   80101910 <iunlockput>
+801059c7:	83 ec 0c             	sub    $0xc,%esp
+801059ca:	53                   	push   %ebx
+801059cb:	e8 40 bf ff ff       	call   80101910 <iunlockput>
     end_op();
-801050f0:	e8 1b db ff ff       	call   80102c10 <end_op>
+801059d0:	e8 bb d2 ff ff       	call   80102c90 <end_op>
     return -1;
-801050f5:	83 c4 10             	add    $0x10,%esp
-801050f8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801050fd:	eb 9b                	jmp    8010509a <sys_link+0xda>
+801059d5:	83 c4 10             	add    $0x10,%esp
+801059d8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801059dd:	eb 9b                	jmp    8010597a <sys_link+0xda>
     end_op();
-801050ff:	e8 0c db ff ff       	call   80102c10 <end_op>
+801059df:	e8 ac d2 ff ff       	call   80102c90 <end_op>
     return -1;
-80105104:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105109:	eb 8f                	jmp    8010509a <sys_link+0xda>
-8010510b:	90                   	nop
-8010510c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80105110 <sys_unlink>:
-{
-80105110:	55                   	push   %ebp
-80105111:	89 e5                	mov    %esp,%ebp
-80105113:	57                   	push   %edi
-80105114:	56                   	push   %esi
-80105115:	53                   	push   %ebx
+801059e4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801059e9:	eb 8f                	jmp    8010597a <sys_link+0xda>
+801059eb:	90                   	nop
+801059ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801059f0 <sys_unlink>:
+{
+801059f0:	55                   	push   %ebp
+801059f1:	89 e5                	mov    %esp,%ebp
+801059f3:	57                   	push   %edi
+801059f4:	56                   	push   %esi
+801059f5:	53                   	push   %ebx
   if(argstr(0, &path) < 0)
-80105116:	8d 45 c0             	lea    -0x40(%ebp),%eax
+801059f6:	8d 45 c0             	lea    -0x40(%ebp),%eax
 {
-80105119:	83 ec 44             	sub    $0x44,%esp
+801059f9:	83 ec 44             	sub    $0x44,%esp
   if(argstr(0, &path) < 0)
-8010511c:	50                   	push   %eax
-8010511d:	6a 00                	push   $0x0
-8010511f:	e8 1c fa ff ff       	call   80104b40 <argstr>
-80105124:	83 c4 10             	add    $0x10,%esp
-80105127:	85 c0                	test   %eax,%eax
-80105129:	0f 88 77 01 00 00    	js     801052a6 <sys_unlink+0x196>
+801059fc:	50                   	push   %eax
+801059fd:	6a 00                	push   $0x0
+801059ff:	e8 1c fa ff ff       	call   80105420 <argstr>
+80105a04:	83 c4 10             	add    $0x10,%esp
+80105a07:	85 c0                	test   %eax,%eax
+80105a09:	0f 88 77 01 00 00    	js     80105b86 <sys_unlink+0x196>
   if((dp = nameiparent(path, name)) == 0){
-8010512f:	8d 5d ca             	lea    -0x36(%ebp),%ebx
+80105a0f:	8d 5d ca             	lea    -0x36(%ebp),%ebx
   begin_op();
-80105132:	e8 69 da ff ff       	call   80102ba0 <begin_op>
+80105a12:	e8 09 d2 ff ff       	call   80102c20 <begin_op>
   if((dp = nameiparent(path, name)) == 0){
-80105137:	83 ec 08             	sub    $0x8,%esp
-8010513a:	53                   	push   %ebx
-8010513b:	ff 75 c0             	pushl  -0x40(%ebp)
-8010513e:	e8 bd cd ff ff       	call   80101f00 <nameiparent>
-80105143:	83 c4 10             	add    $0x10,%esp
-80105146:	85 c0                	test   %eax,%eax
-80105148:	89 c6                	mov    %eax,%esi
-8010514a:	0f 84 60 01 00 00    	je     801052b0 <sys_unlink+0x1a0>
+80105a17:	83 ec 08             	sub    $0x8,%esp
+80105a1a:	53                   	push   %ebx
+80105a1b:	ff 75 c0             	pushl  -0x40(%ebp)
+80105a1e:	e8 dd c4 ff ff       	call   80101f00 <nameiparent>
+80105a23:	83 c4 10             	add    $0x10,%esp
+80105a26:	85 c0                	test   %eax,%eax
+80105a28:	89 c6                	mov    %eax,%esi
+80105a2a:	0f 84 60 01 00 00    	je     80105b90 <sys_unlink+0x1a0>
   ilock(dp);
-80105150:	83 ec 0c             	sub    $0xc,%esp
-80105153:	50                   	push   %eax
-80105154:	e8 27 c5 ff ff       	call   80101680 <ilock>
+80105a30:	83 ec 0c             	sub    $0xc,%esp
+80105a33:	50                   	push   %eax
+80105a34:	e8 47 bc ff ff       	call   80101680 <ilock>
   if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
-80105159:	58                   	pop    %eax
-8010515a:	5a                   	pop    %edx
-8010515b:	68 84 7a 10 80       	push   $0x80107a84
-80105160:	53                   	push   %ebx
-80105161:	e8 2a ca ff ff       	call   80101b90 <namecmp>
-80105166:	83 c4 10             	add    $0x10,%esp
-80105169:	85 c0                	test   %eax,%eax
-8010516b:	0f 84 03 01 00 00    	je     80105274 <sys_unlink+0x164>
-80105171:	83 ec 08             	sub    $0x8,%esp
-80105174:	68 83 7a 10 80       	push   $0x80107a83
-80105179:	53                   	push   %ebx
-8010517a:	e8 11 ca ff ff       	call   80101b90 <namecmp>
-8010517f:	83 c4 10             	add    $0x10,%esp
-80105182:	85 c0                	test   %eax,%eax
-80105184:	0f 84 ea 00 00 00    	je     80105274 <sys_unlink+0x164>
+80105a39:	58                   	pop    %eax
+80105a3a:	5a                   	pop    %edx
+80105a3b:	68 c9 84 10 80       	push   $0x801084c9
+80105a40:	53                   	push   %ebx
+80105a41:	e8 4a c1 ff ff       	call   80101b90 <namecmp>
+80105a46:	83 c4 10             	add    $0x10,%esp
+80105a49:	85 c0                	test   %eax,%eax
+80105a4b:	0f 84 03 01 00 00    	je     80105b54 <sys_unlink+0x164>
+80105a51:	83 ec 08             	sub    $0x8,%esp
+80105a54:	68 c8 84 10 80       	push   $0x801084c8
+80105a59:	53                   	push   %ebx
+80105a5a:	e8 31 c1 ff ff       	call   80101b90 <namecmp>
+80105a5f:	83 c4 10             	add    $0x10,%esp
+80105a62:	85 c0                	test   %eax,%eax
+80105a64:	0f 84 ea 00 00 00    	je     80105b54 <sys_unlink+0x164>
   if((ip = dirlookup(dp, name, &off)) == 0)
-8010518a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
-8010518d:	83 ec 04             	sub    $0x4,%esp
-80105190:	50                   	push   %eax
-80105191:	53                   	push   %ebx
-80105192:	56                   	push   %esi
-80105193:	e8 18 ca ff ff       	call   80101bb0 <dirlookup>
-80105198:	83 c4 10             	add    $0x10,%esp
-8010519b:	85 c0                	test   %eax,%eax
-8010519d:	89 c3                	mov    %eax,%ebx
-8010519f:	0f 84 cf 00 00 00    	je     80105274 <sys_unlink+0x164>
+80105a6a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
+80105a6d:	83 ec 04             	sub    $0x4,%esp
+80105a70:	50                   	push   %eax
+80105a71:	53                   	push   %ebx
+80105a72:	56                   	push   %esi
+80105a73:	e8 38 c1 ff ff       	call   80101bb0 <dirlookup>
+80105a78:	83 c4 10             	add    $0x10,%esp
+80105a7b:	85 c0                	test   %eax,%eax
+80105a7d:	89 c3                	mov    %eax,%ebx
+80105a7f:	0f 84 cf 00 00 00    	je     80105b54 <sys_unlink+0x164>
   ilock(ip);
-801051a5:	83 ec 0c             	sub    $0xc,%esp
-801051a8:	50                   	push   %eax
-801051a9:	e8 d2 c4 ff ff       	call   80101680 <ilock>
+80105a85:	83 ec 0c             	sub    $0xc,%esp
+80105a88:	50                   	push   %eax
+80105a89:	e8 f2 bb ff ff       	call   80101680 <ilock>
   if(ip->nlink < 1)
-801051ae:	83 c4 10             	add    $0x10,%esp
-801051b1:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
-801051b6:	0f 8e 10 01 00 00    	jle    801052cc <sys_unlink+0x1bc>
+80105a8e:	83 c4 10             	add    $0x10,%esp
+80105a91:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
+80105a96:	0f 8e 10 01 00 00    	jle    80105bac <sys_unlink+0x1bc>
   if(ip->type == T_DIR && !isdirempty(ip)){
-801051bc:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-801051c1:	74 6d                	je     80105230 <sys_unlink+0x120>
+80105a9c:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80105aa1:	74 6d                	je     80105b10 <sys_unlink+0x120>
   memset(&de, 0, sizeof(de));
-801051c3:	8d 45 d8             	lea    -0x28(%ebp),%eax
-801051c6:	83 ec 04             	sub    $0x4,%esp
-801051c9:	6a 10                	push   $0x10
-801051cb:	6a 00                	push   $0x0
-801051cd:	50                   	push   %eax
-801051ce:	e8 bd f5 ff ff       	call   80104790 <memset>
+80105aa3:	8d 45 d8             	lea    -0x28(%ebp),%eax
+80105aa6:	83 ec 04             	sub    $0x4,%esp
+80105aa9:	6a 10                	push   $0x10
+80105aab:	6a 00                	push   $0x0
+80105aad:	50                   	push   %eax
+80105aae:	e8 bd f5 ff ff       	call   80105070 <memset>
   if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-801051d3:	8d 45 d8             	lea    -0x28(%ebp),%eax
-801051d6:	6a 10                	push   $0x10
-801051d8:	ff 75 c4             	pushl  -0x3c(%ebp)
-801051db:	50                   	push   %eax
-801051dc:	56                   	push   %esi
-801051dd:	e8 7e c8 ff ff       	call   80101a60 <writei>
-801051e2:	83 c4 20             	add    $0x20,%esp
-801051e5:	83 f8 10             	cmp    $0x10,%eax
-801051e8:	0f 85 eb 00 00 00    	jne    801052d9 <sys_unlink+0x1c9>
+80105ab3:	8d 45 d8             	lea    -0x28(%ebp),%eax
+80105ab6:	6a 10                	push   $0x10
+80105ab8:	ff 75 c4             	pushl  -0x3c(%ebp)
+80105abb:	50                   	push   %eax
+80105abc:	56                   	push   %esi
+80105abd:	e8 9e bf ff ff       	call   80101a60 <writei>
+80105ac2:	83 c4 20             	add    $0x20,%esp
+80105ac5:	83 f8 10             	cmp    $0x10,%eax
+80105ac8:	0f 85 eb 00 00 00    	jne    80105bb9 <sys_unlink+0x1c9>
   if(ip->type == T_DIR){
-801051ee:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-801051f3:	0f 84 97 00 00 00    	je     80105290 <sys_unlink+0x180>
+80105ace:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80105ad3:	0f 84 97 00 00 00    	je     80105b70 <sys_unlink+0x180>
   iunlockput(dp);
-801051f9:	83 ec 0c             	sub    $0xc,%esp
-801051fc:	56                   	push   %esi
-801051fd:	e8 0e c7 ff ff       	call   80101910 <iunlockput>
+80105ad9:	83 ec 0c             	sub    $0xc,%esp
+80105adc:	56                   	push   %esi
+80105add:	e8 2e be ff ff       	call   80101910 <iunlockput>
   ip->nlink--;
-80105202:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+80105ae2:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
   iupdate(ip);
-80105207:	89 1c 24             	mov    %ebx,(%esp)
-8010520a:	e8 c1 c3 ff ff       	call   801015d0 <iupdate>
+80105ae7:	89 1c 24             	mov    %ebx,(%esp)
+80105aea:	e8 e1 ba ff ff       	call   801015d0 <iupdate>
   iunlockput(ip);
-8010520f:	89 1c 24             	mov    %ebx,(%esp)
-80105212:	e8 f9 c6 ff ff       	call   80101910 <iunlockput>
+80105aef:	89 1c 24             	mov    %ebx,(%esp)
+80105af2:	e8 19 be ff ff       	call   80101910 <iunlockput>
   end_op();
-80105217:	e8 f4 d9 ff ff       	call   80102c10 <end_op>
+80105af7:	e8 94 d1 ff ff       	call   80102c90 <end_op>
   return 0;
-8010521c:	83 c4 10             	add    $0x10,%esp
-8010521f:	31 c0                	xor    %eax,%eax
+80105afc:	83 c4 10             	add    $0x10,%esp
+80105aff:	31 c0                	xor    %eax,%eax
 }
-80105221:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105224:	5b                   	pop    %ebx
-80105225:	5e                   	pop    %esi
-80105226:	5f                   	pop    %edi
-80105227:	5d                   	pop    %ebp
-80105228:	c3                   	ret    
-80105229:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105b01:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105b04:	5b                   	pop    %ebx
+80105b05:	5e                   	pop    %esi
+80105b06:	5f                   	pop    %edi
+80105b07:	5d                   	pop    %ebp
+80105b08:	c3                   	ret    
+80105b09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
-80105230:	83 7b 58 20          	cmpl   $0x20,0x58(%ebx)
-80105234:	76 8d                	jbe    801051c3 <sys_unlink+0xb3>
-80105236:	bf 20 00 00 00       	mov    $0x20,%edi
-8010523b:	eb 0f                	jmp    8010524c <sys_unlink+0x13c>
-8010523d:	8d 76 00             	lea    0x0(%esi),%esi
-80105240:	83 c7 10             	add    $0x10,%edi
-80105243:	3b 7b 58             	cmp    0x58(%ebx),%edi
-80105246:	0f 83 77 ff ff ff    	jae    801051c3 <sys_unlink+0xb3>
+80105b10:	83 7b 58 20          	cmpl   $0x20,0x58(%ebx)
+80105b14:	76 8d                	jbe    80105aa3 <sys_unlink+0xb3>
+80105b16:	bf 20 00 00 00       	mov    $0x20,%edi
+80105b1b:	eb 0f                	jmp    80105b2c <sys_unlink+0x13c>
+80105b1d:	8d 76 00             	lea    0x0(%esi),%esi
+80105b20:	83 c7 10             	add    $0x10,%edi
+80105b23:	3b 7b 58             	cmp    0x58(%ebx),%edi
+80105b26:	0f 83 77 ff ff ff    	jae    80105aa3 <sys_unlink+0xb3>
     if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-8010524c:	8d 45 d8             	lea    -0x28(%ebp),%eax
-8010524f:	6a 10                	push   $0x10
-80105251:	57                   	push   %edi
-80105252:	50                   	push   %eax
-80105253:	53                   	push   %ebx
-80105254:	e8 07 c7 ff ff       	call   80101960 <readi>
-80105259:	83 c4 10             	add    $0x10,%esp
-8010525c:	83 f8 10             	cmp    $0x10,%eax
-8010525f:	75 5e                	jne    801052bf <sys_unlink+0x1af>
+80105b2c:	8d 45 d8             	lea    -0x28(%ebp),%eax
+80105b2f:	6a 10                	push   $0x10
+80105b31:	57                   	push   %edi
+80105b32:	50                   	push   %eax
+80105b33:	53                   	push   %ebx
+80105b34:	e8 27 be ff ff       	call   80101960 <readi>
+80105b39:	83 c4 10             	add    $0x10,%esp
+80105b3c:	83 f8 10             	cmp    $0x10,%eax
+80105b3f:	75 5e                	jne    80105b9f <sys_unlink+0x1af>
     if(de.inum != 0)
-80105261:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
-80105266:	74 d8                	je     80105240 <sys_unlink+0x130>
+80105b41:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+80105b46:	74 d8                	je     80105b20 <sys_unlink+0x130>
     iunlockput(ip);
-80105268:	83 ec 0c             	sub    $0xc,%esp
-8010526b:	53                   	push   %ebx
-8010526c:	e8 9f c6 ff ff       	call   80101910 <iunlockput>
+80105b48:	83 ec 0c             	sub    $0xc,%esp
+80105b4b:	53                   	push   %ebx
+80105b4c:	e8 bf bd ff ff       	call   80101910 <iunlockput>
     goto bad;
-80105271:	83 c4 10             	add    $0x10,%esp
+80105b51:	83 c4 10             	add    $0x10,%esp
   iunlockput(dp);
-80105274:	83 ec 0c             	sub    $0xc,%esp
-80105277:	56                   	push   %esi
-80105278:	e8 93 c6 ff ff       	call   80101910 <iunlockput>
+80105b54:	83 ec 0c             	sub    $0xc,%esp
+80105b57:	56                   	push   %esi
+80105b58:	e8 b3 bd ff ff       	call   80101910 <iunlockput>
   end_op();
-8010527d:	e8 8e d9 ff ff       	call   80102c10 <end_op>
+80105b5d:	e8 2e d1 ff ff       	call   80102c90 <end_op>
   return -1;
-80105282:	83 c4 10             	add    $0x10,%esp
-80105285:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010528a:	eb 95                	jmp    80105221 <sys_unlink+0x111>
-8010528c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105b62:	83 c4 10             	add    $0x10,%esp
+80105b65:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105b6a:	eb 95                	jmp    80105b01 <sys_unlink+0x111>
+80105b6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     dp->nlink--;
-80105290:	66 83 6e 56 01       	subw   $0x1,0x56(%esi)
+80105b70:	66 83 6e 56 01       	subw   $0x1,0x56(%esi)
     iupdate(dp);
-80105295:	83 ec 0c             	sub    $0xc,%esp
-80105298:	56                   	push   %esi
-80105299:	e8 32 c3 ff ff       	call   801015d0 <iupdate>
-8010529e:	83 c4 10             	add    $0x10,%esp
-801052a1:	e9 53 ff ff ff       	jmp    801051f9 <sys_unlink+0xe9>
+80105b75:	83 ec 0c             	sub    $0xc,%esp
+80105b78:	56                   	push   %esi
+80105b79:	e8 52 ba ff ff       	call   801015d0 <iupdate>
+80105b7e:	83 c4 10             	add    $0x10,%esp
+80105b81:	e9 53 ff ff ff       	jmp    80105ad9 <sys_unlink+0xe9>
     return -1;
-801052a6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801052ab:	e9 71 ff ff ff       	jmp    80105221 <sys_unlink+0x111>
+80105b86:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105b8b:	e9 71 ff ff ff       	jmp    80105b01 <sys_unlink+0x111>
     end_op();
-801052b0:	e8 5b d9 ff ff       	call   80102c10 <end_op>
+80105b90:	e8 fb d0 ff ff       	call   80102c90 <end_op>
     return -1;
-801052b5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801052ba:	e9 62 ff ff ff       	jmp    80105221 <sys_unlink+0x111>
+80105b95:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105b9a:	e9 62 ff ff ff       	jmp    80105b01 <sys_unlink+0x111>
       panic("isdirempty: readi");
-801052bf:	83 ec 0c             	sub    $0xc,%esp
-801052c2:	68 a8 7a 10 80       	push   $0x80107aa8
-801052c7:	e8 c4 b0 ff ff       	call   80100390 <panic>
+80105b9f:	83 ec 0c             	sub    $0xc,%esp
+80105ba2:	68 dd 84 10 80       	push   $0x801084dd
+80105ba7:	e8 e4 a7 ff ff       	call   80100390 <panic>
     panic("unlink: nlink < 1");
-801052cc:	83 ec 0c             	sub    $0xc,%esp
-801052cf:	68 96 7a 10 80       	push   $0x80107a96
-801052d4:	e8 b7 b0 ff ff       	call   80100390 <panic>
+80105bac:	83 ec 0c             	sub    $0xc,%esp
+80105baf:	68 cb 84 10 80       	push   $0x801084cb
+80105bb4:	e8 d7 a7 ff ff       	call   80100390 <panic>
     panic("unlink: writei");
-801052d9:	83 ec 0c             	sub    $0xc,%esp
-801052dc:	68 ba 7a 10 80       	push   $0x80107aba
-801052e1:	e8 aa b0 ff ff       	call   80100390 <panic>
-801052e6:	8d 76 00             	lea    0x0(%esi),%esi
-801052e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80105bb9:	83 ec 0c             	sub    $0xc,%esp
+80105bbc:	68 ef 84 10 80       	push   $0x801084ef
+80105bc1:	e8 ca a7 ff ff       	call   80100390 <panic>
+80105bc6:	8d 76 00             	lea    0x0(%esi),%esi
+80105bc9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-801052f0 <sys_open>:
+80105bd0 <sys_open>:
 
 int
 sys_open(void)
 {
-801052f0:	55                   	push   %ebp
-801052f1:	89 e5                	mov    %esp,%ebp
-801052f3:	57                   	push   %edi
-801052f4:	56                   	push   %esi
-801052f5:	53                   	push   %ebx
+80105bd0:	55                   	push   %ebp
+80105bd1:	89 e5                	mov    %esp,%ebp
+80105bd3:	57                   	push   %edi
+80105bd4:	56                   	push   %esi
+80105bd5:	53                   	push   %ebx
   char *path;
   int fd, omode;
   struct file *f;
   struct inode *ip;
 
   if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
-801052f6:	8d 45 e0             	lea    -0x20(%ebp),%eax
+80105bd6:	8d 45 e0             	lea    -0x20(%ebp),%eax
 {
-801052f9:	83 ec 24             	sub    $0x24,%esp
+80105bd9:	83 ec 24             	sub    $0x24,%esp
   if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
-801052fc:	50                   	push   %eax
-801052fd:	6a 00                	push   $0x0
-801052ff:	e8 3c f8 ff ff       	call   80104b40 <argstr>
-80105304:	83 c4 10             	add    $0x10,%esp
-80105307:	85 c0                	test   %eax,%eax
-80105309:	0f 88 1d 01 00 00    	js     8010542c <sys_open+0x13c>
-8010530f:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-80105312:	83 ec 08             	sub    $0x8,%esp
-80105315:	50                   	push   %eax
-80105316:	6a 01                	push   $0x1
-80105318:	e8 73 f7 ff ff       	call   80104a90 <argint>
-8010531d:	83 c4 10             	add    $0x10,%esp
-80105320:	85 c0                	test   %eax,%eax
-80105322:	0f 88 04 01 00 00    	js     8010542c <sys_open+0x13c>
+80105bdc:	50                   	push   %eax
+80105bdd:	6a 00                	push   $0x0
+80105bdf:	e8 3c f8 ff ff       	call   80105420 <argstr>
+80105be4:	83 c4 10             	add    $0x10,%esp
+80105be7:	85 c0                	test   %eax,%eax
+80105be9:	0f 88 1d 01 00 00    	js     80105d0c <sys_open+0x13c>
+80105bef:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+80105bf2:	83 ec 08             	sub    $0x8,%esp
+80105bf5:	50                   	push   %eax
+80105bf6:	6a 01                	push   $0x1
+80105bf8:	e8 73 f7 ff ff       	call   80105370 <argint>
+80105bfd:	83 c4 10             	add    $0x10,%esp
+80105c00:	85 c0                	test   %eax,%eax
+80105c02:	0f 88 04 01 00 00    	js     80105d0c <sys_open+0x13c>
     return -1;
 
   begin_op();
-80105328:	e8 73 d8 ff ff       	call   80102ba0 <begin_op>
+80105c08:	e8 13 d0 ff ff       	call   80102c20 <begin_op>
 
   if(omode & O_CREATE){
-8010532d:	f6 45 e5 02          	testb  $0x2,-0x1b(%ebp)
-80105331:	0f 85 a9 00 00 00    	jne    801053e0 <sys_open+0xf0>
+80105c0d:	f6 45 e5 02          	testb  $0x2,-0x1b(%ebp)
+80105c11:	0f 85 a9 00 00 00    	jne    80105cc0 <sys_open+0xf0>
     if(ip == 0){
       end_op();
       return -1;
     }
   } else {
     if((ip = namei(path)) == 0){
-80105337:	83 ec 0c             	sub    $0xc,%esp
-8010533a:	ff 75 e0             	pushl  -0x20(%ebp)
-8010533d:	e8 9e cb ff ff       	call   80101ee0 <namei>
-80105342:	83 c4 10             	add    $0x10,%esp
-80105345:	85 c0                	test   %eax,%eax
-80105347:	89 c6                	mov    %eax,%esi
-80105349:	0f 84 b2 00 00 00    	je     80105401 <sys_open+0x111>
+80105c17:	83 ec 0c             	sub    $0xc,%esp
+80105c1a:	ff 75 e0             	pushl  -0x20(%ebp)
+80105c1d:	e8 be c2 ff ff       	call   80101ee0 <namei>
+80105c22:	83 c4 10             	add    $0x10,%esp
+80105c25:	85 c0                	test   %eax,%eax
+80105c27:	89 c6                	mov    %eax,%esi
+80105c29:	0f 84 b2 00 00 00    	je     80105ce1 <sys_open+0x111>
       end_op();
       return -1;
     }
     ilock(ip);
-8010534f:	83 ec 0c             	sub    $0xc,%esp
-80105352:	50                   	push   %eax
-80105353:	e8 28 c3 ff ff       	call   80101680 <ilock>
+80105c2f:	83 ec 0c             	sub    $0xc,%esp
+80105c32:	50                   	push   %eax
+80105c33:	e8 48 ba ff ff       	call   80101680 <ilock>
     if(ip->type == T_DIR && omode != O_RDONLY){
-80105358:	83 c4 10             	add    $0x10,%esp
-8010535b:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
-80105360:	0f 84 aa 00 00 00    	je     80105410 <sys_open+0x120>
+80105c38:	83 c4 10             	add    $0x10,%esp
+80105c3b:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
+80105c40:	0f 84 aa 00 00 00    	je     80105cf0 <sys_open+0x120>
       end_op();
       return -1;
     }
   }
 
   if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
-80105366:	e8 15 ba ff ff       	call   80100d80 <filealloc>
-8010536b:	85 c0                	test   %eax,%eax
-8010536d:	89 c7                	mov    %eax,%edi
-8010536f:	0f 84 a6 00 00 00    	je     8010541b <sys_open+0x12b>
+80105c46:	e8 35 b1 ff ff       	call   80100d80 <filealloc>
+80105c4b:	85 c0                	test   %eax,%eax
+80105c4d:	89 c7                	mov    %eax,%edi
+80105c4f:	0f 84 a6 00 00 00    	je     80105cfb <sys_open+0x12b>
   struct proc *curproc = myproc();
-80105375:	e8 66 e4 ff ff       	call   801037e0 <myproc>
+80105c55:	e8 f6 e1 ff ff       	call   80103e50 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-8010537a:	31 db                	xor    %ebx,%ebx
-8010537c:	eb 0e                	jmp    8010538c <sys_open+0x9c>
-8010537e:	66 90                	xchg   %ax,%ax
-80105380:	83 c3 01             	add    $0x1,%ebx
-80105383:	83 fb 10             	cmp    $0x10,%ebx
-80105386:	0f 84 ac 00 00 00    	je     80105438 <sys_open+0x148>
+80105c5a:	31 db                	xor    %ebx,%ebx
+80105c5c:	eb 0e                	jmp    80105c6c <sys_open+0x9c>
+80105c5e:	66 90                	xchg   %ax,%ax
+80105c60:	83 c3 01             	add    $0x1,%ebx
+80105c63:	83 fb 10             	cmp    $0x10,%ebx
+80105c66:	0f 84 ac 00 00 00    	je     80105d18 <sys_open+0x148>
     if(curproc->ofile[fd] == 0){
-8010538c:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
-80105390:	85 d2                	test   %edx,%edx
-80105392:	75 ec                	jne    80105380 <sys_open+0x90>
+80105c6c:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
+80105c70:	85 d2                	test   %edx,%edx
+80105c72:	75 ec                	jne    80105c60 <sys_open+0x90>
       fileclose(f);
     iunlockput(ip);
     end_op();
     return -1;
   }
   iunlock(ip);
-80105394:	83 ec 0c             	sub    $0xc,%esp
+80105c74:	83 ec 0c             	sub    $0xc,%esp
       curproc->ofile[fd] = f;
-80105397:	89 7c 98 28          	mov    %edi,0x28(%eax,%ebx,4)
+80105c77:	89 7c 98 28          	mov    %edi,0x28(%eax,%ebx,4)
   iunlock(ip);
-8010539b:	56                   	push   %esi
-8010539c:	e8 bf c3 ff ff       	call   80101760 <iunlock>
+80105c7b:	56                   	push   %esi
+80105c7c:	e8 df ba ff ff       	call   80101760 <iunlock>
   end_op();
-801053a1:	e8 6a d8 ff ff       	call   80102c10 <end_op>
+80105c81:	e8 0a d0 ff ff       	call   80102c90 <end_op>
 
   f->type = FD_INODE;
-801053a6:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
+80105c86:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
   f->ip = ip;
   f->off = 0;
   f->readable = !(omode & O_WRONLY);
-801053ac:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80105c8c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-801053af:	83 c4 10             	add    $0x10,%esp
+80105c8f:	83 c4 10             	add    $0x10,%esp
   f->ip = ip;
-801053b2:	89 77 10             	mov    %esi,0x10(%edi)
+80105c92:	89 77 10             	mov    %esi,0x10(%edi)
   f->off = 0;
-801053b5:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)
+80105c95:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)
   f->readable = !(omode & O_WRONLY);
-801053bc:	89 d0                	mov    %edx,%eax
-801053be:	f7 d0                	not    %eax
-801053c0:	83 e0 01             	and    $0x1,%eax
+80105c9c:	89 d0                	mov    %edx,%eax
+80105c9e:	f7 d0                	not    %eax
+80105ca0:	83 e0 01             	and    $0x1,%eax
   f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-801053c3:	83 e2 03             	and    $0x3,%edx
+80105ca3:	83 e2 03             	and    $0x3,%edx
   f->readable = !(omode & O_WRONLY);
-801053c6:	88 47 08             	mov    %al,0x8(%edi)
+80105ca6:	88 47 08             	mov    %al,0x8(%edi)
   f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-801053c9:	0f 95 47 09          	setne  0x9(%edi)
+80105ca9:	0f 95 47 09          	setne  0x9(%edi)
   return fd;
 }
-801053cd:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801053d0:	89 d8                	mov    %ebx,%eax
-801053d2:	5b                   	pop    %ebx
-801053d3:	5e                   	pop    %esi
-801053d4:	5f                   	pop    %edi
-801053d5:	5d                   	pop    %ebp
-801053d6:	c3                   	ret    
-801053d7:	89 f6                	mov    %esi,%esi
-801053d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80105cad:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105cb0:	89 d8                	mov    %ebx,%eax
+80105cb2:	5b                   	pop    %ebx
+80105cb3:	5e                   	pop    %esi
+80105cb4:	5f                   	pop    %edi
+80105cb5:	5d                   	pop    %ebp
+80105cb6:	c3                   	ret    
+80105cb7:	89 f6                	mov    %esi,%esi
+80105cb9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
     ip = create(path, T_FILE, 0, 0);
-801053e0:	83 ec 0c             	sub    $0xc,%esp
-801053e3:	8b 45 e0             	mov    -0x20(%ebp),%eax
-801053e6:	31 c9                	xor    %ecx,%ecx
-801053e8:	6a 00                	push   $0x0
-801053ea:	ba 02 00 00 00       	mov    $0x2,%edx
-801053ef:	e8 ec f7 ff ff       	call   80104be0 <create>
+80105cc0:	83 ec 0c             	sub    $0xc,%esp
+80105cc3:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80105cc6:	31 c9                	xor    %ecx,%ecx
+80105cc8:	6a 00                	push   $0x0
+80105cca:	ba 02 00 00 00       	mov    $0x2,%edx
+80105ccf:	e8 ec f7 ff ff       	call   801054c0 <create>
     if(ip == 0){
-801053f4:	83 c4 10             	add    $0x10,%esp
-801053f7:	85 c0                	test   %eax,%eax
+80105cd4:	83 c4 10             	add    $0x10,%esp
+80105cd7:	85 c0                	test   %eax,%eax
     ip = create(path, T_FILE, 0, 0);
-801053f9:	89 c6                	mov    %eax,%esi
+80105cd9:	89 c6                	mov    %eax,%esi
     if(ip == 0){
-801053fb:	0f 85 65 ff ff ff    	jne    80105366 <sys_open+0x76>
+80105cdb:	0f 85 65 ff ff ff    	jne    80105c46 <sys_open+0x76>
       end_op();
-80105401:	e8 0a d8 ff ff       	call   80102c10 <end_op>
+80105ce1:	e8 aa cf ff ff       	call   80102c90 <end_op>
       return -1;
-80105406:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-8010540b:	eb c0                	jmp    801053cd <sys_open+0xdd>
-8010540d:	8d 76 00             	lea    0x0(%esi),%esi
+80105ce6:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80105ceb:	eb c0                	jmp    80105cad <sys_open+0xdd>
+80105ced:	8d 76 00             	lea    0x0(%esi),%esi
     if(ip->type == T_DIR && omode != O_RDONLY){
-80105410:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-80105413:	85 c9                	test   %ecx,%ecx
-80105415:	0f 84 4b ff ff ff    	je     80105366 <sys_open+0x76>
+80105cf0:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80105cf3:	85 c9                	test   %ecx,%ecx
+80105cf5:	0f 84 4b ff ff ff    	je     80105c46 <sys_open+0x76>
     iunlockput(ip);
-8010541b:	83 ec 0c             	sub    $0xc,%esp
-8010541e:	56                   	push   %esi
-8010541f:	e8 ec c4 ff ff       	call   80101910 <iunlockput>
+80105cfb:	83 ec 0c             	sub    $0xc,%esp
+80105cfe:	56                   	push   %esi
+80105cff:	e8 0c bc ff ff       	call   80101910 <iunlockput>
     end_op();
-80105424:	e8 e7 d7 ff ff       	call   80102c10 <end_op>
+80105d04:	e8 87 cf ff ff       	call   80102c90 <end_op>
     return -1;
-80105429:	83 c4 10             	add    $0x10,%esp
-8010542c:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80105431:	eb 9a                	jmp    801053cd <sys_open+0xdd>
-80105433:	90                   	nop
-80105434:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105d09:	83 c4 10             	add    $0x10,%esp
+80105d0c:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80105d11:	eb 9a                	jmp    80105cad <sys_open+0xdd>
+80105d13:	90                   	nop
+80105d14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       fileclose(f);
-80105438:	83 ec 0c             	sub    $0xc,%esp
-8010543b:	57                   	push   %edi
-8010543c:	e8 ff b9 ff ff       	call   80100e40 <fileclose>
-80105441:	83 c4 10             	add    $0x10,%esp
-80105444:	eb d5                	jmp    8010541b <sys_open+0x12b>
-80105446:	8d 76 00             	lea    0x0(%esi),%esi
-80105449:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80105d18:	83 ec 0c             	sub    $0xc,%esp
+80105d1b:	57                   	push   %edi
+80105d1c:	e8 1f b1 ff ff       	call   80100e40 <fileclose>
+80105d21:	83 c4 10             	add    $0x10,%esp
+80105d24:	eb d5                	jmp    80105cfb <sys_open+0x12b>
+80105d26:	8d 76 00             	lea    0x0(%esi),%esi
+80105d29:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80105450 <sys_mkdir>:
+80105d30 <sys_mkdir>:
 
 int
 sys_mkdir(void)
 {
-80105450:	55                   	push   %ebp
-80105451:	89 e5                	mov    %esp,%ebp
-80105453:	83 ec 18             	sub    $0x18,%esp
+80105d30:	55                   	push   %ebp
+80105d31:	89 e5                	mov    %esp,%ebp
+80105d33:	83 ec 18             	sub    $0x18,%esp
   char *path;
   struct inode *ip;
 
   begin_op();
-80105456:	e8 45 d7 ff ff       	call   80102ba0 <begin_op>
+80105d36:	e8 e5 ce ff ff       	call   80102c20 <begin_op>
   if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
-8010545b:	8d 45 f4             	lea    -0xc(%ebp),%eax
-8010545e:	83 ec 08             	sub    $0x8,%esp
-80105461:	50                   	push   %eax
-80105462:	6a 00                	push   $0x0
-80105464:	e8 d7 f6 ff ff       	call   80104b40 <argstr>
-80105469:	83 c4 10             	add    $0x10,%esp
-8010546c:	85 c0                	test   %eax,%eax
-8010546e:	78 30                	js     801054a0 <sys_mkdir+0x50>
-80105470:	83 ec 0c             	sub    $0xc,%esp
-80105473:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105476:	31 c9                	xor    %ecx,%ecx
-80105478:	6a 00                	push   $0x0
-8010547a:	ba 01 00 00 00       	mov    $0x1,%edx
-8010547f:	e8 5c f7 ff ff       	call   80104be0 <create>
-80105484:	83 c4 10             	add    $0x10,%esp
-80105487:	85 c0                	test   %eax,%eax
-80105489:	74 15                	je     801054a0 <sys_mkdir+0x50>
+80105d3b:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105d3e:	83 ec 08             	sub    $0x8,%esp
+80105d41:	50                   	push   %eax
+80105d42:	6a 00                	push   $0x0
+80105d44:	e8 d7 f6 ff ff       	call   80105420 <argstr>
+80105d49:	83 c4 10             	add    $0x10,%esp
+80105d4c:	85 c0                	test   %eax,%eax
+80105d4e:	78 30                	js     80105d80 <sys_mkdir+0x50>
+80105d50:	83 ec 0c             	sub    $0xc,%esp
+80105d53:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80105d56:	31 c9                	xor    %ecx,%ecx
+80105d58:	6a 00                	push   $0x0
+80105d5a:	ba 01 00 00 00       	mov    $0x1,%edx
+80105d5f:	e8 5c f7 ff ff       	call   801054c0 <create>
+80105d64:	83 c4 10             	add    $0x10,%esp
+80105d67:	85 c0                	test   %eax,%eax
+80105d69:	74 15                	je     80105d80 <sys_mkdir+0x50>
     end_op();
     return -1;
   }
   iunlockput(ip);
-8010548b:	83 ec 0c             	sub    $0xc,%esp
-8010548e:	50                   	push   %eax
-8010548f:	e8 7c c4 ff ff       	call   80101910 <iunlockput>
+80105d6b:	83 ec 0c             	sub    $0xc,%esp
+80105d6e:	50                   	push   %eax
+80105d6f:	e8 9c bb ff ff       	call   80101910 <iunlockput>
   end_op();
-80105494:	e8 77 d7 ff ff       	call   80102c10 <end_op>
+80105d74:	e8 17 cf ff ff       	call   80102c90 <end_op>
   return 0;
-80105499:	83 c4 10             	add    $0x10,%esp
-8010549c:	31 c0                	xor    %eax,%eax
+80105d79:	83 c4 10             	add    $0x10,%esp
+80105d7c:	31 c0                	xor    %eax,%eax
 }
-8010549e:	c9                   	leave  
-8010549f:	c3                   	ret    
+80105d7e:	c9                   	leave  
+80105d7f:	c3                   	ret    
     end_op();
-801054a0:	e8 6b d7 ff ff       	call   80102c10 <end_op>
+80105d80:	e8 0b cf ff ff       	call   80102c90 <end_op>
     return -1;
-801054a5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105d85:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-801054aa:	c9                   	leave  
-801054ab:	c3                   	ret    
-801054ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105d8a:	c9                   	leave  
+80105d8b:	c3                   	ret    
+80105d8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-801054b0 <sys_mknod>:
+80105d90 <sys_mknod>:
 
 int
 sys_mknod(void)
 {
-801054b0:	55                   	push   %ebp
-801054b1:	89 e5                	mov    %esp,%ebp
-801054b3:	83 ec 18             	sub    $0x18,%esp
+80105d90:	55                   	push   %ebp
+80105d91:	89 e5                	mov    %esp,%ebp
+80105d93:	83 ec 18             	sub    $0x18,%esp
   struct inode *ip;
   char *path;
   int major, minor;
 
   begin_op();
-801054b6:	e8 e5 d6 ff ff       	call   80102ba0 <begin_op>
+80105d96:	e8 85 ce ff ff       	call   80102c20 <begin_op>
   if((argstr(0, &path)) < 0 ||
-801054bb:	8d 45 ec             	lea    -0x14(%ebp),%eax
-801054be:	83 ec 08             	sub    $0x8,%esp
-801054c1:	50                   	push   %eax
-801054c2:	6a 00                	push   $0x0
-801054c4:	e8 77 f6 ff ff       	call   80104b40 <argstr>
-801054c9:	83 c4 10             	add    $0x10,%esp
-801054cc:	85 c0                	test   %eax,%eax
-801054ce:	78 60                	js     80105530 <sys_mknod+0x80>
+80105d9b:	8d 45 ec             	lea    -0x14(%ebp),%eax
+80105d9e:	83 ec 08             	sub    $0x8,%esp
+80105da1:	50                   	push   %eax
+80105da2:	6a 00                	push   $0x0
+80105da4:	e8 77 f6 ff ff       	call   80105420 <argstr>
+80105da9:	83 c4 10             	add    $0x10,%esp
+80105dac:	85 c0                	test   %eax,%eax
+80105dae:	78 60                	js     80105e10 <sys_mknod+0x80>
      argint(1, &major) < 0 ||
-801054d0:	8d 45 f0             	lea    -0x10(%ebp),%eax
-801054d3:	83 ec 08             	sub    $0x8,%esp
-801054d6:	50                   	push   %eax
-801054d7:	6a 01                	push   $0x1
-801054d9:	e8 b2 f5 ff ff       	call   80104a90 <argint>
+80105db0:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80105db3:	83 ec 08             	sub    $0x8,%esp
+80105db6:	50                   	push   %eax
+80105db7:	6a 01                	push   $0x1
+80105db9:	e8 b2 f5 ff ff       	call   80105370 <argint>
   if((argstr(0, &path)) < 0 ||
-801054de:	83 c4 10             	add    $0x10,%esp
-801054e1:	85 c0                	test   %eax,%eax
-801054e3:	78 4b                	js     80105530 <sys_mknod+0x80>
+80105dbe:	83 c4 10             	add    $0x10,%esp
+80105dc1:	85 c0                	test   %eax,%eax
+80105dc3:	78 4b                	js     80105e10 <sys_mknod+0x80>
      argint(2, &minor) < 0 ||
-801054e5:	8d 45 f4             	lea    -0xc(%ebp),%eax
-801054e8:	83 ec 08             	sub    $0x8,%esp
-801054eb:	50                   	push   %eax
-801054ec:	6a 02                	push   $0x2
-801054ee:	e8 9d f5 ff ff       	call   80104a90 <argint>
+80105dc5:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105dc8:	83 ec 08             	sub    $0x8,%esp
+80105dcb:	50                   	push   %eax
+80105dcc:	6a 02                	push   $0x2
+80105dce:	e8 9d f5 ff ff       	call   80105370 <argint>
      argint(1, &major) < 0 ||
-801054f3:	83 c4 10             	add    $0x10,%esp
-801054f6:	85 c0                	test   %eax,%eax
-801054f8:	78 36                	js     80105530 <sys_mknod+0x80>
+80105dd3:	83 c4 10             	add    $0x10,%esp
+80105dd6:	85 c0                	test   %eax,%eax
+80105dd8:	78 36                	js     80105e10 <sys_mknod+0x80>
      (ip = create(path, T_DEV, major, minor)) == 0){
-801054fa:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
+80105dda:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
      argint(2, &minor) < 0 ||
-801054fe:	83 ec 0c             	sub    $0xc,%esp
+80105dde:	83 ec 0c             	sub    $0xc,%esp
      (ip = create(path, T_DEV, major, minor)) == 0){
-80105501:	0f bf 4d f0          	movswl -0x10(%ebp),%ecx
+80105de1:	0f bf 4d f0          	movswl -0x10(%ebp),%ecx
      argint(2, &minor) < 0 ||
-80105505:	ba 03 00 00 00       	mov    $0x3,%edx
-8010550a:	50                   	push   %eax
-8010550b:	8b 45 ec             	mov    -0x14(%ebp),%eax
-8010550e:	e8 cd f6 ff ff       	call   80104be0 <create>
-80105513:	83 c4 10             	add    $0x10,%esp
-80105516:	85 c0                	test   %eax,%eax
-80105518:	74 16                	je     80105530 <sys_mknod+0x80>
+80105de5:	ba 03 00 00 00       	mov    $0x3,%edx
+80105dea:	50                   	push   %eax
+80105deb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80105dee:	e8 cd f6 ff ff       	call   801054c0 <create>
+80105df3:	83 c4 10             	add    $0x10,%esp
+80105df6:	85 c0                	test   %eax,%eax
+80105df8:	74 16                	je     80105e10 <sys_mknod+0x80>
     end_op();
     return -1;
   }
   iunlockput(ip);
-8010551a:	83 ec 0c             	sub    $0xc,%esp
-8010551d:	50                   	push   %eax
-8010551e:	e8 ed c3 ff ff       	call   80101910 <iunlockput>
+80105dfa:	83 ec 0c             	sub    $0xc,%esp
+80105dfd:	50                   	push   %eax
+80105dfe:	e8 0d bb ff ff       	call   80101910 <iunlockput>
   end_op();
-80105523:	e8 e8 d6 ff ff       	call   80102c10 <end_op>
+80105e03:	e8 88 ce ff ff       	call   80102c90 <end_op>
   return 0;
-80105528:	83 c4 10             	add    $0x10,%esp
-8010552b:	31 c0                	xor    %eax,%eax
+80105e08:	83 c4 10             	add    $0x10,%esp
+80105e0b:	31 c0                	xor    %eax,%eax
 }
-8010552d:	c9                   	leave  
-8010552e:	c3                   	ret    
-8010552f:	90                   	nop
+80105e0d:	c9                   	leave  
+80105e0e:	c3                   	ret    
+80105e0f:	90                   	nop
     end_op();
-80105530:	e8 db d6 ff ff       	call   80102c10 <end_op>
+80105e10:	e8 7b ce ff ff       	call   80102c90 <end_op>
     return -1;
-80105535:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105e15:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-8010553a:	c9                   	leave  
-8010553b:	c3                   	ret    
-8010553c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105e1a:	c9                   	leave  
+80105e1b:	c3                   	ret    
+80105e1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80105540 <sys_chdir>:
+80105e20 <sys_chdir>:
 
 int
 sys_chdir(void)
 {
-80105540:	55                   	push   %ebp
-80105541:	89 e5                	mov    %esp,%ebp
-80105543:	56                   	push   %esi
-80105544:	53                   	push   %ebx
-80105545:	83 ec 10             	sub    $0x10,%esp
+80105e20:	55                   	push   %ebp
+80105e21:	89 e5                	mov    %esp,%ebp
+80105e23:	56                   	push   %esi
+80105e24:	53                   	push   %ebx
+80105e25:	83 ec 10             	sub    $0x10,%esp
   char *path;
   struct inode *ip;
   struct proc *curproc = myproc();
-80105548:	e8 93 e2 ff ff       	call   801037e0 <myproc>
-8010554d:	89 c6                	mov    %eax,%esi
+80105e28:	e8 23 e0 ff ff       	call   80103e50 <myproc>
+80105e2d:	89 c6                	mov    %eax,%esi
   
   begin_op();
-8010554f:	e8 4c d6 ff ff       	call   80102ba0 <begin_op>
+80105e2f:	e8 ec cd ff ff       	call   80102c20 <begin_op>
   if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
-80105554:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80105557:	83 ec 08             	sub    $0x8,%esp
-8010555a:	50                   	push   %eax
-8010555b:	6a 00                	push   $0x0
-8010555d:	e8 de f5 ff ff       	call   80104b40 <argstr>
-80105562:	83 c4 10             	add    $0x10,%esp
-80105565:	85 c0                	test   %eax,%eax
-80105567:	78 77                	js     801055e0 <sys_chdir+0xa0>
-80105569:	83 ec 0c             	sub    $0xc,%esp
-8010556c:	ff 75 f4             	pushl  -0xc(%ebp)
-8010556f:	e8 6c c9 ff ff       	call   80101ee0 <namei>
-80105574:	83 c4 10             	add    $0x10,%esp
-80105577:	85 c0                	test   %eax,%eax
-80105579:	89 c3                	mov    %eax,%ebx
-8010557b:	74 63                	je     801055e0 <sys_chdir+0xa0>
+80105e34:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105e37:	83 ec 08             	sub    $0x8,%esp
+80105e3a:	50                   	push   %eax
+80105e3b:	6a 00                	push   $0x0
+80105e3d:	e8 de f5 ff ff       	call   80105420 <argstr>
+80105e42:	83 c4 10             	add    $0x10,%esp
+80105e45:	85 c0                	test   %eax,%eax
+80105e47:	78 77                	js     80105ec0 <sys_chdir+0xa0>
+80105e49:	83 ec 0c             	sub    $0xc,%esp
+80105e4c:	ff 75 f4             	pushl  -0xc(%ebp)
+80105e4f:	e8 8c c0 ff ff       	call   80101ee0 <namei>
+80105e54:	83 c4 10             	add    $0x10,%esp
+80105e57:	85 c0                	test   %eax,%eax
+80105e59:	89 c3                	mov    %eax,%ebx
+80105e5b:	74 63                	je     80105ec0 <sys_chdir+0xa0>
     end_op();
     return -1;
   }
   ilock(ip);
-8010557d:	83 ec 0c             	sub    $0xc,%esp
-80105580:	50                   	push   %eax
-80105581:	e8 fa c0 ff ff       	call   80101680 <ilock>
+80105e5d:	83 ec 0c             	sub    $0xc,%esp
+80105e60:	50                   	push   %eax
+80105e61:	e8 1a b8 ff ff       	call   80101680 <ilock>
   if(ip->type != T_DIR){
-80105586:	83 c4 10             	add    $0x10,%esp
-80105589:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-8010558e:	75 30                	jne    801055c0 <sys_chdir+0x80>
+80105e66:	83 c4 10             	add    $0x10,%esp
+80105e69:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80105e6e:	75 30                	jne    80105ea0 <sys_chdir+0x80>
     iunlockput(ip);
     end_op();
     return -1;
   }
   iunlock(ip);
-80105590:	83 ec 0c             	sub    $0xc,%esp
-80105593:	53                   	push   %ebx
-80105594:	e8 c7 c1 ff ff       	call   80101760 <iunlock>
+80105e70:	83 ec 0c             	sub    $0xc,%esp
+80105e73:	53                   	push   %ebx
+80105e74:	e8 e7 b8 ff ff       	call   80101760 <iunlock>
   iput(curproc->cwd);
-80105599:	58                   	pop    %eax
-8010559a:	ff 76 68             	pushl  0x68(%esi)
-8010559d:	e8 0e c2 ff ff       	call   801017b0 <iput>
+80105e79:	58                   	pop    %eax
+80105e7a:	ff 76 68             	pushl  0x68(%esi)
+80105e7d:	e8 2e b9 ff ff       	call   801017b0 <iput>
   end_op();
-801055a2:	e8 69 d6 ff ff       	call   80102c10 <end_op>
+80105e82:	e8 09 ce ff ff       	call   80102c90 <end_op>
   curproc->cwd = ip;
-801055a7:	89 5e 68             	mov    %ebx,0x68(%esi)
+80105e87:	89 5e 68             	mov    %ebx,0x68(%esi)
   return 0;
-801055aa:	83 c4 10             	add    $0x10,%esp
-801055ad:	31 c0                	xor    %eax,%eax
+80105e8a:	83 c4 10             	add    $0x10,%esp
+80105e8d:	31 c0                	xor    %eax,%eax
 }
-801055af:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801055b2:	5b                   	pop    %ebx
-801055b3:	5e                   	pop    %esi
-801055b4:	5d                   	pop    %ebp
-801055b5:	c3                   	ret    
-801055b6:	8d 76 00             	lea    0x0(%esi),%esi
-801055b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80105e8f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105e92:	5b                   	pop    %ebx
+80105e93:	5e                   	pop    %esi
+80105e94:	5d                   	pop    %ebp
+80105e95:	c3                   	ret    
+80105e96:	8d 76 00             	lea    0x0(%esi),%esi
+80105e99:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
     iunlockput(ip);
-801055c0:	83 ec 0c             	sub    $0xc,%esp
-801055c3:	53                   	push   %ebx
-801055c4:	e8 47 c3 ff ff       	call   80101910 <iunlockput>
+80105ea0:	83 ec 0c             	sub    $0xc,%esp
+80105ea3:	53                   	push   %ebx
+80105ea4:	e8 67 ba ff ff       	call   80101910 <iunlockput>
     end_op();
-801055c9:	e8 42 d6 ff ff       	call   80102c10 <end_op>
+80105ea9:	e8 e2 cd ff ff       	call   80102c90 <end_op>
     return -1;
-801055ce:	83 c4 10             	add    $0x10,%esp
-801055d1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801055d6:	eb d7                	jmp    801055af <sys_chdir+0x6f>
-801055d8:	90                   	nop
-801055d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105eae:	83 c4 10             	add    $0x10,%esp
+80105eb1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105eb6:	eb d7                	jmp    80105e8f <sys_chdir+0x6f>
+80105eb8:	90                   	nop
+80105eb9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     end_op();
-801055e0:	e8 2b d6 ff ff       	call   80102c10 <end_op>
+80105ec0:	e8 cb cd ff ff       	call   80102c90 <end_op>
     return -1;
-801055e5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801055ea:	eb c3                	jmp    801055af <sys_chdir+0x6f>
-801055ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105ec5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105eca:	eb c3                	jmp    80105e8f <sys_chdir+0x6f>
+80105ecc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-801055f0 <sys_exec>:
+80105ed0 <sys_exec>:
 
 int
 sys_exec(void)
 {
-801055f0:	55                   	push   %ebp
-801055f1:	89 e5                	mov    %esp,%ebp
-801055f3:	57                   	push   %edi
-801055f4:	56                   	push   %esi
-801055f5:	53                   	push   %ebx
+80105ed0:	55                   	push   %ebp
+80105ed1:	89 e5                	mov    %esp,%ebp
+80105ed3:	57                   	push   %edi
+80105ed4:	56                   	push   %esi
+80105ed5:	53                   	push   %ebx
   char *path, *argv[MAXARG];
   int i;
   uint uargv, uarg;
 
   if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
-801055f6:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
+80105ed6:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
 {
-801055fc:	81 ec a4 00 00 00    	sub    $0xa4,%esp
+80105edc:	81 ec a4 00 00 00    	sub    $0xa4,%esp
   if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
-80105602:	50                   	push   %eax
-80105603:	6a 00                	push   $0x0
-80105605:	e8 36 f5 ff ff       	call   80104b40 <argstr>
-8010560a:	83 c4 10             	add    $0x10,%esp
-8010560d:	85 c0                	test   %eax,%eax
-8010560f:	0f 88 87 00 00 00    	js     8010569c <sys_exec+0xac>
-80105615:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
-8010561b:	83 ec 08             	sub    $0x8,%esp
-8010561e:	50                   	push   %eax
-8010561f:	6a 01                	push   $0x1
-80105621:	e8 6a f4 ff ff       	call   80104a90 <argint>
-80105626:	83 c4 10             	add    $0x10,%esp
-80105629:	85 c0                	test   %eax,%eax
-8010562b:	78 6f                	js     8010569c <sys_exec+0xac>
+80105ee2:	50                   	push   %eax
+80105ee3:	6a 00                	push   $0x0
+80105ee5:	e8 36 f5 ff ff       	call   80105420 <argstr>
+80105eea:	83 c4 10             	add    $0x10,%esp
+80105eed:	85 c0                	test   %eax,%eax
+80105eef:	0f 88 87 00 00 00    	js     80105f7c <sys_exec+0xac>
+80105ef5:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
+80105efb:	83 ec 08             	sub    $0x8,%esp
+80105efe:	50                   	push   %eax
+80105eff:	6a 01                	push   $0x1
+80105f01:	e8 6a f4 ff ff       	call   80105370 <argint>
+80105f06:	83 c4 10             	add    $0x10,%esp
+80105f09:	85 c0                	test   %eax,%eax
+80105f0b:	78 6f                	js     80105f7c <sys_exec+0xac>
     return -1;
   }
   memset(argv, 0, sizeof(argv));
-8010562d:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
-80105633:	83 ec 04             	sub    $0x4,%esp
+80105f0d:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
+80105f13:	83 ec 04             	sub    $0x4,%esp
   for(i=0;; i++){
-80105636:	31 db                	xor    %ebx,%ebx
+80105f16:	31 db                	xor    %ebx,%ebx
   memset(argv, 0, sizeof(argv));
-80105638:	68 80 00 00 00       	push   $0x80
-8010563d:	6a 00                	push   $0x0
-8010563f:	8d bd 64 ff ff ff    	lea    -0x9c(%ebp),%edi
-80105645:	50                   	push   %eax
-80105646:	e8 45 f1 ff ff       	call   80104790 <memset>
-8010564b:	83 c4 10             	add    $0x10,%esp
-8010564e:	eb 2c                	jmp    8010567c <sys_exec+0x8c>
+80105f18:	68 80 00 00 00       	push   $0x80
+80105f1d:	6a 00                	push   $0x0
+80105f1f:	8d bd 64 ff ff ff    	lea    -0x9c(%ebp),%edi
+80105f25:	50                   	push   %eax
+80105f26:	e8 45 f1 ff ff       	call   80105070 <memset>
+80105f2b:	83 c4 10             	add    $0x10,%esp
+80105f2e:	eb 2c                	jmp    80105f5c <sys_exec+0x8c>
     if(i >= NELEM(argv))
       return -1;
     if(fetchint(uargv+4*i, (int*)&uarg) < 0)
       return -1;
     if(uarg == 0){
-80105650:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
-80105656:	85 c0                	test   %eax,%eax
-80105658:	74 56                	je     801056b0 <sys_exec+0xc0>
+80105f30:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
+80105f36:	85 c0                	test   %eax,%eax
+80105f38:	74 56                	je     80105f90 <sys_exec+0xc0>
       argv[i] = 0;
       break;
     }
     if(fetchstr(uarg, &argv[i]) < 0)
-8010565a:	8d 8d 68 ff ff ff    	lea    -0x98(%ebp),%ecx
-80105660:	83 ec 08             	sub    $0x8,%esp
-80105663:	8d 14 31             	lea    (%ecx,%esi,1),%edx
-80105666:	52                   	push   %edx
-80105667:	50                   	push   %eax
-80105668:	e8 b3 f3 ff ff       	call   80104a20 <fetchstr>
-8010566d:	83 c4 10             	add    $0x10,%esp
-80105670:	85 c0                	test   %eax,%eax
-80105672:	78 28                	js     8010569c <sys_exec+0xac>
+80105f3a:	8d 8d 68 ff ff ff    	lea    -0x98(%ebp),%ecx
+80105f40:	83 ec 08             	sub    $0x8,%esp
+80105f43:	8d 14 31             	lea    (%ecx,%esi,1),%edx
+80105f46:	52                   	push   %edx
+80105f47:	50                   	push   %eax
+80105f48:	e8 b3 f3 ff ff       	call   80105300 <fetchstr>
+80105f4d:	83 c4 10             	add    $0x10,%esp
+80105f50:	85 c0                	test   %eax,%eax
+80105f52:	78 28                	js     80105f7c <sys_exec+0xac>
   for(i=0;; i++){
-80105674:	83 c3 01             	add    $0x1,%ebx
+80105f54:	83 c3 01             	add    $0x1,%ebx
     if(i >= NELEM(argv))
-80105677:	83 fb 20             	cmp    $0x20,%ebx
-8010567a:	74 20                	je     8010569c <sys_exec+0xac>
+80105f57:	83 fb 20             	cmp    $0x20,%ebx
+80105f5a:	74 20                	je     80105f7c <sys_exec+0xac>
     if(fetchint(uargv+4*i, (int*)&uarg) < 0)
-8010567c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
-80105682:	8d 34 9d 00 00 00 00 	lea    0x0(,%ebx,4),%esi
-80105689:	83 ec 08             	sub    $0x8,%esp
-8010568c:	57                   	push   %edi
-8010568d:	01 f0                	add    %esi,%eax
-8010568f:	50                   	push   %eax
-80105690:	e8 4b f3 ff ff       	call   801049e0 <fetchint>
-80105695:	83 c4 10             	add    $0x10,%esp
-80105698:	85 c0                	test   %eax,%eax
-8010569a:	79 b4                	jns    80105650 <sys_exec+0x60>
+80105f5c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
+80105f62:	8d 34 9d 00 00 00 00 	lea    0x0(,%ebx,4),%esi
+80105f69:	83 ec 08             	sub    $0x8,%esp
+80105f6c:	57                   	push   %edi
+80105f6d:	01 f0                	add    %esi,%eax
+80105f6f:	50                   	push   %eax
+80105f70:	e8 4b f3 ff ff       	call   801052c0 <fetchint>
+80105f75:	83 c4 10             	add    $0x10,%esp
+80105f78:	85 c0                	test   %eax,%eax
+80105f7a:	79 b4                	jns    80105f30 <sys_exec+0x60>
       return -1;
   }
   return exec(path, argv);
 }
-8010569c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105f7c:	8d 65 f4             	lea    -0xc(%ebp),%esp
     return -1;
-8010569f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105f7f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-801056a4:	5b                   	pop    %ebx
-801056a5:	5e                   	pop    %esi
-801056a6:	5f                   	pop    %edi
-801056a7:	5d                   	pop    %ebp
-801056a8:	c3                   	ret    
-801056a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105f84:	5b                   	pop    %ebx
+80105f85:	5e                   	pop    %esi
+80105f86:	5f                   	pop    %edi
+80105f87:	5d                   	pop    %ebp
+80105f88:	c3                   	ret    
+80105f89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   return exec(path, argv);
-801056b0:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
-801056b6:	83 ec 08             	sub    $0x8,%esp
+80105f90:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
+80105f96:	83 ec 08             	sub    $0x8,%esp
       argv[i] = 0;
-801056b9:	c7 84 9d 68 ff ff ff 	movl   $0x0,-0x98(%ebp,%ebx,4)
-801056c0:	00 00 00 00 
+80105f99:	c7 84 9d 68 ff ff ff 	movl   $0x0,-0x98(%ebp,%ebx,4)
+80105fa0:	00 00 00 00 
   return exec(path, argv);
-801056c4:	50                   	push   %eax
-801056c5:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
-801056cb:	e8 40 b3 ff ff       	call   80100a10 <exec>
-801056d0:	83 c4 10             	add    $0x10,%esp
-}
-801056d3:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801056d6:	5b                   	pop    %ebx
-801056d7:	5e                   	pop    %esi
-801056d8:	5f                   	pop    %edi
-801056d9:	5d                   	pop    %ebp
-801056da:	c3                   	ret    
-801056db:	90                   	nop
-801056dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105fa4:	50                   	push   %eax
+80105fa5:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
+80105fab:	e8 60 aa ff ff       	call   80100a10 <exec>
+80105fb0:	83 c4 10             	add    $0x10,%esp
+}
+80105fb3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105fb6:	5b                   	pop    %ebx
+80105fb7:	5e                   	pop    %esi
+80105fb8:	5f                   	pop    %edi
+80105fb9:	5d                   	pop    %ebp
+80105fba:	c3                   	ret    
+80105fbb:	90                   	nop
+80105fbc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-801056e0 <sys_pipe>:
+80105fc0 <sys_pipe>:
 
 int
 sys_pipe(void)
 {
-801056e0:	55                   	push   %ebp
-801056e1:	89 e5                	mov    %esp,%ebp
-801056e3:	57                   	push   %edi
-801056e4:	56                   	push   %esi
-801056e5:	53                   	push   %ebx
+80105fc0:	55                   	push   %ebp
+80105fc1:	89 e5                	mov    %esp,%ebp
+80105fc3:	57                   	push   %edi
+80105fc4:	56                   	push   %esi
+80105fc5:	53                   	push   %ebx
   int *fd;
   struct file *rf, *wf;
   int fd0, fd1;
 
   if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
-801056e6:	8d 45 dc             	lea    -0x24(%ebp),%eax
+80105fc6:	8d 45 dc             	lea    -0x24(%ebp),%eax
 {
-801056e9:	83 ec 20             	sub    $0x20,%esp
+80105fc9:	83 ec 20             	sub    $0x20,%esp
   if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
-801056ec:	6a 08                	push   $0x8
-801056ee:	50                   	push   %eax
-801056ef:	6a 00                	push   $0x0
-801056f1:	e8 ea f3 ff ff       	call   80104ae0 <argptr>
-801056f6:	83 c4 10             	add    $0x10,%esp
-801056f9:	85 c0                	test   %eax,%eax
-801056fb:	0f 88 ae 00 00 00    	js     801057af <sys_pipe+0xcf>
+80105fcc:	6a 08                	push   $0x8
+80105fce:	50                   	push   %eax
+80105fcf:	6a 00                	push   $0x0
+80105fd1:	e8 ea f3 ff ff       	call   801053c0 <argptr>
+80105fd6:	83 c4 10             	add    $0x10,%esp
+80105fd9:	85 c0                	test   %eax,%eax
+80105fdb:	0f 88 ae 00 00 00    	js     8010608f <sys_pipe+0xcf>
     return -1;
   if(pipealloc(&rf, &wf) < 0)
-80105701:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-80105704:	83 ec 08             	sub    $0x8,%esp
-80105707:	50                   	push   %eax
-80105708:	8d 45 e0             	lea    -0x20(%ebp),%eax
-8010570b:	50                   	push   %eax
-8010570c:	e8 2f db ff ff       	call   80103240 <pipealloc>
-80105711:	83 c4 10             	add    $0x10,%esp
-80105714:	85 c0                	test   %eax,%eax
-80105716:	0f 88 93 00 00 00    	js     801057af <sys_pipe+0xcf>
+80105fe1:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+80105fe4:	83 ec 08             	sub    $0x8,%esp
+80105fe7:	50                   	push   %eax
+80105fe8:	8d 45 e0             	lea    -0x20(%ebp),%eax
+80105feb:	50                   	push   %eax
+80105fec:	e8 cf d2 ff ff       	call   801032c0 <pipealloc>
+80105ff1:	83 c4 10             	add    $0x10,%esp
+80105ff4:	85 c0                	test   %eax,%eax
+80105ff6:	0f 88 93 00 00 00    	js     8010608f <sys_pipe+0xcf>
     return -1;
   fd0 = -1;
   if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
-8010571c:	8b 7d e0             	mov    -0x20(%ebp),%edi
+80105ffc:	8b 7d e0             	mov    -0x20(%ebp),%edi
   for(fd = 0; fd < NOFILE; fd++){
-8010571f:	31 db                	xor    %ebx,%ebx
+80105fff:	31 db                	xor    %ebx,%ebx
   struct proc *curproc = myproc();
-80105721:	e8 ba e0 ff ff       	call   801037e0 <myproc>
-80105726:	eb 10                	jmp    80105738 <sys_pipe+0x58>
-80105728:	90                   	nop
-80105729:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106001:	e8 4a de ff ff       	call   80103e50 <myproc>
+80106006:	eb 10                	jmp    80106018 <sys_pipe+0x58>
+80106008:	90                   	nop
+80106009:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   for(fd = 0; fd < NOFILE; fd++){
-80105730:	83 c3 01             	add    $0x1,%ebx
-80105733:	83 fb 10             	cmp    $0x10,%ebx
-80105736:	74 60                	je     80105798 <sys_pipe+0xb8>
+80106010:	83 c3 01             	add    $0x1,%ebx
+80106013:	83 fb 10             	cmp    $0x10,%ebx
+80106016:	74 60                	je     80106078 <sys_pipe+0xb8>
     if(curproc->ofile[fd] == 0){
-80105738:	8b 74 98 28          	mov    0x28(%eax,%ebx,4),%esi
-8010573c:	85 f6                	test   %esi,%esi
-8010573e:	75 f0                	jne    80105730 <sys_pipe+0x50>
+80106018:	8b 74 98 28          	mov    0x28(%eax,%ebx,4),%esi
+8010601c:	85 f6                	test   %esi,%esi
+8010601e:	75 f0                	jne    80106010 <sys_pipe+0x50>
       curproc->ofile[fd] = f;
-80105740:	8d 73 08             	lea    0x8(%ebx),%esi
-80105743:	89 7c b0 08          	mov    %edi,0x8(%eax,%esi,4)
+80106020:	8d 73 08             	lea    0x8(%ebx),%esi
+80106023:	89 7c b0 08          	mov    %edi,0x8(%eax,%esi,4)
   if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
-80105747:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+80106027:	8b 7d e4             	mov    -0x1c(%ebp),%edi
   struct proc *curproc = myproc();
-8010574a:	e8 91 e0 ff ff       	call   801037e0 <myproc>
+8010602a:	e8 21 de ff ff       	call   80103e50 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-8010574f:	31 d2                	xor    %edx,%edx
-80105751:	eb 0d                	jmp    80105760 <sys_pipe+0x80>
-80105753:	90                   	nop
-80105754:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80105758:	83 c2 01             	add    $0x1,%edx
-8010575b:	83 fa 10             	cmp    $0x10,%edx
-8010575e:	74 28                	je     80105788 <sys_pipe+0xa8>
+8010602f:	31 d2                	xor    %edx,%edx
+80106031:	eb 0d                	jmp    80106040 <sys_pipe+0x80>
+80106033:	90                   	nop
+80106034:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106038:	83 c2 01             	add    $0x1,%edx
+8010603b:	83 fa 10             	cmp    $0x10,%edx
+8010603e:	74 28                	je     80106068 <sys_pipe+0xa8>
     if(curproc->ofile[fd] == 0){
-80105760:	8b 4c 90 28          	mov    0x28(%eax,%edx,4),%ecx
-80105764:	85 c9                	test   %ecx,%ecx
-80105766:	75 f0                	jne    80105758 <sys_pipe+0x78>
+80106040:	8b 4c 90 28          	mov    0x28(%eax,%edx,4),%ecx
+80106044:	85 c9                	test   %ecx,%ecx
+80106046:	75 f0                	jne    80106038 <sys_pipe+0x78>
       curproc->ofile[fd] = f;
-80105768:	89 7c 90 28          	mov    %edi,0x28(%eax,%edx,4)
+80106048:	89 7c 90 28          	mov    %edi,0x28(%eax,%edx,4)
       myproc()->ofile[fd0] = 0;
     fileclose(rf);
     fileclose(wf);
     return -1;
   }
   fd[0] = fd0;
-8010576c:	8b 45 dc             	mov    -0x24(%ebp),%eax
-8010576f:	89 18                	mov    %ebx,(%eax)
+8010604c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+8010604f:	89 18                	mov    %ebx,(%eax)
   fd[1] = fd1;
-80105771:	8b 45 dc             	mov    -0x24(%ebp),%eax
-80105774:	89 50 04             	mov    %edx,0x4(%eax)
+80106051:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80106054:	89 50 04             	mov    %edx,0x4(%eax)
   return 0;
-80105777:	31 c0                	xor    %eax,%eax
+80106057:	31 c0                	xor    %eax,%eax
 }
-80105779:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010577c:	5b                   	pop    %ebx
-8010577d:	5e                   	pop    %esi
-8010577e:	5f                   	pop    %edi
-8010577f:	5d                   	pop    %ebp
-80105780:	c3                   	ret    
-80105781:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106059:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010605c:	5b                   	pop    %ebx
+8010605d:	5e                   	pop    %esi
+8010605e:	5f                   	pop    %edi
+8010605f:	5d                   	pop    %ebp
+80106060:	c3                   	ret    
+80106061:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       myproc()->ofile[fd0] = 0;
-80105788:	e8 53 e0 ff ff       	call   801037e0 <myproc>
-8010578d:	c7 44 b0 08 00 00 00 	movl   $0x0,0x8(%eax,%esi,4)
-80105794:	00 
-80105795:	8d 76 00             	lea    0x0(%esi),%esi
+80106068:	e8 e3 dd ff ff       	call   80103e50 <myproc>
+8010606d:	c7 44 b0 08 00 00 00 	movl   $0x0,0x8(%eax,%esi,4)
+80106074:	00 
+80106075:	8d 76 00             	lea    0x0(%esi),%esi
     fileclose(rf);
-80105798:	83 ec 0c             	sub    $0xc,%esp
-8010579b:	ff 75 e0             	pushl  -0x20(%ebp)
-8010579e:	e8 9d b6 ff ff       	call   80100e40 <fileclose>
+80106078:	83 ec 0c             	sub    $0xc,%esp
+8010607b:	ff 75 e0             	pushl  -0x20(%ebp)
+8010607e:	e8 bd ad ff ff       	call   80100e40 <fileclose>
     fileclose(wf);
-801057a3:	58                   	pop    %eax
-801057a4:	ff 75 e4             	pushl  -0x1c(%ebp)
-801057a7:	e8 94 b6 ff ff       	call   80100e40 <fileclose>
-    return -1;
-801057ac:	83 c4 10             	add    $0x10,%esp
-801057af:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801057b4:	eb c3                	jmp    80105779 <sys_pipe+0x99>
-801057b6:	66 90                	xchg   %ax,%ax
-801057b8:	66 90                	xchg   %ax,%ax
-801057ba:	66 90                	xchg   %ax,%ax
-801057bc:	66 90                	xchg   %ax,%ax
-801057be:	66 90                	xchg   %ax,%ax
+80106083:	58                   	pop    %eax
+80106084:	ff 75 e4             	pushl  -0x1c(%ebp)
+80106087:	e8 b4 ad ff ff       	call   80100e40 <fileclose>
+    return -1;
+8010608c:	83 c4 10             	add    $0x10,%esp
+8010608f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106094:	eb c3                	jmp    80106059 <sys_pipe+0x99>
+80106096:	66 90                	xchg   %ax,%ax
+80106098:	66 90                	xchg   %ax,%ax
+8010609a:	66 90                	xchg   %ax,%ax
+8010609c:	66 90                	xchg   %ax,%ax
+8010609e:	66 90                	xchg   %ax,%ax
 
-801057c0 <sys_fork>:
+801060a0 <sys_fork>:
 #include "mmu.h"
 #include "proc.h"
 
 int
 sys_fork(void)
 {
-801057c0:	55                   	push   %ebp
-801057c1:	89 e5                	mov    %esp,%ebp
+801060a0:	55                   	push   %ebp
+801060a1:	89 e5                	mov    %esp,%ebp
   return fork();
 }
-801057c3:	5d                   	pop    %ebp
+801060a3:	5d                   	pop    %ebp
   return fork();
-801057c4:	e9 b7 e1 ff ff       	jmp    80103980 <fork>
-801057c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801060a4:	e9 a7 df ff ff       	jmp    80104050 <fork>
+801060a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-801057d0 <sys_exit>:
+801060b0 <sys_exit>:
 
 int
 sys_exit(void)
 {
-801057d0:	55                   	push   %ebp
-801057d1:	89 e5                	mov    %esp,%ebp
-801057d3:	83 ec 08             	sub    $0x8,%esp
+801060b0:	55                   	push   %ebp
+801060b1:	89 e5                	mov    %esp,%ebp
+801060b3:	83 ec 08             	sub    $0x8,%esp
   exit();
-801057d6:	e8 25 e4 ff ff       	call   80103c00 <exit>
+801060b6:	e8 15 e5 ff ff       	call   801045d0 <exit>
   return 0;  // not reached
 }
-801057db:	31 c0                	xor    %eax,%eax
-801057dd:	c9                   	leave  
-801057de:	c3                   	ret    
-801057df:	90                   	nop
+801060bb:	31 c0                	xor    %eax,%eax
+801060bd:	c9                   	leave  
+801060be:	c3                   	ret    
+801060bf:	90                   	nop
 
-801057e0 <sys_wait>:
+801060c0 <sys_wait>:
 
 int
 sys_wait(void)
 {
-801057e0:	55                   	push   %ebp
-801057e1:	89 e5                	mov    %esp,%ebp
+801060c0:	55                   	push   %ebp
+801060c1:	89 e5                	mov    %esp,%ebp
   return wait();
 }
-801057e3:	5d                   	pop    %ebp
+801060c3:	5d                   	pop    %ebp
   return wait();
-801057e4:	e9 57 e6 ff ff       	jmp    80103e40 <wait>
-801057e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801060c4:	e9 47 e7 ff ff       	jmp    80104810 <wait>
+801060c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-801057f0 <sys_kill>:
+801060d0 <sys_kill>:
 
 int
 sys_kill(void)
 {
-801057f0:	55                   	push   %ebp
-801057f1:	89 e5                	mov    %esp,%ebp
-801057f3:	83 ec 20             	sub    $0x20,%esp
+801060d0:	55                   	push   %ebp
+801060d1:	89 e5                	mov    %esp,%ebp
+801060d3:	83 ec 20             	sub    $0x20,%esp
   int pid;
 
   if(argint(0, &pid) < 0)
-801057f6:	8d 45 f4             	lea    -0xc(%ebp),%eax
-801057f9:	50                   	push   %eax
-801057fa:	6a 00                	push   $0x0
-801057fc:	e8 8f f2 ff ff       	call   80104a90 <argint>
-80105801:	83 c4 10             	add    $0x10,%esp
-80105804:	85 c0                	test   %eax,%eax
-80105806:	78 18                	js     80105820 <sys_kill+0x30>
+801060d6:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801060d9:	50                   	push   %eax
+801060da:	6a 00                	push   $0x0
+801060dc:	e8 8f f2 ff ff       	call   80105370 <argint>
+801060e1:	83 c4 10             	add    $0x10,%esp
+801060e4:	85 c0                	test   %eax,%eax
+801060e6:	78 18                	js     80106100 <sys_kill+0x30>
     return -1;
   return kill(pid);
-80105808:	83 ec 0c             	sub    $0xc,%esp
-8010580b:	ff 75 f4             	pushl  -0xc(%ebp)
-8010580e:	e8 7d e7 ff ff       	call   80103f90 <kill>
-80105813:	83 c4 10             	add    $0x10,%esp
-}
-80105816:	c9                   	leave  
-80105817:	c3                   	ret    
-80105818:	90                   	nop
-80105819:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    return -1;
-80105820:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80105825:	c9                   	leave  
-80105826:	c3                   	ret    
-80105827:	89 f6                	mov    %esi,%esi
-80105829:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+801060e8:	83 ec 0c             	sub    $0xc,%esp
+801060eb:	ff 75 f4             	pushl  -0xc(%ebp)
+801060ee:	e8 3d ea ff ff       	call   80104b30 <kill>
+801060f3:	83 c4 10             	add    $0x10,%esp
+}
+801060f6:	c9                   	leave  
+801060f7:	c3                   	ret    
+801060f8:	90                   	nop
+801060f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+80106100:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80106105:	c9                   	leave  
+80106106:	c3                   	ret    
+80106107:	89 f6                	mov    %esi,%esi
+80106109:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80105830 <sys_getpid>:
+80106110 <sys_getpid>:
 
 int
 sys_getpid(void)
 {
-80105830:	55                   	push   %ebp
-80105831:	89 e5                	mov    %esp,%ebp
-80105833:	83 ec 08             	sub    $0x8,%esp
+80106110:	55                   	push   %ebp
+80106111:	89 e5                	mov    %esp,%ebp
+80106113:	83 ec 08             	sub    $0x8,%esp
   return myproc()->pid;
-80105836:	e8 a5 df ff ff       	call   801037e0 <myproc>
-8010583b:	8b 40 10             	mov    0x10(%eax),%eax
+80106116:	e8 35 dd ff ff       	call   80103e50 <myproc>
+8010611b:	8b 40 10             	mov    0x10(%eax),%eax
 }
-8010583e:	c9                   	leave  
-8010583f:	c3                   	ret    
+8010611e:	c9                   	leave  
+8010611f:	c3                   	ret    
 
-80105840 <sys_sbrk>:
+80106120 <sys_sbrk>:
 
 int
 sys_sbrk(void)
 {
-80105840:	55                   	push   %ebp
-80105841:	89 e5                	mov    %esp,%ebp
-80105843:	53                   	push   %ebx
+80106120:	55                   	push   %ebp
+80106121:	89 e5                	mov    %esp,%ebp
+80106123:	53                   	push   %ebx
   int addr;
   int n;
 
   if(argint(0, &n) < 0)
-80105844:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80106124:	8d 45 f4             	lea    -0xc(%ebp),%eax
 {
-80105847:	83 ec 1c             	sub    $0x1c,%esp
+80106127:	83 ec 1c             	sub    $0x1c,%esp
   if(argint(0, &n) < 0)
-8010584a:	50                   	push   %eax
-8010584b:	6a 00                	push   $0x0
-8010584d:	e8 3e f2 ff ff       	call   80104a90 <argint>
-80105852:	83 c4 10             	add    $0x10,%esp
-80105855:	85 c0                	test   %eax,%eax
-80105857:	78 27                	js     80105880 <sys_sbrk+0x40>
+8010612a:	50                   	push   %eax
+8010612b:	6a 00                	push   $0x0
+8010612d:	e8 3e f2 ff ff       	call   80105370 <argint>
+80106132:	83 c4 10             	add    $0x10,%esp
+80106135:	85 c0                	test   %eax,%eax
+80106137:	78 27                	js     80106160 <sys_sbrk+0x40>
     return -1;
   addr = myproc()->sz;
-80105859:	e8 82 df ff ff       	call   801037e0 <myproc>
+80106139:	e8 12 dd ff ff       	call   80103e50 <myproc>
   if(growproc(n) < 0)
-8010585e:	83 ec 0c             	sub    $0xc,%esp
+8010613e:	83 ec 0c             	sub    $0xc,%esp
   addr = myproc()->sz;
-80105861:	8b 18                	mov    (%eax),%ebx
+80106141:	8b 18                	mov    (%eax),%ebx
   if(growproc(n) < 0)
-80105863:	ff 75 f4             	pushl  -0xc(%ebp)
-80105866:	e8 95 e0 ff ff       	call   80103900 <growproc>
-8010586b:	83 c4 10             	add    $0x10,%esp
-8010586e:	85 c0                	test   %eax,%eax
-80105870:	78 0e                	js     80105880 <sys_sbrk+0x40>
+80106143:	ff 75 f4             	pushl  -0xc(%ebp)
+80106146:	e8 85 de ff ff       	call   80103fd0 <growproc>
+8010614b:	83 c4 10             	add    $0x10,%esp
+8010614e:	85 c0                	test   %eax,%eax
+80106150:	78 0e                	js     80106160 <sys_sbrk+0x40>
     return -1;
   return addr;
 }
-80105872:	89 d8                	mov    %ebx,%eax
-80105874:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80105877:	c9                   	leave  
-80105878:	c3                   	ret    
-80105879:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    return -1;
-80105880:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80105885:	eb eb                	jmp    80105872 <sys_sbrk+0x32>
-80105887:	89 f6                	mov    %esi,%esi
-80105889:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80106152:	89 d8                	mov    %ebx,%eax
+80106154:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80106157:	c9                   	leave  
+80106158:	c3                   	ret    
+80106159:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+80106160:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80106165:	eb eb                	jmp    80106152 <sys_sbrk+0x32>
+80106167:	89 f6                	mov    %esi,%esi
+80106169:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80105890 <sys_sleep>:
+80106170 <sys_sleep>:
 
 int
 sys_sleep(void)
 {
-80105890:	55                   	push   %ebp
-80105891:	89 e5                	mov    %esp,%ebp
-80105893:	53                   	push   %ebx
+80106170:	55                   	push   %ebp
+80106171:	89 e5                	mov    %esp,%ebp
+80106173:	53                   	push   %ebx
   int n;
   uint ticks0;
 
   if(argint(0, &n) < 0)
-80105894:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80106174:	8d 45 f4             	lea    -0xc(%ebp),%eax
 {
-80105897:	83 ec 1c             	sub    $0x1c,%esp
+80106177:	83 ec 1c             	sub    $0x1c,%esp
   if(argint(0, &n) < 0)
-8010589a:	50                   	push   %eax
-8010589b:	6a 00                	push   $0x0
-8010589d:	e8 ee f1 ff ff       	call   80104a90 <argint>
-801058a2:	83 c4 10             	add    $0x10,%esp
-801058a5:	85 c0                	test   %eax,%eax
-801058a7:	0f 88 8a 00 00 00    	js     80105937 <sys_sleep+0xa7>
+8010617a:	50                   	push   %eax
+8010617b:	6a 00                	push   $0x0
+8010617d:	e8 ee f1 ff ff       	call   80105370 <argint>
+80106182:	83 c4 10             	add    $0x10,%esp
+80106185:	85 c0                	test   %eax,%eax
+80106187:	0f 88 8a 00 00 00    	js     80106217 <sys_sleep+0xa7>
     return -1;
   acquire(&tickslock);
-801058ad:	83 ec 0c             	sub    $0xc,%esp
-801058b0:	68 60 4d 11 80       	push   $0x80114d60
-801058b5:	e8 c6 ed ff ff       	call   80104680 <acquire>
+8010618d:	83 ec 0c             	sub    $0xc,%esp
+80106190:	68 40 60 11 80       	push   $0x80116040
+80106195:	e8 c6 ed ff ff       	call   80104f60 <acquire>
   ticks0 = ticks;
   while(ticks - ticks0 < n){
-801058ba:	8b 55 f4             	mov    -0xc(%ebp),%edx
-801058bd:	83 c4 10             	add    $0x10,%esp
+8010619a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+8010619d:	83 c4 10             	add    $0x10,%esp
   ticks0 = ticks;
-801058c0:	8b 1d a0 55 11 80    	mov    0x801155a0,%ebx
+801061a0:	8b 1d 80 68 11 80    	mov    0x80116880,%ebx
   while(ticks - ticks0 < n){
-801058c6:	85 d2                	test   %edx,%edx
-801058c8:	75 27                	jne    801058f1 <sys_sleep+0x61>
-801058ca:	eb 54                	jmp    80105920 <sys_sleep+0x90>
-801058cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801061a6:	85 d2                	test   %edx,%edx
+801061a8:	75 27                	jne    801061d1 <sys_sleep+0x61>
+801061aa:	eb 54                	jmp    80106200 <sys_sleep+0x90>
+801061ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(myproc()->killed){
       release(&tickslock);
       return -1;
     }
     sleep(&ticks, &tickslock);
-801058d0:	83 ec 08             	sub    $0x8,%esp
-801058d3:	68 60 4d 11 80       	push   $0x80114d60
-801058d8:	68 a0 55 11 80       	push   $0x801155a0
-801058dd:	e8 9e e4 ff ff       	call   80103d80 <sleep>
+801061b0:	83 ec 08             	sub    $0x8,%esp
+801061b3:	68 40 60 11 80       	push   $0x80116040
+801061b8:	68 80 68 11 80       	push   $0x80116880
+801061bd:	e8 8e e5 ff ff       	call   80104750 <sleep>
   while(ticks - ticks0 < n){
-801058e2:	a1 a0 55 11 80       	mov    0x801155a0,%eax
-801058e7:	83 c4 10             	add    $0x10,%esp
-801058ea:	29 d8                	sub    %ebx,%eax
-801058ec:	3b 45 f4             	cmp    -0xc(%ebp),%eax
-801058ef:	73 2f                	jae    80105920 <sys_sleep+0x90>
+801061c2:	a1 80 68 11 80       	mov    0x80116880,%eax
+801061c7:	83 c4 10             	add    $0x10,%esp
+801061ca:	29 d8                	sub    %ebx,%eax
+801061cc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+801061cf:	73 2f                	jae    80106200 <sys_sleep+0x90>
     if(myproc()->killed){
-801058f1:	e8 ea de ff ff       	call   801037e0 <myproc>
-801058f6:	8b 40 24             	mov    0x24(%eax),%eax
-801058f9:	85 c0                	test   %eax,%eax
-801058fb:	74 d3                	je     801058d0 <sys_sleep+0x40>
+801061d1:	e8 7a dc ff ff       	call   80103e50 <myproc>
+801061d6:	8b 40 24             	mov    0x24(%eax),%eax
+801061d9:	85 c0                	test   %eax,%eax
+801061db:	74 d3                	je     801061b0 <sys_sleep+0x40>
       release(&tickslock);
-801058fd:	83 ec 0c             	sub    $0xc,%esp
-80105900:	68 60 4d 11 80       	push   $0x80114d60
-80105905:	e8 36 ee ff ff       	call   80104740 <release>
+801061dd:	83 ec 0c             	sub    $0xc,%esp
+801061e0:	68 40 60 11 80       	push   $0x80116040
+801061e5:	e8 36 ee ff ff       	call   80105020 <release>
       return -1;
-8010590a:	83 c4 10             	add    $0x10,%esp
-8010590d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801061ea:	83 c4 10             	add    $0x10,%esp
+801061ed:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   }
   release(&tickslock);
   return 0;
 }
-80105912:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80105915:	c9                   	leave  
-80105916:	c3                   	ret    
-80105917:	89 f6                	mov    %esi,%esi
-80105919:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+801061f2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801061f5:	c9                   	leave  
+801061f6:	c3                   	ret    
+801061f7:	89 f6                	mov    %esi,%esi
+801061f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
   release(&tickslock);
-80105920:	83 ec 0c             	sub    $0xc,%esp
-80105923:	68 60 4d 11 80       	push   $0x80114d60
-80105928:	e8 13 ee ff ff       	call   80104740 <release>
+80106200:	83 ec 0c             	sub    $0xc,%esp
+80106203:	68 40 60 11 80       	push   $0x80116040
+80106208:	e8 13 ee ff ff       	call   80105020 <release>
   return 0;
-8010592d:	83 c4 10             	add    $0x10,%esp
-80105930:	31 c0                	xor    %eax,%eax
+8010620d:	83 c4 10             	add    $0x10,%esp
+80106210:	31 c0                	xor    %eax,%eax
 }
-80105932:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80105935:	c9                   	leave  
-80105936:	c3                   	ret    
-    return -1;
-80105937:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010593c:	eb f4                	jmp    80105932 <sys_sleep+0xa2>
-8010593e:	66 90                	xchg   %ax,%ax
+80106212:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80106215:	c9                   	leave  
+80106216:	c3                   	ret    
+    return -1;
+80106217:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010621c:	eb f4                	jmp    80106212 <sys_sleep+0xa2>
+8010621e:	66 90                	xchg   %ax,%ax
 
-80105940 <sys_uptime>:
+80106220 <sys_uptime>:
 
 // return how many clock tick interrupts have occurred
 // since start.
 int
 sys_uptime(void)
 {
-80105940:	55                   	push   %ebp
-80105941:	89 e5                	mov    %esp,%ebp
-80105943:	53                   	push   %ebx
-80105944:	83 ec 10             	sub    $0x10,%esp
+80106220:	55                   	push   %ebp
+80106221:	89 e5                	mov    %esp,%ebp
+80106223:	53                   	push   %ebx
+80106224:	83 ec 10             	sub    $0x10,%esp
   uint xticks;
 
   acquire(&tickslock);
-80105947:	68 60 4d 11 80       	push   $0x80114d60
-8010594c:	e8 2f ed ff ff       	call   80104680 <acquire>
+80106227:	68 40 60 11 80       	push   $0x80116040
+8010622c:	e8 2f ed ff ff       	call   80104f60 <acquire>
   xticks = ticks;
-80105951:	8b 1d a0 55 11 80    	mov    0x801155a0,%ebx
+80106231:	8b 1d 80 68 11 80    	mov    0x80116880,%ebx
   release(&tickslock);
-80105957:	c7 04 24 60 4d 11 80 	movl   $0x80114d60,(%esp)
-8010595e:	e8 dd ed ff ff       	call   80104740 <release>
+80106237:	c7 04 24 40 60 11 80 	movl   $0x80116040,(%esp)
+8010623e:	e8 dd ed ff ff       	call   80105020 <release>
   return xticks;
 }
-80105963:	89 d8                	mov    %ebx,%eax
-80105965:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80105968:	c9                   	leave  
-80105969:	c3                   	ret    
-8010596a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80105970 <sys_thread_create>:
-
-int sys_thread_create(void){
-80105970:	55                   	push   %ebp
-80105971:	89 e5                	mov    %esp,%ebp
-80105973:	83 ec 1c             	sub    $0x1c,%esp
-  void (*fcn)(void*),*arg,*stack;
-  argptr(0,(void*) &fcn, sizeof(void(*)(void *)));
-80105976:	8d 45 ec             	lea    -0x14(%ebp),%eax
-80105979:	6a 04                	push   $0x4
-8010597b:	50                   	push   %eax
-8010597c:	6a 00                	push   $0x0
-8010597e:	e8 5d f1 ff ff       	call   80104ae0 <argptr>
-  argptr(1, (void*) &arg, sizeof(void*));
-80105983:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80105986:	83 c4 0c             	add    $0xc,%esp
-80105989:	6a 04                	push   $0x4
-8010598b:	50                   	push   %eax
-8010598c:	6a 01                	push   $0x1
-8010598e:	e8 4d f1 ff ff       	call   80104ae0 <argptr>
-  argptr(2, (void*) &stack, sizeof(void *));
-80105993:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80105996:	83 c4 0c             	add    $0xc,%esp
-80105999:	6a 04                	push   $0x4
-8010599b:	50                   	push   %eax
-8010599c:	6a 02                	push   $0x2
-8010599e:	e8 3d f1 ff ff       	call   80104ae0 <argptr>
-  return thread_create(fcn,arg,stack);
-801059a3:	83 c4 0c             	add    $0xc,%esp
-801059a6:	ff 75 f4             	pushl  -0xc(%ebp)
-801059a9:	ff 75 f0             	pushl  -0x10(%ebp)
-801059ac:	ff 75 ec             	pushl  -0x14(%ebp)
-801059af:	e8 1c e7 ff ff       	call   801040d0 <thread_create>
-}
-801059b4:	c9                   	leave  
-801059b5:	c3                   	ret    
-801059b6:	8d 76 00             	lea    0x0(%esi),%esi
-801059b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-801059c0 <sys_thread_join>:
-
-int sys_thread_join(void){
-801059c0:	55                   	push   %ebp
-801059c1:	89 e5                	mov    %esp,%ebp
-  return thread_join();
-}
-801059c3:	5d                   	pop    %ebp
-  return thread_join();
-801059c4:	e9 37 e8 ff ff       	jmp    80104200 <thread_join>
-801059c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-801059d0 <sys_thread_exit>:
-
-
-int sys_thread_exit(void){
-801059d0:	55                   	push   %ebp
-801059d1:	89 e5                	mov    %esp,%ebp
-  return thread_exit();
-}
-801059d3:	5d                   	pop    %ebp
-  return thread_exit();
-801059d4:	e9 07 e9 ff ff       	jmp    801042e0 <thread_exit>
-801059d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-801059e0 <sys_draw>:
-
-int 
-sys_draw(void){
-801059e0:	55                   	push   %ebp
-801059e1:	89 e5                	mov    %esp,%ebp
-801059e3:	57                   	push   %edi
-801059e4:	56                   	push   %esi
+80106243:	89 d8                	mov    %ebx,%eax
+80106245:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80106248:	c9                   	leave  
+80106249:	c3                   	ret    
+8010624a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80106250 <sys_draw>:
+
+int
+sys_draw(void)
+{
+80106250:	55                   	push   %ebp
+80106251:	89 e5                	mov    %esp,%ebp
+80106253:	57                   	push   %edi
+80106254:	56                   	push   %esi
   void* buf;
   uint size;
-  argptr(0,(void*)&buf,sizeof(buf));
-801059e5:	8d 85 08 ff ff ff    	lea    -0xf8(%ebp),%eax
-  argptr(1,(void*)&size,sizeof(size));
-  char figure[] = "\n\
-801059eb:	8d bd 14 ff ff ff    	lea    -0xec(%ebp),%edi
-801059f1:	be cc 7a 10 80       	mov    $0x80107acc,%esi
-sys_draw(void){
-801059f6:	81 ec f4 00 00 00    	sub    $0xf4,%esp
-  argptr(0,(void*)&buf,sizeof(buf));
-801059fc:	6a 04                	push   $0x4
-801059fe:	50                   	push   %eax
-801059ff:	6a 00                	push   $0x0
-80105a01:	e8 da f0 ff ff       	call   80104ae0 <argptr>
-  argptr(1,(void*)&size,sizeof(size));
-80105a06:	8d 85 0c ff ff ff    	lea    -0xf4(%ebp),%eax
-80105a0c:	83 c4 0c             	add    $0xc,%esp
-80105a0f:	6a 04                	push   $0x4
-80105a11:	50                   	push   %eax
-80105a12:	6a 01                	push   $0x1
-80105a14:	e8 c7 f0 ff ff       	call   80104ae0 <argptr>
-  char figure[] = "\n\
-80105a19:	8b 15 cc 7a 10 80    	mov    0x80107acc,%edx
-80105a1f:	8d 85 11 ff ff ff    	lea    -0xef(%ebp),%eax
-\n\
-Members-\n\
-HARSH 200123022\n\
-PRAGYAN 200123080\n\
-SAHIL 200123081\n\n";
-  if(sizeof(figure)>size)return -1;
-80105a25:	83 c4 10             	add    $0x10,%esp
-  char figure[] = "\n\
-80105a28:	89 c1                	mov    %eax,%ecx
-80105a2a:	89 95 11 ff ff ff    	mov    %edx,-0xef(%ebp)
-80105a30:	8b 15 af 7b 10 80    	mov    0x80107baf,%edx
-80105a36:	29 f9                	sub    %edi,%ecx
-80105a38:	29 ce                	sub    %ecx,%esi
-80105a3a:	81 c1 e7 00 00 00    	add    $0xe7,%ecx
-80105a40:	c1 e9 02             	shr    $0x2,%ecx
-80105a43:	89 55 f4             	mov    %edx,-0xc(%ebp)
-80105a46:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
-  if(sizeof(figure)>size)return -1;
-80105a48:	8b 95 0c ff ff ff    	mov    -0xf4(%ebp),%edx
-80105a4e:	81 fa e6 00 00 00    	cmp    $0xe6,%edx
-80105a54:	76 22                	jbe    80105a78 <sys_draw+0x98>
-  strncpy((char *)buf,figure,size);
-80105a56:	83 ec 04             	sub    $0x4,%esp
-80105a59:	52                   	push   %edx
-80105a5a:	50                   	push   %eax
-80105a5b:	ff b5 08 ff ff ff    	pushl  -0xf8(%ebp)
-80105a61:	e8 aa ee ff ff       	call   80104910 <strncpy>
-  return sizeof(figure);                
-80105a66:	83 c4 10             	add    $0x10,%esp
-80105a69:	b8 e7 00 00 00       	mov    $0xe7,%eax
-}
-80105a6e:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80105a71:	5e                   	pop    %esi
-80105a72:	5f                   	pop    %edi
-80105a73:	5d                   	pop    %ebp
-80105a74:	c3                   	ret    
-80105a75:	8d 76 00             	lea    0x0(%esi),%esi
-  if(sizeof(figure)>size)return -1;
-80105a78:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105a7d:	eb ef                	jmp    80105a6e <sys_draw+0x8e>
 
-80105a7f <alltraps>:
+  argptr(0, (void*)&buf, sizeof(buf));
+80106255:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
+  argptr(1, (void*)&size, sizeof(size));
+  char text[] = "\n\
+8010625b:	be 00 85 10 80       	mov    $0x80108500,%esi
+{
+80106260:	81 ec c4 00 00 00    	sub    $0xc4,%esp
+  argptr(0, (void*)&buf, sizeof(buf));
+80106266:	6a 04                	push   $0x4
+80106268:	50                   	push   %eax
+80106269:	6a 00                	push   $0x0
+8010626b:	e8 50 f1 ff ff       	call   801053c0 <argptr>
+  argptr(1, (void*)&size, sizeof(size));
+80106270:	8d 85 48 ff ff ff    	lea    -0xb8(%ebp),%eax
+80106276:	83 c4 0c             	add    $0xc,%esp
+80106279:	6a 04                	push   $0x4
+8010627b:	50                   	push   %eax
+8010627c:	6a 01                	push   $0x1
+8010627e:	e8 3d f1 ff ff       	call   801053c0 <argptr>
+		     # ###### #    # # #\n\
+		#    # #    # #    # # #\n\
+		 ####  #    # #    # # ######\n\n";
+		 
+		 
+  if(sizeof(text)>size)
+80106283:	8b 95 48 ff ff ff    	mov    -0xb8(%ebp),%edx
+  char text[] = "\n\
+80106289:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
+  if(sizeof(text)>size)
+8010628f:	83 c4 10             	add    $0x10,%esp
+  char text[] = "\n\
+80106292:	b9 2b 00 00 00       	mov    $0x2b,%ecx
+80106297:	89 c7                	mov    %eax,%edi
+  if(sizeof(text)>size)
+80106299:	81 fa ab 00 00 00    	cmp    $0xab,%edx
+  char text[] = "\n\
+8010629f:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  if(sizeof(text)>size)
+801062a1:	76 25                	jbe    801062c8 <sys_draw+0x78>
+    return -1;
+
+  strncpy((char *)buf, text, size);
+801062a3:	83 ec 04             	sub    $0x4,%esp
+801062a6:	52                   	push   %edx
+801062a7:	50                   	push   %eax
+801062a8:	ff b5 44 ff ff ff    	pushl  -0xbc(%ebp)
+801062ae:	e8 3d ef ff ff       	call   801051f0 <strncpy>
+  return sizeof(text);
+801062b3:	83 c4 10             	add    $0x10,%esp
+801062b6:	b8 ac 00 00 00       	mov    $0xac,%eax
+}
+801062bb:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801062be:	5e                   	pop    %esi
+801062bf:	5f                   	pop    %edi
+801062c0:	5d                   	pop    %ebp
+801062c1:	c3                   	ret    
+801062c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    return -1;
+801062c8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801062cd:	eb ec                	jmp    801062bb <sys_draw+0x6b>
+
+801062cf <alltraps>:
 
   # vectors.S sends all traps here.
 .globl alltraps
 alltraps:
   # Build trap frame.
   pushl %ds
-80105a7f:	1e                   	push   %ds
+801062cf:	1e                   	push   %ds
   pushl %es
-80105a80:	06                   	push   %es
+801062d0:	06                   	push   %es
   pushl %fs
-80105a81:	0f a0                	push   %fs
+801062d1:	0f a0                	push   %fs
   pushl %gs
-80105a83:	0f a8                	push   %gs
+801062d3:	0f a8                	push   %gs
   pushal
-80105a85:	60                   	pusha  
+801062d5:	60                   	pusha  
   
   # Set up data segments.
   movw $(SEG_KDATA<<3), %ax
-80105a86:	66 b8 10 00          	mov    $0x10,%ax
+801062d6:	66 b8 10 00          	mov    $0x10,%ax
   movw %ax, %ds
-80105a8a:	8e d8                	mov    %eax,%ds
+801062da:	8e d8                	mov    %eax,%ds
   movw %ax, %es
-80105a8c:	8e c0                	mov    %eax,%es
+801062dc:	8e c0                	mov    %eax,%es
 
   # Call trap(tf), where tf=%esp
   pushl %esp
-80105a8e:	54                   	push   %esp
+801062de:	54                   	push   %esp
   call trap
-80105a8f:	e8 cc 00 00 00       	call   80105b60 <trap>
+801062df:	e8 7c 01 00 00       	call   80106460 <trap>
   addl $4, %esp
-80105a94:	83 c4 04             	add    $0x4,%esp
+801062e4:	83 c4 04             	add    $0x4,%esp
 
-80105a97 <trapret>:
+801062e7 <trapret>:
 
   # Return falls through to trapret...
 .globl trapret
 trapret:
   popal
-80105a97:	61                   	popa   
+801062e7:	61                   	popa   
   popl %gs
-80105a98:	0f a9                	pop    %gs
+801062e8:	0f a9                	pop    %gs
   popl %fs
-80105a9a:	0f a1                	pop    %fs
+801062ea:	0f a1                	pop    %fs
   popl %es
-80105a9c:	07                   	pop    %es
+801062ec:	07                   	pop    %es
   popl %ds
-80105a9d:	1f                   	pop    %ds
+801062ed:	1f                   	pop    %ds
   addl $0x8, %esp  # trapno and errcode
-80105a9e:	83 c4 08             	add    $0x8,%esp
+801062ee:	83 c4 08             	add    $0x8,%esp
   iret
-80105aa1:	cf                   	iret   
-80105aa2:	66 90                	xchg   %ax,%ax
-80105aa4:	66 90                	xchg   %ax,%ax
-80105aa6:	66 90                	xchg   %ax,%ax
-80105aa8:	66 90                	xchg   %ax,%ax
-80105aaa:	66 90                	xchg   %ax,%ax
-80105aac:	66 90                	xchg   %ax,%ax
-80105aae:	66 90                	xchg   %ax,%ax
+801062f1:	cf                   	iret   
+801062f2:	66 90                	xchg   %ax,%ax
+801062f4:	66 90                	xchg   %ax,%ax
+801062f6:	66 90                	xchg   %ax,%ax
+801062f8:	66 90                	xchg   %ax,%ax
+801062fa:	66 90                	xchg   %ax,%ax
+801062fc:	66 90                	xchg   %ax,%ax
+801062fe:	66 90                	xchg   %ax,%ax
 
-80105ab0 <tvinit>:
-struct spinlock tickslock;
+80106300 <handlePageFault>:
 uint ticks;
 
+struct spinlock swap_in_lock;
+
+
+void handlePageFault(){
+80106300:	55                   	push   %ebp
+80106301:	89 e5                	mov    %esp,%ebp
+80106303:	56                   	push   %esi
+80106304:	53                   	push   %ebx
+  struct proc *p=myproc();
+80106305:	e8 46 db ff ff       	call   80103e50 <myproc>
+8010630a:	89 c3                	mov    %eax,%ebx
+
+static inline uint
+rcr2(void)
+{
+  uint val;
+  asm volatile("movl %%cr2,%0" : "=r" (val));
+8010630c:	0f 20 d6             	mov    %cr2,%esi
+  int addr=rcr2();
+  acquire(&swap_in_lock);
+8010630f:	83 ec 0c             	sub    $0xc,%esp
+80106312:	68 00 60 11 80       	push   $0x80116000
+80106317:	e8 44 ec ff ff       	call   80104f60 <acquire>
+  sleep(p,&swap_in_lock);
+8010631c:	5a                   	pop    %edx
+8010631d:	59                   	pop    %ecx
+8010631e:	68 00 60 11 80       	push   $0x80116000
+80106323:	53                   	push   %ebx
+80106324:	e8 27 e4 ff ff       	call   80104750 <sleep>
+  pde_t *pde = &(p->pgdir)[PDX(addr)];
+  pte_t *pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
+80106329:	8b 43 04             	mov    0x4(%ebx),%eax
+  pde_t *pde = &(p->pgdir)[PDX(addr)];
+8010632c:	89 f2                	mov    %esi,%edx
+
+  if((pgtab[PTX(addr)])&0x080){
+8010632e:	83 c4 10             	add    $0x10,%esp
+  pde_t *pde = &(p->pgdir)[PDX(addr)];
+80106331:	c1 ea 16             	shr    $0x16,%edx
+  pte_t *pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
+80106334:	8b 04 90             	mov    (%eax,%edx,4),%eax
+  if((pgtab[PTX(addr)])&0x080){
+80106337:	89 f2                	mov    %esi,%edx
+80106339:	c1 ea 0c             	shr    $0xc,%edx
+8010633c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
+  pte_t *pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
+80106342:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+  if((pgtab[PTX(addr)])&0x080){
+80106347:	f6 84 90 00 00 00 80 	testb  $0x80,-0x80000000(%eax,%edx,4)
+8010634e:	80 
+8010634f:	74 1f                	je     80106370 <handlePageFault+0x70>
+    p->addr = addr;
+    rpush2(p);
+80106351:	83 ec 0c             	sub    $0xc,%esp
+    p->addr = addr;
+80106354:	89 73 7c             	mov    %esi,0x7c(%ebx)
+    rpush2(p);
+80106357:	53                   	push   %ebx
+80106358:	e8 63 d6 ff ff       	call   801039c0 <rpush2>
+    if(!swap_in_process_exists){
+8010635d:	a1 bc b5 10 80       	mov    0x8010b5bc,%eax
+80106362:	83 c4 10             	add    $0x10,%esp
+80106365:	85 c0                	test   %eax,%eax
+80106367:	74 17                	je     80106380 <handlePageFault+0x80>
+    }
+  }
+  else {
+    exit();
+  }
+}
+80106369:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010636c:	5b                   	pop    %ebx
+8010636d:	5e                   	pop    %esi
+8010636e:	5d                   	pop    %ebp
+8010636f:	c3                   	ret    
+80106370:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80106373:	5b                   	pop    %ebx
+80106374:	5e                   	pop    %esi
+80106375:	5d                   	pop    %ebp
+    exit();
+80106376:	e9 55 e2 ff ff       	jmp    801045d0 <exit>
+8010637b:	90                   	nop
+8010637c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      create_kernel_process("swap_in_process", &swap_in_process_function);
+80106380:	83 ec 08             	sub    $0x8,%esp
+      swap_in_process_exists=1;
+80106383:	c7 05 bc b5 10 80 01 	movl   $0x1,0x8010b5bc
+8010638a:	00 00 00 
+      create_kernel_process("swap_in_process", &swap_in_process_function);
+8010638d:	68 60 49 10 80       	push   $0x80104960
+80106392:	68 e1 82 10 80       	push   $0x801082e1
+80106397:	e8 d4 e8 ff ff       	call   80104c70 <create_kernel_process>
+8010639c:	83 c4 10             	add    $0x10,%esp
+}
+8010639f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801063a2:	5b                   	pop    %ebx
+801063a3:	5e                   	pop    %esi
+801063a4:	5d                   	pop    %ebp
+801063a5:	c3                   	ret    
+801063a6:	8d 76 00             	lea    0x0(%esi),%esi
+801063a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801063b0 <tvinit>:
+
+
 void
 tvinit(void)
 {
-80105ab0:	55                   	push   %ebp
+801063b0:	55                   	push   %ebp
   int i;
 
   for(i = 0; i < 256; i++)
-80105ab1:	31 c0                	xor    %eax,%eax
+801063b1:	31 c0                	xor    %eax,%eax
 {
-80105ab3:	89 e5                	mov    %esp,%ebp
-80105ab5:	83 ec 08             	sub    $0x8,%esp
-80105ab8:	90                   	nop
-80105ab9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801063b3:	89 e5                	mov    %esp,%ebp
+801063b5:	83 ec 08             	sub    $0x8,%esp
+801063b8:	90                   	nop
+801063b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
-80105ac0:	8b 14 85 08 a0 10 80 	mov    -0x7fef5ff8(,%eax,4),%edx
-80105ac7:	c7 04 c5 a2 4d 11 80 	movl   $0x8e000008,-0x7feeb25e(,%eax,8)
-80105ace:	08 00 00 8e 
-80105ad2:	66 89 14 c5 a0 4d 11 	mov    %dx,-0x7feeb260(,%eax,8)
-80105ad9:	80 
-80105ada:	c1 ea 10             	shr    $0x10,%edx
-80105add:	66 89 14 c5 a6 4d 11 	mov    %dx,-0x7feeb25a(,%eax,8)
-80105ae4:	80 
+801063c0:	8b 14 85 08 b0 10 80 	mov    -0x7fef4ff8(,%eax,4),%edx
+801063c7:	c7 04 c5 82 60 11 80 	movl   $0x8e000008,-0x7fee9f7e(,%eax,8)
+801063ce:	08 00 00 8e 
+801063d2:	66 89 14 c5 80 60 11 	mov    %dx,-0x7fee9f80(,%eax,8)
+801063d9:	80 
+801063da:	c1 ea 10             	shr    $0x10,%edx
+801063dd:	66 89 14 c5 86 60 11 	mov    %dx,-0x7fee9f7a(,%eax,8)
+801063e4:	80 
   for(i = 0; i < 256; i++)
-80105ae5:	83 c0 01             	add    $0x1,%eax
-80105ae8:	3d 00 01 00 00       	cmp    $0x100,%eax
-80105aed:	75 d1                	jne    80105ac0 <tvinit+0x10>
+801063e5:	83 c0 01             	add    $0x1,%eax
+801063e8:	3d 00 01 00 00       	cmp    $0x100,%eax
+801063ed:	75 d1                	jne    801063c0 <tvinit+0x10>
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-80105aef:	a1 08 a1 10 80       	mov    0x8010a108,%eax
+801063ef:	a1 08 b1 10 80       	mov    0x8010b108,%eax
 
   initlock(&tickslock, "time");
-80105af4:	83 ec 08             	sub    $0x8,%esp
+801063f4:	83 ec 08             	sub    $0x8,%esp
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-80105af7:	c7 05 a2 4f 11 80 08 	movl   $0xef000008,0x80114fa2
-80105afe:	00 00 ef 
+801063f7:	c7 05 82 62 11 80 08 	movl   $0xef000008,0x80116282
+801063fe:	00 00 ef 
   initlock(&tickslock, "time");
-80105b01:	68 b3 7b 10 80       	push   $0x80107bb3
-80105b06:	68 60 4d 11 80       	push   $0x80114d60
+80106401:	68 ac 85 10 80       	push   $0x801085ac
+80106406:	68 40 60 11 80       	push   $0x80116040
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-80105b0b:	66 a3 a0 4f 11 80    	mov    %ax,0x80114fa0
-80105b11:	c1 e8 10             	shr    $0x10,%eax
-80105b14:	66 a3 a6 4f 11 80    	mov    %ax,0x80114fa6
+8010640b:	66 a3 80 62 11 80    	mov    %ax,0x80116280
+80106411:	c1 e8 10             	shr    $0x10,%eax
+80106414:	66 a3 86 62 11 80    	mov    %ax,0x80116286
   initlock(&tickslock, "time");
-80105b1a:	e8 21 ea ff ff       	call   80104540 <initlock>
+8010641a:	e8 01 ea ff ff       	call   80104e20 <initlock>
 }
-80105b1f:	83 c4 10             	add    $0x10,%esp
-80105b22:	c9                   	leave  
-80105b23:	c3                   	ret    
-80105b24:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80105b2a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+8010641f:	83 c4 10             	add    $0x10,%esp
+80106422:	c9                   	leave  
+80106423:	c3                   	ret    
+80106424:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010642a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
 
-80105b30 <idtinit>:
+80106430 <idtinit>:
 
 void
 idtinit(void)
 {
-80105b30:	55                   	push   %ebp
+80106430:	55                   	push   %ebp
   pd[0] = size-1;
-80105b31:	b8 ff 07 00 00       	mov    $0x7ff,%eax
-80105b36:	89 e5                	mov    %esp,%ebp
-80105b38:	83 ec 10             	sub    $0x10,%esp
-80105b3b:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+80106431:	b8 ff 07 00 00       	mov    $0x7ff,%eax
+80106436:	89 e5                	mov    %esp,%ebp
+80106438:	83 ec 10             	sub    $0x10,%esp
+8010643b:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
   pd[1] = (uint)p;
-80105b3f:	b8 a0 4d 11 80       	mov    $0x80114da0,%eax
-80105b44:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+8010643f:	b8 80 60 11 80       	mov    $0x80116080,%eax
+80106444:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   pd[2] = (uint)p >> 16;
-80105b48:	c1 e8 10             	shr    $0x10,%eax
-80105b4b:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
+80106448:	c1 e8 10             	shr    $0x10,%eax
+8010644b:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
   asm volatile("lidt (%0)" : : "r" (pd));
-80105b4f:	8d 45 fa             	lea    -0x6(%ebp),%eax
-80105b52:	0f 01 18             	lidtl  (%eax)
+8010644f:	8d 45 fa             	lea    -0x6(%ebp),%eax
+80106452:	0f 01 18             	lidtl  (%eax)
   lidt(idt, sizeof(idt));
 }
-80105b55:	c9                   	leave  
-80105b56:	c3                   	ret    
-80105b57:	89 f6                	mov    %esi,%esi
-80105b59:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80106455:	c9                   	leave  
+80106456:	c3                   	ret    
+80106457:	89 f6                	mov    %esi,%esi
+80106459:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80105b60 <trap>:
+80106460 <trap>:
 
 //PAGEBREAK: 41
 void
 trap(struct trapframe *tf)
 {
-80105b60:	55                   	push   %ebp
-80105b61:	89 e5                	mov    %esp,%ebp
-80105b63:	57                   	push   %edi
-80105b64:	56                   	push   %esi
-80105b65:	53                   	push   %ebx
-80105b66:	83 ec 1c             	sub    $0x1c,%esp
-80105b69:	8b 7d 08             	mov    0x8(%ebp),%edi
+80106460:	55                   	push   %ebp
+80106461:	89 e5                	mov    %esp,%ebp
+80106463:	57                   	push   %edi
+80106464:	56                   	push   %esi
+80106465:	53                   	push   %ebx
+80106466:	83 ec 1c             	sub    $0x1c,%esp
+80106469:	8b 7d 08             	mov    0x8(%ebp),%edi
   if(tf->trapno == T_SYSCALL){
-80105b6c:	8b 47 30             	mov    0x30(%edi),%eax
-80105b6f:	83 f8 40             	cmp    $0x40,%eax
-80105b72:	0f 84 f0 00 00 00    	je     80105c68 <trap+0x108>
+8010646c:	8b 47 30             	mov    0x30(%edi),%eax
+8010646f:	83 f8 40             	cmp    $0x40,%eax
+80106472:	0f 84 d8 00 00 00    	je     80106550 <trap+0xf0>
     if(myproc()->killed)
       exit();
     return;
   }
 
   switch(tf->trapno){
-80105b78:	83 e8 20             	sub    $0x20,%eax
-80105b7b:	83 f8 1f             	cmp    $0x1f,%eax
-80105b7e:	77 10                	ja     80105b90 <trap+0x30>
-80105b80:	ff 24 85 5c 7c 10 80 	jmp    *-0x7fef83a4(,%eax,4)
-80105b87:	89 f6                	mov    %esi,%esi
-80105b89:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-    lapiceoi();
-    break;
-
+80106478:	83 e8 0e             	sub    $0xe,%eax
+8010647b:	83 f8 31             	cmp    $0x31,%eax
+8010647e:	77 10                	ja     80106490 <trap+0x30>
+80106480:	ff 24 85 54 86 10 80 	jmp    *-0x7fef79ac(,%eax,4)
+80106487:	89 f6                	mov    %esi,%esi
+80106489:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+  case T_PGFLT:
+    handlePageFault();
+  break;
   //PAGEBREAK: 13
   default:
     if(myproc() == 0 || (tf->cs&3) == 0){
-80105b90:	e8 4b dc ff ff       	call   801037e0 <myproc>
-80105b95:	85 c0                	test   %eax,%eax
-80105b97:	8b 5f 38             	mov    0x38(%edi),%ebx
-80105b9a:	0f 84 14 02 00 00    	je     80105db4 <trap+0x254>
-80105ba0:	f6 47 3c 03          	testb  $0x3,0x3c(%edi)
-80105ba4:	0f 84 0a 02 00 00    	je     80105db4 <trap+0x254>
-
-static inline uint
-rcr2(void)
-{
-  uint val;
+80106490:	e8 bb d9 ff ff       	call   80103e50 <myproc>
+80106495:	85 c0                	test   %eax,%eax
+80106497:	8b 5f 38             	mov    0x38(%edi),%ebx
+8010649a:	0f 84 ca 01 00 00    	je     8010666a <trap+0x20a>
+801064a0:	f6 47 3c 03          	testb  $0x3,0x3c(%edi)
+801064a4:	0f 84 c0 01 00 00    	je     8010666a <trap+0x20a>
   asm volatile("movl %%cr2,%0" : "=r" (val));
-80105baa:	0f 20 d1             	mov    %cr2,%ecx
-80105bad:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+801064aa:	0f 20 d1             	mov    %cr2,%ecx
+801064ad:	89 4d d8             	mov    %ecx,-0x28(%ebp)
       cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
               tf->trapno, cpuid(), tf->eip, rcr2());
       panic("trap");
     }
     // In user space, assume process misbehaved.
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-80105bb0:	e8 0b dc ff ff       	call   801037c0 <cpuid>
-80105bb5:	89 45 dc             	mov    %eax,-0x24(%ebp)
-80105bb8:	8b 47 34             	mov    0x34(%edi),%eax
-80105bbb:	8b 77 30             	mov    0x30(%edi),%esi
-80105bbe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801064b0:	e8 4b d6 ff ff       	call   80103b00 <cpuid>
+801064b5:	89 45 dc             	mov    %eax,-0x24(%ebp)
+801064b8:	8b 47 34             	mov    0x34(%edi),%eax
+801064bb:	8b 77 30             	mov    0x30(%edi),%esi
+801064be:	89 45 e4             	mov    %eax,-0x1c(%ebp)
             "eip 0x%x addr 0x%x--kill proc\n",
             myproc()->pid, myproc()->name, tf->trapno,
-80105bc1:	e8 1a dc ff ff       	call   801037e0 <myproc>
-80105bc6:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80105bc9:	e8 12 dc ff ff       	call   801037e0 <myproc>
+801064c1:	e8 8a d9 ff ff       	call   80103e50 <myproc>
+801064c6:	89 45 e0             	mov    %eax,-0x20(%ebp)
+801064c9:	e8 82 d9 ff ff       	call   80103e50 <myproc>
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-80105bce:	8b 4d d8             	mov    -0x28(%ebp),%ecx
-80105bd1:	8b 55 dc             	mov    -0x24(%ebp),%edx
-80105bd4:	51                   	push   %ecx
-80105bd5:	53                   	push   %ebx
-80105bd6:	52                   	push   %edx
+801064ce:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+801064d1:	8b 55 dc             	mov    -0x24(%ebp),%edx
+801064d4:	51                   	push   %ecx
+801064d5:	53                   	push   %ebx
+801064d6:	52                   	push   %edx
             myproc()->pid, myproc()->name, tf->trapno,
-80105bd7:	8b 55 e0             	mov    -0x20(%ebp),%edx
+801064d7:	8b 55 e0             	mov    -0x20(%ebp),%edx
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-80105bda:	ff 75 e4             	pushl  -0x1c(%ebp)
-80105bdd:	56                   	push   %esi
+801064da:	ff 75 e4             	pushl  -0x1c(%ebp)
+801064dd:	56                   	push   %esi
             myproc()->pid, myproc()->name, tf->trapno,
-80105bde:	83 c2 6c             	add    $0x6c,%edx
+801064de:	83 c2 6c             	add    $0x6c,%edx
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-80105be1:	52                   	push   %edx
-80105be2:	ff 70 10             	pushl  0x10(%eax)
-80105be5:	68 18 7c 10 80       	push   $0x80107c18
-80105bea:	e8 71 aa ff ff       	call   80100660 <cprintf>
+801064e1:	52                   	push   %edx
+801064e2:	ff 70 10             	pushl  0x10(%eax)
+801064e5:	68 10 86 10 80       	push   $0x80108610
+801064ea:	e8 71 a1 ff ff       	call   80100660 <cprintf>
             tf->err, cpuid(), tf->eip, rcr2());
     myproc()->killed = 1;
-80105bef:	83 c4 20             	add    $0x20,%esp
-80105bf2:	e8 e9 db ff ff       	call   801037e0 <myproc>
-80105bf7:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+801064ef:	83 c4 20             	add    $0x20,%esp
+801064f2:	e8 59 d9 ff ff       	call   80103e50 <myproc>
+801064f7:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+801064fe:	66 90                	xchg   %ax,%ax
   }
 
   // Force process exit if it has been killed and is in user space.
   // (If it is still executing in the kernel, let it keep running
   // until it gets to the regular system call return.)
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105bfe:	e8 dd db ff ff       	call   801037e0 <myproc>
-80105c03:	85 c0                	test   %eax,%eax
-80105c05:	74 1d                	je     80105c24 <trap+0xc4>
-80105c07:	e8 d4 db ff ff       	call   801037e0 <myproc>
-80105c0c:	8b 50 24             	mov    0x24(%eax),%edx
-80105c0f:	85 d2                	test   %edx,%edx
-80105c11:	74 11                	je     80105c24 <trap+0xc4>
-80105c13:	0f b7 47 3c          	movzwl 0x3c(%edi),%eax
-80105c17:	83 e0 03             	and    $0x3,%eax
-80105c1a:	66 83 f8 03          	cmp    $0x3,%ax
-80105c1e:	0f 84 4c 01 00 00    	je     80105d70 <trap+0x210>
-    exit();
-
-  // Force process to give up CPU on clock tick.
-  // If interrupts were on while locks held, would need to check nlock.
-  if(myproc() && myproc()->state == RUNNING &&
-80105c24:	e8 b7 db ff ff       	call   801037e0 <myproc>
-80105c29:	85 c0                	test   %eax,%eax
-80105c2b:	74 0b                	je     80105c38 <trap+0xd8>
-80105c2d:	e8 ae db ff ff       	call   801037e0 <myproc>
-80105c32:	83 78 0c 04          	cmpl   $0x4,0xc(%eax)
-80105c36:	74 68                	je     80105ca0 <trap+0x140>
-     tf->trapno == T_IRQ0+IRQ_TIMER)
-    yield();
+80106500:	e8 4b d9 ff ff       	call   80103e50 <myproc>
+80106505:	85 c0                	test   %eax,%eax
+80106507:	74 1d                	je     80106526 <trap+0xc6>
+80106509:	e8 42 d9 ff ff       	call   80103e50 <myproc>
+8010650e:	8b 50 24             	mov    0x24(%eax),%edx
+80106511:	85 d2                	test   %edx,%edx
+80106513:	74 11                	je     80106526 <trap+0xc6>
+80106515:	0f b7 47 3c          	movzwl 0x3c(%edi),%eax
+80106519:	83 e0 03             	and    $0x3,%eax
+8010651c:	66 83 f8 03          	cmp    $0x3,%ax
+80106520:	0f 84 3a 01 00 00    	je     80106660 <trap+0x200>
+  // if(myproc() && myproc()->state == RUNNING &&
+  //    tf->trapno == T_IRQ0+IRQ_TIMER)
+  //   yield();
 
   // Check if the process has been killed since we yielded
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105c38:	e8 a3 db ff ff       	call   801037e0 <myproc>
-80105c3d:	85 c0                	test   %eax,%eax
-80105c3f:	74 19                	je     80105c5a <trap+0xfa>
-80105c41:	e8 9a db ff ff       	call   801037e0 <myproc>
-80105c46:	8b 40 24             	mov    0x24(%eax),%eax
-80105c49:	85 c0                	test   %eax,%eax
-80105c4b:	74 0d                	je     80105c5a <trap+0xfa>
-80105c4d:	0f b7 47 3c          	movzwl 0x3c(%edi),%eax
-80105c51:	83 e0 03             	and    $0x3,%eax
-80105c54:	66 83 f8 03          	cmp    $0x3,%ax
-80105c58:	74 37                	je     80105c91 <trap+0x131>
+80106526:	e8 25 d9 ff ff       	call   80103e50 <myproc>
+8010652b:	85 c0                	test   %eax,%eax
+8010652d:	74 19                	je     80106548 <trap+0xe8>
+8010652f:	e8 1c d9 ff ff       	call   80103e50 <myproc>
+80106534:	8b 40 24             	mov    0x24(%eax),%eax
+80106537:	85 c0                	test   %eax,%eax
+80106539:	74 0d                	je     80106548 <trap+0xe8>
+8010653b:	0f b7 47 3c          	movzwl 0x3c(%edi),%eax
+8010653f:	83 e0 03             	and    $0x3,%eax
+80106542:	66 83 f8 03          	cmp    $0x3,%ax
+80106546:	74 31                	je     80106579 <trap+0x119>
     exit();
 }
-80105c5a:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105c5d:	5b                   	pop    %ebx
-80105c5e:	5e                   	pop    %esi
-80105c5f:	5f                   	pop    %edi
-80105c60:	5d                   	pop    %ebp
-80105c61:	c3                   	ret    
-80105c62:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106548:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010654b:	5b                   	pop    %ebx
+8010654c:	5e                   	pop    %esi
+8010654d:	5f                   	pop    %edi
+8010654e:	5d                   	pop    %ebp
+8010654f:	c3                   	ret    
     if(myproc()->killed)
-80105c68:	e8 73 db ff ff       	call   801037e0 <myproc>
-80105c6d:	8b 58 24             	mov    0x24(%eax),%ebx
-80105c70:	85 db                	test   %ebx,%ebx
-80105c72:	0f 85 e8 00 00 00    	jne    80105d60 <trap+0x200>
+80106550:	e8 fb d8 ff ff       	call   80103e50 <myproc>
+80106555:	8b 58 24             	mov    0x24(%eax),%ebx
+80106558:	85 db                	test   %ebx,%ebx
+8010655a:	0f 85 f0 00 00 00    	jne    80106650 <trap+0x1f0>
     myproc()->tf = tf;
-80105c78:	e8 63 db ff ff       	call   801037e0 <myproc>
-80105c7d:	89 78 18             	mov    %edi,0x18(%eax)
+80106560:	e8 eb d8 ff ff       	call   80103e50 <myproc>
+80106565:	89 78 18             	mov    %edi,0x18(%eax)
     syscall();
-80105c80:	e8 fb ee ff ff       	call   80104b80 <syscall>
+80106568:	e8 f3 ee ff ff       	call   80105460 <syscall>
     if(myproc()->killed)
-80105c85:	e8 56 db ff ff       	call   801037e0 <myproc>
-80105c8a:	8b 48 24             	mov    0x24(%eax),%ecx
-80105c8d:	85 c9                	test   %ecx,%ecx
-80105c8f:	74 c9                	je     80105c5a <trap+0xfa>
-}
-80105c91:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105c94:	5b                   	pop    %ebx
-80105c95:	5e                   	pop    %esi
-80105c96:	5f                   	pop    %edi
-80105c97:	5d                   	pop    %ebp
+8010656d:	e8 de d8 ff ff       	call   80103e50 <myproc>
+80106572:	8b 48 24             	mov    0x24(%eax),%ecx
+80106575:	85 c9                	test   %ecx,%ecx
+80106577:	74 cf                	je     80106548 <trap+0xe8>
+}
+80106579:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010657c:	5b                   	pop    %ebx
+8010657d:	5e                   	pop    %esi
+8010657e:	5f                   	pop    %edi
+8010657f:	5d                   	pop    %ebp
       exit();
-80105c98:	e9 63 df ff ff       	jmp    80103c00 <exit>
-80105c9d:	8d 76 00             	lea    0x0(%esi),%esi
-  if(myproc() && myproc()->state == RUNNING &&
-80105ca0:	83 7f 30 20          	cmpl   $0x20,0x30(%edi)
-80105ca4:	75 92                	jne    80105c38 <trap+0xd8>
-    yield();
-80105ca6:	e8 85 e0 ff ff       	call   80103d30 <yield>
-80105cab:	eb 8b                	jmp    80105c38 <trap+0xd8>
-80105cad:	8d 76 00             	lea    0x0(%esi),%esi
-    if(cpuid() == 0){
-80105cb0:	e8 0b db ff ff       	call   801037c0 <cpuid>
-80105cb5:	85 c0                	test   %eax,%eax
-80105cb7:	0f 84 c3 00 00 00    	je     80105d80 <trap+0x220>
+80106580:	e9 4b e0 ff ff       	jmp    801045d0 <exit>
+80106585:	8d 76 00             	lea    0x0(%esi),%esi
+    ideintr();
+80106588:	e8 f3 ba ff ff       	call   80102080 <ideintr>
     lapiceoi();
-80105cbd:	e8 8e ca ff ff       	call   80102750 <lapiceoi>
+8010658d:	e8 3e c2 ff ff       	call   801027d0 <lapiceoi>
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105cc2:	e8 19 db ff ff       	call   801037e0 <myproc>
-80105cc7:	85 c0                	test   %eax,%eax
-80105cc9:	0f 85 38 ff ff ff    	jne    80105c07 <trap+0xa7>
-80105ccf:	e9 50 ff ff ff       	jmp    80105c24 <trap+0xc4>
-80105cd4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106592:	e8 b9 d8 ff ff       	call   80103e50 <myproc>
+80106597:	85 c0                	test   %eax,%eax
+80106599:	0f 85 6a ff ff ff    	jne    80106509 <trap+0xa9>
+8010659f:	eb 85                	jmp    80106526 <trap+0xc6>
+801065a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    handlePageFault();
+801065a8:	e8 53 fd ff ff       	call   80106300 <handlePageFault>
+  break;
+801065ad:	e9 4e ff ff ff       	jmp    80106500 <trap+0xa0>
+801065b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(cpuid() == 0){
+801065b8:	e8 43 d5 ff ff       	call   80103b00 <cpuid>
+801065bd:	85 c0                	test   %eax,%eax
+801065bf:	75 cc                	jne    8010658d <trap+0x12d>
+      acquire(&tickslock);
+801065c1:	83 ec 0c             	sub    $0xc,%esp
+801065c4:	68 40 60 11 80       	push   $0x80116040
+801065c9:	e8 92 e9 ff ff       	call   80104f60 <acquire>
+      wakeup(&ticks);
+801065ce:	c7 04 24 80 68 11 80 	movl   $0x80116880,(%esp)
+      ticks++;
+801065d5:	83 05 80 68 11 80 01 	addl   $0x1,0x80116880
+      wakeup(&ticks);
+801065dc:	e8 1f e3 ff ff       	call   80104900 <wakeup>
+      release(&tickslock);
+801065e1:	c7 04 24 40 60 11 80 	movl   $0x80116040,(%esp)
+801065e8:	e8 33 ea ff ff       	call   80105020 <release>
+801065ed:	83 c4 10             	add    $0x10,%esp
+801065f0:	eb 9b                	jmp    8010658d <trap+0x12d>
+801065f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     kbdintr();
-80105cd8:	e8 33 c9 ff ff       	call   80102610 <kbdintr>
+801065f8:	e8 93 c0 ff ff       	call   80102690 <kbdintr>
     lapiceoi();
-80105cdd:	e8 6e ca ff ff       	call   80102750 <lapiceoi>
-  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105ce2:	e8 f9 da ff ff       	call   801037e0 <myproc>
-80105ce7:	85 c0                	test   %eax,%eax
-80105ce9:	0f 85 18 ff ff ff    	jne    80105c07 <trap+0xa7>
-80105cef:	e9 30 ff ff ff       	jmp    80105c24 <trap+0xc4>
-80105cf4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801065fd:	e8 ce c1 ff ff       	call   801027d0 <lapiceoi>
+    break;
+80106602:	e9 f9 fe ff ff       	jmp    80106500 <trap+0xa0>
+80106607:	89 f6                	mov    %esi,%esi
+80106609:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
     uartintr();
-80105cf8:	e8 53 02 00 00       	call   80105f50 <uartintr>
+80106610:	e8 fb 01 00 00       	call   80106810 <uartintr>
     lapiceoi();
-80105cfd:	e8 4e ca ff ff       	call   80102750 <lapiceoi>
-  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105d02:	e8 d9 da ff ff       	call   801037e0 <myproc>
-80105d07:	85 c0                	test   %eax,%eax
-80105d09:	0f 85 f8 fe ff ff    	jne    80105c07 <trap+0xa7>
-80105d0f:	e9 10 ff ff ff       	jmp    80105c24 <trap+0xc4>
-80105d14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106615:	e8 b6 c1 ff ff       	call   801027d0 <lapiceoi>
+    break;
+8010661a:	e9 e1 fe ff ff       	jmp    80106500 <trap+0xa0>
+8010661f:	90                   	nop
     cprintf("cpu%d: spurious interrupt at %x:%x\n",
-80105d18:	0f b7 5f 3c          	movzwl 0x3c(%edi),%ebx
-80105d1c:	8b 77 38             	mov    0x38(%edi),%esi
-80105d1f:	e8 9c da ff ff       	call   801037c0 <cpuid>
-80105d24:	56                   	push   %esi
-80105d25:	53                   	push   %ebx
-80105d26:	50                   	push   %eax
-80105d27:	68 c0 7b 10 80       	push   $0x80107bc0
-80105d2c:	e8 2f a9 ff ff       	call   80100660 <cprintf>
+80106620:	0f b7 5f 3c          	movzwl 0x3c(%edi),%ebx
+80106624:	8b 77 38             	mov    0x38(%edi),%esi
+80106627:	e8 d4 d4 ff ff       	call   80103b00 <cpuid>
+8010662c:	56                   	push   %esi
+8010662d:	53                   	push   %ebx
+8010662e:	50                   	push   %eax
+8010662f:	68 b8 85 10 80       	push   $0x801085b8
+80106634:	e8 27 a0 ff ff       	call   80100660 <cprintf>
     lapiceoi();
-80105d31:	e8 1a ca ff ff       	call   80102750 <lapiceoi>
+80106639:	e8 92 c1 ff ff       	call   801027d0 <lapiceoi>
     break;
-80105d36:	83 c4 10             	add    $0x10,%esp
-  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105d39:	e8 a2 da ff ff       	call   801037e0 <myproc>
-80105d3e:	85 c0                	test   %eax,%eax
-80105d40:	0f 85 c1 fe ff ff    	jne    80105c07 <trap+0xa7>
-80105d46:	e9 d9 fe ff ff       	jmp    80105c24 <trap+0xc4>
-80105d4b:	90                   	nop
-80105d4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    ideintr();
-80105d50:	e8 2b c3 ff ff       	call   80102080 <ideintr>
-80105d55:	e9 63 ff ff ff       	jmp    80105cbd <trap+0x15d>
-80105d5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010663e:	83 c4 10             	add    $0x10,%esp
+80106641:	e9 ba fe ff ff       	jmp    80106500 <trap+0xa0>
+80106646:	8d 76 00             	lea    0x0(%esi),%esi
+80106649:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
       exit();
-80105d60:	e8 9b de ff ff       	call   80103c00 <exit>
-80105d65:	e9 0e ff ff ff       	jmp    80105c78 <trap+0x118>
-80105d6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106650:	e8 7b df ff ff       	call   801045d0 <exit>
+80106655:	e9 06 ff ff ff       	jmp    80106560 <trap+0x100>
+8010665a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     exit();
-80105d70:	e8 8b de ff ff       	call   80103c00 <exit>
-80105d75:	e9 aa fe ff ff       	jmp    80105c24 <trap+0xc4>
-80105d7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-      acquire(&tickslock);
-80105d80:	83 ec 0c             	sub    $0xc,%esp
-80105d83:	68 60 4d 11 80       	push   $0x80114d60
-80105d88:	e8 f3 e8 ff ff       	call   80104680 <acquire>
-      wakeup(&ticks);
-80105d8d:	c7 04 24 a0 55 11 80 	movl   $0x801155a0,(%esp)
-      ticks++;
-80105d94:	83 05 a0 55 11 80 01 	addl   $0x1,0x801155a0
-      wakeup(&ticks);
-80105d9b:	e8 90 e1 ff ff       	call   80103f30 <wakeup>
-      release(&tickslock);
-80105da0:	c7 04 24 60 4d 11 80 	movl   $0x80114d60,(%esp)
-80105da7:	e8 94 e9 ff ff       	call   80104740 <release>
-80105dac:	83 c4 10             	add    $0x10,%esp
-80105daf:	e9 09 ff ff ff       	jmp    80105cbd <trap+0x15d>
-80105db4:	0f 20 d6             	mov    %cr2,%esi
+80106660:	e8 6b df ff ff       	call   801045d0 <exit>
+80106665:	e9 bc fe ff ff       	jmp    80106526 <trap+0xc6>
+8010666a:	0f 20 d6             	mov    %cr2,%esi
       cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
-80105db7:	e8 04 da ff ff       	call   801037c0 <cpuid>
-80105dbc:	83 ec 0c             	sub    $0xc,%esp
-80105dbf:	56                   	push   %esi
-80105dc0:	53                   	push   %ebx
-80105dc1:	50                   	push   %eax
-80105dc2:	ff 77 30             	pushl  0x30(%edi)
-80105dc5:	68 e4 7b 10 80       	push   $0x80107be4
-80105dca:	e8 91 a8 ff ff       	call   80100660 <cprintf>
+8010666d:	e8 8e d4 ff ff       	call   80103b00 <cpuid>
+80106672:	83 ec 0c             	sub    $0xc,%esp
+80106675:	56                   	push   %esi
+80106676:	53                   	push   %ebx
+80106677:	50                   	push   %eax
+80106678:	ff 77 30             	pushl  0x30(%edi)
+8010667b:	68 dc 85 10 80       	push   $0x801085dc
+80106680:	e8 db 9f ff ff       	call   80100660 <cprintf>
       panic("trap");
-80105dcf:	83 c4 14             	add    $0x14,%esp
-80105dd2:	68 b8 7b 10 80       	push   $0x80107bb8
-80105dd7:	e8 b4 a5 ff ff       	call   80100390 <panic>
-80105ddc:	66 90                	xchg   %ax,%ax
-80105dde:	66 90                	xchg   %ax,%ax
+80106685:	83 c4 14             	add    $0x14,%esp
+80106688:	68 b1 85 10 80       	push   $0x801085b1
+8010668d:	e8 fe 9c ff ff       	call   80100390 <panic>
+80106692:	66 90                	xchg   %ax,%ax
+80106694:	66 90                	xchg   %ax,%ax
+80106696:	66 90                	xchg   %ax,%ax
+80106698:	66 90                	xchg   %ax,%ax
+8010669a:	66 90                	xchg   %ax,%ax
+8010669c:	66 90                	xchg   %ax,%ax
+8010669e:	66 90                	xchg   %ax,%ax
 
-80105de0 <uartgetc>:
+801066a0 <uartgetc>:
 }
 
 static int
 uartgetc(void)
 {
   if(!uart)
-80105de0:	a1 bc a5 10 80       	mov    0x8010a5bc,%eax
+801066a0:	a1 c4 b5 10 80       	mov    0x8010b5c4,%eax
 {
-80105de5:	55                   	push   %ebp
-80105de6:	89 e5                	mov    %esp,%ebp
+801066a5:	55                   	push   %ebp
+801066a6:	89 e5                	mov    %esp,%ebp
   if(!uart)
-80105de8:	85 c0                	test   %eax,%eax
-80105dea:	74 1c                	je     80105e08 <uartgetc+0x28>
+801066a8:	85 c0                	test   %eax,%eax
+801066aa:	74 1c                	je     801066c8 <uartgetc+0x28>
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80105dec:	ba fd 03 00 00       	mov    $0x3fd,%edx
-80105df1:	ec                   	in     (%dx),%al
+801066ac:	ba fd 03 00 00       	mov    $0x3fd,%edx
+801066b1:	ec                   	in     (%dx),%al
     return -1;
   if(!(inb(COM1+5) & 0x01))
-80105df2:	a8 01                	test   $0x1,%al
-80105df4:	74 12                	je     80105e08 <uartgetc+0x28>
-80105df6:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105dfb:	ec                   	in     (%dx),%al
+801066b2:	a8 01                	test   $0x1,%al
+801066b4:	74 12                	je     801066c8 <uartgetc+0x28>
+801066b6:	ba f8 03 00 00       	mov    $0x3f8,%edx
+801066bb:	ec                   	in     (%dx),%al
     return -1;
   return inb(COM1+0);
-80105dfc:	0f b6 c0             	movzbl %al,%eax
+801066bc:	0f b6 c0             	movzbl %al,%eax
 }
-80105dff:	5d                   	pop    %ebp
-80105e00:	c3                   	ret    
-80105e01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801066bf:	5d                   	pop    %ebp
+801066c0:	c3                   	ret    
+801066c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     return -1;
-80105e08:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801066c8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80105e0d:	5d                   	pop    %ebp
-80105e0e:	c3                   	ret    
-80105e0f:	90                   	nop
+801066cd:	5d                   	pop    %ebp
+801066ce:	c3                   	ret    
+801066cf:	90                   	nop
 
-80105e10 <uartputc.part.0>:
+801066d0 <uartputc.part.0>:
 uartputc(int c)
-80105e10:	55                   	push   %ebp
-80105e11:	89 e5                	mov    %esp,%ebp
-80105e13:	57                   	push   %edi
-80105e14:	56                   	push   %esi
-80105e15:	53                   	push   %ebx
-80105e16:	89 c7                	mov    %eax,%edi
-80105e18:	bb 80 00 00 00       	mov    $0x80,%ebx
-80105e1d:	be fd 03 00 00       	mov    $0x3fd,%esi
-80105e22:	83 ec 0c             	sub    $0xc,%esp
-80105e25:	eb 1b                	jmp    80105e42 <uartputc.part.0+0x32>
-80105e27:	89 f6                	mov    %esi,%esi
-80105e29:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+801066d0:	55                   	push   %ebp
+801066d1:	89 e5                	mov    %esp,%ebp
+801066d3:	57                   	push   %edi
+801066d4:	56                   	push   %esi
+801066d5:	53                   	push   %ebx
+801066d6:	89 c7                	mov    %eax,%edi
+801066d8:	bb 80 00 00 00       	mov    $0x80,%ebx
+801066dd:	be fd 03 00 00       	mov    $0x3fd,%esi
+801066e2:	83 ec 0c             	sub    $0xc,%esp
+801066e5:	eb 1b                	jmp    80106702 <uartputc.part.0+0x32>
+801066e7:	89 f6                	mov    %esi,%esi
+801066e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
     microdelay(10);
-80105e30:	83 ec 0c             	sub    $0xc,%esp
-80105e33:	6a 0a                	push   $0xa
-80105e35:	e8 36 c9 ff ff       	call   80102770 <microdelay>
+801066f0:	83 ec 0c             	sub    $0xc,%esp
+801066f3:	6a 0a                	push   $0xa
+801066f5:	e8 f6 c0 ff ff       	call   801027f0 <microdelay>
   for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
-80105e3a:	83 c4 10             	add    $0x10,%esp
-80105e3d:	83 eb 01             	sub    $0x1,%ebx
-80105e40:	74 07                	je     80105e49 <uartputc.part.0+0x39>
-80105e42:	89 f2                	mov    %esi,%edx
-80105e44:	ec                   	in     (%dx),%al
-80105e45:	a8 20                	test   $0x20,%al
-80105e47:	74 e7                	je     80105e30 <uartputc.part.0+0x20>
+801066fa:	83 c4 10             	add    $0x10,%esp
+801066fd:	83 eb 01             	sub    $0x1,%ebx
+80106700:	74 07                	je     80106709 <uartputc.part.0+0x39>
+80106702:	89 f2                	mov    %esi,%edx
+80106704:	ec                   	in     (%dx),%al
+80106705:	a8 20                	test   $0x20,%al
+80106707:	74 e7                	je     801066f0 <uartputc.part.0+0x20>
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80105e49:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105e4e:	89 f8                	mov    %edi,%eax
-80105e50:	ee                   	out    %al,(%dx)
-}
-80105e51:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105e54:	5b                   	pop    %ebx
-80105e55:	5e                   	pop    %esi
-80105e56:	5f                   	pop    %edi
-80105e57:	5d                   	pop    %ebp
-80105e58:	c3                   	ret    
-80105e59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80105e60 <uartinit>:
-{
-80105e60:	55                   	push   %ebp
-80105e61:	31 c9                	xor    %ecx,%ecx
-80105e63:	89 c8                	mov    %ecx,%eax
-80105e65:	89 e5                	mov    %esp,%ebp
-80105e67:	57                   	push   %edi
-80105e68:	56                   	push   %esi
-80105e69:	53                   	push   %ebx
-80105e6a:	bb fa 03 00 00       	mov    $0x3fa,%ebx
-80105e6f:	89 da                	mov    %ebx,%edx
-80105e71:	83 ec 0c             	sub    $0xc,%esp
-80105e74:	ee                   	out    %al,(%dx)
-80105e75:	bf fb 03 00 00       	mov    $0x3fb,%edi
-80105e7a:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
-80105e7f:	89 fa                	mov    %edi,%edx
-80105e81:	ee                   	out    %al,(%dx)
-80105e82:	b8 0c 00 00 00       	mov    $0xc,%eax
-80105e87:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105e8c:	ee                   	out    %al,(%dx)
-80105e8d:	be f9 03 00 00       	mov    $0x3f9,%esi
-80105e92:	89 c8                	mov    %ecx,%eax
-80105e94:	89 f2                	mov    %esi,%edx
-80105e96:	ee                   	out    %al,(%dx)
-80105e97:	b8 03 00 00 00       	mov    $0x3,%eax
-80105e9c:	89 fa                	mov    %edi,%edx
-80105e9e:	ee                   	out    %al,(%dx)
-80105e9f:	ba fc 03 00 00       	mov    $0x3fc,%edx
-80105ea4:	89 c8                	mov    %ecx,%eax
-80105ea6:	ee                   	out    %al,(%dx)
-80105ea7:	b8 01 00 00 00       	mov    $0x1,%eax
-80105eac:	89 f2                	mov    %esi,%edx
-80105eae:	ee                   	out    %al,(%dx)
+80106709:	ba f8 03 00 00       	mov    $0x3f8,%edx
+8010670e:	89 f8                	mov    %edi,%eax
+80106710:	ee                   	out    %al,(%dx)
+}
+80106711:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106714:	5b                   	pop    %ebx
+80106715:	5e                   	pop    %esi
+80106716:	5f                   	pop    %edi
+80106717:	5d                   	pop    %ebp
+80106718:	c3                   	ret    
+80106719:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80106720 <uartinit>:
+{
+80106720:	55                   	push   %ebp
+80106721:	31 c9                	xor    %ecx,%ecx
+80106723:	89 c8                	mov    %ecx,%eax
+80106725:	89 e5                	mov    %esp,%ebp
+80106727:	57                   	push   %edi
+80106728:	56                   	push   %esi
+80106729:	53                   	push   %ebx
+8010672a:	bb fa 03 00 00       	mov    $0x3fa,%ebx
+8010672f:	89 da                	mov    %ebx,%edx
+80106731:	83 ec 0c             	sub    $0xc,%esp
+80106734:	ee                   	out    %al,(%dx)
+80106735:	bf fb 03 00 00       	mov    $0x3fb,%edi
+8010673a:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
+8010673f:	89 fa                	mov    %edi,%edx
+80106741:	ee                   	out    %al,(%dx)
+80106742:	b8 0c 00 00 00       	mov    $0xc,%eax
+80106747:	ba f8 03 00 00       	mov    $0x3f8,%edx
+8010674c:	ee                   	out    %al,(%dx)
+8010674d:	be f9 03 00 00       	mov    $0x3f9,%esi
+80106752:	89 c8                	mov    %ecx,%eax
+80106754:	89 f2                	mov    %esi,%edx
+80106756:	ee                   	out    %al,(%dx)
+80106757:	b8 03 00 00 00       	mov    $0x3,%eax
+8010675c:	89 fa                	mov    %edi,%edx
+8010675e:	ee                   	out    %al,(%dx)
+8010675f:	ba fc 03 00 00       	mov    $0x3fc,%edx
+80106764:	89 c8                	mov    %ecx,%eax
+80106766:	ee                   	out    %al,(%dx)
+80106767:	b8 01 00 00 00       	mov    $0x1,%eax
+8010676c:	89 f2                	mov    %esi,%edx
+8010676e:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80105eaf:	ba fd 03 00 00       	mov    $0x3fd,%edx
-80105eb4:	ec                   	in     (%dx),%al
+8010676f:	ba fd 03 00 00       	mov    $0x3fd,%edx
+80106774:	ec                   	in     (%dx),%al
   if(inb(COM1+5) == 0xFF)
-80105eb5:	3c ff                	cmp    $0xff,%al
-80105eb7:	74 5a                	je     80105f13 <uartinit+0xb3>
+80106775:	3c ff                	cmp    $0xff,%al
+80106777:	74 5a                	je     801067d3 <uartinit+0xb3>
   uart = 1;
-80105eb9:	c7 05 bc a5 10 80 01 	movl   $0x1,0x8010a5bc
-80105ec0:	00 00 00 
-80105ec3:	89 da                	mov    %ebx,%edx
-80105ec5:	ec                   	in     (%dx),%al
-80105ec6:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105ecb:	ec                   	in     (%dx),%al
+80106779:	c7 05 c4 b5 10 80 01 	movl   $0x1,0x8010b5c4
+80106780:	00 00 00 
+80106783:	89 da                	mov    %ebx,%edx
+80106785:	ec                   	in     (%dx),%al
+80106786:	ba f8 03 00 00       	mov    $0x3f8,%edx
+8010678b:	ec                   	in     (%dx),%al
   ioapicenable(IRQ_COM1, 0);
-80105ecc:	83 ec 08             	sub    $0x8,%esp
+8010678c:	83 ec 08             	sub    $0x8,%esp
   for(p="xv6...\n"; *p; p++)
-80105ecf:	bb dc 7c 10 80       	mov    $0x80107cdc,%ebx
+8010678f:	bb 1c 87 10 80       	mov    $0x8010871c,%ebx
   ioapicenable(IRQ_COM1, 0);
-80105ed4:	6a 00                	push   $0x0
-80105ed6:	6a 04                	push   $0x4
-80105ed8:	e8 f3 c3 ff ff       	call   801022d0 <ioapicenable>
-80105edd:	83 c4 10             	add    $0x10,%esp
+80106794:	6a 00                	push   $0x0
+80106796:	6a 04                	push   $0x4
+80106798:	e8 33 bb ff ff       	call   801022d0 <ioapicenable>
+8010679d:	83 c4 10             	add    $0x10,%esp
   for(p="xv6...\n"; *p; p++)
-80105ee0:	b8 78 00 00 00       	mov    $0x78,%eax
-80105ee5:	eb 13                	jmp    80105efa <uartinit+0x9a>
-80105ee7:	89 f6                	mov    %esi,%esi
-80105ee9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-80105ef0:	83 c3 01             	add    $0x1,%ebx
-80105ef3:	0f be 03             	movsbl (%ebx),%eax
-80105ef6:	84 c0                	test   %al,%al
-80105ef8:	74 19                	je     80105f13 <uartinit+0xb3>
+801067a0:	b8 78 00 00 00       	mov    $0x78,%eax
+801067a5:	eb 13                	jmp    801067ba <uartinit+0x9a>
+801067a7:	89 f6                	mov    %esi,%esi
+801067a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+801067b0:	83 c3 01             	add    $0x1,%ebx
+801067b3:	0f be 03             	movsbl (%ebx),%eax
+801067b6:	84 c0                	test   %al,%al
+801067b8:	74 19                	je     801067d3 <uartinit+0xb3>
   if(!uart)
-80105efa:	8b 15 bc a5 10 80    	mov    0x8010a5bc,%edx
-80105f00:	85 d2                	test   %edx,%edx
-80105f02:	74 ec                	je     80105ef0 <uartinit+0x90>
+801067ba:	8b 15 c4 b5 10 80    	mov    0x8010b5c4,%edx
+801067c0:	85 d2                	test   %edx,%edx
+801067c2:	74 ec                	je     801067b0 <uartinit+0x90>
   for(p="xv6...\n"; *p; p++)
-80105f04:	83 c3 01             	add    $0x1,%ebx
-80105f07:	e8 04 ff ff ff       	call   80105e10 <uartputc.part.0>
-80105f0c:	0f be 03             	movsbl (%ebx),%eax
-80105f0f:	84 c0                	test   %al,%al
-80105f11:	75 e7                	jne    80105efa <uartinit+0x9a>
-}
-80105f13:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105f16:	5b                   	pop    %ebx
-80105f17:	5e                   	pop    %esi
-80105f18:	5f                   	pop    %edi
-80105f19:	5d                   	pop    %ebp
-80105f1a:	c3                   	ret    
-80105f1b:	90                   	nop
-80105f1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801067c4:	83 c3 01             	add    $0x1,%ebx
+801067c7:	e8 04 ff ff ff       	call   801066d0 <uartputc.part.0>
+801067cc:	0f be 03             	movsbl (%ebx),%eax
+801067cf:	84 c0                	test   %al,%al
+801067d1:	75 e7                	jne    801067ba <uartinit+0x9a>
+}
+801067d3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801067d6:	5b                   	pop    %ebx
+801067d7:	5e                   	pop    %esi
+801067d8:	5f                   	pop    %edi
+801067d9:	5d                   	pop    %ebp
+801067da:	c3                   	ret    
+801067db:	90                   	nop
+801067dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80105f20 <uartputc>:
+801067e0 <uartputc>:
   if(!uart)
-80105f20:	8b 15 bc a5 10 80    	mov    0x8010a5bc,%edx
+801067e0:	8b 15 c4 b5 10 80    	mov    0x8010b5c4,%edx
 {
-80105f26:	55                   	push   %ebp
-80105f27:	89 e5                	mov    %esp,%ebp
+801067e6:	55                   	push   %ebp
+801067e7:	89 e5                	mov    %esp,%ebp
   if(!uart)
-80105f29:	85 d2                	test   %edx,%edx
+801067e9:	85 d2                	test   %edx,%edx
 {
-80105f2b:	8b 45 08             	mov    0x8(%ebp),%eax
+801067eb:	8b 45 08             	mov    0x8(%ebp),%eax
   if(!uart)
-80105f2e:	74 10                	je     80105f40 <uartputc+0x20>
+801067ee:	74 10                	je     80106800 <uartputc+0x20>
 }
-80105f30:	5d                   	pop    %ebp
-80105f31:	e9 da fe ff ff       	jmp    80105e10 <uartputc.part.0>
-80105f36:	8d 76 00             	lea    0x0(%esi),%esi
-80105f39:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-80105f40:	5d                   	pop    %ebp
-80105f41:	c3                   	ret    
-80105f42:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105f49:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+801067f0:	5d                   	pop    %ebp
+801067f1:	e9 da fe ff ff       	jmp    801066d0 <uartputc.part.0>
+801067f6:	8d 76 00             	lea    0x0(%esi),%esi
+801067f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80106800:	5d                   	pop    %ebp
+80106801:	c3                   	ret    
+80106802:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106809:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80105f50 <uartintr>:
+80106810 <uartintr>:
 
 void
 uartintr(void)
 {
-80105f50:	55                   	push   %ebp
-80105f51:	89 e5                	mov    %esp,%ebp
-80105f53:	83 ec 14             	sub    $0x14,%esp
+80106810:	55                   	push   %ebp
+80106811:	89 e5                	mov    %esp,%ebp
+80106813:	83 ec 14             	sub    $0x14,%esp
   consoleintr(uartgetc);
-80105f56:	68 e0 5d 10 80       	push   $0x80105de0
-80105f5b:	e8 b0 a8 ff ff       	call   80100810 <consoleintr>
+80106816:	68 a0 66 10 80       	push   $0x801066a0
+8010681b:	e8 f0 9f ff ff       	call   80100810 <consoleintr>
 }
-80105f60:	83 c4 10             	add    $0x10,%esp
-80105f63:	c9                   	leave  
-80105f64:	c3                   	ret    
+80106820:	83 c4 10             	add    $0x10,%esp
+80106823:	c9                   	leave  
+80106824:	c3                   	ret    
 
-80105f65 <vector0>:
+80106825 <vector0>:
 # generated by vectors.pl - do not edit
 # handlers
 .globl alltraps
 .globl vector0
 vector0:
   pushl $0
-80105f65:	6a 00                	push   $0x0
+80106825:	6a 00                	push   $0x0
   pushl $0
-80105f67:	6a 00                	push   $0x0
+80106827:	6a 00                	push   $0x0
   jmp alltraps
-80105f69:	e9 11 fb ff ff       	jmp    80105a7f <alltraps>
+80106829:	e9 a1 fa ff ff       	jmp    801062cf <alltraps>
 
-80105f6e <vector1>:
+8010682e <vector1>:
 .globl vector1
 vector1:
   pushl $0
-80105f6e:	6a 00                	push   $0x0
+8010682e:	6a 00                	push   $0x0
   pushl $1
-80105f70:	6a 01                	push   $0x1
+80106830:	6a 01                	push   $0x1
   jmp alltraps
-80105f72:	e9 08 fb ff ff       	jmp    80105a7f <alltraps>
+80106832:	e9 98 fa ff ff       	jmp    801062cf <alltraps>
 
-80105f77 <vector2>:
+80106837 <vector2>:
 .globl vector2
 vector2:
   pushl $0
-80105f77:	6a 00                	push   $0x0
+80106837:	6a 00                	push   $0x0
   pushl $2
-80105f79:	6a 02                	push   $0x2
+80106839:	6a 02                	push   $0x2
   jmp alltraps
-80105f7b:	e9 ff fa ff ff       	jmp    80105a7f <alltraps>
+8010683b:	e9 8f fa ff ff       	jmp    801062cf <alltraps>
 
-80105f80 <vector3>:
+80106840 <vector3>:
 .globl vector3
 vector3:
   pushl $0
-80105f80:	6a 00                	push   $0x0
+80106840:	6a 00                	push   $0x0
   pushl $3
-80105f82:	6a 03                	push   $0x3
+80106842:	6a 03                	push   $0x3
   jmp alltraps
-80105f84:	e9 f6 fa ff ff       	jmp    80105a7f <alltraps>
+80106844:	e9 86 fa ff ff       	jmp    801062cf <alltraps>
 
-80105f89 <vector4>:
+80106849 <vector4>:
 .globl vector4
 vector4:
   pushl $0
-80105f89:	6a 00                	push   $0x0
+80106849:	6a 00                	push   $0x0
   pushl $4
-80105f8b:	6a 04                	push   $0x4
+8010684b:	6a 04                	push   $0x4
   jmp alltraps
-80105f8d:	e9 ed fa ff ff       	jmp    80105a7f <alltraps>
+8010684d:	e9 7d fa ff ff       	jmp    801062cf <alltraps>
 
-80105f92 <vector5>:
+80106852 <vector5>:
 .globl vector5
 vector5:
   pushl $0
-80105f92:	6a 00                	push   $0x0
+80106852:	6a 00                	push   $0x0
   pushl $5
-80105f94:	6a 05                	push   $0x5
+80106854:	6a 05                	push   $0x5
   jmp alltraps
-80105f96:	e9 e4 fa ff ff       	jmp    80105a7f <alltraps>
+80106856:	e9 74 fa ff ff       	jmp    801062cf <alltraps>
 
-80105f9b <vector6>:
+8010685b <vector6>:
 .globl vector6
 vector6:
   pushl $0
-80105f9b:	6a 00                	push   $0x0
+8010685b:	6a 00                	push   $0x0
   pushl $6
-80105f9d:	6a 06                	push   $0x6
+8010685d:	6a 06                	push   $0x6
   jmp alltraps
-80105f9f:	e9 db fa ff ff       	jmp    80105a7f <alltraps>
+8010685f:	e9 6b fa ff ff       	jmp    801062cf <alltraps>
 
-80105fa4 <vector7>:
+80106864 <vector7>:
 .globl vector7
 vector7:
   pushl $0
-80105fa4:	6a 00                	push   $0x0
+80106864:	6a 00                	push   $0x0
   pushl $7
-80105fa6:	6a 07                	push   $0x7
+80106866:	6a 07                	push   $0x7
   jmp alltraps
-80105fa8:	e9 d2 fa ff ff       	jmp    80105a7f <alltraps>
+80106868:	e9 62 fa ff ff       	jmp    801062cf <alltraps>
 
-80105fad <vector8>:
+8010686d <vector8>:
 .globl vector8
 vector8:
   pushl $8
-80105fad:	6a 08                	push   $0x8
+8010686d:	6a 08                	push   $0x8
   jmp alltraps
-80105faf:	e9 cb fa ff ff       	jmp    80105a7f <alltraps>
+8010686f:	e9 5b fa ff ff       	jmp    801062cf <alltraps>
 
-80105fb4 <vector9>:
+80106874 <vector9>:
 .globl vector9
 vector9:
   pushl $0
-80105fb4:	6a 00                	push   $0x0
+80106874:	6a 00                	push   $0x0
   pushl $9
-80105fb6:	6a 09                	push   $0x9
+80106876:	6a 09                	push   $0x9
   jmp alltraps
-80105fb8:	e9 c2 fa ff ff       	jmp    80105a7f <alltraps>
+80106878:	e9 52 fa ff ff       	jmp    801062cf <alltraps>
 
-80105fbd <vector10>:
+8010687d <vector10>:
 .globl vector10
 vector10:
   pushl $10
-80105fbd:	6a 0a                	push   $0xa
+8010687d:	6a 0a                	push   $0xa
   jmp alltraps
-80105fbf:	e9 bb fa ff ff       	jmp    80105a7f <alltraps>
+8010687f:	e9 4b fa ff ff       	jmp    801062cf <alltraps>
 
-80105fc4 <vector11>:
+80106884 <vector11>:
 .globl vector11
 vector11:
   pushl $11
-80105fc4:	6a 0b                	push   $0xb
+80106884:	6a 0b                	push   $0xb
   jmp alltraps
-80105fc6:	e9 b4 fa ff ff       	jmp    80105a7f <alltraps>
+80106886:	e9 44 fa ff ff       	jmp    801062cf <alltraps>
 
-80105fcb <vector12>:
+8010688b <vector12>:
 .globl vector12
 vector12:
   pushl $12
-80105fcb:	6a 0c                	push   $0xc
+8010688b:	6a 0c                	push   $0xc
   jmp alltraps
-80105fcd:	e9 ad fa ff ff       	jmp    80105a7f <alltraps>
+8010688d:	e9 3d fa ff ff       	jmp    801062cf <alltraps>
 
-80105fd2 <vector13>:
+80106892 <vector13>:
 .globl vector13
 vector13:
   pushl $13
-80105fd2:	6a 0d                	push   $0xd
+80106892:	6a 0d                	push   $0xd
   jmp alltraps
-80105fd4:	e9 a6 fa ff ff       	jmp    80105a7f <alltraps>
+80106894:	e9 36 fa ff ff       	jmp    801062cf <alltraps>
 
-80105fd9 <vector14>:
+80106899 <vector14>:
 .globl vector14
 vector14:
   pushl $14
-80105fd9:	6a 0e                	push   $0xe
+80106899:	6a 0e                	push   $0xe
   jmp alltraps
-80105fdb:	e9 9f fa ff ff       	jmp    80105a7f <alltraps>
+8010689b:	e9 2f fa ff ff       	jmp    801062cf <alltraps>
 
-80105fe0 <vector15>:
+801068a0 <vector15>:
 .globl vector15
 vector15:
   pushl $0
-80105fe0:	6a 00                	push   $0x0
+801068a0:	6a 00                	push   $0x0
   pushl $15
-80105fe2:	6a 0f                	push   $0xf
+801068a2:	6a 0f                	push   $0xf
   jmp alltraps
-80105fe4:	e9 96 fa ff ff       	jmp    80105a7f <alltraps>
+801068a4:	e9 26 fa ff ff       	jmp    801062cf <alltraps>
 
-80105fe9 <vector16>:
+801068a9 <vector16>:
 .globl vector16
 vector16:
   pushl $0
-80105fe9:	6a 00                	push   $0x0
+801068a9:	6a 00                	push   $0x0
   pushl $16
-80105feb:	6a 10                	push   $0x10
+801068ab:	6a 10                	push   $0x10
   jmp alltraps
-80105fed:	e9 8d fa ff ff       	jmp    80105a7f <alltraps>
+801068ad:	e9 1d fa ff ff       	jmp    801062cf <alltraps>
 
-80105ff2 <vector17>:
+801068b2 <vector17>:
 .globl vector17
 vector17:
   pushl $17
-80105ff2:	6a 11                	push   $0x11
+801068b2:	6a 11                	push   $0x11
   jmp alltraps
-80105ff4:	e9 86 fa ff ff       	jmp    80105a7f <alltraps>
+801068b4:	e9 16 fa ff ff       	jmp    801062cf <alltraps>
 
-80105ff9 <vector18>:
+801068b9 <vector18>:
 .globl vector18
 vector18:
   pushl $0
-80105ff9:	6a 00                	push   $0x0
+801068b9:	6a 00                	push   $0x0
   pushl $18
-80105ffb:	6a 12                	push   $0x12
+801068bb:	6a 12                	push   $0x12
   jmp alltraps
-80105ffd:	e9 7d fa ff ff       	jmp    80105a7f <alltraps>
+801068bd:	e9 0d fa ff ff       	jmp    801062cf <alltraps>
 
-80106002 <vector19>:
+801068c2 <vector19>:
 .globl vector19
 vector19:
   pushl $0
-80106002:	6a 00                	push   $0x0
+801068c2:	6a 00                	push   $0x0
   pushl $19
-80106004:	6a 13                	push   $0x13
+801068c4:	6a 13                	push   $0x13
   jmp alltraps
-80106006:	e9 74 fa ff ff       	jmp    80105a7f <alltraps>
+801068c6:	e9 04 fa ff ff       	jmp    801062cf <alltraps>
 
-8010600b <vector20>:
+801068cb <vector20>:
 .globl vector20
 vector20:
   pushl $0
-8010600b:	6a 00                	push   $0x0
+801068cb:	6a 00                	push   $0x0
   pushl $20
-8010600d:	6a 14                	push   $0x14
+801068cd:	6a 14                	push   $0x14
   jmp alltraps
-8010600f:	e9 6b fa ff ff       	jmp    80105a7f <alltraps>
+801068cf:	e9 fb f9 ff ff       	jmp    801062cf <alltraps>
 
-80106014 <vector21>:
+801068d4 <vector21>:
 .globl vector21
 vector21:
   pushl $0
-80106014:	6a 00                	push   $0x0
+801068d4:	6a 00                	push   $0x0
   pushl $21
-80106016:	6a 15                	push   $0x15
+801068d6:	6a 15                	push   $0x15
   jmp alltraps
-80106018:	e9 62 fa ff ff       	jmp    80105a7f <alltraps>
+801068d8:	e9 f2 f9 ff ff       	jmp    801062cf <alltraps>
 
-8010601d <vector22>:
+801068dd <vector22>:
 .globl vector22
 vector22:
   pushl $0
-8010601d:	6a 00                	push   $0x0
+801068dd:	6a 00                	push   $0x0
   pushl $22
-8010601f:	6a 16                	push   $0x16
+801068df:	6a 16                	push   $0x16
   jmp alltraps
-80106021:	e9 59 fa ff ff       	jmp    80105a7f <alltraps>
+801068e1:	e9 e9 f9 ff ff       	jmp    801062cf <alltraps>
 
-80106026 <vector23>:
+801068e6 <vector23>:
 .globl vector23
 vector23:
   pushl $0
-80106026:	6a 00                	push   $0x0
+801068e6:	6a 00                	push   $0x0
   pushl $23
-80106028:	6a 17                	push   $0x17
+801068e8:	6a 17                	push   $0x17
   jmp alltraps
-8010602a:	e9 50 fa ff ff       	jmp    80105a7f <alltraps>
+801068ea:	e9 e0 f9 ff ff       	jmp    801062cf <alltraps>
 
-8010602f <vector24>:
+801068ef <vector24>:
 .globl vector24
 vector24:
   pushl $0
-8010602f:	6a 00                	push   $0x0
+801068ef:	6a 00                	push   $0x0
   pushl $24
-80106031:	6a 18                	push   $0x18
+801068f1:	6a 18                	push   $0x18
   jmp alltraps
-80106033:	e9 47 fa ff ff       	jmp    80105a7f <alltraps>
+801068f3:	e9 d7 f9 ff ff       	jmp    801062cf <alltraps>
 
-80106038 <vector25>:
+801068f8 <vector25>:
 .globl vector25
 vector25:
   pushl $0
-80106038:	6a 00                	push   $0x0
+801068f8:	6a 00                	push   $0x0
   pushl $25
-8010603a:	6a 19                	push   $0x19
+801068fa:	6a 19                	push   $0x19
   jmp alltraps
-8010603c:	e9 3e fa ff ff       	jmp    80105a7f <alltraps>
+801068fc:	e9 ce f9 ff ff       	jmp    801062cf <alltraps>
 
-80106041 <vector26>:
+80106901 <vector26>:
 .globl vector26
 vector26:
   pushl $0
-80106041:	6a 00                	push   $0x0
+80106901:	6a 00                	push   $0x0
   pushl $26
-80106043:	6a 1a                	push   $0x1a
+80106903:	6a 1a                	push   $0x1a
   jmp alltraps
-80106045:	e9 35 fa ff ff       	jmp    80105a7f <alltraps>
+80106905:	e9 c5 f9 ff ff       	jmp    801062cf <alltraps>
 
-8010604a <vector27>:
+8010690a <vector27>:
 .globl vector27
 vector27:
   pushl $0
-8010604a:	6a 00                	push   $0x0
+8010690a:	6a 00                	push   $0x0
   pushl $27
-8010604c:	6a 1b                	push   $0x1b
+8010690c:	6a 1b                	push   $0x1b
   jmp alltraps
-8010604e:	e9 2c fa ff ff       	jmp    80105a7f <alltraps>
+8010690e:	e9 bc f9 ff ff       	jmp    801062cf <alltraps>
 
-80106053 <vector28>:
+80106913 <vector28>:
 .globl vector28
 vector28:
   pushl $0
-80106053:	6a 00                	push   $0x0
+80106913:	6a 00                	push   $0x0
   pushl $28
-80106055:	6a 1c                	push   $0x1c
+80106915:	6a 1c                	push   $0x1c
   jmp alltraps
-80106057:	e9 23 fa ff ff       	jmp    80105a7f <alltraps>
+80106917:	e9 b3 f9 ff ff       	jmp    801062cf <alltraps>
 
-8010605c <vector29>:
+8010691c <vector29>:
 .globl vector29
 vector29:
   pushl $0
-8010605c:	6a 00                	push   $0x0
+8010691c:	6a 00                	push   $0x0
   pushl $29
-8010605e:	6a 1d                	push   $0x1d
+8010691e:	6a 1d                	push   $0x1d
   jmp alltraps
-80106060:	e9 1a fa ff ff       	jmp    80105a7f <alltraps>
+80106920:	e9 aa f9 ff ff       	jmp    801062cf <alltraps>
 
-80106065 <vector30>:
+80106925 <vector30>:
 .globl vector30
 vector30:
   pushl $0
-80106065:	6a 00                	push   $0x0
+80106925:	6a 00                	push   $0x0
   pushl $30
-80106067:	6a 1e                	push   $0x1e
+80106927:	6a 1e                	push   $0x1e
   jmp alltraps
-80106069:	e9 11 fa ff ff       	jmp    80105a7f <alltraps>
+80106929:	e9 a1 f9 ff ff       	jmp    801062cf <alltraps>
 
-8010606e <vector31>:
+8010692e <vector31>:
 .globl vector31
 vector31:
   pushl $0
-8010606e:	6a 00                	push   $0x0
+8010692e:	6a 00                	push   $0x0
   pushl $31
-80106070:	6a 1f                	push   $0x1f
+80106930:	6a 1f                	push   $0x1f
   jmp alltraps
-80106072:	e9 08 fa ff ff       	jmp    80105a7f <alltraps>
+80106932:	e9 98 f9 ff ff       	jmp    801062cf <alltraps>
 
-80106077 <vector32>:
+80106937 <vector32>:
 .globl vector32
 vector32:
   pushl $0
-80106077:	6a 00                	push   $0x0
+80106937:	6a 00                	push   $0x0
   pushl $32
-80106079:	6a 20                	push   $0x20
+80106939:	6a 20                	push   $0x20
   jmp alltraps
-8010607b:	e9 ff f9 ff ff       	jmp    80105a7f <alltraps>
+8010693b:	e9 8f f9 ff ff       	jmp    801062cf <alltraps>
 
-80106080 <vector33>:
+80106940 <vector33>:
 .globl vector33
 vector33:
   pushl $0
-80106080:	6a 00                	push   $0x0
+80106940:	6a 00                	push   $0x0
   pushl $33
-80106082:	6a 21                	push   $0x21
+80106942:	6a 21                	push   $0x21
   jmp alltraps
-80106084:	e9 f6 f9 ff ff       	jmp    80105a7f <alltraps>
+80106944:	e9 86 f9 ff ff       	jmp    801062cf <alltraps>
 
-80106089 <vector34>:
+80106949 <vector34>:
 .globl vector34
 vector34:
   pushl $0
-80106089:	6a 00                	push   $0x0
+80106949:	6a 00                	push   $0x0
   pushl $34
-8010608b:	6a 22                	push   $0x22
+8010694b:	6a 22                	push   $0x22
   jmp alltraps
-8010608d:	e9 ed f9 ff ff       	jmp    80105a7f <alltraps>
+8010694d:	e9 7d f9 ff ff       	jmp    801062cf <alltraps>
 
-80106092 <vector35>:
+80106952 <vector35>:
 .globl vector35
 vector35:
   pushl $0
-80106092:	6a 00                	push   $0x0
+80106952:	6a 00                	push   $0x0
   pushl $35
-80106094:	6a 23                	push   $0x23
+80106954:	6a 23                	push   $0x23
   jmp alltraps
-80106096:	e9 e4 f9 ff ff       	jmp    80105a7f <alltraps>
+80106956:	e9 74 f9 ff ff       	jmp    801062cf <alltraps>
 
-8010609b <vector36>:
+8010695b <vector36>:
 .globl vector36
 vector36:
   pushl $0
-8010609b:	6a 00                	push   $0x0
+8010695b:	6a 00                	push   $0x0
   pushl $36
-8010609d:	6a 24                	push   $0x24
+8010695d:	6a 24                	push   $0x24
   jmp alltraps
-8010609f:	e9 db f9 ff ff       	jmp    80105a7f <alltraps>
+8010695f:	e9 6b f9 ff ff       	jmp    801062cf <alltraps>
 
-801060a4 <vector37>:
+80106964 <vector37>:
 .globl vector37
 vector37:
   pushl $0
-801060a4:	6a 00                	push   $0x0
+80106964:	6a 00                	push   $0x0
   pushl $37
-801060a6:	6a 25                	push   $0x25
+80106966:	6a 25                	push   $0x25
   jmp alltraps
-801060a8:	e9 d2 f9 ff ff       	jmp    80105a7f <alltraps>
+80106968:	e9 62 f9 ff ff       	jmp    801062cf <alltraps>
 
-801060ad <vector38>:
+8010696d <vector38>:
 .globl vector38
 vector38:
   pushl $0
-801060ad:	6a 00                	push   $0x0
+8010696d:	6a 00                	push   $0x0
   pushl $38
-801060af:	6a 26                	push   $0x26
+8010696f:	6a 26                	push   $0x26
   jmp alltraps
-801060b1:	e9 c9 f9 ff ff       	jmp    80105a7f <alltraps>
+80106971:	e9 59 f9 ff ff       	jmp    801062cf <alltraps>
 
-801060b6 <vector39>:
+80106976 <vector39>:
 .globl vector39
 vector39:
   pushl $0
-801060b6:	6a 00                	push   $0x0
+80106976:	6a 00                	push   $0x0
   pushl $39
-801060b8:	6a 27                	push   $0x27
+80106978:	6a 27                	push   $0x27
   jmp alltraps
-801060ba:	e9 c0 f9 ff ff       	jmp    80105a7f <alltraps>
+8010697a:	e9 50 f9 ff ff       	jmp    801062cf <alltraps>
 
-801060bf <vector40>:
+8010697f <vector40>:
 .globl vector40
 vector40:
   pushl $0
-801060bf:	6a 00                	push   $0x0
+8010697f:	6a 00                	push   $0x0
   pushl $40
-801060c1:	6a 28                	push   $0x28
+80106981:	6a 28                	push   $0x28
   jmp alltraps
-801060c3:	e9 b7 f9 ff ff       	jmp    80105a7f <alltraps>
+80106983:	e9 47 f9 ff ff       	jmp    801062cf <alltraps>
 
-801060c8 <vector41>:
+80106988 <vector41>:
 .globl vector41
 vector41:
   pushl $0
-801060c8:	6a 00                	push   $0x0
+80106988:	6a 00                	push   $0x0
   pushl $41
-801060ca:	6a 29                	push   $0x29
+8010698a:	6a 29                	push   $0x29
   jmp alltraps
-801060cc:	e9 ae f9 ff ff       	jmp    80105a7f <alltraps>
+8010698c:	e9 3e f9 ff ff       	jmp    801062cf <alltraps>
 
-801060d1 <vector42>:
+80106991 <vector42>:
 .globl vector42
 vector42:
   pushl $0
-801060d1:	6a 00                	push   $0x0
+80106991:	6a 00                	push   $0x0
   pushl $42
-801060d3:	6a 2a                	push   $0x2a
+80106993:	6a 2a                	push   $0x2a
   jmp alltraps
-801060d5:	e9 a5 f9 ff ff       	jmp    80105a7f <alltraps>
+80106995:	e9 35 f9 ff ff       	jmp    801062cf <alltraps>
 
-801060da <vector43>:
+8010699a <vector43>:
 .globl vector43
 vector43:
   pushl $0
-801060da:	6a 00                	push   $0x0
+8010699a:	6a 00                	push   $0x0
   pushl $43
-801060dc:	6a 2b                	push   $0x2b
+8010699c:	6a 2b                	push   $0x2b
   jmp alltraps
-801060de:	e9 9c f9 ff ff       	jmp    80105a7f <alltraps>
+8010699e:	e9 2c f9 ff ff       	jmp    801062cf <alltraps>
 
-801060e3 <vector44>:
+801069a3 <vector44>:
 .globl vector44
 vector44:
   pushl $0
-801060e3:	6a 00                	push   $0x0
+801069a3:	6a 00                	push   $0x0
   pushl $44
-801060e5:	6a 2c                	push   $0x2c
+801069a5:	6a 2c                	push   $0x2c
   jmp alltraps
-801060e7:	e9 93 f9 ff ff       	jmp    80105a7f <alltraps>
+801069a7:	e9 23 f9 ff ff       	jmp    801062cf <alltraps>
 
-801060ec <vector45>:
+801069ac <vector45>:
 .globl vector45
 vector45:
   pushl $0
-801060ec:	6a 00                	push   $0x0
+801069ac:	6a 00                	push   $0x0
   pushl $45
-801060ee:	6a 2d                	push   $0x2d
+801069ae:	6a 2d                	push   $0x2d
   jmp alltraps
-801060f0:	e9 8a f9 ff ff       	jmp    80105a7f <alltraps>
+801069b0:	e9 1a f9 ff ff       	jmp    801062cf <alltraps>
 
-801060f5 <vector46>:
+801069b5 <vector46>:
 .globl vector46
 vector46:
   pushl $0
-801060f5:	6a 00                	push   $0x0
+801069b5:	6a 00                	push   $0x0
   pushl $46
-801060f7:	6a 2e                	push   $0x2e
+801069b7:	6a 2e                	push   $0x2e
   jmp alltraps
-801060f9:	e9 81 f9 ff ff       	jmp    80105a7f <alltraps>
+801069b9:	e9 11 f9 ff ff       	jmp    801062cf <alltraps>
 
-801060fe <vector47>:
+801069be <vector47>:
 .globl vector47
 vector47:
   pushl $0
-801060fe:	6a 00                	push   $0x0
+801069be:	6a 00                	push   $0x0
   pushl $47
-80106100:	6a 2f                	push   $0x2f
+801069c0:	6a 2f                	push   $0x2f
   jmp alltraps
-80106102:	e9 78 f9 ff ff       	jmp    80105a7f <alltraps>
+801069c2:	e9 08 f9 ff ff       	jmp    801062cf <alltraps>
 
-80106107 <vector48>:
+801069c7 <vector48>:
 .globl vector48
 vector48:
   pushl $0
-80106107:	6a 00                	push   $0x0
+801069c7:	6a 00                	push   $0x0
   pushl $48
-80106109:	6a 30                	push   $0x30
+801069c9:	6a 30                	push   $0x30
   jmp alltraps
-8010610b:	e9 6f f9 ff ff       	jmp    80105a7f <alltraps>
+801069cb:	e9 ff f8 ff ff       	jmp    801062cf <alltraps>
 
-80106110 <vector49>:
+801069d0 <vector49>:
 .globl vector49
 vector49:
   pushl $0
-80106110:	6a 00                	push   $0x0
+801069d0:	6a 00                	push   $0x0
   pushl $49
-80106112:	6a 31                	push   $0x31
+801069d2:	6a 31                	push   $0x31
   jmp alltraps
-80106114:	e9 66 f9 ff ff       	jmp    80105a7f <alltraps>
+801069d4:	e9 f6 f8 ff ff       	jmp    801062cf <alltraps>
 
-80106119 <vector50>:
+801069d9 <vector50>:
 .globl vector50
 vector50:
   pushl $0
-80106119:	6a 00                	push   $0x0
+801069d9:	6a 00                	push   $0x0
   pushl $50
-8010611b:	6a 32                	push   $0x32
+801069db:	6a 32                	push   $0x32
   jmp alltraps
-8010611d:	e9 5d f9 ff ff       	jmp    80105a7f <alltraps>
+801069dd:	e9 ed f8 ff ff       	jmp    801062cf <alltraps>
 
-80106122 <vector51>:
+801069e2 <vector51>:
 .globl vector51
 vector51:
   pushl $0
-80106122:	6a 00                	push   $0x0
+801069e2:	6a 00                	push   $0x0
   pushl $51
-80106124:	6a 33                	push   $0x33
+801069e4:	6a 33                	push   $0x33
   jmp alltraps
-80106126:	e9 54 f9 ff ff       	jmp    80105a7f <alltraps>
+801069e6:	e9 e4 f8 ff ff       	jmp    801062cf <alltraps>
 
-8010612b <vector52>:
+801069eb <vector52>:
 .globl vector52
 vector52:
   pushl $0
-8010612b:	6a 00                	push   $0x0
+801069eb:	6a 00                	push   $0x0
   pushl $52
-8010612d:	6a 34                	push   $0x34
+801069ed:	6a 34                	push   $0x34
   jmp alltraps
-8010612f:	e9 4b f9 ff ff       	jmp    80105a7f <alltraps>
+801069ef:	e9 db f8 ff ff       	jmp    801062cf <alltraps>
 
-80106134 <vector53>:
+801069f4 <vector53>:
 .globl vector53
 vector53:
   pushl $0
-80106134:	6a 00                	push   $0x0
+801069f4:	6a 00                	push   $0x0
   pushl $53
-80106136:	6a 35                	push   $0x35
+801069f6:	6a 35                	push   $0x35
   jmp alltraps
-80106138:	e9 42 f9 ff ff       	jmp    80105a7f <alltraps>
+801069f8:	e9 d2 f8 ff ff       	jmp    801062cf <alltraps>
 
-8010613d <vector54>:
+801069fd <vector54>:
 .globl vector54
 vector54:
   pushl $0
-8010613d:	6a 00                	push   $0x0
+801069fd:	6a 00                	push   $0x0
   pushl $54
-8010613f:	6a 36                	push   $0x36
+801069ff:	6a 36                	push   $0x36
   jmp alltraps
-80106141:	e9 39 f9 ff ff       	jmp    80105a7f <alltraps>
+80106a01:	e9 c9 f8 ff ff       	jmp    801062cf <alltraps>
 
-80106146 <vector55>:
+80106a06 <vector55>:
 .globl vector55
 vector55:
   pushl $0
-80106146:	6a 00                	push   $0x0
+80106a06:	6a 00                	push   $0x0
   pushl $55
-80106148:	6a 37                	push   $0x37
+80106a08:	6a 37                	push   $0x37
   jmp alltraps
-8010614a:	e9 30 f9 ff ff       	jmp    80105a7f <alltraps>
+80106a0a:	e9 c0 f8 ff ff       	jmp    801062cf <alltraps>
 
-8010614f <vector56>:
+80106a0f <vector56>:
 .globl vector56
 vector56:
   pushl $0
-8010614f:	6a 00                	push   $0x0
+80106a0f:	6a 00                	push   $0x0
   pushl $56
-80106151:	6a 38                	push   $0x38
+80106a11:	6a 38                	push   $0x38
   jmp alltraps
-80106153:	e9 27 f9 ff ff       	jmp    80105a7f <alltraps>
+80106a13:	e9 b7 f8 ff ff       	jmp    801062cf <alltraps>
 
-80106158 <vector57>:
+80106a18 <vector57>:
 .globl vector57
 vector57:
   pushl $0
-80106158:	6a 00                	push   $0x0
+80106a18:	6a 00                	push   $0x0
   pushl $57
-8010615a:	6a 39                	push   $0x39
+80106a1a:	6a 39                	push   $0x39
   jmp alltraps
-8010615c:	e9 1e f9 ff ff       	jmp    80105a7f <alltraps>
+80106a1c:	e9 ae f8 ff ff       	jmp    801062cf <alltraps>
 
-80106161 <vector58>:
+80106a21 <vector58>:
 .globl vector58
 vector58:
   pushl $0
-80106161:	6a 00                	push   $0x0
+80106a21:	6a 00                	push   $0x0
   pushl $58
-80106163:	6a 3a                	push   $0x3a
+80106a23:	6a 3a                	push   $0x3a
   jmp alltraps
-80106165:	e9 15 f9 ff ff       	jmp    80105a7f <alltraps>
+80106a25:	e9 a5 f8 ff ff       	jmp    801062cf <alltraps>
 
-8010616a <vector59>:
+80106a2a <vector59>:
 .globl vector59
 vector59:
   pushl $0
-8010616a:	6a 00                	push   $0x0
+80106a2a:	6a 00                	push   $0x0
   pushl $59
-8010616c:	6a 3b                	push   $0x3b
+80106a2c:	6a 3b                	push   $0x3b
   jmp alltraps
-8010616e:	e9 0c f9 ff ff       	jmp    80105a7f <alltraps>
+80106a2e:	e9 9c f8 ff ff       	jmp    801062cf <alltraps>
 
-80106173 <vector60>:
+80106a33 <vector60>:
 .globl vector60
 vector60:
   pushl $0
-80106173:	6a 00                	push   $0x0
+80106a33:	6a 00                	push   $0x0
   pushl $60
-80106175:	6a 3c                	push   $0x3c
+80106a35:	6a 3c                	push   $0x3c
   jmp alltraps
-80106177:	e9 03 f9 ff ff       	jmp    80105a7f <alltraps>
+80106a37:	e9 93 f8 ff ff       	jmp    801062cf <alltraps>
 
-8010617c <vector61>:
+80106a3c <vector61>:
 .globl vector61
 vector61:
   pushl $0
-8010617c:	6a 00                	push   $0x0
+80106a3c:	6a 00                	push   $0x0
   pushl $61
-8010617e:	6a 3d                	push   $0x3d
+80106a3e:	6a 3d                	push   $0x3d
   jmp alltraps
-80106180:	e9 fa f8 ff ff       	jmp    80105a7f <alltraps>
+80106a40:	e9 8a f8 ff ff       	jmp    801062cf <alltraps>
 
-80106185 <vector62>:
+80106a45 <vector62>:
 .globl vector62
 vector62:
   pushl $0
-80106185:	6a 00                	push   $0x0
+80106a45:	6a 00                	push   $0x0
   pushl $62
-80106187:	6a 3e                	push   $0x3e
+80106a47:	6a 3e                	push   $0x3e
   jmp alltraps
-80106189:	e9 f1 f8 ff ff       	jmp    80105a7f <alltraps>
+80106a49:	e9 81 f8 ff ff       	jmp    801062cf <alltraps>
 
-8010618e <vector63>:
+80106a4e <vector63>:
 .globl vector63
 vector63:
   pushl $0
-8010618e:	6a 00                	push   $0x0
+80106a4e:	6a 00                	push   $0x0
   pushl $63
-80106190:	6a 3f                	push   $0x3f
+80106a50:	6a 3f                	push   $0x3f
   jmp alltraps
-80106192:	e9 e8 f8 ff ff       	jmp    80105a7f <alltraps>
+80106a52:	e9 78 f8 ff ff       	jmp    801062cf <alltraps>
 
-80106197 <vector64>:
+80106a57 <vector64>:
 .globl vector64
 vector64:
   pushl $0
-80106197:	6a 00                	push   $0x0
+80106a57:	6a 00                	push   $0x0
   pushl $64
-80106199:	6a 40                	push   $0x40
+80106a59:	6a 40                	push   $0x40
   jmp alltraps
-8010619b:	e9 df f8 ff ff       	jmp    80105a7f <alltraps>
+80106a5b:	e9 6f f8 ff ff       	jmp    801062cf <alltraps>
 
-801061a0 <vector65>:
+80106a60 <vector65>:
 .globl vector65
 vector65:
   pushl $0
-801061a0:	6a 00                	push   $0x0
+80106a60:	6a 00                	push   $0x0
   pushl $65
-801061a2:	6a 41                	push   $0x41
+80106a62:	6a 41                	push   $0x41
   jmp alltraps
-801061a4:	e9 d6 f8 ff ff       	jmp    80105a7f <alltraps>
+80106a64:	e9 66 f8 ff ff       	jmp    801062cf <alltraps>
 
-801061a9 <vector66>:
+80106a69 <vector66>:
 .globl vector66
 vector66:
   pushl $0
-801061a9:	6a 00                	push   $0x0
+80106a69:	6a 00                	push   $0x0
   pushl $66
-801061ab:	6a 42                	push   $0x42
+80106a6b:	6a 42                	push   $0x42
   jmp alltraps
-801061ad:	e9 cd f8 ff ff       	jmp    80105a7f <alltraps>
+80106a6d:	e9 5d f8 ff ff       	jmp    801062cf <alltraps>
 
-801061b2 <vector67>:
+80106a72 <vector67>:
 .globl vector67
 vector67:
   pushl $0
-801061b2:	6a 00                	push   $0x0
+80106a72:	6a 00                	push   $0x0
   pushl $67
-801061b4:	6a 43                	push   $0x43
+80106a74:	6a 43                	push   $0x43
   jmp alltraps
-801061b6:	e9 c4 f8 ff ff       	jmp    80105a7f <alltraps>
+80106a76:	e9 54 f8 ff ff       	jmp    801062cf <alltraps>
 
-801061bb <vector68>:
+80106a7b <vector68>:
 .globl vector68
 vector68:
   pushl $0
-801061bb:	6a 00                	push   $0x0
+80106a7b:	6a 00                	push   $0x0
   pushl $68
-801061bd:	6a 44                	push   $0x44
+80106a7d:	6a 44                	push   $0x44
   jmp alltraps
-801061bf:	e9 bb f8 ff ff       	jmp    80105a7f <alltraps>
+80106a7f:	e9 4b f8 ff ff       	jmp    801062cf <alltraps>
 
-801061c4 <vector69>:
+80106a84 <vector69>:
 .globl vector69
 vector69:
   pushl $0
-801061c4:	6a 00                	push   $0x0
+80106a84:	6a 00                	push   $0x0
   pushl $69
-801061c6:	6a 45                	push   $0x45
+80106a86:	6a 45                	push   $0x45
   jmp alltraps
-801061c8:	e9 b2 f8 ff ff       	jmp    80105a7f <alltraps>
+80106a88:	e9 42 f8 ff ff       	jmp    801062cf <alltraps>
 
-801061cd <vector70>:
+80106a8d <vector70>:
 .globl vector70
 vector70:
   pushl $0
-801061cd:	6a 00                	push   $0x0
+80106a8d:	6a 00                	push   $0x0
   pushl $70
-801061cf:	6a 46                	push   $0x46
+80106a8f:	6a 46                	push   $0x46
   jmp alltraps
-801061d1:	e9 a9 f8 ff ff       	jmp    80105a7f <alltraps>
+80106a91:	e9 39 f8 ff ff       	jmp    801062cf <alltraps>
 
-801061d6 <vector71>:
+80106a96 <vector71>:
 .globl vector71
 vector71:
   pushl $0
-801061d6:	6a 00                	push   $0x0
+80106a96:	6a 00                	push   $0x0
   pushl $71
-801061d8:	6a 47                	push   $0x47
+80106a98:	6a 47                	push   $0x47
   jmp alltraps
-801061da:	e9 a0 f8 ff ff       	jmp    80105a7f <alltraps>
+80106a9a:	e9 30 f8 ff ff       	jmp    801062cf <alltraps>
 
-801061df <vector72>:
+80106a9f <vector72>:
 .globl vector72
 vector72:
   pushl $0
-801061df:	6a 00                	push   $0x0
+80106a9f:	6a 00                	push   $0x0
   pushl $72
-801061e1:	6a 48                	push   $0x48
+80106aa1:	6a 48                	push   $0x48
   jmp alltraps
-801061e3:	e9 97 f8 ff ff       	jmp    80105a7f <alltraps>
+80106aa3:	e9 27 f8 ff ff       	jmp    801062cf <alltraps>
 
-801061e8 <vector73>:
+80106aa8 <vector73>:
 .globl vector73
 vector73:
   pushl $0
-801061e8:	6a 00                	push   $0x0
+80106aa8:	6a 00                	push   $0x0
   pushl $73
-801061ea:	6a 49                	push   $0x49
+80106aaa:	6a 49                	push   $0x49
   jmp alltraps
-801061ec:	e9 8e f8 ff ff       	jmp    80105a7f <alltraps>
+80106aac:	e9 1e f8 ff ff       	jmp    801062cf <alltraps>
 
-801061f1 <vector74>:
+80106ab1 <vector74>:
 .globl vector74
 vector74:
   pushl $0
-801061f1:	6a 00                	push   $0x0
+80106ab1:	6a 00                	push   $0x0
   pushl $74
-801061f3:	6a 4a                	push   $0x4a
+80106ab3:	6a 4a                	push   $0x4a
   jmp alltraps
-801061f5:	e9 85 f8 ff ff       	jmp    80105a7f <alltraps>
+80106ab5:	e9 15 f8 ff ff       	jmp    801062cf <alltraps>
 
-801061fa <vector75>:
+80106aba <vector75>:
 .globl vector75
 vector75:
   pushl $0
-801061fa:	6a 00                	push   $0x0
+80106aba:	6a 00                	push   $0x0
   pushl $75
-801061fc:	6a 4b                	push   $0x4b
+80106abc:	6a 4b                	push   $0x4b
   jmp alltraps
-801061fe:	e9 7c f8 ff ff       	jmp    80105a7f <alltraps>
+80106abe:	e9 0c f8 ff ff       	jmp    801062cf <alltraps>
 
-80106203 <vector76>:
+80106ac3 <vector76>:
 .globl vector76
 vector76:
   pushl $0
-80106203:	6a 00                	push   $0x0
+80106ac3:	6a 00                	push   $0x0
   pushl $76
-80106205:	6a 4c                	push   $0x4c
+80106ac5:	6a 4c                	push   $0x4c
   jmp alltraps
-80106207:	e9 73 f8 ff ff       	jmp    80105a7f <alltraps>
+80106ac7:	e9 03 f8 ff ff       	jmp    801062cf <alltraps>
 
-8010620c <vector77>:
+80106acc <vector77>:
 .globl vector77
 vector77:
   pushl $0
-8010620c:	6a 00                	push   $0x0
+80106acc:	6a 00                	push   $0x0
   pushl $77
-8010620e:	6a 4d                	push   $0x4d
+80106ace:	6a 4d                	push   $0x4d
   jmp alltraps
-80106210:	e9 6a f8 ff ff       	jmp    80105a7f <alltraps>
+80106ad0:	e9 fa f7 ff ff       	jmp    801062cf <alltraps>
 
-80106215 <vector78>:
+80106ad5 <vector78>:
 .globl vector78
 vector78:
   pushl $0
-80106215:	6a 00                	push   $0x0
+80106ad5:	6a 00                	push   $0x0
   pushl $78
-80106217:	6a 4e                	push   $0x4e
+80106ad7:	6a 4e                	push   $0x4e
   jmp alltraps
-80106219:	e9 61 f8 ff ff       	jmp    80105a7f <alltraps>
+80106ad9:	e9 f1 f7 ff ff       	jmp    801062cf <alltraps>
 
-8010621e <vector79>:
+80106ade <vector79>:
 .globl vector79
 vector79:
   pushl $0
-8010621e:	6a 00                	push   $0x0
+80106ade:	6a 00                	push   $0x0
   pushl $79
-80106220:	6a 4f                	push   $0x4f
+80106ae0:	6a 4f                	push   $0x4f
   jmp alltraps
-80106222:	e9 58 f8 ff ff       	jmp    80105a7f <alltraps>
+80106ae2:	e9 e8 f7 ff ff       	jmp    801062cf <alltraps>
 
-80106227 <vector80>:
+80106ae7 <vector80>:
 .globl vector80
 vector80:
   pushl $0
-80106227:	6a 00                	push   $0x0
+80106ae7:	6a 00                	push   $0x0
   pushl $80
-80106229:	6a 50                	push   $0x50
+80106ae9:	6a 50                	push   $0x50
   jmp alltraps
-8010622b:	e9 4f f8 ff ff       	jmp    80105a7f <alltraps>
+80106aeb:	e9 df f7 ff ff       	jmp    801062cf <alltraps>
 
-80106230 <vector81>:
+80106af0 <vector81>:
 .globl vector81
 vector81:
   pushl $0
-80106230:	6a 00                	push   $0x0
+80106af0:	6a 00                	push   $0x0
   pushl $81
-80106232:	6a 51                	push   $0x51
+80106af2:	6a 51                	push   $0x51
   jmp alltraps
-80106234:	e9 46 f8 ff ff       	jmp    80105a7f <alltraps>
+80106af4:	e9 d6 f7 ff ff       	jmp    801062cf <alltraps>
 
-80106239 <vector82>:
+80106af9 <vector82>:
 .globl vector82
 vector82:
   pushl $0
-80106239:	6a 00                	push   $0x0
+80106af9:	6a 00                	push   $0x0
   pushl $82
-8010623b:	6a 52                	push   $0x52
+80106afb:	6a 52                	push   $0x52
   jmp alltraps
-8010623d:	e9 3d f8 ff ff       	jmp    80105a7f <alltraps>
+80106afd:	e9 cd f7 ff ff       	jmp    801062cf <alltraps>
 
-80106242 <vector83>:
+80106b02 <vector83>:
 .globl vector83
 vector83:
   pushl $0
-80106242:	6a 00                	push   $0x0
+80106b02:	6a 00                	push   $0x0
   pushl $83
-80106244:	6a 53                	push   $0x53
+80106b04:	6a 53                	push   $0x53
   jmp alltraps
-80106246:	e9 34 f8 ff ff       	jmp    80105a7f <alltraps>
+80106b06:	e9 c4 f7 ff ff       	jmp    801062cf <alltraps>
 
-8010624b <vector84>:
+80106b0b <vector84>:
 .globl vector84
 vector84:
   pushl $0
-8010624b:	6a 00                	push   $0x0
+80106b0b:	6a 00                	push   $0x0
   pushl $84
-8010624d:	6a 54                	push   $0x54
+80106b0d:	6a 54                	push   $0x54
   jmp alltraps
-8010624f:	e9 2b f8 ff ff       	jmp    80105a7f <alltraps>
+80106b0f:	e9 bb f7 ff ff       	jmp    801062cf <alltraps>
 
-80106254 <vector85>:
+80106b14 <vector85>:
 .globl vector85
 vector85:
   pushl $0
-80106254:	6a 00                	push   $0x0
+80106b14:	6a 00                	push   $0x0
   pushl $85
-80106256:	6a 55                	push   $0x55
+80106b16:	6a 55                	push   $0x55
   jmp alltraps
-80106258:	e9 22 f8 ff ff       	jmp    80105a7f <alltraps>
+80106b18:	e9 b2 f7 ff ff       	jmp    801062cf <alltraps>
 
-8010625d <vector86>:
+80106b1d <vector86>:
 .globl vector86
 vector86:
   pushl $0
-8010625d:	6a 00                	push   $0x0
+80106b1d:	6a 00                	push   $0x0
   pushl $86
-8010625f:	6a 56                	push   $0x56
+80106b1f:	6a 56                	push   $0x56
   jmp alltraps
-80106261:	e9 19 f8 ff ff       	jmp    80105a7f <alltraps>
+80106b21:	e9 a9 f7 ff ff       	jmp    801062cf <alltraps>
 
-80106266 <vector87>:
+80106b26 <vector87>:
 .globl vector87
 vector87:
   pushl $0
-80106266:	6a 00                	push   $0x0
+80106b26:	6a 00                	push   $0x0
   pushl $87
-80106268:	6a 57                	push   $0x57
+80106b28:	6a 57                	push   $0x57
   jmp alltraps
-8010626a:	e9 10 f8 ff ff       	jmp    80105a7f <alltraps>
+80106b2a:	e9 a0 f7 ff ff       	jmp    801062cf <alltraps>
 
-8010626f <vector88>:
+80106b2f <vector88>:
 .globl vector88
 vector88:
   pushl $0
-8010626f:	6a 00                	push   $0x0
+80106b2f:	6a 00                	push   $0x0
   pushl $88
-80106271:	6a 58                	push   $0x58
+80106b31:	6a 58                	push   $0x58
   jmp alltraps
-80106273:	e9 07 f8 ff ff       	jmp    80105a7f <alltraps>
+80106b33:	e9 97 f7 ff ff       	jmp    801062cf <alltraps>
 
-80106278 <vector89>:
+80106b38 <vector89>:
 .globl vector89
 vector89:
   pushl $0
-80106278:	6a 00                	push   $0x0
+80106b38:	6a 00                	push   $0x0
   pushl $89
-8010627a:	6a 59                	push   $0x59
+80106b3a:	6a 59                	push   $0x59
   jmp alltraps
-8010627c:	e9 fe f7 ff ff       	jmp    80105a7f <alltraps>
+80106b3c:	e9 8e f7 ff ff       	jmp    801062cf <alltraps>
 
-80106281 <vector90>:
+80106b41 <vector90>:
 .globl vector90
 vector90:
   pushl $0
-80106281:	6a 00                	push   $0x0
+80106b41:	6a 00                	push   $0x0
   pushl $90
-80106283:	6a 5a                	push   $0x5a
+80106b43:	6a 5a                	push   $0x5a
   jmp alltraps
-80106285:	e9 f5 f7 ff ff       	jmp    80105a7f <alltraps>
+80106b45:	e9 85 f7 ff ff       	jmp    801062cf <alltraps>
 
-8010628a <vector91>:
+80106b4a <vector91>:
 .globl vector91
 vector91:
   pushl $0
-8010628a:	6a 00                	push   $0x0
+80106b4a:	6a 00                	push   $0x0
   pushl $91
-8010628c:	6a 5b                	push   $0x5b
+80106b4c:	6a 5b                	push   $0x5b
   jmp alltraps
-8010628e:	e9 ec f7 ff ff       	jmp    80105a7f <alltraps>
+80106b4e:	e9 7c f7 ff ff       	jmp    801062cf <alltraps>
 
-80106293 <vector92>:
+80106b53 <vector92>:
 .globl vector92
 vector92:
   pushl $0
-80106293:	6a 00                	push   $0x0
+80106b53:	6a 00                	push   $0x0
   pushl $92
-80106295:	6a 5c                	push   $0x5c
+80106b55:	6a 5c                	push   $0x5c
   jmp alltraps
-80106297:	e9 e3 f7 ff ff       	jmp    80105a7f <alltraps>
+80106b57:	e9 73 f7 ff ff       	jmp    801062cf <alltraps>
 
-8010629c <vector93>:
+80106b5c <vector93>:
 .globl vector93
 vector93:
   pushl $0
-8010629c:	6a 00                	push   $0x0
+80106b5c:	6a 00                	push   $0x0
   pushl $93
-8010629e:	6a 5d                	push   $0x5d
+80106b5e:	6a 5d                	push   $0x5d
   jmp alltraps
-801062a0:	e9 da f7 ff ff       	jmp    80105a7f <alltraps>
+80106b60:	e9 6a f7 ff ff       	jmp    801062cf <alltraps>
 
-801062a5 <vector94>:
+80106b65 <vector94>:
 .globl vector94
 vector94:
   pushl $0
-801062a5:	6a 00                	push   $0x0
+80106b65:	6a 00                	push   $0x0
   pushl $94
-801062a7:	6a 5e                	push   $0x5e
+80106b67:	6a 5e                	push   $0x5e
   jmp alltraps
-801062a9:	e9 d1 f7 ff ff       	jmp    80105a7f <alltraps>
+80106b69:	e9 61 f7 ff ff       	jmp    801062cf <alltraps>
 
-801062ae <vector95>:
+80106b6e <vector95>:
 .globl vector95
 vector95:
   pushl $0
-801062ae:	6a 00                	push   $0x0
+80106b6e:	6a 00                	push   $0x0
   pushl $95
-801062b0:	6a 5f                	push   $0x5f
+80106b70:	6a 5f                	push   $0x5f
   jmp alltraps
-801062b2:	e9 c8 f7 ff ff       	jmp    80105a7f <alltraps>
+80106b72:	e9 58 f7 ff ff       	jmp    801062cf <alltraps>
 
-801062b7 <vector96>:
+80106b77 <vector96>:
 .globl vector96
 vector96:
   pushl $0
-801062b7:	6a 00                	push   $0x0
+80106b77:	6a 00                	push   $0x0
   pushl $96
-801062b9:	6a 60                	push   $0x60
+80106b79:	6a 60                	push   $0x60
   jmp alltraps
-801062bb:	e9 bf f7 ff ff       	jmp    80105a7f <alltraps>
+80106b7b:	e9 4f f7 ff ff       	jmp    801062cf <alltraps>
 
-801062c0 <vector97>:
+80106b80 <vector97>:
 .globl vector97
 vector97:
   pushl $0
-801062c0:	6a 00                	push   $0x0
+80106b80:	6a 00                	push   $0x0
   pushl $97
-801062c2:	6a 61                	push   $0x61
+80106b82:	6a 61                	push   $0x61
   jmp alltraps
-801062c4:	e9 b6 f7 ff ff       	jmp    80105a7f <alltraps>
+80106b84:	e9 46 f7 ff ff       	jmp    801062cf <alltraps>
 
-801062c9 <vector98>:
+80106b89 <vector98>:
 .globl vector98
 vector98:
   pushl $0
-801062c9:	6a 00                	push   $0x0
+80106b89:	6a 00                	push   $0x0
   pushl $98
-801062cb:	6a 62                	push   $0x62
+80106b8b:	6a 62                	push   $0x62
   jmp alltraps
-801062cd:	e9 ad f7 ff ff       	jmp    80105a7f <alltraps>
+80106b8d:	e9 3d f7 ff ff       	jmp    801062cf <alltraps>
 
-801062d2 <vector99>:
+80106b92 <vector99>:
 .globl vector99
 vector99:
   pushl $0
-801062d2:	6a 00                	push   $0x0
+80106b92:	6a 00                	push   $0x0
   pushl $99
-801062d4:	6a 63                	push   $0x63
+80106b94:	6a 63                	push   $0x63
   jmp alltraps
-801062d6:	e9 a4 f7 ff ff       	jmp    80105a7f <alltraps>
+80106b96:	e9 34 f7 ff ff       	jmp    801062cf <alltraps>
 
-801062db <vector100>:
+80106b9b <vector100>:
 .globl vector100
 vector100:
   pushl $0
-801062db:	6a 00                	push   $0x0
+80106b9b:	6a 00                	push   $0x0
   pushl $100
-801062dd:	6a 64                	push   $0x64
+80106b9d:	6a 64                	push   $0x64
   jmp alltraps
-801062df:	e9 9b f7 ff ff       	jmp    80105a7f <alltraps>
+80106b9f:	e9 2b f7 ff ff       	jmp    801062cf <alltraps>
 
-801062e4 <vector101>:
+80106ba4 <vector101>:
 .globl vector101
 vector101:
   pushl $0
-801062e4:	6a 00                	push   $0x0
+80106ba4:	6a 00                	push   $0x0
   pushl $101
-801062e6:	6a 65                	push   $0x65
+80106ba6:	6a 65                	push   $0x65
   jmp alltraps
-801062e8:	e9 92 f7 ff ff       	jmp    80105a7f <alltraps>
+80106ba8:	e9 22 f7 ff ff       	jmp    801062cf <alltraps>
 
-801062ed <vector102>:
+80106bad <vector102>:
 .globl vector102
 vector102:
   pushl $0
-801062ed:	6a 00                	push   $0x0
+80106bad:	6a 00                	push   $0x0
   pushl $102
-801062ef:	6a 66                	push   $0x66
+80106baf:	6a 66                	push   $0x66
   jmp alltraps
-801062f1:	e9 89 f7 ff ff       	jmp    80105a7f <alltraps>
+80106bb1:	e9 19 f7 ff ff       	jmp    801062cf <alltraps>
 
-801062f6 <vector103>:
+80106bb6 <vector103>:
 .globl vector103
 vector103:
   pushl $0
-801062f6:	6a 00                	push   $0x0
+80106bb6:	6a 00                	push   $0x0
   pushl $103
-801062f8:	6a 67                	push   $0x67
+80106bb8:	6a 67                	push   $0x67
   jmp alltraps
-801062fa:	e9 80 f7 ff ff       	jmp    80105a7f <alltraps>
+80106bba:	e9 10 f7 ff ff       	jmp    801062cf <alltraps>
 
-801062ff <vector104>:
+80106bbf <vector104>:
 .globl vector104
 vector104:
   pushl $0
-801062ff:	6a 00                	push   $0x0
+80106bbf:	6a 00                	push   $0x0
   pushl $104
-80106301:	6a 68                	push   $0x68
+80106bc1:	6a 68                	push   $0x68
   jmp alltraps
-80106303:	e9 77 f7 ff ff       	jmp    80105a7f <alltraps>
+80106bc3:	e9 07 f7 ff ff       	jmp    801062cf <alltraps>
 
-80106308 <vector105>:
+80106bc8 <vector105>:
 .globl vector105
 vector105:
   pushl $0
-80106308:	6a 00                	push   $0x0
+80106bc8:	6a 00                	push   $0x0
   pushl $105
-8010630a:	6a 69                	push   $0x69
+80106bca:	6a 69                	push   $0x69
   jmp alltraps
-8010630c:	e9 6e f7 ff ff       	jmp    80105a7f <alltraps>
+80106bcc:	e9 fe f6 ff ff       	jmp    801062cf <alltraps>
 
-80106311 <vector106>:
+80106bd1 <vector106>:
 .globl vector106
 vector106:
   pushl $0
-80106311:	6a 00                	push   $0x0
+80106bd1:	6a 00                	push   $0x0
   pushl $106
-80106313:	6a 6a                	push   $0x6a
+80106bd3:	6a 6a                	push   $0x6a
   jmp alltraps
-80106315:	e9 65 f7 ff ff       	jmp    80105a7f <alltraps>
+80106bd5:	e9 f5 f6 ff ff       	jmp    801062cf <alltraps>
 
-8010631a <vector107>:
+80106bda <vector107>:
 .globl vector107
 vector107:
   pushl $0
-8010631a:	6a 00                	push   $0x0
+80106bda:	6a 00                	push   $0x0
   pushl $107
-8010631c:	6a 6b                	push   $0x6b
+80106bdc:	6a 6b                	push   $0x6b
   jmp alltraps
-8010631e:	e9 5c f7 ff ff       	jmp    80105a7f <alltraps>
+80106bde:	e9 ec f6 ff ff       	jmp    801062cf <alltraps>
 
-80106323 <vector108>:
+80106be3 <vector108>:
 .globl vector108
 vector108:
   pushl $0
-80106323:	6a 00                	push   $0x0
+80106be3:	6a 00                	push   $0x0
   pushl $108
-80106325:	6a 6c                	push   $0x6c
+80106be5:	6a 6c                	push   $0x6c
   jmp alltraps
-80106327:	e9 53 f7 ff ff       	jmp    80105a7f <alltraps>
+80106be7:	e9 e3 f6 ff ff       	jmp    801062cf <alltraps>
 
-8010632c <vector109>:
+80106bec <vector109>:
 .globl vector109
 vector109:
   pushl $0
-8010632c:	6a 00                	push   $0x0
+80106bec:	6a 00                	push   $0x0
   pushl $109
-8010632e:	6a 6d                	push   $0x6d
+80106bee:	6a 6d                	push   $0x6d
   jmp alltraps
-80106330:	e9 4a f7 ff ff       	jmp    80105a7f <alltraps>
+80106bf0:	e9 da f6 ff ff       	jmp    801062cf <alltraps>
 
-80106335 <vector110>:
+80106bf5 <vector110>:
 .globl vector110
 vector110:
   pushl $0
-80106335:	6a 00                	push   $0x0
+80106bf5:	6a 00                	push   $0x0
   pushl $110
-80106337:	6a 6e                	push   $0x6e
+80106bf7:	6a 6e                	push   $0x6e
   jmp alltraps
-80106339:	e9 41 f7 ff ff       	jmp    80105a7f <alltraps>
+80106bf9:	e9 d1 f6 ff ff       	jmp    801062cf <alltraps>
 
-8010633e <vector111>:
+80106bfe <vector111>:
 .globl vector111
 vector111:
   pushl $0
-8010633e:	6a 00                	push   $0x0
+80106bfe:	6a 00                	push   $0x0
   pushl $111
-80106340:	6a 6f                	push   $0x6f
+80106c00:	6a 6f                	push   $0x6f
   jmp alltraps
-80106342:	e9 38 f7 ff ff       	jmp    80105a7f <alltraps>
+80106c02:	e9 c8 f6 ff ff       	jmp    801062cf <alltraps>
 
-80106347 <vector112>:
+80106c07 <vector112>:
 .globl vector112
 vector112:
   pushl $0
-80106347:	6a 00                	push   $0x0
+80106c07:	6a 00                	push   $0x0
   pushl $112
-80106349:	6a 70                	push   $0x70
+80106c09:	6a 70                	push   $0x70
   jmp alltraps
-8010634b:	e9 2f f7 ff ff       	jmp    80105a7f <alltraps>
+80106c0b:	e9 bf f6 ff ff       	jmp    801062cf <alltraps>
 
-80106350 <vector113>:
+80106c10 <vector113>:
 .globl vector113
 vector113:
   pushl $0
-80106350:	6a 00                	push   $0x0
+80106c10:	6a 00                	push   $0x0
   pushl $113
-80106352:	6a 71                	push   $0x71
+80106c12:	6a 71                	push   $0x71
   jmp alltraps
-80106354:	e9 26 f7 ff ff       	jmp    80105a7f <alltraps>
+80106c14:	e9 b6 f6 ff ff       	jmp    801062cf <alltraps>
 
-80106359 <vector114>:
+80106c19 <vector114>:
 .globl vector114
 vector114:
   pushl $0
-80106359:	6a 00                	push   $0x0
+80106c19:	6a 00                	push   $0x0
   pushl $114
-8010635b:	6a 72                	push   $0x72
+80106c1b:	6a 72                	push   $0x72
   jmp alltraps
-8010635d:	e9 1d f7 ff ff       	jmp    80105a7f <alltraps>
+80106c1d:	e9 ad f6 ff ff       	jmp    801062cf <alltraps>
 
-80106362 <vector115>:
+80106c22 <vector115>:
 .globl vector115
 vector115:
   pushl $0
-80106362:	6a 00                	push   $0x0
+80106c22:	6a 00                	push   $0x0
   pushl $115
-80106364:	6a 73                	push   $0x73
+80106c24:	6a 73                	push   $0x73
   jmp alltraps
-80106366:	e9 14 f7 ff ff       	jmp    80105a7f <alltraps>
+80106c26:	e9 a4 f6 ff ff       	jmp    801062cf <alltraps>
 
-8010636b <vector116>:
+80106c2b <vector116>:
 .globl vector116
 vector116:
   pushl $0
-8010636b:	6a 00                	push   $0x0
+80106c2b:	6a 00                	push   $0x0
   pushl $116
-8010636d:	6a 74                	push   $0x74
+80106c2d:	6a 74                	push   $0x74
   jmp alltraps
-8010636f:	e9 0b f7 ff ff       	jmp    80105a7f <alltraps>
+80106c2f:	e9 9b f6 ff ff       	jmp    801062cf <alltraps>
 
-80106374 <vector117>:
+80106c34 <vector117>:
 .globl vector117
 vector117:
   pushl $0
-80106374:	6a 00                	push   $0x0
+80106c34:	6a 00                	push   $0x0
   pushl $117
-80106376:	6a 75                	push   $0x75
+80106c36:	6a 75                	push   $0x75
   jmp alltraps
-80106378:	e9 02 f7 ff ff       	jmp    80105a7f <alltraps>
+80106c38:	e9 92 f6 ff ff       	jmp    801062cf <alltraps>
 
-8010637d <vector118>:
+80106c3d <vector118>:
 .globl vector118
 vector118:
   pushl $0
-8010637d:	6a 00                	push   $0x0
+80106c3d:	6a 00                	push   $0x0
   pushl $118
-8010637f:	6a 76                	push   $0x76
+80106c3f:	6a 76                	push   $0x76
   jmp alltraps
-80106381:	e9 f9 f6 ff ff       	jmp    80105a7f <alltraps>
+80106c41:	e9 89 f6 ff ff       	jmp    801062cf <alltraps>
 
-80106386 <vector119>:
+80106c46 <vector119>:
 .globl vector119
 vector119:
   pushl $0
-80106386:	6a 00                	push   $0x0
+80106c46:	6a 00                	push   $0x0
   pushl $119
-80106388:	6a 77                	push   $0x77
+80106c48:	6a 77                	push   $0x77
   jmp alltraps
-8010638a:	e9 f0 f6 ff ff       	jmp    80105a7f <alltraps>
+80106c4a:	e9 80 f6 ff ff       	jmp    801062cf <alltraps>
 
-8010638f <vector120>:
+80106c4f <vector120>:
 .globl vector120
 vector120:
   pushl $0
-8010638f:	6a 00                	push   $0x0
+80106c4f:	6a 00                	push   $0x0
   pushl $120
-80106391:	6a 78                	push   $0x78
+80106c51:	6a 78                	push   $0x78
   jmp alltraps
-80106393:	e9 e7 f6 ff ff       	jmp    80105a7f <alltraps>
+80106c53:	e9 77 f6 ff ff       	jmp    801062cf <alltraps>
 
-80106398 <vector121>:
+80106c58 <vector121>:
 .globl vector121
 vector121:
   pushl $0
-80106398:	6a 00                	push   $0x0
+80106c58:	6a 00                	push   $0x0
   pushl $121
-8010639a:	6a 79                	push   $0x79
+80106c5a:	6a 79                	push   $0x79
   jmp alltraps
-8010639c:	e9 de f6 ff ff       	jmp    80105a7f <alltraps>
+80106c5c:	e9 6e f6 ff ff       	jmp    801062cf <alltraps>
 
-801063a1 <vector122>:
+80106c61 <vector122>:
 .globl vector122
 vector122:
   pushl $0
-801063a1:	6a 00                	push   $0x0
+80106c61:	6a 00                	push   $0x0
   pushl $122
-801063a3:	6a 7a                	push   $0x7a
+80106c63:	6a 7a                	push   $0x7a
   jmp alltraps
-801063a5:	e9 d5 f6 ff ff       	jmp    80105a7f <alltraps>
+80106c65:	e9 65 f6 ff ff       	jmp    801062cf <alltraps>
 
-801063aa <vector123>:
+80106c6a <vector123>:
 .globl vector123
 vector123:
   pushl $0
-801063aa:	6a 00                	push   $0x0
+80106c6a:	6a 00                	push   $0x0
   pushl $123
-801063ac:	6a 7b                	push   $0x7b
+80106c6c:	6a 7b                	push   $0x7b
   jmp alltraps
-801063ae:	e9 cc f6 ff ff       	jmp    80105a7f <alltraps>
+80106c6e:	e9 5c f6 ff ff       	jmp    801062cf <alltraps>
 
-801063b3 <vector124>:
+80106c73 <vector124>:
 .globl vector124
 vector124:
   pushl $0
-801063b3:	6a 00                	push   $0x0
+80106c73:	6a 00                	push   $0x0
   pushl $124
-801063b5:	6a 7c                	push   $0x7c
+80106c75:	6a 7c                	push   $0x7c
   jmp alltraps
-801063b7:	e9 c3 f6 ff ff       	jmp    80105a7f <alltraps>
+80106c77:	e9 53 f6 ff ff       	jmp    801062cf <alltraps>
 
-801063bc <vector125>:
+80106c7c <vector125>:
 .globl vector125
 vector125:
   pushl $0
-801063bc:	6a 00                	push   $0x0
+80106c7c:	6a 00                	push   $0x0
   pushl $125
-801063be:	6a 7d                	push   $0x7d
+80106c7e:	6a 7d                	push   $0x7d
   jmp alltraps
-801063c0:	e9 ba f6 ff ff       	jmp    80105a7f <alltraps>
+80106c80:	e9 4a f6 ff ff       	jmp    801062cf <alltraps>
 
-801063c5 <vector126>:
+80106c85 <vector126>:
 .globl vector126
 vector126:
   pushl $0
-801063c5:	6a 00                	push   $0x0
+80106c85:	6a 00                	push   $0x0
   pushl $126
-801063c7:	6a 7e                	push   $0x7e
+80106c87:	6a 7e                	push   $0x7e
   jmp alltraps
-801063c9:	e9 b1 f6 ff ff       	jmp    80105a7f <alltraps>
+80106c89:	e9 41 f6 ff ff       	jmp    801062cf <alltraps>
 
-801063ce <vector127>:
+80106c8e <vector127>:
 .globl vector127
 vector127:
   pushl $0
-801063ce:	6a 00                	push   $0x0
+80106c8e:	6a 00                	push   $0x0
   pushl $127
-801063d0:	6a 7f                	push   $0x7f
+80106c90:	6a 7f                	push   $0x7f
   jmp alltraps
-801063d2:	e9 a8 f6 ff ff       	jmp    80105a7f <alltraps>
+80106c92:	e9 38 f6 ff ff       	jmp    801062cf <alltraps>
 
-801063d7 <vector128>:
+80106c97 <vector128>:
 .globl vector128
 vector128:
   pushl $0
-801063d7:	6a 00                	push   $0x0
+80106c97:	6a 00                	push   $0x0
   pushl $128
-801063d9:	68 80 00 00 00       	push   $0x80
+80106c99:	68 80 00 00 00       	push   $0x80
   jmp alltraps
-801063de:	e9 9c f6 ff ff       	jmp    80105a7f <alltraps>
+80106c9e:	e9 2c f6 ff ff       	jmp    801062cf <alltraps>
 
-801063e3 <vector129>:
+80106ca3 <vector129>:
 .globl vector129
 vector129:
   pushl $0
-801063e3:	6a 00                	push   $0x0
+80106ca3:	6a 00                	push   $0x0
   pushl $129
-801063e5:	68 81 00 00 00       	push   $0x81
+80106ca5:	68 81 00 00 00       	push   $0x81
   jmp alltraps
-801063ea:	e9 90 f6 ff ff       	jmp    80105a7f <alltraps>
+80106caa:	e9 20 f6 ff ff       	jmp    801062cf <alltraps>
 
-801063ef <vector130>:
+80106caf <vector130>:
 .globl vector130
 vector130:
   pushl $0
-801063ef:	6a 00                	push   $0x0
+80106caf:	6a 00                	push   $0x0
   pushl $130
-801063f1:	68 82 00 00 00       	push   $0x82
+80106cb1:	68 82 00 00 00       	push   $0x82
   jmp alltraps
-801063f6:	e9 84 f6 ff ff       	jmp    80105a7f <alltraps>
+80106cb6:	e9 14 f6 ff ff       	jmp    801062cf <alltraps>
 
-801063fb <vector131>:
+80106cbb <vector131>:
 .globl vector131
 vector131:
   pushl $0
-801063fb:	6a 00                	push   $0x0
+80106cbb:	6a 00                	push   $0x0
   pushl $131
-801063fd:	68 83 00 00 00       	push   $0x83
+80106cbd:	68 83 00 00 00       	push   $0x83
   jmp alltraps
-80106402:	e9 78 f6 ff ff       	jmp    80105a7f <alltraps>
+80106cc2:	e9 08 f6 ff ff       	jmp    801062cf <alltraps>
 
-80106407 <vector132>:
+80106cc7 <vector132>:
 .globl vector132
 vector132:
   pushl $0
-80106407:	6a 00                	push   $0x0
+80106cc7:	6a 00                	push   $0x0
   pushl $132
-80106409:	68 84 00 00 00       	push   $0x84
+80106cc9:	68 84 00 00 00       	push   $0x84
   jmp alltraps
-8010640e:	e9 6c f6 ff ff       	jmp    80105a7f <alltraps>
+80106cce:	e9 fc f5 ff ff       	jmp    801062cf <alltraps>
 
-80106413 <vector133>:
+80106cd3 <vector133>:
 .globl vector133
 vector133:
   pushl $0
-80106413:	6a 00                	push   $0x0
+80106cd3:	6a 00                	push   $0x0
   pushl $133
-80106415:	68 85 00 00 00       	push   $0x85
+80106cd5:	68 85 00 00 00       	push   $0x85
   jmp alltraps
-8010641a:	e9 60 f6 ff ff       	jmp    80105a7f <alltraps>
+80106cda:	e9 f0 f5 ff ff       	jmp    801062cf <alltraps>
 
-8010641f <vector134>:
+80106cdf <vector134>:
 .globl vector134
 vector134:
   pushl $0
-8010641f:	6a 00                	push   $0x0
+80106cdf:	6a 00                	push   $0x0
   pushl $134
-80106421:	68 86 00 00 00       	push   $0x86
+80106ce1:	68 86 00 00 00       	push   $0x86
   jmp alltraps
-80106426:	e9 54 f6 ff ff       	jmp    80105a7f <alltraps>
+80106ce6:	e9 e4 f5 ff ff       	jmp    801062cf <alltraps>
 
-8010642b <vector135>:
+80106ceb <vector135>:
 .globl vector135
 vector135:
   pushl $0
-8010642b:	6a 00                	push   $0x0
+80106ceb:	6a 00                	push   $0x0
   pushl $135
-8010642d:	68 87 00 00 00       	push   $0x87
+80106ced:	68 87 00 00 00       	push   $0x87
   jmp alltraps
-80106432:	e9 48 f6 ff ff       	jmp    80105a7f <alltraps>
+80106cf2:	e9 d8 f5 ff ff       	jmp    801062cf <alltraps>
 
-80106437 <vector136>:
+80106cf7 <vector136>:
 .globl vector136
 vector136:
   pushl $0
-80106437:	6a 00                	push   $0x0
+80106cf7:	6a 00                	push   $0x0
   pushl $136
-80106439:	68 88 00 00 00       	push   $0x88
+80106cf9:	68 88 00 00 00       	push   $0x88
   jmp alltraps
-8010643e:	e9 3c f6 ff ff       	jmp    80105a7f <alltraps>
+80106cfe:	e9 cc f5 ff ff       	jmp    801062cf <alltraps>
 
-80106443 <vector137>:
+80106d03 <vector137>:
 .globl vector137
 vector137:
   pushl $0
-80106443:	6a 00                	push   $0x0
+80106d03:	6a 00                	push   $0x0
   pushl $137
-80106445:	68 89 00 00 00       	push   $0x89
+80106d05:	68 89 00 00 00       	push   $0x89
   jmp alltraps
-8010644a:	e9 30 f6 ff ff       	jmp    80105a7f <alltraps>
+80106d0a:	e9 c0 f5 ff ff       	jmp    801062cf <alltraps>
 
-8010644f <vector138>:
+80106d0f <vector138>:
 .globl vector138
 vector138:
   pushl $0
-8010644f:	6a 00                	push   $0x0
+80106d0f:	6a 00                	push   $0x0
   pushl $138
-80106451:	68 8a 00 00 00       	push   $0x8a
+80106d11:	68 8a 00 00 00       	push   $0x8a
   jmp alltraps
-80106456:	e9 24 f6 ff ff       	jmp    80105a7f <alltraps>
+80106d16:	e9 b4 f5 ff ff       	jmp    801062cf <alltraps>
 
-8010645b <vector139>:
+80106d1b <vector139>:
 .globl vector139
 vector139:
   pushl $0
-8010645b:	6a 00                	push   $0x0
+80106d1b:	6a 00                	push   $0x0
   pushl $139
-8010645d:	68 8b 00 00 00       	push   $0x8b
+80106d1d:	68 8b 00 00 00       	push   $0x8b
   jmp alltraps
-80106462:	e9 18 f6 ff ff       	jmp    80105a7f <alltraps>
+80106d22:	e9 a8 f5 ff ff       	jmp    801062cf <alltraps>
 
-80106467 <vector140>:
+80106d27 <vector140>:
 .globl vector140
 vector140:
   pushl $0
-80106467:	6a 00                	push   $0x0
+80106d27:	6a 00                	push   $0x0
   pushl $140
-80106469:	68 8c 00 00 00       	push   $0x8c
+80106d29:	68 8c 00 00 00       	push   $0x8c
   jmp alltraps
-8010646e:	e9 0c f6 ff ff       	jmp    80105a7f <alltraps>
+80106d2e:	e9 9c f5 ff ff       	jmp    801062cf <alltraps>
 
-80106473 <vector141>:
+80106d33 <vector141>:
 .globl vector141
 vector141:
   pushl $0
-80106473:	6a 00                	push   $0x0
+80106d33:	6a 00                	push   $0x0
   pushl $141
-80106475:	68 8d 00 00 00       	push   $0x8d
+80106d35:	68 8d 00 00 00       	push   $0x8d
   jmp alltraps
-8010647a:	e9 00 f6 ff ff       	jmp    80105a7f <alltraps>
+80106d3a:	e9 90 f5 ff ff       	jmp    801062cf <alltraps>
 
-8010647f <vector142>:
+80106d3f <vector142>:
 .globl vector142
 vector142:
   pushl $0
-8010647f:	6a 00                	push   $0x0
+80106d3f:	6a 00                	push   $0x0
   pushl $142
-80106481:	68 8e 00 00 00       	push   $0x8e
+80106d41:	68 8e 00 00 00       	push   $0x8e
   jmp alltraps
-80106486:	e9 f4 f5 ff ff       	jmp    80105a7f <alltraps>
+80106d46:	e9 84 f5 ff ff       	jmp    801062cf <alltraps>
 
-8010648b <vector143>:
+80106d4b <vector143>:
 .globl vector143
 vector143:
   pushl $0
-8010648b:	6a 00                	push   $0x0
+80106d4b:	6a 00                	push   $0x0
   pushl $143
-8010648d:	68 8f 00 00 00       	push   $0x8f
+80106d4d:	68 8f 00 00 00       	push   $0x8f
   jmp alltraps
-80106492:	e9 e8 f5 ff ff       	jmp    80105a7f <alltraps>
+80106d52:	e9 78 f5 ff ff       	jmp    801062cf <alltraps>
 
-80106497 <vector144>:
+80106d57 <vector144>:
 .globl vector144
 vector144:
   pushl $0
-80106497:	6a 00                	push   $0x0
+80106d57:	6a 00                	push   $0x0
   pushl $144
-80106499:	68 90 00 00 00       	push   $0x90
+80106d59:	68 90 00 00 00       	push   $0x90
   jmp alltraps
-8010649e:	e9 dc f5 ff ff       	jmp    80105a7f <alltraps>
+80106d5e:	e9 6c f5 ff ff       	jmp    801062cf <alltraps>
 
-801064a3 <vector145>:
+80106d63 <vector145>:
 .globl vector145
 vector145:
   pushl $0
-801064a3:	6a 00                	push   $0x0
+80106d63:	6a 00                	push   $0x0
   pushl $145
-801064a5:	68 91 00 00 00       	push   $0x91
+80106d65:	68 91 00 00 00       	push   $0x91
   jmp alltraps
-801064aa:	e9 d0 f5 ff ff       	jmp    80105a7f <alltraps>
+80106d6a:	e9 60 f5 ff ff       	jmp    801062cf <alltraps>
 
-801064af <vector146>:
+80106d6f <vector146>:
 .globl vector146
 vector146:
   pushl $0
-801064af:	6a 00                	push   $0x0
+80106d6f:	6a 00                	push   $0x0
   pushl $146
-801064b1:	68 92 00 00 00       	push   $0x92
+80106d71:	68 92 00 00 00       	push   $0x92
   jmp alltraps
-801064b6:	e9 c4 f5 ff ff       	jmp    80105a7f <alltraps>
+80106d76:	e9 54 f5 ff ff       	jmp    801062cf <alltraps>
 
-801064bb <vector147>:
+80106d7b <vector147>:
 .globl vector147
 vector147:
   pushl $0
-801064bb:	6a 00                	push   $0x0
+80106d7b:	6a 00                	push   $0x0
   pushl $147
-801064bd:	68 93 00 00 00       	push   $0x93
+80106d7d:	68 93 00 00 00       	push   $0x93
   jmp alltraps
-801064c2:	e9 b8 f5 ff ff       	jmp    80105a7f <alltraps>
+80106d82:	e9 48 f5 ff ff       	jmp    801062cf <alltraps>
 
-801064c7 <vector148>:
+80106d87 <vector148>:
 .globl vector148
 vector148:
   pushl $0
-801064c7:	6a 00                	push   $0x0
+80106d87:	6a 00                	push   $0x0
   pushl $148
-801064c9:	68 94 00 00 00       	push   $0x94
+80106d89:	68 94 00 00 00       	push   $0x94
   jmp alltraps
-801064ce:	e9 ac f5 ff ff       	jmp    80105a7f <alltraps>
+80106d8e:	e9 3c f5 ff ff       	jmp    801062cf <alltraps>
 
-801064d3 <vector149>:
+80106d93 <vector149>:
 .globl vector149
 vector149:
   pushl $0
-801064d3:	6a 00                	push   $0x0
+80106d93:	6a 00                	push   $0x0
   pushl $149
-801064d5:	68 95 00 00 00       	push   $0x95
+80106d95:	68 95 00 00 00       	push   $0x95
   jmp alltraps
-801064da:	e9 a0 f5 ff ff       	jmp    80105a7f <alltraps>
+80106d9a:	e9 30 f5 ff ff       	jmp    801062cf <alltraps>
 
-801064df <vector150>:
+80106d9f <vector150>:
 .globl vector150
 vector150:
   pushl $0
-801064df:	6a 00                	push   $0x0
+80106d9f:	6a 00                	push   $0x0
   pushl $150
-801064e1:	68 96 00 00 00       	push   $0x96
+80106da1:	68 96 00 00 00       	push   $0x96
   jmp alltraps
-801064e6:	e9 94 f5 ff ff       	jmp    80105a7f <alltraps>
+80106da6:	e9 24 f5 ff ff       	jmp    801062cf <alltraps>
 
-801064eb <vector151>:
+80106dab <vector151>:
 .globl vector151
 vector151:
   pushl $0
-801064eb:	6a 00                	push   $0x0
+80106dab:	6a 00                	push   $0x0
   pushl $151
-801064ed:	68 97 00 00 00       	push   $0x97
+80106dad:	68 97 00 00 00       	push   $0x97
   jmp alltraps
-801064f2:	e9 88 f5 ff ff       	jmp    80105a7f <alltraps>
+80106db2:	e9 18 f5 ff ff       	jmp    801062cf <alltraps>
 
-801064f7 <vector152>:
+80106db7 <vector152>:
 .globl vector152
 vector152:
   pushl $0
-801064f7:	6a 00                	push   $0x0
+80106db7:	6a 00                	push   $0x0
   pushl $152
-801064f9:	68 98 00 00 00       	push   $0x98
+80106db9:	68 98 00 00 00       	push   $0x98
   jmp alltraps
-801064fe:	e9 7c f5 ff ff       	jmp    80105a7f <alltraps>
+80106dbe:	e9 0c f5 ff ff       	jmp    801062cf <alltraps>
 
-80106503 <vector153>:
+80106dc3 <vector153>:
 .globl vector153
 vector153:
   pushl $0
-80106503:	6a 00                	push   $0x0
+80106dc3:	6a 00                	push   $0x0
   pushl $153
-80106505:	68 99 00 00 00       	push   $0x99
+80106dc5:	68 99 00 00 00       	push   $0x99
   jmp alltraps
-8010650a:	e9 70 f5 ff ff       	jmp    80105a7f <alltraps>
+80106dca:	e9 00 f5 ff ff       	jmp    801062cf <alltraps>
 
-8010650f <vector154>:
+80106dcf <vector154>:
 .globl vector154
 vector154:
   pushl $0
-8010650f:	6a 00                	push   $0x0
+80106dcf:	6a 00                	push   $0x0
   pushl $154
-80106511:	68 9a 00 00 00       	push   $0x9a
+80106dd1:	68 9a 00 00 00       	push   $0x9a
   jmp alltraps
-80106516:	e9 64 f5 ff ff       	jmp    80105a7f <alltraps>
+80106dd6:	e9 f4 f4 ff ff       	jmp    801062cf <alltraps>
 
-8010651b <vector155>:
+80106ddb <vector155>:
 .globl vector155
 vector155:
   pushl $0
-8010651b:	6a 00                	push   $0x0
+80106ddb:	6a 00                	push   $0x0
   pushl $155
-8010651d:	68 9b 00 00 00       	push   $0x9b
+80106ddd:	68 9b 00 00 00       	push   $0x9b
   jmp alltraps
-80106522:	e9 58 f5 ff ff       	jmp    80105a7f <alltraps>
+80106de2:	e9 e8 f4 ff ff       	jmp    801062cf <alltraps>
 
-80106527 <vector156>:
+80106de7 <vector156>:
 .globl vector156
 vector156:
   pushl $0
-80106527:	6a 00                	push   $0x0
+80106de7:	6a 00                	push   $0x0
   pushl $156
-80106529:	68 9c 00 00 00       	push   $0x9c
+80106de9:	68 9c 00 00 00       	push   $0x9c
   jmp alltraps
-8010652e:	e9 4c f5 ff ff       	jmp    80105a7f <alltraps>
+80106dee:	e9 dc f4 ff ff       	jmp    801062cf <alltraps>
 
-80106533 <vector157>:
+80106df3 <vector157>:
 .globl vector157
 vector157:
   pushl $0
-80106533:	6a 00                	push   $0x0
+80106df3:	6a 00                	push   $0x0
   pushl $157
-80106535:	68 9d 00 00 00       	push   $0x9d
+80106df5:	68 9d 00 00 00       	push   $0x9d
   jmp alltraps
-8010653a:	e9 40 f5 ff ff       	jmp    80105a7f <alltraps>
+80106dfa:	e9 d0 f4 ff ff       	jmp    801062cf <alltraps>
 
-8010653f <vector158>:
+80106dff <vector158>:
 .globl vector158
 vector158:
   pushl $0
-8010653f:	6a 00                	push   $0x0
+80106dff:	6a 00                	push   $0x0
   pushl $158
-80106541:	68 9e 00 00 00       	push   $0x9e
+80106e01:	68 9e 00 00 00       	push   $0x9e
   jmp alltraps
-80106546:	e9 34 f5 ff ff       	jmp    80105a7f <alltraps>
+80106e06:	e9 c4 f4 ff ff       	jmp    801062cf <alltraps>
 
-8010654b <vector159>:
+80106e0b <vector159>:
 .globl vector159
 vector159:
   pushl $0
-8010654b:	6a 00                	push   $0x0
+80106e0b:	6a 00                	push   $0x0
   pushl $159
-8010654d:	68 9f 00 00 00       	push   $0x9f
+80106e0d:	68 9f 00 00 00       	push   $0x9f
   jmp alltraps
-80106552:	e9 28 f5 ff ff       	jmp    80105a7f <alltraps>
+80106e12:	e9 b8 f4 ff ff       	jmp    801062cf <alltraps>
 
-80106557 <vector160>:
+80106e17 <vector160>:
 .globl vector160
 vector160:
   pushl $0
-80106557:	6a 00                	push   $0x0
+80106e17:	6a 00                	push   $0x0
   pushl $160
-80106559:	68 a0 00 00 00       	push   $0xa0
+80106e19:	68 a0 00 00 00       	push   $0xa0
   jmp alltraps
-8010655e:	e9 1c f5 ff ff       	jmp    80105a7f <alltraps>
+80106e1e:	e9 ac f4 ff ff       	jmp    801062cf <alltraps>
 
-80106563 <vector161>:
+80106e23 <vector161>:
 .globl vector161
 vector161:
   pushl $0
-80106563:	6a 00                	push   $0x0
+80106e23:	6a 00                	push   $0x0
   pushl $161
-80106565:	68 a1 00 00 00       	push   $0xa1
+80106e25:	68 a1 00 00 00       	push   $0xa1
   jmp alltraps
-8010656a:	e9 10 f5 ff ff       	jmp    80105a7f <alltraps>
+80106e2a:	e9 a0 f4 ff ff       	jmp    801062cf <alltraps>
 
-8010656f <vector162>:
+80106e2f <vector162>:
 .globl vector162
 vector162:
   pushl $0
-8010656f:	6a 00                	push   $0x0
+80106e2f:	6a 00                	push   $0x0
   pushl $162
-80106571:	68 a2 00 00 00       	push   $0xa2
+80106e31:	68 a2 00 00 00       	push   $0xa2
   jmp alltraps
-80106576:	e9 04 f5 ff ff       	jmp    80105a7f <alltraps>
+80106e36:	e9 94 f4 ff ff       	jmp    801062cf <alltraps>
 
-8010657b <vector163>:
+80106e3b <vector163>:
 .globl vector163
 vector163:
   pushl $0
-8010657b:	6a 00                	push   $0x0
+80106e3b:	6a 00                	push   $0x0
   pushl $163
-8010657d:	68 a3 00 00 00       	push   $0xa3
+80106e3d:	68 a3 00 00 00       	push   $0xa3
   jmp alltraps
-80106582:	e9 f8 f4 ff ff       	jmp    80105a7f <alltraps>
+80106e42:	e9 88 f4 ff ff       	jmp    801062cf <alltraps>
 
-80106587 <vector164>:
+80106e47 <vector164>:
 .globl vector164
 vector164:
   pushl $0
-80106587:	6a 00                	push   $0x0
+80106e47:	6a 00                	push   $0x0
   pushl $164
-80106589:	68 a4 00 00 00       	push   $0xa4
+80106e49:	68 a4 00 00 00       	push   $0xa4
   jmp alltraps
-8010658e:	e9 ec f4 ff ff       	jmp    80105a7f <alltraps>
+80106e4e:	e9 7c f4 ff ff       	jmp    801062cf <alltraps>
 
-80106593 <vector165>:
+80106e53 <vector165>:
 .globl vector165
 vector165:
   pushl $0
-80106593:	6a 00                	push   $0x0
+80106e53:	6a 00                	push   $0x0
   pushl $165
-80106595:	68 a5 00 00 00       	push   $0xa5
+80106e55:	68 a5 00 00 00       	push   $0xa5
   jmp alltraps
-8010659a:	e9 e0 f4 ff ff       	jmp    80105a7f <alltraps>
+80106e5a:	e9 70 f4 ff ff       	jmp    801062cf <alltraps>
 
-8010659f <vector166>:
+80106e5f <vector166>:
 .globl vector166
 vector166:
   pushl $0
-8010659f:	6a 00                	push   $0x0
+80106e5f:	6a 00                	push   $0x0
   pushl $166
-801065a1:	68 a6 00 00 00       	push   $0xa6
+80106e61:	68 a6 00 00 00       	push   $0xa6
   jmp alltraps
-801065a6:	e9 d4 f4 ff ff       	jmp    80105a7f <alltraps>
+80106e66:	e9 64 f4 ff ff       	jmp    801062cf <alltraps>
 
-801065ab <vector167>:
+80106e6b <vector167>:
 .globl vector167
 vector167:
   pushl $0
-801065ab:	6a 00                	push   $0x0
+80106e6b:	6a 00                	push   $0x0
   pushl $167
-801065ad:	68 a7 00 00 00       	push   $0xa7
+80106e6d:	68 a7 00 00 00       	push   $0xa7
   jmp alltraps
-801065b2:	e9 c8 f4 ff ff       	jmp    80105a7f <alltraps>
+80106e72:	e9 58 f4 ff ff       	jmp    801062cf <alltraps>
 
-801065b7 <vector168>:
+80106e77 <vector168>:
 .globl vector168
 vector168:
   pushl $0
-801065b7:	6a 00                	push   $0x0
+80106e77:	6a 00                	push   $0x0
   pushl $168
-801065b9:	68 a8 00 00 00       	push   $0xa8
+80106e79:	68 a8 00 00 00       	push   $0xa8
   jmp alltraps
-801065be:	e9 bc f4 ff ff       	jmp    80105a7f <alltraps>
+80106e7e:	e9 4c f4 ff ff       	jmp    801062cf <alltraps>
 
-801065c3 <vector169>:
+80106e83 <vector169>:
 .globl vector169
 vector169:
   pushl $0
-801065c3:	6a 00                	push   $0x0
+80106e83:	6a 00                	push   $0x0
   pushl $169
-801065c5:	68 a9 00 00 00       	push   $0xa9
+80106e85:	68 a9 00 00 00       	push   $0xa9
   jmp alltraps
-801065ca:	e9 b0 f4 ff ff       	jmp    80105a7f <alltraps>
+80106e8a:	e9 40 f4 ff ff       	jmp    801062cf <alltraps>
 
-801065cf <vector170>:
+80106e8f <vector170>:
 .globl vector170
 vector170:
   pushl $0
-801065cf:	6a 00                	push   $0x0
+80106e8f:	6a 00                	push   $0x0
   pushl $170
-801065d1:	68 aa 00 00 00       	push   $0xaa
+80106e91:	68 aa 00 00 00       	push   $0xaa
   jmp alltraps
-801065d6:	e9 a4 f4 ff ff       	jmp    80105a7f <alltraps>
+80106e96:	e9 34 f4 ff ff       	jmp    801062cf <alltraps>
 
-801065db <vector171>:
+80106e9b <vector171>:
 .globl vector171
 vector171:
   pushl $0
-801065db:	6a 00                	push   $0x0
+80106e9b:	6a 00                	push   $0x0
   pushl $171
-801065dd:	68 ab 00 00 00       	push   $0xab
+80106e9d:	68 ab 00 00 00       	push   $0xab
   jmp alltraps
-801065e2:	e9 98 f4 ff ff       	jmp    80105a7f <alltraps>
+80106ea2:	e9 28 f4 ff ff       	jmp    801062cf <alltraps>
 
-801065e7 <vector172>:
+80106ea7 <vector172>:
 .globl vector172
 vector172:
   pushl $0
-801065e7:	6a 00                	push   $0x0
+80106ea7:	6a 00                	push   $0x0
   pushl $172
-801065e9:	68 ac 00 00 00       	push   $0xac
+80106ea9:	68 ac 00 00 00       	push   $0xac
   jmp alltraps
-801065ee:	e9 8c f4 ff ff       	jmp    80105a7f <alltraps>
+80106eae:	e9 1c f4 ff ff       	jmp    801062cf <alltraps>
 
-801065f3 <vector173>:
+80106eb3 <vector173>:
 .globl vector173
 vector173:
   pushl $0
-801065f3:	6a 00                	push   $0x0
+80106eb3:	6a 00                	push   $0x0
   pushl $173
-801065f5:	68 ad 00 00 00       	push   $0xad
+80106eb5:	68 ad 00 00 00       	push   $0xad
   jmp alltraps
-801065fa:	e9 80 f4 ff ff       	jmp    80105a7f <alltraps>
+80106eba:	e9 10 f4 ff ff       	jmp    801062cf <alltraps>
 
-801065ff <vector174>:
+80106ebf <vector174>:
 .globl vector174
 vector174:
   pushl $0
-801065ff:	6a 00                	push   $0x0
+80106ebf:	6a 00                	push   $0x0
   pushl $174
-80106601:	68 ae 00 00 00       	push   $0xae
+80106ec1:	68 ae 00 00 00       	push   $0xae
   jmp alltraps
-80106606:	e9 74 f4 ff ff       	jmp    80105a7f <alltraps>
+80106ec6:	e9 04 f4 ff ff       	jmp    801062cf <alltraps>
 
-8010660b <vector175>:
+80106ecb <vector175>:
 .globl vector175
 vector175:
   pushl $0
-8010660b:	6a 00                	push   $0x0
+80106ecb:	6a 00                	push   $0x0
   pushl $175
-8010660d:	68 af 00 00 00       	push   $0xaf
+80106ecd:	68 af 00 00 00       	push   $0xaf
   jmp alltraps
-80106612:	e9 68 f4 ff ff       	jmp    80105a7f <alltraps>
+80106ed2:	e9 f8 f3 ff ff       	jmp    801062cf <alltraps>
 
-80106617 <vector176>:
+80106ed7 <vector176>:
 .globl vector176
 vector176:
   pushl $0
-80106617:	6a 00                	push   $0x0
+80106ed7:	6a 00                	push   $0x0
   pushl $176
-80106619:	68 b0 00 00 00       	push   $0xb0
+80106ed9:	68 b0 00 00 00       	push   $0xb0
   jmp alltraps
-8010661e:	e9 5c f4 ff ff       	jmp    80105a7f <alltraps>
+80106ede:	e9 ec f3 ff ff       	jmp    801062cf <alltraps>
 
-80106623 <vector177>:
+80106ee3 <vector177>:
 .globl vector177
 vector177:
   pushl $0
-80106623:	6a 00                	push   $0x0
+80106ee3:	6a 00                	push   $0x0
   pushl $177
-80106625:	68 b1 00 00 00       	push   $0xb1
+80106ee5:	68 b1 00 00 00       	push   $0xb1
   jmp alltraps
-8010662a:	e9 50 f4 ff ff       	jmp    80105a7f <alltraps>
+80106eea:	e9 e0 f3 ff ff       	jmp    801062cf <alltraps>
 
-8010662f <vector178>:
+80106eef <vector178>:
 .globl vector178
 vector178:
   pushl $0
-8010662f:	6a 00                	push   $0x0
+80106eef:	6a 00                	push   $0x0
   pushl $178
-80106631:	68 b2 00 00 00       	push   $0xb2
+80106ef1:	68 b2 00 00 00       	push   $0xb2
   jmp alltraps
-80106636:	e9 44 f4 ff ff       	jmp    80105a7f <alltraps>
+80106ef6:	e9 d4 f3 ff ff       	jmp    801062cf <alltraps>
 
-8010663b <vector179>:
+80106efb <vector179>:
 .globl vector179
 vector179:
   pushl $0
-8010663b:	6a 00                	push   $0x0
+80106efb:	6a 00                	push   $0x0
   pushl $179
-8010663d:	68 b3 00 00 00       	push   $0xb3
+80106efd:	68 b3 00 00 00       	push   $0xb3
   jmp alltraps
-80106642:	e9 38 f4 ff ff       	jmp    80105a7f <alltraps>
+80106f02:	e9 c8 f3 ff ff       	jmp    801062cf <alltraps>
 
-80106647 <vector180>:
+80106f07 <vector180>:
 .globl vector180
 vector180:
   pushl $0
-80106647:	6a 00                	push   $0x0
+80106f07:	6a 00                	push   $0x0
   pushl $180
-80106649:	68 b4 00 00 00       	push   $0xb4
+80106f09:	68 b4 00 00 00       	push   $0xb4
   jmp alltraps
-8010664e:	e9 2c f4 ff ff       	jmp    80105a7f <alltraps>
+80106f0e:	e9 bc f3 ff ff       	jmp    801062cf <alltraps>
 
-80106653 <vector181>:
+80106f13 <vector181>:
 .globl vector181
 vector181:
   pushl $0
-80106653:	6a 00                	push   $0x0
+80106f13:	6a 00                	push   $0x0
   pushl $181
-80106655:	68 b5 00 00 00       	push   $0xb5
+80106f15:	68 b5 00 00 00       	push   $0xb5
   jmp alltraps
-8010665a:	e9 20 f4 ff ff       	jmp    80105a7f <alltraps>
+80106f1a:	e9 b0 f3 ff ff       	jmp    801062cf <alltraps>
 
-8010665f <vector182>:
+80106f1f <vector182>:
 .globl vector182
 vector182:
   pushl $0
-8010665f:	6a 00                	push   $0x0
+80106f1f:	6a 00                	push   $0x0
   pushl $182
-80106661:	68 b6 00 00 00       	push   $0xb6
+80106f21:	68 b6 00 00 00       	push   $0xb6
   jmp alltraps
-80106666:	e9 14 f4 ff ff       	jmp    80105a7f <alltraps>
+80106f26:	e9 a4 f3 ff ff       	jmp    801062cf <alltraps>
 
-8010666b <vector183>:
+80106f2b <vector183>:
 .globl vector183
 vector183:
   pushl $0
-8010666b:	6a 00                	push   $0x0
+80106f2b:	6a 00                	push   $0x0
   pushl $183
-8010666d:	68 b7 00 00 00       	push   $0xb7
+80106f2d:	68 b7 00 00 00       	push   $0xb7
   jmp alltraps
-80106672:	e9 08 f4 ff ff       	jmp    80105a7f <alltraps>
+80106f32:	e9 98 f3 ff ff       	jmp    801062cf <alltraps>
 
-80106677 <vector184>:
+80106f37 <vector184>:
 .globl vector184
 vector184:
   pushl $0
-80106677:	6a 00                	push   $0x0
+80106f37:	6a 00                	push   $0x0
   pushl $184
-80106679:	68 b8 00 00 00       	push   $0xb8
+80106f39:	68 b8 00 00 00       	push   $0xb8
   jmp alltraps
-8010667e:	e9 fc f3 ff ff       	jmp    80105a7f <alltraps>
+80106f3e:	e9 8c f3 ff ff       	jmp    801062cf <alltraps>
 
-80106683 <vector185>:
+80106f43 <vector185>:
 .globl vector185
 vector185:
   pushl $0
-80106683:	6a 00                	push   $0x0
+80106f43:	6a 00                	push   $0x0
   pushl $185
-80106685:	68 b9 00 00 00       	push   $0xb9
+80106f45:	68 b9 00 00 00       	push   $0xb9
   jmp alltraps
-8010668a:	e9 f0 f3 ff ff       	jmp    80105a7f <alltraps>
+80106f4a:	e9 80 f3 ff ff       	jmp    801062cf <alltraps>
 
-8010668f <vector186>:
+80106f4f <vector186>:
 .globl vector186
 vector186:
   pushl $0
-8010668f:	6a 00                	push   $0x0
+80106f4f:	6a 00                	push   $0x0
   pushl $186
-80106691:	68 ba 00 00 00       	push   $0xba
+80106f51:	68 ba 00 00 00       	push   $0xba
   jmp alltraps
-80106696:	e9 e4 f3 ff ff       	jmp    80105a7f <alltraps>
+80106f56:	e9 74 f3 ff ff       	jmp    801062cf <alltraps>
 
-8010669b <vector187>:
+80106f5b <vector187>:
 .globl vector187
 vector187:
   pushl $0
-8010669b:	6a 00                	push   $0x0
+80106f5b:	6a 00                	push   $0x0
   pushl $187
-8010669d:	68 bb 00 00 00       	push   $0xbb
+80106f5d:	68 bb 00 00 00       	push   $0xbb
   jmp alltraps
-801066a2:	e9 d8 f3 ff ff       	jmp    80105a7f <alltraps>
+80106f62:	e9 68 f3 ff ff       	jmp    801062cf <alltraps>
 
-801066a7 <vector188>:
+80106f67 <vector188>:
 .globl vector188
 vector188:
   pushl $0
-801066a7:	6a 00                	push   $0x0
+80106f67:	6a 00                	push   $0x0
   pushl $188
-801066a9:	68 bc 00 00 00       	push   $0xbc
+80106f69:	68 bc 00 00 00       	push   $0xbc
   jmp alltraps
-801066ae:	e9 cc f3 ff ff       	jmp    80105a7f <alltraps>
+80106f6e:	e9 5c f3 ff ff       	jmp    801062cf <alltraps>
 
-801066b3 <vector189>:
+80106f73 <vector189>:
 .globl vector189
 vector189:
   pushl $0
-801066b3:	6a 00                	push   $0x0
+80106f73:	6a 00                	push   $0x0
   pushl $189
-801066b5:	68 bd 00 00 00       	push   $0xbd
+80106f75:	68 bd 00 00 00       	push   $0xbd
   jmp alltraps
-801066ba:	e9 c0 f3 ff ff       	jmp    80105a7f <alltraps>
+80106f7a:	e9 50 f3 ff ff       	jmp    801062cf <alltraps>
 
-801066bf <vector190>:
+80106f7f <vector190>:
 .globl vector190
 vector190:
   pushl $0
-801066bf:	6a 00                	push   $0x0
+80106f7f:	6a 00                	push   $0x0
   pushl $190
-801066c1:	68 be 00 00 00       	push   $0xbe
+80106f81:	68 be 00 00 00       	push   $0xbe
   jmp alltraps
-801066c6:	e9 b4 f3 ff ff       	jmp    80105a7f <alltraps>
+80106f86:	e9 44 f3 ff ff       	jmp    801062cf <alltraps>
 
-801066cb <vector191>:
+80106f8b <vector191>:
 .globl vector191
 vector191:
   pushl $0
-801066cb:	6a 00                	push   $0x0
+80106f8b:	6a 00                	push   $0x0
   pushl $191
-801066cd:	68 bf 00 00 00       	push   $0xbf
+80106f8d:	68 bf 00 00 00       	push   $0xbf
   jmp alltraps
-801066d2:	e9 a8 f3 ff ff       	jmp    80105a7f <alltraps>
+80106f92:	e9 38 f3 ff ff       	jmp    801062cf <alltraps>
 
-801066d7 <vector192>:
+80106f97 <vector192>:
 .globl vector192
 vector192:
   pushl $0
-801066d7:	6a 00                	push   $0x0
+80106f97:	6a 00                	push   $0x0
   pushl $192
-801066d9:	68 c0 00 00 00       	push   $0xc0
+80106f99:	68 c0 00 00 00       	push   $0xc0
   jmp alltraps
-801066de:	e9 9c f3 ff ff       	jmp    80105a7f <alltraps>
+80106f9e:	e9 2c f3 ff ff       	jmp    801062cf <alltraps>
 
-801066e3 <vector193>:
+80106fa3 <vector193>:
 .globl vector193
 vector193:
   pushl $0
-801066e3:	6a 00                	push   $0x0
+80106fa3:	6a 00                	push   $0x0
   pushl $193
-801066e5:	68 c1 00 00 00       	push   $0xc1
+80106fa5:	68 c1 00 00 00       	push   $0xc1
   jmp alltraps
-801066ea:	e9 90 f3 ff ff       	jmp    80105a7f <alltraps>
+80106faa:	e9 20 f3 ff ff       	jmp    801062cf <alltraps>
 
-801066ef <vector194>:
+80106faf <vector194>:
 .globl vector194
 vector194:
   pushl $0
-801066ef:	6a 00                	push   $0x0
+80106faf:	6a 00                	push   $0x0
   pushl $194
-801066f1:	68 c2 00 00 00       	push   $0xc2
+80106fb1:	68 c2 00 00 00       	push   $0xc2
   jmp alltraps
-801066f6:	e9 84 f3 ff ff       	jmp    80105a7f <alltraps>
+80106fb6:	e9 14 f3 ff ff       	jmp    801062cf <alltraps>
 
-801066fb <vector195>:
+80106fbb <vector195>:
 .globl vector195
 vector195:
   pushl $0
-801066fb:	6a 00                	push   $0x0
+80106fbb:	6a 00                	push   $0x0
   pushl $195
-801066fd:	68 c3 00 00 00       	push   $0xc3
+80106fbd:	68 c3 00 00 00       	push   $0xc3
   jmp alltraps
-80106702:	e9 78 f3 ff ff       	jmp    80105a7f <alltraps>
+80106fc2:	e9 08 f3 ff ff       	jmp    801062cf <alltraps>
 
-80106707 <vector196>:
+80106fc7 <vector196>:
 .globl vector196
 vector196:
   pushl $0
-80106707:	6a 00                	push   $0x0
+80106fc7:	6a 00                	push   $0x0
   pushl $196
-80106709:	68 c4 00 00 00       	push   $0xc4
+80106fc9:	68 c4 00 00 00       	push   $0xc4
   jmp alltraps
-8010670e:	e9 6c f3 ff ff       	jmp    80105a7f <alltraps>
+80106fce:	e9 fc f2 ff ff       	jmp    801062cf <alltraps>
 
-80106713 <vector197>:
+80106fd3 <vector197>:
 .globl vector197
 vector197:
   pushl $0
-80106713:	6a 00                	push   $0x0
+80106fd3:	6a 00                	push   $0x0
   pushl $197
-80106715:	68 c5 00 00 00       	push   $0xc5
+80106fd5:	68 c5 00 00 00       	push   $0xc5
   jmp alltraps
-8010671a:	e9 60 f3 ff ff       	jmp    80105a7f <alltraps>
+80106fda:	e9 f0 f2 ff ff       	jmp    801062cf <alltraps>
 
-8010671f <vector198>:
+80106fdf <vector198>:
 .globl vector198
 vector198:
   pushl $0
-8010671f:	6a 00                	push   $0x0
+80106fdf:	6a 00                	push   $0x0
   pushl $198
-80106721:	68 c6 00 00 00       	push   $0xc6
+80106fe1:	68 c6 00 00 00       	push   $0xc6
   jmp alltraps
-80106726:	e9 54 f3 ff ff       	jmp    80105a7f <alltraps>
+80106fe6:	e9 e4 f2 ff ff       	jmp    801062cf <alltraps>
 
-8010672b <vector199>:
+80106feb <vector199>:
 .globl vector199
 vector199:
   pushl $0
-8010672b:	6a 00                	push   $0x0
+80106feb:	6a 00                	push   $0x0
   pushl $199
-8010672d:	68 c7 00 00 00       	push   $0xc7
+80106fed:	68 c7 00 00 00       	push   $0xc7
   jmp alltraps
-80106732:	e9 48 f3 ff ff       	jmp    80105a7f <alltraps>
+80106ff2:	e9 d8 f2 ff ff       	jmp    801062cf <alltraps>
 
-80106737 <vector200>:
+80106ff7 <vector200>:
 .globl vector200
 vector200:
   pushl $0
-80106737:	6a 00                	push   $0x0
+80106ff7:	6a 00                	push   $0x0
   pushl $200
-80106739:	68 c8 00 00 00       	push   $0xc8
+80106ff9:	68 c8 00 00 00       	push   $0xc8
   jmp alltraps
-8010673e:	e9 3c f3 ff ff       	jmp    80105a7f <alltraps>
+80106ffe:	e9 cc f2 ff ff       	jmp    801062cf <alltraps>
 
-80106743 <vector201>:
+80107003 <vector201>:
 .globl vector201
 vector201:
   pushl $0
-80106743:	6a 00                	push   $0x0
+80107003:	6a 00                	push   $0x0
   pushl $201
-80106745:	68 c9 00 00 00       	push   $0xc9
+80107005:	68 c9 00 00 00       	push   $0xc9
   jmp alltraps
-8010674a:	e9 30 f3 ff ff       	jmp    80105a7f <alltraps>
+8010700a:	e9 c0 f2 ff ff       	jmp    801062cf <alltraps>
 
-8010674f <vector202>:
+8010700f <vector202>:
 .globl vector202
 vector202:
   pushl $0
-8010674f:	6a 00                	push   $0x0
+8010700f:	6a 00                	push   $0x0
   pushl $202
-80106751:	68 ca 00 00 00       	push   $0xca
+80107011:	68 ca 00 00 00       	push   $0xca
   jmp alltraps
-80106756:	e9 24 f3 ff ff       	jmp    80105a7f <alltraps>
+80107016:	e9 b4 f2 ff ff       	jmp    801062cf <alltraps>
 
-8010675b <vector203>:
+8010701b <vector203>:
 .globl vector203
 vector203:
   pushl $0
-8010675b:	6a 00                	push   $0x0
+8010701b:	6a 00                	push   $0x0
   pushl $203
-8010675d:	68 cb 00 00 00       	push   $0xcb
+8010701d:	68 cb 00 00 00       	push   $0xcb
   jmp alltraps
-80106762:	e9 18 f3 ff ff       	jmp    80105a7f <alltraps>
+80107022:	e9 a8 f2 ff ff       	jmp    801062cf <alltraps>
 
-80106767 <vector204>:
+80107027 <vector204>:
 .globl vector204
 vector204:
   pushl $0
-80106767:	6a 00                	push   $0x0
+80107027:	6a 00                	push   $0x0
   pushl $204
-80106769:	68 cc 00 00 00       	push   $0xcc
+80107029:	68 cc 00 00 00       	push   $0xcc
   jmp alltraps
-8010676e:	e9 0c f3 ff ff       	jmp    80105a7f <alltraps>
+8010702e:	e9 9c f2 ff ff       	jmp    801062cf <alltraps>
 
-80106773 <vector205>:
+80107033 <vector205>:
 .globl vector205
 vector205:
   pushl $0
-80106773:	6a 00                	push   $0x0
+80107033:	6a 00                	push   $0x0
   pushl $205
-80106775:	68 cd 00 00 00       	push   $0xcd
+80107035:	68 cd 00 00 00       	push   $0xcd
   jmp alltraps
-8010677a:	e9 00 f3 ff ff       	jmp    80105a7f <alltraps>
+8010703a:	e9 90 f2 ff ff       	jmp    801062cf <alltraps>
 
-8010677f <vector206>:
+8010703f <vector206>:
 .globl vector206
 vector206:
   pushl $0
-8010677f:	6a 00                	push   $0x0
+8010703f:	6a 00                	push   $0x0
   pushl $206
-80106781:	68 ce 00 00 00       	push   $0xce
+80107041:	68 ce 00 00 00       	push   $0xce
   jmp alltraps
-80106786:	e9 f4 f2 ff ff       	jmp    80105a7f <alltraps>
+80107046:	e9 84 f2 ff ff       	jmp    801062cf <alltraps>
 
-8010678b <vector207>:
+8010704b <vector207>:
 .globl vector207
 vector207:
   pushl $0
-8010678b:	6a 00                	push   $0x0
+8010704b:	6a 00                	push   $0x0
   pushl $207
-8010678d:	68 cf 00 00 00       	push   $0xcf
+8010704d:	68 cf 00 00 00       	push   $0xcf
   jmp alltraps
-80106792:	e9 e8 f2 ff ff       	jmp    80105a7f <alltraps>
+80107052:	e9 78 f2 ff ff       	jmp    801062cf <alltraps>
 
-80106797 <vector208>:
+80107057 <vector208>:
 .globl vector208
 vector208:
   pushl $0
-80106797:	6a 00                	push   $0x0
+80107057:	6a 00                	push   $0x0
   pushl $208
-80106799:	68 d0 00 00 00       	push   $0xd0
+80107059:	68 d0 00 00 00       	push   $0xd0
   jmp alltraps
-8010679e:	e9 dc f2 ff ff       	jmp    80105a7f <alltraps>
+8010705e:	e9 6c f2 ff ff       	jmp    801062cf <alltraps>
 
-801067a3 <vector209>:
+80107063 <vector209>:
 .globl vector209
 vector209:
   pushl $0
-801067a3:	6a 00                	push   $0x0
+80107063:	6a 00                	push   $0x0
   pushl $209
-801067a5:	68 d1 00 00 00       	push   $0xd1
+80107065:	68 d1 00 00 00       	push   $0xd1
   jmp alltraps
-801067aa:	e9 d0 f2 ff ff       	jmp    80105a7f <alltraps>
+8010706a:	e9 60 f2 ff ff       	jmp    801062cf <alltraps>
 
-801067af <vector210>:
+8010706f <vector210>:
 .globl vector210
 vector210:
   pushl $0
-801067af:	6a 00                	push   $0x0
+8010706f:	6a 00                	push   $0x0
   pushl $210
-801067b1:	68 d2 00 00 00       	push   $0xd2
+80107071:	68 d2 00 00 00       	push   $0xd2
   jmp alltraps
-801067b6:	e9 c4 f2 ff ff       	jmp    80105a7f <alltraps>
+80107076:	e9 54 f2 ff ff       	jmp    801062cf <alltraps>
 
-801067bb <vector211>:
+8010707b <vector211>:
 .globl vector211
 vector211:
   pushl $0
-801067bb:	6a 00                	push   $0x0
+8010707b:	6a 00                	push   $0x0
   pushl $211
-801067bd:	68 d3 00 00 00       	push   $0xd3
+8010707d:	68 d3 00 00 00       	push   $0xd3
   jmp alltraps
-801067c2:	e9 b8 f2 ff ff       	jmp    80105a7f <alltraps>
+80107082:	e9 48 f2 ff ff       	jmp    801062cf <alltraps>
 
-801067c7 <vector212>:
+80107087 <vector212>:
 .globl vector212
 vector212:
   pushl $0
-801067c7:	6a 00                	push   $0x0
+80107087:	6a 00                	push   $0x0
   pushl $212
-801067c9:	68 d4 00 00 00       	push   $0xd4
+80107089:	68 d4 00 00 00       	push   $0xd4
   jmp alltraps
-801067ce:	e9 ac f2 ff ff       	jmp    80105a7f <alltraps>
+8010708e:	e9 3c f2 ff ff       	jmp    801062cf <alltraps>
 
-801067d3 <vector213>:
+80107093 <vector213>:
 .globl vector213
 vector213:
   pushl $0
-801067d3:	6a 00                	push   $0x0
+80107093:	6a 00                	push   $0x0
   pushl $213
-801067d5:	68 d5 00 00 00       	push   $0xd5
+80107095:	68 d5 00 00 00       	push   $0xd5
   jmp alltraps
-801067da:	e9 a0 f2 ff ff       	jmp    80105a7f <alltraps>
+8010709a:	e9 30 f2 ff ff       	jmp    801062cf <alltraps>
 
-801067df <vector214>:
+8010709f <vector214>:
 .globl vector214
 vector214:
   pushl $0
-801067df:	6a 00                	push   $0x0
+8010709f:	6a 00                	push   $0x0
   pushl $214
-801067e1:	68 d6 00 00 00       	push   $0xd6
+801070a1:	68 d6 00 00 00       	push   $0xd6
   jmp alltraps
-801067e6:	e9 94 f2 ff ff       	jmp    80105a7f <alltraps>
+801070a6:	e9 24 f2 ff ff       	jmp    801062cf <alltraps>
 
-801067eb <vector215>:
+801070ab <vector215>:
 .globl vector215
 vector215:
   pushl $0
-801067eb:	6a 00                	push   $0x0
+801070ab:	6a 00                	push   $0x0
   pushl $215
-801067ed:	68 d7 00 00 00       	push   $0xd7
+801070ad:	68 d7 00 00 00       	push   $0xd7
   jmp alltraps
-801067f2:	e9 88 f2 ff ff       	jmp    80105a7f <alltraps>
+801070b2:	e9 18 f2 ff ff       	jmp    801062cf <alltraps>
 
-801067f7 <vector216>:
+801070b7 <vector216>:
 .globl vector216
 vector216:
   pushl $0
-801067f7:	6a 00                	push   $0x0
+801070b7:	6a 00                	push   $0x0
   pushl $216
-801067f9:	68 d8 00 00 00       	push   $0xd8
+801070b9:	68 d8 00 00 00       	push   $0xd8
   jmp alltraps
-801067fe:	e9 7c f2 ff ff       	jmp    80105a7f <alltraps>
+801070be:	e9 0c f2 ff ff       	jmp    801062cf <alltraps>
 
-80106803 <vector217>:
+801070c3 <vector217>:
 .globl vector217
 vector217:
   pushl $0
-80106803:	6a 00                	push   $0x0
+801070c3:	6a 00                	push   $0x0
   pushl $217
-80106805:	68 d9 00 00 00       	push   $0xd9
+801070c5:	68 d9 00 00 00       	push   $0xd9
   jmp alltraps
-8010680a:	e9 70 f2 ff ff       	jmp    80105a7f <alltraps>
+801070ca:	e9 00 f2 ff ff       	jmp    801062cf <alltraps>
 
-8010680f <vector218>:
+801070cf <vector218>:
 .globl vector218
 vector218:
   pushl $0
-8010680f:	6a 00                	push   $0x0
+801070cf:	6a 00                	push   $0x0
   pushl $218
-80106811:	68 da 00 00 00       	push   $0xda
+801070d1:	68 da 00 00 00       	push   $0xda
   jmp alltraps
-80106816:	e9 64 f2 ff ff       	jmp    80105a7f <alltraps>
+801070d6:	e9 f4 f1 ff ff       	jmp    801062cf <alltraps>
 
-8010681b <vector219>:
+801070db <vector219>:
 .globl vector219
 vector219:
   pushl $0
-8010681b:	6a 00                	push   $0x0
+801070db:	6a 00                	push   $0x0
   pushl $219
-8010681d:	68 db 00 00 00       	push   $0xdb
+801070dd:	68 db 00 00 00       	push   $0xdb
   jmp alltraps
-80106822:	e9 58 f2 ff ff       	jmp    80105a7f <alltraps>
+801070e2:	e9 e8 f1 ff ff       	jmp    801062cf <alltraps>
 
-80106827 <vector220>:
+801070e7 <vector220>:
 .globl vector220
 vector220:
   pushl $0
-80106827:	6a 00                	push   $0x0
+801070e7:	6a 00                	push   $0x0
   pushl $220
-80106829:	68 dc 00 00 00       	push   $0xdc
+801070e9:	68 dc 00 00 00       	push   $0xdc
   jmp alltraps
-8010682e:	e9 4c f2 ff ff       	jmp    80105a7f <alltraps>
+801070ee:	e9 dc f1 ff ff       	jmp    801062cf <alltraps>
 
-80106833 <vector221>:
+801070f3 <vector221>:
 .globl vector221
 vector221:
   pushl $0
-80106833:	6a 00                	push   $0x0
+801070f3:	6a 00                	push   $0x0
   pushl $221
-80106835:	68 dd 00 00 00       	push   $0xdd
+801070f5:	68 dd 00 00 00       	push   $0xdd
   jmp alltraps
-8010683a:	e9 40 f2 ff ff       	jmp    80105a7f <alltraps>
+801070fa:	e9 d0 f1 ff ff       	jmp    801062cf <alltraps>
 
-8010683f <vector222>:
+801070ff <vector222>:
 .globl vector222
 vector222:
   pushl $0
-8010683f:	6a 00                	push   $0x0
+801070ff:	6a 00                	push   $0x0
   pushl $222
-80106841:	68 de 00 00 00       	push   $0xde
+80107101:	68 de 00 00 00       	push   $0xde
   jmp alltraps
-80106846:	e9 34 f2 ff ff       	jmp    80105a7f <alltraps>
+80107106:	e9 c4 f1 ff ff       	jmp    801062cf <alltraps>
 
-8010684b <vector223>:
+8010710b <vector223>:
 .globl vector223
 vector223:
   pushl $0
-8010684b:	6a 00                	push   $0x0
+8010710b:	6a 00                	push   $0x0
   pushl $223
-8010684d:	68 df 00 00 00       	push   $0xdf
+8010710d:	68 df 00 00 00       	push   $0xdf
   jmp alltraps
-80106852:	e9 28 f2 ff ff       	jmp    80105a7f <alltraps>
+80107112:	e9 b8 f1 ff ff       	jmp    801062cf <alltraps>
 
-80106857 <vector224>:
+80107117 <vector224>:
 .globl vector224
 vector224:
   pushl $0
-80106857:	6a 00                	push   $0x0
+80107117:	6a 00                	push   $0x0
   pushl $224
-80106859:	68 e0 00 00 00       	push   $0xe0
+80107119:	68 e0 00 00 00       	push   $0xe0
   jmp alltraps
-8010685e:	e9 1c f2 ff ff       	jmp    80105a7f <alltraps>
+8010711e:	e9 ac f1 ff ff       	jmp    801062cf <alltraps>
 
-80106863 <vector225>:
+80107123 <vector225>:
 .globl vector225
 vector225:
   pushl $0
-80106863:	6a 00                	push   $0x0
+80107123:	6a 00                	push   $0x0
   pushl $225
-80106865:	68 e1 00 00 00       	push   $0xe1
+80107125:	68 e1 00 00 00       	push   $0xe1
   jmp alltraps
-8010686a:	e9 10 f2 ff ff       	jmp    80105a7f <alltraps>
+8010712a:	e9 a0 f1 ff ff       	jmp    801062cf <alltraps>
 
-8010686f <vector226>:
+8010712f <vector226>:
 .globl vector226
 vector226:
   pushl $0
-8010686f:	6a 00                	push   $0x0
+8010712f:	6a 00                	push   $0x0
   pushl $226
-80106871:	68 e2 00 00 00       	push   $0xe2
+80107131:	68 e2 00 00 00       	push   $0xe2
   jmp alltraps
-80106876:	e9 04 f2 ff ff       	jmp    80105a7f <alltraps>
+80107136:	e9 94 f1 ff ff       	jmp    801062cf <alltraps>
 
-8010687b <vector227>:
+8010713b <vector227>:
 .globl vector227
 vector227:
   pushl $0
-8010687b:	6a 00                	push   $0x0
+8010713b:	6a 00                	push   $0x0
   pushl $227
-8010687d:	68 e3 00 00 00       	push   $0xe3
+8010713d:	68 e3 00 00 00       	push   $0xe3
   jmp alltraps
-80106882:	e9 f8 f1 ff ff       	jmp    80105a7f <alltraps>
+80107142:	e9 88 f1 ff ff       	jmp    801062cf <alltraps>
 
-80106887 <vector228>:
+80107147 <vector228>:
 .globl vector228
 vector228:
   pushl $0
-80106887:	6a 00                	push   $0x0
+80107147:	6a 00                	push   $0x0
   pushl $228
-80106889:	68 e4 00 00 00       	push   $0xe4
+80107149:	68 e4 00 00 00       	push   $0xe4
   jmp alltraps
-8010688e:	e9 ec f1 ff ff       	jmp    80105a7f <alltraps>
+8010714e:	e9 7c f1 ff ff       	jmp    801062cf <alltraps>
 
-80106893 <vector229>:
+80107153 <vector229>:
 .globl vector229
 vector229:
   pushl $0
-80106893:	6a 00                	push   $0x0
+80107153:	6a 00                	push   $0x0
   pushl $229
-80106895:	68 e5 00 00 00       	push   $0xe5
+80107155:	68 e5 00 00 00       	push   $0xe5
   jmp alltraps
-8010689a:	e9 e0 f1 ff ff       	jmp    80105a7f <alltraps>
+8010715a:	e9 70 f1 ff ff       	jmp    801062cf <alltraps>
 
-8010689f <vector230>:
+8010715f <vector230>:
 .globl vector230
 vector230:
   pushl $0
-8010689f:	6a 00                	push   $0x0
+8010715f:	6a 00                	push   $0x0
   pushl $230
-801068a1:	68 e6 00 00 00       	push   $0xe6
+80107161:	68 e6 00 00 00       	push   $0xe6
   jmp alltraps
-801068a6:	e9 d4 f1 ff ff       	jmp    80105a7f <alltraps>
+80107166:	e9 64 f1 ff ff       	jmp    801062cf <alltraps>
 
-801068ab <vector231>:
+8010716b <vector231>:
 .globl vector231
 vector231:
   pushl $0
-801068ab:	6a 00                	push   $0x0
+8010716b:	6a 00                	push   $0x0
   pushl $231
-801068ad:	68 e7 00 00 00       	push   $0xe7
+8010716d:	68 e7 00 00 00       	push   $0xe7
   jmp alltraps
-801068b2:	e9 c8 f1 ff ff       	jmp    80105a7f <alltraps>
+80107172:	e9 58 f1 ff ff       	jmp    801062cf <alltraps>
 
-801068b7 <vector232>:
+80107177 <vector232>:
 .globl vector232
 vector232:
   pushl $0
-801068b7:	6a 00                	push   $0x0
+80107177:	6a 00                	push   $0x0
   pushl $232
-801068b9:	68 e8 00 00 00       	push   $0xe8
+80107179:	68 e8 00 00 00       	push   $0xe8
   jmp alltraps
-801068be:	e9 bc f1 ff ff       	jmp    80105a7f <alltraps>
+8010717e:	e9 4c f1 ff ff       	jmp    801062cf <alltraps>
 
-801068c3 <vector233>:
+80107183 <vector233>:
 .globl vector233
 vector233:
   pushl $0
-801068c3:	6a 00                	push   $0x0
+80107183:	6a 00                	push   $0x0
   pushl $233
-801068c5:	68 e9 00 00 00       	push   $0xe9
+80107185:	68 e9 00 00 00       	push   $0xe9
   jmp alltraps
-801068ca:	e9 b0 f1 ff ff       	jmp    80105a7f <alltraps>
+8010718a:	e9 40 f1 ff ff       	jmp    801062cf <alltraps>
 
-801068cf <vector234>:
+8010718f <vector234>:
 .globl vector234
 vector234:
   pushl $0
-801068cf:	6a 00                	push   $0x0
+8010718f:	6a 00                	push   $0x0
   pushl $234
-801068d1:	68 ea 00 00 00       	push   $0xea
+80107191:	68 ea 00 00 00       	push   $0xea
   jmp alltraps
-801068d6:	e9 a4 f1 ff ff       	jmp    80105a7f <alltraps>
+80107196:	e9 34 f1 ff ff       	jmp    801062cf <alltraps>
 
-801068db <vector235>:
+8010719b <vector235>:
 .globl vector235
 vector235:
   pushl $0
-801068db:	6a 00                	push   $0x0
+8010719b:	6a 00                	push   $0x0
   pushl $235
-801068dd:	68 eb 00 00 00       	push   $0xeb
+8010719d:	68 eb 00 00 00       	push   $0xeb
   jmp alltraps
-801068e2:	e9 98 f1 ff ff       	jmp    80105a7f <alltraps>
+801071a2:	e9 28 f1 ff ff       	jmp    801062cf <alltraps>
 
-801068e7 <vector236>:
+801071a7 <vector236>:
 .globl vector236
 vector236:
   pushl $0
-801068e7:	6a 00                	push   $0x0
+801071a7:	6a 00                	push   $0x0
   pushl $236
-801068e9:	68 ec 00 00 00       	push   $0xec
+801071a9:	68 ec 00 00 00       	push   $0xec
   jmp alltraps
-801068ee:	e9 8c f1 ff ff       	jmp    80105a7f <alltraps>
+801071ae:	e9 1c f1 ff ff       	jmp    801062cf <alltraps>
 
-801068f3 <vector237>:
+801071b3 <vector237>:
 .globl vector237
 vector237:
   pushl $0
-801068f3:	6a 00                	push   $0x0
+801071b3:	6a 00                	push   $0x0
   pushl $237
-801068f5:	68 ed 00 00 00       	push   $0xed
+801071b5:	68 ed 00 00 00       	push   $0xed
   jmp alltraps
-801068fa:	e9 80 f1 ff ff       	jmp    80105a7f <alltraps>
+801071ba:	e9 10 f1 ff ff       	jmp    801062cf <alltraps>
 
-801068ff <vector238>:
+801071bf <vector238>:
 .globl vector238
 vector238:
   pushl $0
-801068ff:	6a 00                	push   $0x0
+801071bf:	6a 00                	push   $0x0
   pushl $238
-80106901:	68 ee 00 00 00       	push   $0xee
+801071c1:	68 ee 00 00 00       	push   $0xee
   jmp alltraps
-80106906:	e9 74 f1 ff ff       	jmp    80105a7f <alltraps>
+801071c6:	e9 04 f1 ff ff       	jmp    801062cf <alltraps>
 
-8010690b <vector239>:
+801071cb <vector239>:
 .globl vector239
 vector239:
   pushl $0
-8010690b:	6a 00                	push   $0x0
+801071cb:	6a 00                	push   $0x0
   pushl $239
-8010690d:	68 ef 00 00 00       	push   $0xef
+801071cd:	68 ef 00 00 00       	push   $0xef
   jmp alltraps
-80106912:	e9 68 f1 ff ff       	jmp    80105a7f <alltraps>
+801071d2:	e9 f8 f0 ff ff       	jmp    801062cf <alltraps>
 
-80106917 <vector240>:
+801071d7 <vector240>:
 .globl vector240
 vector240:
   pushl $0
-80106917:	6a 00                	push   $0x0
+801071d7:	6a 00                	push   $0x0
   pushl $240
-80106919:	68 f0 00 00 00       	push   $0xf0
+801071d9:	68 f0 00 00 00       	push   $0xf0
   jmp alltraps
-8010691e:	e9 5c f1 ff ff       	jmp    80105a7f <alltraps>
+801071de:	e9 ec f0 ff ff       	jmp    801062cf <alltraps>
 
-80106923 <vector241>:
+801071e3 <vector241>:
 .globl vector241
 vector241:
   pushl $0
-80106923:	6a 00                	push   $0x0
+801071e3:	6a 00                	push   $0x0
   pushl $241
-80106925:	68 f1 00 00 00       	push   $0xf1
+801071e5:	68 f1 00 00 00       	push   $0xf1
   jmp alltraps
-8010692a:	e9 50 f1 ff ff       	jmp    80105a7f <alltraps>
+801071ea:	e9 e0 f0 ff ff       	jmp    801062cf <alltraps>
 
-8010692f <vector242>:
+801071ef <vector242>:
 .globl vector242
 vector242:
   pushl $0
-8010692f:	6a 00                	push   $0x0
+801071ef:	6a 00                	push   $0x0
   pushl $242
-80106931:	68 f2 00 00 00       	push   $0xf2
+801071f1:	68 f2 00 00 00       	push   $0xf2
   jmp alltraps
-80106936:	e9 44 f1 ff ff       	jmp    80105a7f <alltraps>
+801071f6:	e9 d4 f0 ff ff       	jmp    801062cf <alltraps>
 
-8010693b <vector243>:
+801071fb <vector243>:
 .globl vector243
 vector243:
   pushl $0
-8010693b:	6a 00                	push   $0x0
+801071fb:	6a 00                	push   $0x0
   pushl $243
-8010693d:	68 f3 00 00 00       	push   $0xf3
+801071fd:	68 f3 00 00 00       	push   $0xf3
   jmp alltraps
-80106942:	e9 38 f1 ff ff       	jmp    80105a7f <alltraps>
+80107202:	e9 c8 f0 ff ff       	jmp    801062cf <alltraps>
 
-80106947 <vector244>:
+80107207 <vector244>:
 .globl vector244
 vector244:
   pushl $0
-80106947:	6a 00                	push   $0x0
+80107207:	6a 00                	push   $0x0
   pushl $244
-80106949:	68 f4 00 00 00       	push   $0xf4
+80107209:	68 f4 00 00 00       	push   $0xf4
   jmp alltraps
-8010694e:	e9 2c f1 ff ff       	jmp    80105a7f <alltraps>
+8010720e:	e9 bc f0 ff ff       	jmp    801062cf <alltraps>
 
-80106953 <vector245>:
+80107213 <vector245>:
 .globl vector245
 vector245:
   pushl $0
-80106953:	6a 00                	push   $0x0
+80107213:	6a 00                	push   $0x0
   pushl $245
-80106955:	68 f5 00 00 00       	push   $0xf5
+80107215:	68 f5 00 00 00       	push   $0xf5
   jmp alltraps
-8010695a:	e9 20 f1 ff ff       	jmp    80105a7f <alltraps>
+8010721a:	e9 b0 f0 ff ff       	jmp    801062cf <alltraps>
 
-8010695f <vector246>:
+8010721f <vector246>:
 .globl vector246
 vector246:
   pushl $0
-8010695f:	6a 00                	push   $0x0
+8010721f:	6a 00                	push   $0x0
   pushl $246
-80106961:	68 f6 00 00 00       	push   $0xf6
+80107221:	68 f6 00 00 00       	push   $0xf6
   jmp alltraps
-80106966:	e9 14 f1 ff ff       	jmp    80105a7f <alltraps>
+80107226:	e9 a4 f0 ff ff       	jmp    801062cf <alltraps>
 
-8010696b <vector247>:
+8010722b <vector247>:
 .globl vector247
 vector247:
   pushl $0
-8010696b:	6a 00                	push   $0x0
+8010722b:	6a 00                	push   $0x0
   pushl $247
-8010696d:	68 f7 00 00 00       	push   $0xf7
+8010722d:	68 f7 00 00 00       	push   $0xf7
   jmp alltraps
-80106972:	e9 08 f1 ff ff       	jmp    80105a7f <alltraps>
+80107232:	e9 98 f0 ff ff       	jmp    801062cf <alltraps>
 
-80106977 <vector248>:
+80107237 <vector248>:
 .globl vector248
 vector248:
   pushl $0
-80106977:	6a 00                	push   $0x0
+80107237:	6a 00                	push   $0x0
   pushl $248
-80106979:	68 f8 00 00 00       	push   $0xf8
+80107239:	68 f8 00 00 00       	push   $0xf8
   jmp alltraps
-8010697e:	e9 fc f0 ff ff       	jmp    80105a7f <alltraps>
+8010723e:	e9 8c f0 ff ff       	jmp    801062cf <alltraps>
 
-80106983 <vector249>:
+80107243 <vector249>:
 .globl vector249
 vector249:
   pushl $0
-80106983:	6a 00                	push   $0x0
+80107243:	6a 00                	push   $0x0
   pushl $249
-80106985:	68 f9 00 00 00       	push   $0xf9
+80107245:	68 f9 00 00 00       	push   $0xf9
   jmp alltraps
-8010698a:	e9 f0 f0 ff ff       	jmp    80105a7f <alltraps>
+8010724a:	e9 80 f0 ff ff       	jmp    801062cf <alltraps>
 
-8010698f <vector250>:
+8010724f <vector250>:
 .globl vector250
 vector250:
   pushl $0
-8010698f:	6a 00                	push   $0x0
+8010724f:	6a 00                	push   $0x0
   pushl $250
-80106991:	68 fa 00 00 00       	push   $0xfa
+80107251:	68 fa 00 00 00       	push   $0xfa
   jmp alltraps
-80106996:	e9 e4 f0 ff ff       	jmp    80105a7f <alltraps>
+80107256:	e9 74 f0 ff ff       	jmp    801062cf <alltraps>
 
-8010699b <vector251>:
+8010725b <vector251>:
 .globl vector251
 vector251:
   pushl $0
-8010699b:	6a 00                	push   $0x0
+8010725b:	6a 00                	push   $0x0
   pushl $251
-8010699d:	68 fb 00 00 00       	push   $0xfb
+8010725d:	68 fb 00 00 00       	push   $0xfb
   jmp alltraps
-801069a2:	e9 d8 f0 ff ff       	jmp    80105a7f <alltraps>
+80107262:	e9 68 f0 ff ff       	jmp    801062cf <alltraps>
 
-801069a7 <vector252>:
+80107267 <vector252>:
 .globl vector252
 vector252:
   pushl $0
-801069a7:	6a 00                	push   $0x0
+80107267:	6a 00                	push   $0x0
   pushl $252
-801069a9:	68 fc 00 00 00       	push   $0xfc
+80107269:	68 fc 00 00 00       	push   $0xfc
   jmp alltraps
-801069ae:	e9 cc f0 ff ff       	jmp    80105a7f <alltraps>
+8010726e:	e9 5c f0 ff ff       	jmp    801062cf <alltraps>
 
-801069b3 <vector253>:
+80107273 <vector253>:
 .globl vector253
 vector253:
   pushl $0
-801069b3:	6a 00                	push   $0x0
+80107273:	6a 00                	push   $0x0
   pushl $253
-801069b5:	68 fd 00 00 00       	push   $0xfd
+80107275:	68 fd 00 00 00       	push   $0xfd
   jmp alltraps
-801069ba:	e9 c0 f0 ff ff       	jmp    80105a7f <alltraps>
+8010727a:	e9 50 f0 ff ff       	jmp    801062cf <alltraps>
 
-801069bf <vector254>:
+8010727f <vector254>:
 .globl vector254
 vector254:
   pushl $0
-801069bf:	6a 00                	push   $0x0
+8010727f:	6a 00                	push   $0x0
   pushl $254
-801069c1:	68 fe 00 00 00       	push   $0xfe
+80107281:	68 fe 00 00 00       	push   $0xfe
   jmp alltraps
-801069c6:	e9 b4 f0 ff ff       	jmp    80105a7f <alltraps>
+80107286:	e9 44 f0 ff ff       	jmp    801062cf <alltraps>
 
-801069cb <vector255>:
+8010728b <vector255>:
 .globl vector255
 vector255:
   pushl $0
-801069cb:	6a 00                	push   $0x0
+8010728b:	6a 00                	push   $0x0
   pushl $255
-801069cd:	68 ff 00 00 00       	push   $0xff
+8010728d:	68 ff 00 00 00       	push   $0xff
   jmp alltraps
-801069d2:	e9 a8 f0 ff ff       	jmp    80105a7f <alltraps>
-801069d7:	66 90                	xchg   %ax,%ax
-801069d9:	66 90                	xchg   %ax,%ax
-801069db:	66 90                	xchg   %ax,%ax
-801069dd:	66 90                	xchg   %ax,%ax
-801069df:	90                   	nop
+80107292:	e9 38 f0 ff ff       	jmp    801062cf <alltraps>
+80107297:	66 90                	xchg   %ax,%ax
+80107299:	66 90                	xchg   %ax,%ax
+8010729b:	66 90                	xchg   %ax,%ax
+8010729d:	66 90                	xchg   %ax,%ax
+8010729f:	90                   	nop
 
-801069e0 <walkpgdir>:
+801072a0 <walkpgdir>:
 // Return the address of the PTE in page table pgdir
 // that corresponds to virtual address va.  If alloc!=0,
 // create any required page table pages.
 static pte_t *
 walkpgdir(pde_t *pgdir, const void *va, int alloc)
 {
-801069e0:	55                   	push   %ebp
-801069e1:	89 e5                	mov    %esp,%ebp
-801069e3:	57                   	push   %edi
-801069e4:	56                   	push   %esi
-801069e5:	53                   	push   %ebx
+801072a0:	55                   	push   %ebp
+801072a1:	89 e5                	mov    %esp,%ebp
+801072a3:	57                   	push   %edi
+801072a4:	56                   	push   %esi
+801072a5:	53                   	push   %ebx
   pde_t *pde;
   pte_t *pgtab;
 
   pde = &pgdir[PDX(va)];
-801069e6:	89 d3                	mov    %edx,%ebx
+801072a6:	89 d3                	mov    %edx,%ebx
 {
-801069e8:	89 d7                	mov    %edx,%edi
+801072a8:	89 d7                	mov    %edx,%edi
   pde = &pgdir[PDX(va)];
-801069ea:	c1 eb 16             	shr    $0x16,%ebx
-801069ed:	8d 34 98             	lea    (%eax,%ebx,4),%esi
+801072aa:	c1 eb 16             	shr    $0x16,%ebx
+801072ad:	8d 34 98             	lea    (%eax,%ebx,4),%esi
 {
-801069f0:	83 ec 0c             	sub    $0xc,%esp
+801072b0:	83 ec 0c             	sub    $0xc,%esp
   if(*pde & PTE_P){
-801069f3:	8b 06                	mov    (%esi),%eax
-801069f5:	a8 01                	test   $0x1,%al
-801069f7:	74 27                	je     80106a20 <walkpgdir+0x40>
+801072b3:	8b 06                	mov    (%esi),%eax
+801072b5:	a8 01                	test   $0x1,%al
+801072b7:	74 27                	je     801072e0 <walkpgdir+0x40>
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-801069f9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-801069fe:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
+801072b9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+801072be:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
     // The permissions here are overly generous, but they can
     // be further restricted by the permissions in the page table
     // entries, if necessary.
     *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
   }
   return &pgtab[PTX(va)];
-80106a04:	c1 ef 0a             	shr    $0xa,%edi
+801072c4:	c1 ef 0a             	shr    $0xa,%edi
 }
-80106a07:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801072c7:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return &pgtab[PTX(va)];
-80106a0a:	89 fa                	mov    %edi,%edx
-80106a0c:	81 e2 fc 0f 00 00    	and    $0xffc,%edx
-80106a12:	8d 04 13             	lea    (%ebx,%edx,1),%eax
-}
-80106a15:	5b                   	pop    %ebx
-80106a16:	5e                   	pop    %esi
-80106a17:	5f                   	pop    %edi
-80106a18:	5d                   	pop    %ebp
-80106a19:	c3                   	ret    
-80106a1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801072ca:	89 fa                	mov    %edi,%edx
+801072cc:	81 e2 fc 0f 00 00    	and    $0xffc,%edx
+801072d2:	8d 04 13             	lea    (%ebx,%edx,1),%eax
+}
+801072d5:	5b                   	pop    %ebx
+801072d6:	5e                   	pop    %esi
+801072d7:	5f                   	pop    %edi
+801072d8:	5d                   	pop    %ebp
+801072d9:	c3                   	ret    
+801072da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
-80106a20:	85 c9                	test   %ecx,%ecx
-80106a22:	74 2c                	je     80106a50 <walkpgdir+0x70>
-80106a24:	e8 97 ba ff ff       	call   801024c0 <kalloc>
-80106a29:	85 c0                	test   %eax,%eax
-80106a2b:	89 c3                	mov    %eax,%ebx
-80106a2d:	74 21                	je     80106a50 <walkpgdir+0x70>
+801072e0:	85 c9                	test   %ecx,%ecx
+801072e2:	74 2c                	je     80107310 <walkpgdir+0x70>
+801072e4:	e8 57 b2 ff ff       	call   80102540 <kalloc>
+801072e9:	85 c0                	test   %eax,%eax
+801072eb:	89 c3                	mov    %eax,%ebx
+801072ed:	74 21                	je     80107310 <walkpgdir+0x70>
     memset(pgtab, 0, PGSIZE);
-80106a2f:	83 ec 04             	sub    $0x4,%esp
-80106a32:	68 00 10 00 00       	push   $0x1000
-80106a37:	6a 00                	push   $0x0
-80106a39:	50                   	push   %eax
-80106a3a:	e8 51 dd ff ff       	call   80104790 <memset>
+801072ef:	83 ec 04             	sub    $0x4,%esp
+801072f2:	68 00 10 00 00       	push   $0x1000
+801072f7:	6a 00                	push   $0x0
+801072f9:	50                   	push   %eax
+801072fa:	e8 71 dd ff ff       	call   80105070 <memset>
     *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
-80106a3f:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106a45:	83 c4 10             	add    $0x10,%esp
-80106a48:	83 c8 07             	or     $0x7,%eax
-80106a4b:	89 06                	mov    %eax,(%esi)
-80106a4d:	eb b5                	jmp    80106a04 <walkpgdir+0x24>
-80106a4f:	90                   	nop
+801072ff:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80107305:	83 c4 10             	add    $0x10,%esp
+80107308:	83 c8 07             	or     $0x7,%eax
+8010730b:	89 06                	mov    %eax,(%esi)
+8010730d:	eb b5                	jmp    801072c4 <walkpgdir+0x24>
+8010730f:	90                   	nop
 }
-80106a50:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107310:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return 0;
-80106a53:	31 c0                	xor    %eax,%eax
+80107313:	31 c0                	xor    %eax,%eax
 }
-80106a55:	5b                   	pop    %ebx
-80106a56:	5e                   	pop    %esi
-80106a57:	5f                   	pop    %edi
-80106a58:	5d                   	pop    %ebp
-80106a59:	c3                   	ret    
-80106a5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80106a60 <mappages>:
-// Create PTEs for virtual addresses starting at va that refer to
-// physical addresses starting at pa. va and size might not
-// be page-aligned.
-static int
-mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
-{
-80106a60:	55                   	push   %ebp
-80106a61:	89 e5                	mov    %esp,%ebp
-80106a63:	57                   	push   %edi
-80106a64:	56                   	push   %esi
-80106a65:	53                   	push   %ebx
-  char *a, *last;
-  pte_t *pte;
+80107315:	5b                   	pop    %ebx
+80107316:	5e                   	pop    %esi
+80107317:	5f                   	pop    %edi
+80107318:	5d                   	pop    %ebp
+80107319:	c3                   	ret    
+8010731a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-  a = (char*)PGROUNDDOWN((uint)va);
-80106a66:	89 d3                	mov    %edx,%ebx
-80106a68:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
-{
-80106a6e:	83 ec 1c             	sub    $0x1c,%esp
-80106a71:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
-80106a74:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
-80106a78:	8b 7d 08             	mov    0x8(%ebp),%edi
-80106a7b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-80106a80:	89 45 e0             	mov    %eax,-0x20(%ebp)
-  for(;;){
-    if((pte = walkpgdir(pgdir, a, 1)) == 0)
-      return -1;
-    if(*pte & PTE_P)
-      panic("remap");
-    *pte = pa | perm | PTE_P;
-80106a83:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106a86:	29 df                	sub    %ebx,%edi
-80106a88:	83 c8 01             	or     $0x1,%eax
-80106a8b:	89 45 dc             	mov    %eax,-0x24(%ebp)
-80106a8e:	eb 15                	jmp    80106aa5 <mappages+0x45>
-    if(*pte & PTE_P)
-80106a90:	f6 00 01             	testb  $0x1,(%eax)
-80106a93:	75 45                	jne    80106ada <mappages+0x7a>
-    *pte = pa | perm | PTE_P;
-80106a95:	0b 75 dc             	or     -0x24(%ebp),%esi
-    if(a == last)
-80106a98:	3b 5d e0             	cmp    -0x20(%ebp),%ebx
-    *pte = pa | perm | PTE_P;
-80106a9b:	89 30                	mov    %esi,(%eax)
-    if(a == last)
-80106a9d:	74 31                	je     80106ad0 <mappages+0x70>
-      break;
-    a += PGSIZE;
-80106a9f:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-    if((pte = walkpgdir(pgdir, a, 1)) == 0)
-80106aa5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106aa8:	b9 01 00 00 00       	mov    $0x1,%ecx
-80106aad:	89 da                	mov    %ebx,%edx
-80106aaf:	8d 34 3b             	lea    (%ebx,%edi,1),%esi
-80106ab2:	e8 29 ff ff ff       	call   801069e0 <walkpgdir>
-80106ab7:	85 c0                	test   %eax,%eax
-80106ab9:	75 d5                	jne    80106a90 <mappages+0x30>
-    pa += PGSIZE;
-  }
-  return 0;
-}
-80106abb:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return -1;
-80106abe:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80106ac3:	5b                   	pop    %ebx
-80106ac4:	5e                   	pop    %esi
-80106ac5:	5f                   	pop    %edi
-80106ac6:	5d                   	pop    %ebp
-80106ac7:	c3                   	ret    
-80106ac8:	90                   	nop
-80106ac9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106ad0:	8d 65 f4             	lea    -0xc(%ebp),%esp
-  return 0;
-80106ad3:	31 c0                	xor    %eax,%eax
-}
-80106ad5:	5b                   	pop    %ebx
-80106ad6:	5e                   	pop    %esi
-80106ad7:	5f                   	pop    %edi
-80106ad8:	5d                   	pop    %ebp
-80106ad9:	c3                   	ret    
-      panic("remap");
-80106ada:	83 ec 0c             	sub    $0xc,%esp
-80106add:	68 e4 7c 10 80       	push   $0x80107ce4
-80106ae2:	e8 a9 98 ff ff       	call   80100390 <panic>
-80106ae7:	89 f6                	mov    %esi,%esi
-80106ae9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-80106af0 <deallocuvm.part.0>:
+80107320 <deallocuvm.part.0>:
 // Deallocate user pages to bring the process size from oldsz to
 // newsz.  oldsz and newsz need not be page-aligned, nor does newsz
 // need to be less than oldsz.  oldsz can be larger than the actual
 // process size.  Returns the new process size.
 int
 deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-80106af0:	55                   	push   %ebp
-80106af1:	89 e5                	mov    %esp,%ebp
-80106af3:	57                   	push   %edi
-80106af4:	56                   	push   %esi
-80106af5:	53                   	push   %ebx
+80107320:	55                   	push   %ebp
+80107321:	89 e5                	mov    %esp,%ebp
+80107323:	57                   	push   %edi
+80107324:	56                   	push   %esi
+80107325:	53                   	push   %ebx
   uint a, pa;
 
   if(newsz >= oldsz)
     return oldsz;
 
   a = PGROUNDUP(newsz);
-80106af6:	8d 99 ff 0f 00 00    	lea    0xfff(%ecx),%ebx
+80107326:	8d 99 ff 0f 00 00    	lea    0xfff(%ecx),%ebx
 deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-80106afc:	89 c7                	mov    %eax,%edi
+8010732c:	89 c7                	mov    %eax,%edi
   a = PGROUNDUP(newsz);
-80106afe:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+8010732e:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
 deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-80106b04:	83 ec 1c             	sub    $0x1c,%esp
-80106b07:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+80107334:	83 ec 1c             	sub    $0x1c,%esp
+80107337:	89 4d e0             	mov    %ecx,-0x20(%ebp)
   for(; a  < oldsz; a += PGSIZE){
-80106b0a:	39 d3                	cmp    %edx,%ebx
-80106b0c:	73 66                	jae    80106b74 <deallocuvm.part.0+0x84>
-80106b0e:	89 d6                	mov    %edx,%esi
-80106b10:	eb 3d                	jmp    80106b4f <deallocuvm.part.0+0x5f>
-80106b12:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010733a:	39 d3                	cmp    %edx,%ebx
+8010733c:	73 66                	jae    801073a4 <deallocuvm.part.0+0x84>
+8010733e:	89 d6                	mov    %edx,%esi
+80107340:	eb 3d                	jmp    8010737f <deallocuvm.part.0+0x5f>
+80107342:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     pte = walkpgdir(pgdir, (char*)a, 0);
     if(!pte)
       a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
     else if((*pte & PTE_P) != 0){
-80106b18:	8b 10                	mov    (%eax),%edx
-80106b1a:	f6 c2 01             	test   $0x1,%dl
-80106b1d:	74 26                	je     80106b45 <deallocuvm.part.0+0x55>
+80107348:	8b 10                	mov    (%eax),%edx
+8010734a:	f6 c2 01             	test   $0x1,%dl
+8010734d:	74 26                	je     80107375 <deallocuvm.part.0+0x55>
       pa = PTE_ADDR(*pte);
       if(pa == 0)
-80106b1f:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
-80106b25:	74 58                	je     80106b7f <deallocuvm.part.0+0x8f>
+8010734f:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+80107355:	74 58                	je     801073af <deallocuvm.part.0+0x8f>
         panic("kfree");
       char *v = P2V(pa);
       kfree(v);
-80106b27:	83 ec 0c             	sub    $0xc,%esp
+80107357:	83 ec 0c             	sub    $0xc,%esp
       char *v = P2V(pa);
-80106b2a:	81 c2 00 00 00 80    	add    $0x80000000,%edx
-80106b30:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+8010735a:	81 c2 00 00 00 80    	add    $0x80000000,%edx
+80107360:	89 45 e4             	mov    %eax,-0x1c(%ebp)
       kfree(v);
-80106b33:	52                   	push   %edx
-80106b34:	e8 d7 b7 ff ff       	call   80102310 <kfree>
+80107363:	52                   	push   %edx
+80107364:	e8 a7 af ff ff       	call   80102310 <kfree>
       *pte = 0;
-80106b39:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106b3c:	83 c4 10             	add    $0x10,%esp
-80106b3f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+80107369:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+8010736c:	83 c4 10             	add    $0x10,%esp
+8010736f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   for(; a  < oldsz; a += PGSIZE){
-80106b45:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-80106b4b:	39 f3                	cmp    %esi,%ebx
-80106b4d:	73 25                	jae    80106b74 <deallocuvm.part.0+0x84>
+80107375:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+8010737b:	39 f3                	cmp    %esi,%ebx
+8010737d:	73 25                	jae    801073a4 <deallocuvm.part.0+0x84>
     pte = walkpgdir(pgdir, (char*)a, 0);
-80106b4f:	31 c9                	xor    %ecx,%ecx
-80106b51:	89 da                	mov    %ebx,%edx
-80106b53:	89 f8                	mov    %edi,%eax
-80106b55:	e8 86 fe ff ff       	call   801069e0 <walkpgdir>
+8010737f:	31 c9                	xor    %ecx,%ecx
+80107381:	89 da                	mov    %ebx,%edx
+80107383:	89 f8                	mov    %edi,%eax
+80107385:	e8 16 ff ff ff       	call   801072a0 <walkpgdir>
     if(!pte)
-80106b5a:	85 c0                	test   %eax,%eax
-80106b5c:	75 ba                	jne    80106b18 <deallocuvm.part.0+0x28>
+8010738a:	85 c0                	test   %eax,%eax
+8010738c:	75 ba                	jne    80107348 <deallocuvm.part.0+0x28>
       a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
-80106b5e:	81 e3 00 00 c0 ff    	and    $0xffc00000,%ebx
-80106b64:	81 c3 00 f0 3f 00    	add    $0x3ff000,%ebx
+8010738e:	81 e3 00 00 c0 ff    	and    $0xffc00000,%ebx
+80107394:	81 c3 00 f0 3f 00    	add    $0x3ff000,%ebx
   for(; a  < oldsz; a += PGSIZE){
-80106b6a:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-80106b70:	39 f3                	cmp    %esi,%ebx
-80106b72:	72 db                	jb     80106b4f <deallocuvm.part.0+0x5f>
+8010739a:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+801073a0:	39 f3                	cmp    %esi,%ebx
+801073a2:	72 db                	jb     8010737f <deallocuvm.part.0+0x5f>
     }
   }
   return newsz;
 }
-80106b74:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80106b77:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106b7a:	5b                   	pop    %ebx
-80106b7b:	5e                   	pop    %esi
-80106b7c:	5f                   	pop    %edi
-80106b7d:	5d                   	pop    %ebp
-80106b7e:	c3                   	ret    
+801073a4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801073a7:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801073aa:	5b                   	pop    %ebx
+801073ab:	5e                   	pop    %esi
+801073ac:	5f                   	pop    %edi
+801073ad:	5d                   	pop    %ebp
+801073ae:	c3                   	ret    
         panic("kfree");
-80106b7f:	83 ec 0c             	sub    $0xc,%esp
-80106b82:	68 86 75 10 80       	push   $0x80107586
-80106b87:	e8 04 98 ff ff       	call   80100390 <panic>
-80106b8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80106b90 <seginit>:
-{
-80106b90:	55                   	push   %ebp
-80106b91:	89 e5                	mov    %esp,%ebp
-80106b93:	83 ec 18             	sub    $0x18,%esp
+801073af:	83 ec 0c             	sub    $0xc,%esp
+801073b2:	68 c6 7e 10 80       	push   $0x80107ec6
+801073b7:	e8 d4 8f ff ff       	call   80100390 <panic>
+801073bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801073c0 <seginit>:
+{
+801073c0:	55                   	push   %ebp
+801073c1:	89 e5                	mov    %esp,%ebp
+801073c3:	83 ec 18             	sub    $0x18,%esp
   c = &cpus[cpuid()];
-80106b96:	e8 25 cc ff ff       	call   801037c0 <cpuid>
-80106b9b:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
+801073c6:	e8 35 c7 ff ff       	call   80103b00 <cpuid>
+801073cb:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
   pd[0] = size-1;
-80106ba1:	ba 2f 00 00 00       	mov    $0x2f,%edx
-80106ba6:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
+801073d1:	ba 2f 00 00 00       	mov    $0x2f,%edx
+801073d6:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
   c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
-80106baa:	c7 80 f8 27 11 80 ff 	movl   $0xffff,-0x7feed808(%eax)
-80106bb1:	ff 00 00 
-80106bb4:	c7 80 fc 27 11 80 00 	movl   $0xcf9a00,-0x7feed804(%eax)
-80106bbb:	9a cf 00 
+801073da:	c7 80 18 38 11 80 ff 	movl   $0xffff,-0x7feec7e8(%eax)
+801073e1:	ff 00 00 
+801073e4:	c7 80 1c 38 11 80 00 	movl   $0xcf9a00,-0x7feec7e4(%eax)
+801073eb:	9a cf 00 
   c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
-80106bbe:	c7 80 00 28 11 80 ff 	movl   $0xffff,-0x7feed800(%eax)
-80106bc5:	ff 00 00 
-80106bc8:	c7 80 04 28 11 80 00 	movl   $0xcf9200,-0x7feed7fc(%eax)
-80106bcf:	92 cf 00 
+801073ee:	c7 80 20 38 11 80 ff 	movl   $0xffff,-0x7feec7e0(%eax)
+801073f5:	ff 00 00 
+801073f8:	c7 80 24 38 11 80 00 	movl   $0xcf9200,-0x7feec7dc(%eax)
+801073ff:	92 cf 00 
   c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
-80106bd2:	c7 80 08 28 11 80 ff 	movl   $0xffff,-0x7feed7f8(%eax)
-80106bd9:	ff 00 00 
-80106bdc:	c7 80 0c 28 11 80 00 	movl   $0xcffa00,-0x7feed7f4(%eax)
-80106be3:	fa cf 00 
+80107402:	c7 80 28 38 11 80 ff 	movl   $0xffff,-0x7feec7d8(%eax)
+80107409:	ff 00 00 
+8010740c:	c7 80 2c 38 11 80 00 	movl   $0xcffa00,-0x7feec7d4(%eax)
+80107413:	fa cf 00 
   c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
-80106be6:	c7 80 10 28 11 80 ff 	movl   $0xffff,-0x7feed7f0(%eax)
-80106bed:	ff 00 00 
-80106bf0:	c7 80 14 28 11 80 00 	movl   $0xcff200,-0x7feed7ec(%eax)
-80106bf7:	f2 cf 00 
+80107416:	c7 80 30 38 11 80 ff 	movl   $0xffff,-0x7feec7d0(%eax)
+8010741d:	ff 00 00 
+80107420:	c7 80 34 38 11 80 00 	movl   $0xcff200,-0x7feec7cc(%eax)
+80107427:	f2 cf 00 
   lgdt(c->gdt, sizeof(c->gdt));
-80106bfa:	05 f0 27 11 80       	add    $0x801127f0,%eax
+8010742a:	05 10 38 11 80       	add    $0x80113810,%eax
   pd[1] = (uint)p;
-80106bff:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
+8010742f:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
   pd[2] = (uint)p >> 16;
-80106c03:	c1 e8 10             	shr    $0x10,%eax
-80106c06:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
+80107433:	c1 e8 10             	shr    $0x10,%eax
+80107436:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
   asm volatile("lgdt (%0)" : : "r" (pd));
-80106c0a:	8d 45 f2             	lea    -0xe(%ebp),%eax
-80106c0d:	0f 01 10             	lgdtl  (%eax)
+8010743a:	8d 45 f2             	lea    -0xe(%ebp),%eax
+8010743d:	0f 01 10             	lgdtl  (%eax)
 }
-80106c10:	c9                   	leave  
-80106c11:	c3                   	ret    
-80106c12:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106c19:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80107440:	c9                   	leave  
+80107441:	c3                   	ret    
+80107442:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107449:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80107450 <mappages>:
+{
+80107450:	55                   	push   %ebp
+80107451:	89 e5                	mov    %esp,%ebp
+80107453:	57                   	push   %edi
+80107454:	56                   	push   %esi
+80107455:	53                   	push   %ebx
+80107456:	83 ec 1c             	sub    $0x1c,%esp
+80107459:	8b 45 0c             	mov    0xc(%ebp),%eax
+  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
+8010745c:	8b 55 10             	mov    0x10(%ebp),%edx
+8010745f:	8b 7d 14             	mov    0x14(%ebp),%edi
+  a = (char*)PGROUNDDOWN((uint)va);
+80107462:	89 c3                	mov    %eax,%ebx
+  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
+80107464:	8d 44 10 ff          	lea    -0x1(%eax,%edx,1),%eax
+  a = (char*)PGROUNDDOWN((uint)va);
+80107468:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
+8010746e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80107473:	29 df                	sub    %ebx,%edi
+80107475:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    *pte = pa | perm | PTE_P;
+80107478:	8b 45 18             	mov    0x18(%ebp),%eax
+8010747b:	83 c8 01             	or     $0x1,%eax
+8010747e:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80107481:	eb 1a                	jmp    8010749d <mappages+0x4d>
+80107483:	90                   	nop
+80107484:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(*pte & PTE_P)
+80107488:	f6 00 01             	testb  $0x1,(%eax)
+8010748b:	75 3d                	jne    801074ca <mappages+0x7a>
+    *pte = pa | perm | PTE_P;
+8010748d:	0b 75 e0             	or     -0x20(%ebp),%esi
+    if(a == last)
+80107490:	3b 5d e4             	cmp    -0x1c(%ebp),%ebx
+    *pte = pa | perm | PTE_P;
+80107493:	89 30                	mov    %esi,(%eax)
+    if(a == last)
+80107495:	74 29                	je     801074c0 <mappages+0x70>
+    a += PGSIZE;
+80107497:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+    if((pte = walkpgdir(pgdir, a, 1)) == 0)
+8010749d:	8b 45 08             	mov    0x8(%ebp),%eax
+801074a0:	b9 01 00 00 00       	mov    $0x1,%ecx
+801074a5:	89 da                	mov    %ebx,%edx
+801074a7:	8d 34 3b             	lea    (%ebx,%edi,1),%esi
+801074aa:	e8 f1 fd ff ff       	call   801072a0 <walkpgdir>
+801074af:	85 c0                	test   %eax,%eax
+801074b1:	75 d5                	jne    80107488 <mappages+0x38>
+}
+801074b3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return -1;
+801074b6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801074bb:	5b                   	pop    %ebx
+801074bc:	5e                   	pop    %esi
+801074bd:	5f                   	pop    %edi
+801074be:	5d                   	pop    %ebp
+801074bf:	c3                   	ret    
+801074c0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+801074c3:	31 c0                	xor    %eax,%eax
+}
+801074c5:	5b                   	pop    %ebx
+801074c6:	5e                   	pop    %esi
+801074c7:	5f                   	pop    %edi
+801074c8:	5d                   	pop    %ebp
+801074c9:	c3                   	ret    
+      panic("remap");
+801074ca:	83 ec 0c             	sub    $0xc,%esp
+801074cd:	68 24 87 10 80       	push   $0x80108724
+801074d2:	e8 b9 8e ff ff       	call   80100390 <panic>
+801074d7:	89 f6                	mov    %esi,%esi
+801074d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80106c20 <switchkvm>:
+801074e0 <switchkvm>:
   lcr3(V2P(kpgdir));   // switch to the kernel page table
-80106c20:	a1 a4 55 11 80       	mov    0x801155a4,%eax
+801074e0:	a1 d4 68 11 80       	mov    0x801168d4,%eax
 {
-80106c25:	55                   	push   %ebp
-80106c26:	89 e5                	mov    %esp,%ebp
+801074e5:	55                   	push   %ebp
+801074e6:	89 e5                	mov    %esp,%ebp
   lcr3(V2P(kpgdir));   // switch to the kernel page table
-80106c28:	05 00 00 00 80       	add    $0x80000000,%eax
+801074e8:	05 00 00 00 80       	add    $0x80000000,%eax
 }
 
 static inline void
 lcr3(uint val)
 {
   asm volatile("movl %0,%%cr3" : : "r" (val));
-80106c2d:	0f 22 d8             	mov    %eax,%cr3
+801074ed:	0f 22 d8             	mov    %eax,%cr3
 }
-80106c30:	5d                   	pop    %ebp
-80106c31:	c3                   	ret    
-80106c32:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106c39:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-80106c40 <switchuvm>:
-{
-80106c40:	55                   	push   %ebp
-80106c41:	89 e5                	mov    %esp,%ebp
-80106c43:	57                   	push   %edi
-80106c44:	56                   	push   %esi
-80106c45:	53                   	push   %ebx
-80106c46:	83 ec 1c             	sub    $0x1c,%esp
-80106c49:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801074f0:	5d                   	pop    %ebp
+801074f1:	c3                   	ret    
+801074f2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801074f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80107500 <switchuvm>:
+{
+80107500:	55                   	push   %ebp
+80107501:	89 e5                	mov    %esp,%ebp
+80107503:	57                   	push   %edi
+80107504:	56                   	push   %esi
+80107505:	53                   	push   %ebx
+80107506:	83 ec 1c             	sub    $0x1c,%esp
+80107509:	8b 5d 08             	mov    0x8(%ebp),%ebx
   if(p == 0)
-80106c4c:	85 db                	test   %ebx,%ebx
-80106c4e:	0f 84 cb 00 00 00    	je     80106d1f <switchuvm+0xdf>
+8010750c:	85 db                	test   %ebx,%ebx
+8010750e:	0f 84 cb 00 00 00    	je     801075df <switchuvm+0xdf>
   if(p->kstack == 0)
-80106c54:	8b 43 08             	mov    0x8(%ebx),%eax
-80106c57:	85 c0                	test   %eax,%eax
-80106c59:	0f 84 da 00 00 00    	je     80106d39 <switchuvm+0xf9>
+80107514:	8b 43 08             	mov    0x8(%ebx),%eax
+80107517:	85 c0                	test   %eax,%eax
+80107519:	0f 84 da 00 00 00    	je     801075f9 <switchuvm+0xf9>
   if(p->pgdir == 0)
-80106c5f:	8b 43 04             	mov    0x4(%ebx),%eax
-80106c62:	85 c0                	test   %eax,%eax
-80106c64:	0f 84 c2 00 00 00    	je     80106d2c <switchuvm+0xec>
+8010751f:	8b 43 04             	mov    0x4(%ebx),%eax
+80107522:	85 c0                	test   %eax,%eax
+80107524:	0f 84 c2 00 00 00    	je     801075ec <switchuvm+0xec>
   pushcli();
-80106c6a:	e8 41 d9 ff ff       	call   801045b0 <pushcli>
+8010752a:	e8 61 d9 ff ff       	call   80104e90 <pushcli>
   mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
-80106c6f:	e8 cc ca ff ff       	call   80103740 <mycpu>
-80106c74:	89 c6                	mov    %eax,%esi
-80106c76:	e8 c5 ca ff ff       	call   80103740 <mycpu>
-80106c7b:	89 c7                	mov    %eax,%edi
-80106c7d:	e8 be ca ff ff       	call   80103740 <mycpu>
-80106c82:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80106c85:	83 c7 08             	add    $0x8,%edi
-80106c88:	e8 b3 ca ff ff       	call   80103740 <mycpu>
-80106c8d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-80106c90:	83 c0 08             	add    $0x8,%eax
-80106c93:	ba 67 00 00 00       	mov    $0x67,%edx
-80106c98:	c1 e8 18             	shr    $0x18,%eax
-80106c9b:	66 89 96 98 00 00 00 	mov    %dx,0x98(%esi)
-80106ca2:	66 89 be 9a 00 00 00 	mov    %di,0x9a(%esi)
-80106ca9:	88 86 9f 00 00 00    	mov    %al,0x9f(%esi)
+8010752f:	e8 4c c5 ff ff       	call   80103a80 <mycpu>
+80107534:	89 c6                	mov    %eax,%esi
+80107536:	e8 45 c5 ff ff       	call   80103a80 <mycpu>
+8010753b:	89 c7                	mov    %eax,%edi
+8010753d:	e8 3e c5 ff ff       	call   80103a80 <mycpu>
+80107542:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80107545:	83 c7 08             	add    $0x8,%edi
+80107548:	e8 33 c5 ff ff       	call   80103a80 <mycpu>
+8010754d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80107550:	83 c0 08             	add    $0x8,%eax
+80107553:	ba 67 00 00 00       	mov    $0x67,%edx
+80107558:	c1 e8 18             	shr    $0x18,%eax
+8010755b:	66 89 96 98 00 00 00 	mov    %dx,0x98(%esi)
+80107562:	66 89 be 9a 00 00 00 	mov    %di,0x9a(%esi)
+80107569:	88 86 9f 00 00 00    	mov    %al,0x9f(%esi)
   mycpu()->ts.iomb = (ushort) 0xFFFF;
-80106caf:	bf ff ff ff ff       	mov    $0xffffffff,%edi
+8010756f:	bf ff ff ff ff       	mov    $0xffffffff,%edi
   mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
-80106cb4:	83 c1 08             	add    $0x8,%ecx
-80106cb7:	c1 e9 10             	shr    $0x10,%ecx
-80106cba:	88 8e 9c 00 00 00    	mov    %cl,0x9c(%esi)
-80106cc0:	b9 99 40 00 00       	mov    $0x4099,%ecx
-80106cc5:	66 89 8e 9d 00 00 00 	mov    %cx,0x9d(%esi)
+80107574:	83 c1 08             	add    $0x8,%ecx
+80107577:	c1 e9 10             	shr    $0x10,%ecx
+8010757a:	88 8e 9c 00 00 00    	mov    %cl,0x9c(%esi)
+80107580:	b9 99 40 00 00       	mov    $0x4099,%ecx
+80107585:	66 89 8e 9d 00 00 00 	mov    %cx,0x9d(%esi)
   mycpu()->ts.ss0 = SEG_KDATA << 3;
-80106ccc:	be 10 00 00 00       	mov    $0x10,%esi
+8010758c:	be 10 00 00 00       	mov    $0x10,%esi
   mycpu()->gdt[SEG_TSS].s = 0;
-80106cd1:	e8 6a ca ff ff       	call   80103740 <mycpu>
-80106cd6:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
+80107591:	e8 ea c4 ff ff       	call   80103a80 <mycpu>
+80107596:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
   mycpu()->ts.ss0 = SEG_KDATA << 3;
-80106cdd:	e8 5e ca ff ff       	call   80103740 <mycpu>
-80106ce2:	66 89 70 10          	mov    %si,0x10(%eax)
+8010759d:	e8 de c4 ff ff       	call   80103a80 <mycpu>
+801075a2:	66 89 70 10          	mov    %si,0x10(%eax)
   mycpu()->ts.esp0 = (uint)p->kstack + KSTACKSIZE;
-80106ce6:	8b 73 08             	mov    0x8(%ebx),%esi
-80106ce9:	e8 52 ca ff ff       	call   80103740 <mycpu>
-80106cee:	81 c6 00 10 00 00    	add    $0x1000,%esi
-80106cf4:	89 70 0c             	mov    %esi,0xc(%eax)
+801075a6:	8b 73 08             	mov    0x8(%ebx),%esi
+801075a9:	e8 d2 c4 ff ff       	call   80103a80 <mycpu>
+801075ae:	81 c6 00 10 00 00    	add    $0x1000,%esi
+801075b4:	89 70 0c             	mov    %esi,0xc(%eax)
   mycpu()->ts.iomb = (ushort) 0xFFFF;
-80106cf7:	e8 44 ca ff ff       	call   80103740 <mycpu>
-80106cfc:	66 89 78 6e          	mov    %di,0x6e(%eax)
+801075b7:	e8 c4 c4 ff ff       	call   80103a80 <mycpu>
+801075bc:	66 89 78 6e          	mov    %di,0x6e(%eax)
   asm volatile("ltr %0" : : "r" (sel));
-80106d00:	b8 28 00 00 00       	mov    $0x28,%eax
-80106d05:	0f 00 d8             	ltr    %ax
+801075c0:	b8 28 00 00 00       	mov    $0x28,%eax
+801075c5:	0f 00 d8             	ltr    %ax
   lcr3(V2P(p->pgdir));  // switch to process's address space
-80106d08:	8b 43 04             	mov    0x4(%ebx),%eax
-80106d0b:	05 00 00 00 80       	add    $0x80000000,%eax
+801075c8:	8b 43 04             	mov    0x4(%ebx),%eax
+801075cb:	05 00 00 00 80       	add    $0x80000000,%eax
   asm volatile("movl %0,%%cr3" : : "r" (val));
-80106d10:	0f 22 d8             	mov    %eax,%cr3
+801075d0:	0f 22 d8             	mov    %eax,%cr3
 }
-80106d13:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106d16:	5b                   	pop    %ebx
-80106d17:	5e                   	pop    %esi
-80106d18:	5f                   	pop    %edi
-80106d19:	5d                   	pop    %ebp
+801075d3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801075d6:	5b                   	pop    %ebx
+801075d7:	5e                   	pop    %esi
+801075d8:	5f                   	pop    %edi
+801075d9:	5d                   	pop    %ebp
   popcli();
-80106d1a:	e9 d1 d8 ff ff       	jmp    801045f0 <popcli>
+801075da:	e9 f1 d8 ff ff       	jmp    80104ed0 <popcli>
     panic("switchuvm: no process");
-80106d1f:	83 ec 0c             	sub    $0xc,%esp
-80106d22:	68 ea 7c 10 80       	push   $0x80107cea
-80106d27:	e8 64 96 ff ff       	call   80100390 <panic>
+801075df:	83 ec 0c             	sub    $0xc,%esp
+801075e2:	68 2a 87 10 80       	push   $0x8010872a
+801075e7:	e8 a4 8d ff ff       	call   80100390 <panic>
     panic("switchuvm: no pgdir");
-80106d2c:	83 ec 0c             	sub    $0xc,%esp
-80106d2f:	68 15 7d 10 80       	push   $0x80107d15
-80106d34:	e8 57 96 ff ff       	call   80100390 <panic>
+801075ec:	83 ec 0c             	sub    $0xc,%esp
+801075ef:	68 55 87 10 80       	push   $0x80108755
+801075f4:	e8 97 8d ff ff       	call   80100390 <panic>
     panic("switchuvm: no kstack");
-80106d39:	83 ec 0c             	sub    $0xc,%esp
-80106d3c:	68 00 7d 10 80       	push   $0x80107d00
-80106d41:	e8 4a 96 ff ff       	call   80100390 <panic>
-80106d46:	8d 76 00             	lea    0x0(%esi),%esi
-80106d49:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-80106d50 <inituvm>:
-{
-80106d50:	55                   	push   %ebp
-80106d51:	89 e5                	mov    %esp,%ebp
-80106d53:	57                   	push   %edi
-80106d54:	56                   	push   %esi
-80106d55:	53                   	push   %ebx
-80106d56:	83 ec 1c             	sub    $0x1c,%esp
-80106d59:	8b 75 10             	mov    0x10(%ebp),%esi
-80106d5c:	8b 45 08             	mov    0x8(%ebp),%eax
-80106d5f:	8b 7d 0c             	mov    0xc(%ebp),%edi
-  if(sz >= PGSIZE)
-80106d62:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
-{
-80106d68:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801075f9:	83 ec 0c             	sub    $0xc,%esp
+801075fc:	68 40 87 10 80       	push   $0x80108740
+80107601:	e8 8a 8d ff ff       	call   80100390 <panic>
+80107606:	8d 76 00             	lea    0x0(%esi),%esi
+80107609:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80107610 <inituvm>:
+{
+80107610:	55                   	push   %ebp
+80107611:	89 e5                	mov    %esp,%ebp
+80107613:	57                   	push   %edi
+80107614:	56                   	push   %esi
+80107615:	53                   	push   %ebx
+80107616:	83 ec 1c             	sub    $0x1c,%esp
+80107619:	8b 75 10             	mov    0x10(%ebp),%esi
+8010761c:	8b 55 08             	mov    0x8(%ebp),%edx
+8010761f:	8b 7d 0c             	mov    0xc(%ebp),%edi
   if(sz >= PGSIZE)
-80106d6b:	77 49                	ja     80106db6 <inituvm+0x66>
+80107622:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
+80107628:	77 50                	ja     8010767a <inituvm+0x6a>
+8010762a:	89 55 e4             	mov    %edx,-0x1c(%ebp)
   mem = kalloc();
-80106d6d:	e8 4e b7 ff ff       	call   801024c0 <kalloc>
+8010762d:	e8 0e af ff ff       	call   80102540 <kalloc>
   memset(mem, 0, PGSIZE);
-80106d72:	83 ec 04             	sub    $0x4,%esp
+80107632:	83 ec 04             	sub    $0x4,%esp
   mem = kalloc();
-80106d75:	89 c3                	mov    %eax,%ebx
+80107635:	89 c3                	mov    %eax,%ebx
   memset(mem, 0, PGSIZE);
-80106d77:	68 00 10 00 00       	push   $0x1000
-80106d7c:	6a 00                	push   $0x0
-80106d7e:	50                   	push   %eax
-80106d7f:	e8 0c da ff ff       	call   80104790 <memset>
+80107637:	68 00 10 00 00       	push   $0x1000
+8010763c:	6a 00                	push   $0x0
+8010763e:	50                   	push   %eax
+8010763f:	e8 2c da ff ff       	call   80105070 <memset>
   mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W|PTE_U);
-80106d84:	58                   	pop    %eax
-80106d85:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106d8b:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80106d90:	5a                   	pop    %edx
-80106d91:	6a 06                	push   $0x6
-80106d93:	50                   	push   %eax
-80106d94:	31 d2                	xor    %edx,%edx
-80106d96:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106d99:	e8 c2 fc ff ff       	call   80106a60 <mappages>
+80107644:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80107647:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+8010764d:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
+80107654:	50                   	push   %eax
+80107655:	68 00 10 00 00       	push   $0x1000
+8010765a:	6a 00                	push   $0x0
+8010765c:	52                   	push   %edx
+8010765d:	e8 ee fd ff ff       	call   80107450 <mappages>
   memmove(mem, init, sz);
-80106d9e:	89 75 10             	mov    %esi,0x10(%ebp)
-80106da1:	89 7d 0c             	mov    %edi,0xc(%ebp)
-80106da4:	83 c4 10             	add    $0x10,%esp
-80106da7:	89 5d 08             	mov    %ebx,0x8(%ebp)
-}
-80106daa:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106dad:	5b                   	pop    %ebx
-80106dae:	5e                   	pop    %esi
-80106daf:	5f                   	pop    %edi
-80106db0:	5d                   	pop    %ebp
+80107662:	89 75 10             	mov    %esi,0x10(%ebp)
+80107665:	89 7d 0c             	mov    %edi,0xc(%ebp)
+80107668:	83 c4 20             	add    $0x20,%esp
+8010766b:	89 5d 08             	mov    %ebx,0x8(%ebp)
+}
+8010766e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107671:	5b                   	pop    %ebx
+80107672:	5e                   	pop    %esi
+80107673:	5f                   	pop    %edi
+80107674:	5d                   	pop    %ebp
   memmove(mem, init, sz);
-80106db1:	e9 8a da ff ff       	jmp    80104840 <memmove>
+80107675:	e9 a6 da ff ff       	jmp    80105120 <memmove>
     panic("inituvm: more than a page");
-80106db6:	83 ec 0c             	sub    $0xc,%esp
-80106db9:	68 29 7d 10 80       	push   $0x80107d29
-80106dbe:	e8 cd 95 ff ff       	call   80100390 <panic>
-80106dc3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80106dc9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-80106dd0 <loaduvm>:
-{
-80106dd0:	55                   	push   %ebp
-80106dd1:	89 e5                	mov    %esp,%ebp
-80106dd3:	57                   	push   %edi
-80106dd4:	56                   	push   %esi
-80106dd5:	53                   	push   %ebx
-80106dd6:	83 ec 0c             	sub    $0xc,%esp
+8010767a:	83 ec 0c             	sub    $0xc,%esp
+8010767d:	68 69 87 10 80       	push   $0x80108769
+80107682:	e8 09 8d ff ff       	call   80100390 <panic>
+80107687:	89 f6                	mov    %esi,%esi
+80107689:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80107690 <loaduvm>:
+{
+80107690:	55                   	push   %ebp
+80107691:	89 e5                	mov    %esp,%ebp
+80107693:	57                   	push   %edi
+80107694:	56                   	push   %esi
+80107695:	53                   	push   %ebx
+80107696:	83 ec 0c             	sub    $0xc,%esp
   if((uint) addr % PGSIZE != 0)
-80106dd9:	f7 45 0c ff 0f 00 00 	testl  $0xfff,0xc(%ebp)
-80106de0:	0f 85 91 00 00 00    	jne    80106e77 <loaduvm+0xa7>
+80107699:	f7 45 0c ff 0f 00 00 	testl  $0xfff,0xc(%ebp)
+801076a0:	0f 85 91 00 00 00    	jne    80107737 <loaduvm+0xa7>
   for(i = 0; i < sz; i += PGSIZE){
-80106de6:	8b 75 18             	mov    0x18(%ebp),%esi
-80106de9:	31 db                	xor    %ebx,%ebx
-80106deb:	85 f6                	test   %esi,%esi
-80106ded:	75 1a                	jne    80106e09 <loaduvm+0x39>
-80106def:	eb 6f                	jmp    80106e60 <loaduvm+0x90>
-80106df1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106df8:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-80106dfe:	81 ee 00 10 00 00    	sub    $0x1000,%esi
-80106e04:	39 5d 18             	cmp    %ebx,0x18(%ebp)
-80106e07:	76 57                	jbe    80106e60 <loaduvm+0x90>
+801076a6:	8b 75 18             	mov    0x18(%ebp),%esi
+801076a9:	31 db                	xor    %ebx,%ebx
+801076ab:	85 f6                	test   %esi,%esi
+801076ad:	75 1a                	jne    801076c9 <loaduvm+0x39>
+801076af:	eb 6f                	jmp    80107720 <loaduvm+0x90>
+801076b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801076b8:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+801076be:	81 ee 00 10 00 00    	sub    $0x1000,%esi
+801076c4:	39 5d 18             	cmp    %ebx,0x18(%ebp)
+801076c7:	76 57                	jbe    80107720 <loaduvm+0x90>
     if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
-80106e09:	8b 55 0c             	mov    0xc(%ebp),%edx
-80106e0c:	8b 45 08             	mov    0x8(%ebp),%eax
-80106e0f:	31 c9                	xor    %ecx,%ecx
-80106e11:	01 da                	add    %ebx,%edx
-80106e13:	e8 c8 fb ff ff       	call   801069e0 <walkpgdir>
-80106e18:	85 c0                	test   %eax,%eax
-80106e1a:	74 4e                	je     80106e6a <loaduvm+0x9a>
+801076c9:	8b 55 0c             	mov    0xc(%ebp),%edx
+801076cc:	8b 45 08             	mov    0x8(%ebp),%eax
+801076cf:	31 c9                	xor    %ecx,%ecx
+801076d1:	01 da                	add    %ebx,%edx
+801076d3:	e8 c8 fb ff ff       	call   801072a0 <walkpgdir>
+801076d8:	85 c0                	test   %eax,%eax
+801076da:	74 4e                	je     8010772a <loaduvm+0x9a>
     pa = PTE_ADDR(*pte);
-80106e1c:	8b 00                	mov    (%eax),%eax
+801076dc:	8b 00                	mov    (%eax),%eax
     if(readi(ip, P2V(pa), offset+i, n) != n)
-80106e1e:	8b 4d 14             	mov    0x14(%ebp),%ecx
+801076de:	8b 4d 14             	mov    0x14(%ebp),%ecx
     if(sz - i < PGSIZE)
-80106e21:	bf 00 10 00 00       	mov    $0x1000,%edi
+801076e1:	bf 00 10 00 00       	mov    $0x1000,%edi
     pa = PTE_ADDR(*pte);
-80106e26:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+801076e6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
     if(sz - i < PGSIZE)
-80106e2b:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
-80106e31:	0f 46 fe             	cmovbe %esi,%edi
+801076eb:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
+801076f1:	0f 46 fe             	cmovbe %esi,%edi
     if(readi(ip, P2V(pa), offset+i, n) != n)
-80106e34:	01 d9                	add    %ebx,%ecx
-80106e36:	05 00 00 00 80       	add    $0x80000000,%eax
-80106e3b:	57                   	push   %edi
-80106e3c:	51                   	push   %ecx
-80106e3d:	50                   	push   %eax
-80106e3e:	ff 75 10             	pushl  0x10(%ebp)
-80106e41:	e8 1a ab ff ff       	call   80101960 <readi>
-80106e46:	83 c4 10             	add    $0x10,%esp
-80106e49:	39 f8                	cmp    %edi,%eax
-80106e4b:	74 ab                	je     80106df8 <loaduvm+0x28>
+801076f4:	01 d9                	add    %ebx,%ecx
+801076f6:	05 00 00 00 80       	add    $0x80000000,%eax
+801076fb:	57                   	push   %edi
+801076fc:	51                   	push   %ecx
+801076fd:	50                   	push   %eax
+801076fe:	ff 75 10             	pushl  0x10(%ebp)
+80107701:	e8 5a a2 ff ff       	call   80101960 <readi>
+80107706:	83 c4 10             	add    $0x10,%esp
+80107709:	39 f8                	cmp    %edi,%eax
+8010770b:	74 ab                	je     801076b8 <loaduvm+0x28>
 }
-80106e4d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010770d:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return -1;
-80106e50:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80107710:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80106e55:	5b                   	pop    %ebx
-80106e56:	5e                   	pop    %esi
-80106e57:	5f                   	pop    %edi
-80106e58:	5d                   	pop    %ebp
-80106e59:	c3                   	ret    
-80106e5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80106e60:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107715:	5b                   	pop    %ebx
+80107716:	5e                   	pop    %esi
+80107717:	5f                   	pop    %edi
+80107718:	5d                   	pop    %ebp
+80107719:	c3                   	ret    
+8010771a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80107720:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-80106e63:	31 c0                	xor    %eax,%eax
+80107723:	31 c0                	xor    %eax,%eax
 }
-80106e65:	5b                   	pop    %ebx
-80106e66:	5e                   	pop    %esi
-80106e67:	5f                   	pop    %edi
-80106e68:	5d                   	pop    %ebp
-80106e69:	c3                   	ret    
+80107725:	5b                   	pop    %ebx
+80107726:	5e                   	pop    %esi
+80107727:	5f                   	pop    %edi
+80107728:	5d                   	pop    %ebp
+80107729:	c3                   	ret    
       panic("loaduvm: address should exist");
-80106e6a:	83 ec 0c             	sub    $0xc,%esp
-80106e6d:	68 43 7d 10 80       	push   $0x80107d43
-80106e72:	e8 19 95 ff ff       	call   80100390 <panic>
+8010772a:	83 ec 0c             	sub    $0xc,%esp
+8010772d:	68 83 87 10 80       	push   $0x80108783
+80107732:	e8 59 8c ff ff       	call   80100390 <panic>
     panic("loaduvm: addr must be page aligned");
-80106e77:	83 ec 0c             	sub    $0xc,%esp
-80106e7a:	68 e4 7d 10 80       	push   $0x80107de4
-80106e7f:	e8 0c 95 ff ff       	call   80100390 <panic>
-80106e84:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80106e8a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
-
-80106e90 <allocuvm>:
-{
-80106e90:	55                   	push   %ebp
-80106e91:	89 e5                	mov    %esp,%ebp
-80106e93:	57                   	push   %edi
-80106e94:	56                   	push   %esi
-80106e95:	53                   	push   %ebx
-80106e96:	83 ec 1c             	sub    $0x1c,%esp
+80107737:	83 ec 0c             	sub    $0xc,%esp
+8010773a:	68 0c 88 10 80       	push   $0x8010880c
+8010773f:	e8 4c 8c ff ff       	call   80100390 <panic>
+80107744:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010774a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+80107750 <allocuvm>:
+{
+80107750:	55                   	push   %ebp
+80107751:	89 e5                	mov    %esp,%ebp
+80107753:	57                   	push   %edi
+80107754:	56                   	push   %esi
+80107755:	53                   	push   %ebx
+80107756:	83 ec 1c             	sub    $0x1c,%esp
   if(newsz >= KERNBASE)
-80106e99:	8b 7d 10             	mov    0x10(%ebp),%edi
-80106e9c:	85 ff                	test   %edi,%edi
-80106e9e:	0f 88 8e 00 00 00    	js     80106f32 <allocuvm+0xa2>
+80107759:	8b 7d 10             	mov    0x10(%ebp),%edi
+8010775c:	85 ff                	test   %edi,%edi
+8010775e:	0f 88 db 00 00 00    	js     8010783f <allocuvm+0xef>
   if(newsz < oldsz)
-80106ea4:	3b 7d 0c             	cmp    0xc(%ebp),%edi
-80106ea7:	0f 82 93 00 00 00    	jb     80106f40 <allocuvm+0xb0>
+80107764:	3b 7d 0c             	cmp    0xc(%ebp),%edi
+80107767:	0f 82 e3 00 00 00    	jb     80107850 <allocuvm+0x100>
   a = PGROUNDUP(oldsz);
-80106ead:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106eb0:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
-80106eb6:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+8010776d:	8b 45 0c             	mov    0xc(%ebp),%eax
+80107770:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+80107776:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
   for(; a < newsz; a += PGSIZE){
-80106ebc:	39 5d 10             	cmp    %ebx,0x10(%ebp)
-80106ebf:	0f 86 7e 00 00 00    	jbe    80106f43 <allocuvm+0xb3>
-80106ec5:	89 7d e4             	mov    %edi,-0x1c(%ebp)
-80106ec8:	8b 7d 08             	mov    0x8(%ebp),%edi
-80106ecb:	eb 42                	jmp    80106f0f <allocuvm+0x7f>
-80106ecd:	8d 76 00             	lea    0x0(%esi),%esi
+8010777c:	39 5d 10             	cmp    %ebx,0x10(%ebp)
+8010777f:	0f 86 ce 00 00 00    	jbe    80107853 <allocuvm+0x103>
+80107785:	89 7d e4             	mov    %edi,-0x1c(%ebp)
+80107788:	8b 75 08             	mov    0x8(%ebp),%esi
+8010778b:	eb 47                	jmp    801077d4 <allocuvm+0x84>
+8010778d:	8d 76 00             	lea    0x0(%esi),%esi
     memset(mem, 0, PGSIZE);
-80106ed0:	83 ec 04             	sub    $0x4,%esp
-80106ed3:	68 00 10 00 00       	push   $0x1000
-80106ed8:	6a 00                	push   $0x0
-80106eda:	50                   	push   %eax
-80106edb:	e8 b0 d8 ff ff       	call   80104790 <memset>
+80107790:	83 ec 04             	sub    $0x4,%esp
+80107793:	68 00 10 00 00       	push   $0x1000
+80107798:	6a 00                	push   $0x0
+8010779a:	50                   	push   %eax
+8010779b:	e8 d0 d8 ff ff       	call   80105070 <memset>
     if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
-80106ee0:	58                   	pop    %eax
-80106ee1:	8d 86 00 00 00 80    	lea    -0x80000000(%esi),%eax
-80106ee7:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80106eec:	5a                   	pop    %edx
-80106eed:	6a 06                	push   $0x6
-80106eef:	50                   	push   %eax
-80106ef0:	89 da                	mov    %ebx,%edx
-80106ef2:	89 f8                	mov    %edi,%eax
-80106ef4:	e8 67 fb ff ff       	call   80106a60 <mappages>
-80106ef9:	83 c4 10             	add    $0x10,%esp
-80106efc:	85 c0                	test   %eax,%eax
-80106efe:	78 50                	js     80106f50 <allocuvm+0xc0>
+801077a0:	8d 87 00 00 00 80    	lea    -0x80000000(%edi),%eax
+801077a6:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
+801077ad:	50                   	push   %eax
+801077ae:	68 00 10 00 00       	push   $0x1000
+801077b3:	53                   	push   %ebx
+801077b4:	56                   	push   %esi
+801077b5:	e8 96 fc ff ff       	call   80107450 <mappages>
+801077ba:	83 c4 20             	add    $0x20,%esp
+801077bd:	85 c0                	test   %eax,%eax
+801077bf:	0f 88 9b 00 00 00    	js     80107860 <allocuvm+0x110>
   for(; a < newsz; a += PGSIZE){
-80106f00:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-80106f06:	39 5d 10             	cmp    %ebx,0x10(%ebp)
-80106f09:	0f 86 81 00 00 00    	jbe    80106f90 <allocuvm+0x100>
+801077c5:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+801077cb:	39 5d 10             	cmp    %ebx,0x10(%ebp)
+801077ce:	0f 86 cc 00 00 00    	jbe    801078a0 <allocuvm+0x150>
     mem = kalloc();
-80106f0f:	e8 ac b5 ff ff       	call   801024c0 <kalloc>
+801077d4:	e8 67 ad ff ff       	call   80102540 <kalloc>
     if(mem == 0){
-80106f14:	85 c0                	test   %eax,%eax
+801077d9:	85 c0                	test   %eax,%eax
     mem = kalloc();
-80106f16:	89 c6                	mov    %eax,%esi
+801077db:	89 c7                	mov    %eax,%edi
     if(mem == 0){
-80106f18:	75 b6                	jne    80106ed0 <allocuvm+0x40>
-      cprintf("allocuvm out of memory\n");
-80106f1a:	83 ec 0c             	sub    $0xc,%esp
-80106f1d:	68 61 7d 10 80       	push   $0x80107d61
-80106f22:	e8 39 97 ff ff       	call   80100660 <cprintf>
+801077dd:	75 b1                	jne    80107790 <allocuvm+0x40>
   if(newsz >= oldsz)
-80106f27:	83 c4 10             	add    $0x10,%esp
-80106f2a:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106f2d:	39 45 10             	cmp    %eax,0x10(%ebp)
-80106f30:	77 6e                	ja     80106fa0 <allocuvm+0x110>
+801077df:	8b 45 0c             	mov    0xc(%ebp),%eax
+801077e2:	39 45 10             	cmp    %eax,0x10(%ebp)
+801077e5:	0f 87 ed 00 00 00    	ja     801078d8 <allocuvm+0x188>
+      myproc()->state=SLEEPING;
+801077eb:	e8 60 c6 ff ff       	call   80103e50 <myproc>
+      acquire(&sleeping_channel_lock);
+801077f0:	83 ec 0c             	sub    $0xc,%esp
+      myproc()->state=SLEEPING;
+801077f3:	c7 40 0c 02 00 00 00 	movl   $0x2,0xc(%eax)
+      acquire(&sleeping_channel_lock);
+801077fa:	68 a0 68 11 80       	push   $0x801168a0
+801077ff:	e8 5c d7 ff ff       	call   80104f60 <acquire>
+      myproc()->chan=sleeping_channel;
+80107804:	e8 47 c6 ff ff       	call   80103e50 <myproc>
+80107809:	8b 15 d8 68 11 80    	mov    0x801168d8,%edx
+      sleeping_channel_count++;
+8010780f:	83 05 c8 b5 10 80 01 	addl   $0x1,0x8010b5c8
+      myproc()->chan=sleeping_channel;
+80107816:	89 50 20             	mov    %edx,0x20(%eax)
+      release(&sleeping_channel_lock);
+80107819:	c7 04 24 a0 68 11 80 	movl   $0x801168a0,(%esp)
+80107820:	e8 fb d7 ff ff       	call   80105020 <release>
+      rpush(myproc());
+80107825:	e8 26 c6 ff ff       	call   80103e50 <myproc>
+8010782a:	89 04 24             	mov    %eax,(%esp)
+8010782d:	e8 1e c1 ff ff       	call   80103950 <rpush>
+      if(!swap_out_process_exists){
+80107832:	8b 3d b8 b5 10 80    	mov    0x8010b5b8,%edi
+80107838:	83 c4 10             	add    $0x10,%esp
+8010783b:	85 ff                	test   %edi,%edi
+8010783d:	74 71                	je     801078b0 <allocuvm+0x160>
 }
-80106f32:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010783f:	8d 65 f4             	lea    -0xc(%ebp),%esp
     return 0;
-80106f35:	31 ff                	xor    %edi,%edi
+80107842:	31 ff                	xor    %edi,%edi
 }
-80106f37:	89 f8                	mov    %edi,%eax
-80106f39:	5b                   	pop    %ebx
-80106f3a:	5e                   	pop    %esi
-80106f3b:	5f                   	pop    %edi
-80106f3c:	5d                   	pop    %ebp
-80106f3d:	c3                   	ret    
-80106f3e:	66 90                	xchg   %ax,%ax
+80107844:	89 f8                	mov    %edi,%eax
+80107846:	5b                   	pop    %ebx
+80107847:	5e                   	pop    %esi
+80107848:	5f                   	pop    %edi
+80107849:	5d                   	pop    %ebp
+8010784a:	c3                   	ret    
+8010784b:	90                   	nop
+8010784c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     return oldsz;
-80106f40:	8b 7d 0c             	mov    0xc(%ebp),%edi
+80107850:	8b 7d 0c             	mov    0xc(%ebp),%edi
 }
-80106f43:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106f46:	89 f8                	mov    %edi,%eax
-80106f48:	5b                   	pop    %ebx
-80106f49:	5e                   	pop    %esi
-80106f4a:	5f                   	pop    %edi
-80106f4b:	5d                   	pop    %ebp
-80106f4c:	c3                   	ret    
-80106f4d:	8d 76 00             	lea    0x0(%esi),%esi
+80107853:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107856:	89 f8                	mov    %edi,%eax
+80107858:	5b                   	pop    %ebx
+80107859:	5e                   	pop    %esi
+8010785a:	5f                   	pop    %edi
+8010785b:	5d                   	pop    %ebp
+8010785c:	c3                   	ret    
+8010785d:	8d 76 00             	lea    0x0(%esi),%esi
       cprintf("allocuvm out of memory (2)\n");
-80106f50:	83 ec 0c             	sub    $0xc,%esp
-80106f53:	68 79 7d 10 80       	push   $0x80107d79
-80106f58:	e8 03 97 ff ff       	call   80100660 <cprintf>
+80107860:	83 ec 0c             	sub    $0xc,%esp
+80107863:	89 fe                	mov    %edi,%esi
+80107865:	68 a1 87 10 80       	push   $0x801087a1
+8010786a:	e8 f1 8d ff ff       	call   80100660 <cprintf>
   if(newsz >= oldsz)
-80106f5d:	83 c4 10             	add    $0x10,%esp
-80106f60:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106f63:	39 45 10             	cmp    %eax,0x10(%ebp)
-80106f66:	76 0d                	jbe    80106f75 <allocuvm+0xe5>
-80106f68:	89 c1                	mov    %eax,%ecx
-80106f6a:	8b 55 10             	mov    0x10(%ebp),%edx
-80106f6d:	8b 45 08             	mov    0x8(%ebp),%eax
-80106f70:	e8 7b fb ff ff       	call   80106af0 <deallocuvm.part.0>
+8010786f:	83 c4 10             	add    $0x10,%esp
+80107872:	8b 45 0c             	mov    0xc(%ebp),%eax
+80107875:	39 45 10             	cmp    %eax,0x10(%ebp)
+80107878:	76 0d                	jbe    80107887 <allocuvm+0x137>
+8010787a:	89 c1                	mov    %eax,%ecx
+8010787c:	8b 55 10             	mov    0x10(%ebp),%edx
+8010787f:	8b 45 08             	mov    0x8(%ebp),%eax
+80107882:	e8 99 fa ff ff       	call   80107320 <deallocuvm.part.0>
       kfree(mem);
-80106f75:	83 ec 0c             	sub    $0xc,%esp
+80107887:	83 ec 0c             	sub    $0xc,%esp
       return 0;
-80106f78:	31 ff                	xor    %edi,%edi
+8010788a:	31 ff                	xor    %edi,%edi
       kfree(mem);
-80106f7a:	56                   	push   %esi
-80106f7b:	e8 90 b3 ff ff       	call   80102310 <kfree>
+8010788c:	56                   	push   %esi
+8010788d:	e8 7e aa ff ff       	call   80102310 <kfree>
       return 0;
-80106f80:	83 c4 10             	add    $0x10,%esp
+80107892:	83 c4 10             	add    $0x10,%esp
 }
-80106f83:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106f86:	89 f8                	mov    %edi,%eax
-80106f88:	5b                   	pop    %ebx
-80106f89:	5e                   	pop    %esi
-80106f8a:	5f                   	pop    %edi
-80106f8b:	5d                   	pop    %ebp
-80106f8c:	c3                   	ret    
-80106f8d:	8d 76 00             	lea    0x0(%esi),%esi
-80106f90:	8b 7d e4             	mov    -0x1c(%ebp),%edi
-80106f93:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106f96:	5b                   	pop    %ebx
-80106f97:	89 f8                	mov    %edi,%eax
-80106f99:	5e                   	pop    %esi
-80106f9a:	5f                   	pop    %edi
-80106f9b:	5d                   	pop    %ebp
-80106f9c:	c3                   	ret    
-80106f9d:	8d 76 00             	lea    0x0(%esi),%esi
-80106fa0:	89 c1                	mov    %eax,%ecx
-80106fa2:	8b 55 10             	mov    0x10(%ebp),%edx
-80106fa5:	8b 45 08             	mov    0x8(%ebp),%eax
-      return 0;
-80106fa8:	31 ff                	xor    %edi,%edi
-80106faa:	e8 41 fb ff ff       	call   80106af0 <deallocuvm.part.0>
-80106faf:	eb 92                	jmp    80106f43 <allocuvm+0xb3>
-80106fb1:	eb 0d                	jmp    80106fc0 <deallocuvm>
-80106fb3:	90                   	nop
-80106fb4:	90                   	nop
-80106fb5:	90                   	nop
-80106fb6:	90                   	nop
-80106fb7:	90                   	nop
-80106fb8:	90                   	nop
-80106fb9:	90                   	nop
-80106fba:	90                   	nop
-80106fbb:	90                   	nop
-80106fbc:	90                   	nop
-80106fbd:	90                   	nop
-80106fbe:	90                   	nop
-80106fbf:	90                   	nop
-
-80106fc0 <deallocuvm>:
-{
-80106fc0:	55                   	push   %ebp
-80106fc1:	89 e5                	mov    %esp,%ebp
-80106fc3:	8b 55 0c             	mov    0xc(%ebp),%edx
-80106fc6:	8b 4d 10             	mov    0x10(%ebp),%ecx
-80106fc9:	8b 45 08             	mov    0x8(%ebp),%eax
+80107895:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107898:	89 f8                	mov    %edi,%eax
+8010789a:	5b                   	pop    %ebx
+8010789b:	5e                   	pop    %esi
+8010789c:	5f                   	pop    %edi
+8010789d:	5d                   	pop    %ebp
+8010789e:	c3                   	ret    
+8010789f:	90                   	nop
+801078a0:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+801078a3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801078a6:	5b                   	pop    %ebx
+801078a7:	89 f8                	mov    %edi,%eax
+801078a9:	5e                   	pop    %esi
+801078aa:	5f                   	pop    %edi
+801078ab:	5d                   	pop    %ebp
+801078ac:	c3                   	ret    
+801078ad:	8d 76 00             	lea    0x0(%esi),%esi
+        create_kernel_process("swap_out_process",&swap_out_process_function);
+801078b0:	83 ec 08             	sub    $0x8,%esp
+        swap_out_process_exists=1;
+801078b3:	c7 05 b8 b5 10 80 01 	movl   $0x1,0x8010b5b8
+801078ba:	00 00 00 
+        create_kernel_process("swap_out_process",&swap_out_process_function);
+801078bd:	68 80 43 10 80       	push   $0x80104380
+801078c2:	68 74 82 10 80       	push   $0x80108274
+801078c7:	e8 a4 d3 ff ff       	call   80104c70 <create_kernel_process>
+801078cc:	83 c4 10             	add    $0x10,%esp
+801078cf:	eb 82                	jmp    80107853 <allocuvm+0x103>
+801078d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801078d8:	89 c1                	mov    %eax,%ecx
+801078da:	8b 55 10             	mov    0x10(%ebp),%edx
+801078dd:	8b 45 08             	mov    0x8(%ebp),%eax
+801078e0:	e8 3b fa ff ff       	call   80107320 <deallocuvm.part.0>
+801078e5:	e9 01 ff ff ff       	jmp    801077eb <allocuvm+0x9b>
+801078ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801078f0 <deallocuvm>:
+{
+801078f0:	55                   	push   %ebp
+801078f1:	89 e5                	mov    %esp,%ebp
+801078f3:	8b 55 0c             	mov    0xc(%ebp),%edx
+801078f6:	8b 4d 10             	mov    0x10(%ebp),%ecx
+801078f9:	8b 45 08             	mov    0x8(%ebp),%eax
   if(newsz >= oldsz)
-80106fcc:	39 d1                	cmp    %edx,%ecx
-80106fce:	73 10                	jae    80106fe0 <deallocuvm+0x20>
+801078fc:	39 d1                	cmp    %edx,%ecx
+801078fe:	73 10                	jae    80107910 <deallocuvm+0x20>
 }
-80106fd0:	5d                   	pop    %ebp
-80106fd1:	e9 1a fb ff ff       	jmp    80106af0 <deallocuvm.part.0>
-80106fd6:	8d 76 00             	lea    0x0(%esi),%esi
-80106fd9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-80106fe0:	89 d0                	mov    %edx,%eax
-80106fe2:	5d                   	pop    %ebp
-80106fe3:	c3                   	ret    
-80106fe4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80106fea:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+80107900:	5d                   	pop    %ebp
+80107901:	e9 1a fa ff ff       	jmp    80107320 <deallocuvm.part.0>
+80107906:	8d 76 00             	lea    0x0(%esi),%esi
+80107909:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80107910:	89 d0                	mov    %edx,%eax
+80107912:	5d                   	pop    %ebp
+80107913:	c3                   	ret    
+80107914:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010791a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
 
-80106ff0 <freevm>:
+80107920 <freevm>:
 
 // Free a page table and all the physical memory pages
 // in the user part.
 void
 freevm(pde_t *pgdir)
 {
-80106ff0:	55                   	push   %ebp
-80106ff1:	89 e5                	mov    %esp,%ebp
-80106ff3:	57                   	push   %edi
-80106ff4:	56                   	push   %esi
-80106ff5:	53                   	push   %ebx
-80106ff6:	83 ec 0c             	sub    $0xc,%esp
-80106ff9:	8b 75 08             	mov    0x8(%ebp),%esi
+80107920:	55                   	push   %ebp
+80107921:	89 e5                	mov    %esp,%ebp
+80107923:	57                   	push   %edi
+80107924:	56                   	push   %esi
+80107925:	53                   	push   %ebx
+80107926:	83 ec 0c             	sub    $0xc,%esp
+80107929:	8b 75 08             	mov    0x8(%ebp),%esi
   uint i;
 
   if(pgdir == 0)
-80106ffc:	85 f6                	test   %esi,%esi
-80106ffe:	74 59                	je     80107059 <freevm+0x69>
-80107000:	31 c9                	xor    %ecx,%ecx
-80107002:	ba 00 00 00 80       	mov    $0x80000000,%edx
-80107007:	89 f0                	mov    %esi,%eax
-80107009:	e8 e2 fa ff ff       	call   80106af0 <deallocuvm.part.0>
-8010700e:	89 f3                	mov    %esi,%ebx
-80107010:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
-80107016:	eb 0f                	jmp    80107027 <freevm+0x37>
-80107018:	90                   	nop
-80107019:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80107020:	83 c3 04             	add    $0x4,%ebx
+8010792c:	85 f6                	test   %esi,%esi
+8010792e:	74 59                	je     80107989 <freevm+0x69>
+80107930:	31 c9                	xor    %ecx,%ecx
+80107932:	ba 00 00 00 80       	mov    $0x80000000,%edx
+80107937:	89 f0                	mov    %esi,%eax
+80107939:	e8 e2 f9 ff ff       	call   80107320 <deallocuvm.part.0>
+8010793e:	89 f3                	mov    %esi,%ebx
+80107940:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
+80107946:	eb 0f                	jmp    80107957 <freevm+0x37>
+80107948:	90                   	nop
+80107949:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107950:	83 c3 04             	add    $0x4,%ebx
     panic("freevm: no pgdir");
   deallocuvm(pgdir, KERNBASE, 0);
   for(i = 0; i < NPDENTRIES; i++){
-80107023:	39 fb                	cmp    %edi,%ebx
-80107025:	74 23                	je     8010704a <freevm+0x5a>
+80107953:	39 fb                	cmp    %edi,%ebx
+80107955:	74 23                	je     8010797a <freevm+0x5a>
     if(pgdir[i] & PTE_P){
-80107027:	8b 03                	mov    (%ebx),%eax
-80107029:	a8 01                	test   $0x1,%al
-8010702b:	74 f3                	je     80107020 <freevm+0x30>
+80107957:	8b 03                	mov    (%ebx),%eax
+80107959:	a8 01                	test   $0x1,%al
+8010795b:	74 f3                	je     80107950 <freevm+0x30>
       char * v = P2V(PTE_ADDR(pgdir[i]));
-8010702d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+8010795d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
       kfree(v);
-80107032:	83 ec 0c             	sub    $0xc,%esp
-80107035:	83 c3 04             	add    $0x4,%ebx
+80107962:	83 ec 0c             	sub    $0xc,%esp
+80107965:	83 c3 04             	add    $0x4,%ebx
       char * v = P2V(PTE_ADDR(pgdir[i]));
-80107038:	05 00 00 00 80       	add    $0x80000000,%eax
+80107968:	05 00 00 00 80       	add    $0x80000000,%eax
       kfree(v);
-8010703d:	50                   	push   %eax
-8010703e:	e8 cd b2 ff ff       	call   80102310 <kfree>
-80107043:	83 c4 10             	add    $0x10,%esp
+8010796d:	50                   	push   %eax
+8010796e:	e8 9d a9 ff ff       	call   80102310 <kfree>
+80107973:	83 c4 10             	add    $0x10,%esp
   for(i = 0; i < NPDENTRIES; i++){
-80107046:	39 fb                	cmp    %edi,%ebx
-80107048:	75 dd                	jne    80107027 <freevm+0x37>
+80107976:	39 fb                	cmp    %edi,%ebx
+80107978:	75 dd                	jne    80107957 <freevm+0x37>
     }
   }
   kfree((char*)pgdir);
-8010704a:	89 75 08             	mov    %esi,0x8(%ebp)
+8010797a:	89 75 08             	mov    %esi,0x8(%ebp)
 }
-8010704d:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80107050:	5b                   	pop    %ebx
-80107051:	5e                   	pop    %esi
-80107052:	5f                   	pop    %edi
-80107053:	5d                   	pop    %ebp
+8010797d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107980:	5b                   	pop    %ebx
+80107981:	5e                   	pop    %esi
+80107982:	5f                   	pop    %edi
+80107983:	5d                   	pop    %ebp
   kfree((char*)pgdir);
-80107054:	e9 b7 b2 ff ff       	jmp    80102310 <kfree>
+80107984:	e9 87 a9 ff ff       	jmp    80102310 <kfree>
     panic("freevm: no pgdir");
-80107059:	83 ec 0c             	sub    $0xc,%esp
-8010705c:	68 95 7d 10 80       	push   $0x80107d95
-80107061:	e8 2a 93 ff ff       	call   80100390 <panic>
-80107066:	8d 76 00             	lea    0x0(%esi),%esi
-80107069:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-80107070 <setupkvm>:
-{
-80107070:	55                   	push   %ebp
-80107071:	89 e5                	mov    %esp,%ebp
-80107073:	56                   	push   %esi
-80107074:	53                   	push   %ebx
+80107989:	83 ec 0c             	sub    $0xc,%esp
+8010798c:	68 bd 87 10 80       	push   $0x801087bd
+80107991:	e8 fa 89 ff ff       	call   80100390 <panic>
+80107996:	8d 76 00             	lea    0x0(%esi),%esi
+80107999:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801079a0 <setupkvm>:
+{
+801079a0:	55                   	push   %ebp
+801079a1:	89 e5                	mov    %esp,%ebp
+801079a3:	56                   	push   %esi
+801079a4:	53                   	push   %ebx
   if((pgdir = (pde_t*)kalloc()) == 0)
-80107075:	e8 46 b4 ff ff       	call   801024c0 <kalloc>
-8010707a:	85 c0                	test   %eax,%eax
-8010707c:	89 c6                	mov    %eax,%esi
-8010707e:	74 42                	je     801070c2 <setupkvm+0x52>
+801079a5:	e8 96 ab ff ff       	call   80102540 <kalloc>
+801079aa:	85 c0                	test   %eax,%eax
+801079ac:	89 c6                	mov    %eax,%esi
+801079ae:	74 42                	je     801079f2 <setupkvm+0x52>
   memset(pgdir, 0, PGSIZE);
-80107080:	83 ec 04             	sub    $0x4,%esp
+801079b0:	83 ec 04             	sub    $0x4,%esp
   for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-80107083:	bb 20 a4 10 80       	mov    $0x8010a420,%ebx
+801079b3:	bb 20 b4 10 80       	mov    $0x8010b420,%ebx
   memset(pgdir, 0, PGSIZE);
-80107088:	68 00 10 00 00       	push   $0x1000
-8010708d:	6a 00                	push   $0x0
-8010708f:	50                   	push   %eax
-80107090:	e8 fb d6 ff ff       	call   80104790 <memset>
-80107095:	83 c4 10             	add    $0x10,%esp
+801079b8:	68 00 10 00 00       	push   $0x1000
+801079bd:	6a 00                	push   $0x0
+801079bf:	50                   	push   %eax
+801079c0:	e8 ab d6 ff ff       	call   80105070 <memset>
+801079c5:	83 c4 10             	add    $0x10,%esp
                 (uint)k->phys_start, k->perm) < 0) {
-80107098:	8b 43 04             	mov    0x4(%ebx),%eax
+801079c8:	8b 43 04             	mov    0x4(%ebx),%eax
     if(mappages(pgdir, k->virt, k->phys_end - k->phys_start,
-8010709b:	8b 4b 08             	mov    0x8(%ebx),%ecx
-8010709e:	83 ec 08             	sub    $0x8,%esp
-801070a1:	8b 13                	mov    (%ebx),%edx
-801070a3:	ff 73 0c             	pushl  0xc(%ebx)
-801070a6:	50                   	push   %eax
-801070a7:	29 c1                	sub    %eax,%ecx
-801070a9:	89 f0                	mov    %esi,%eax
-801070ab:	e8 b0 f9 ff ff       	call   80106a60 <mappages>
-801070b0:	83 c4 10             	add    $0x10,%esp
-801070b3:	85 c0                	test   %eax,%eax
-801070b5:	78 19                	js     801070d0 <setupkvm+0x60>
+801079cb:	8b 53 08             	mov    0x8(%ebx),%edx
+801079ce:	83 ec 0c             	sub    $0xc,%esp
+801079d1:	ff 73 0c             	pushl  0xc(%ebx)
+801079d4:	29 c2                	sub    %eax,%edx
+801079d6:	50                   	push   %eax
+801079d7:	52                   	push   %edx
+801079d8:	ff 33                	pushl  (%ebx)
+801079da:	56                   	push   %esi
+801079db:	e8 70 fa ff ff       	call   80107450 <mappages>
+801079e0:	83 c4 20             	add    $0x20,%esp
+801079e3:	85 c0                	test   %eax,%eax
+801079e5:	78 19                	js     80107a00 <setupkvm+0x60>
   for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-801070b7:	83 c3 10             	add    $0x10,%ebx
-801070ba:	81 fb 60 a4 10 80    	cmp    $0x8010a460,%ebx
-801070c0:	75 d6                	jne    80107098 <setupkvm+0x28>
-}
-801070c2:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801070c5:	89 f0                	mov    %esi,%eax
-801070c7:	5b                   	pop    %ebx
-801070c8:	5e                   	pop    %esi
-801070c9:	5d                   	pop    %ebp
-801070ca:	c3                   	ret    
-801070cb:	90                   	nop
-801070cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801079e7:	83 c3 10             	add    $0x10,%ebx
+801079ea:	81 fb 60 b4 10 80    	cmp    $0x8010b460,%ebx
+801079f0:	75 d6                	jne    801079c8 <setupkvm+0x28>
+}
+801079f2:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801079f5:	89 f0                	mov    %esi,%eax
+801079f7:	5b                   	pop    %ebx
+801079f8:	5e                   	pop    %esi
+801079f9:	5d                   	pop    %ebp
+801079fa:	c3                   	ret    
+801079fb:	90                   	nop
+801079fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       freevm(pgdir);
-801070d0:	83 ec 0c             	sub    $0xc,%esp
-801070d3:	56                   	push   %esi
+80107a00:	83 ec 0c             	sub    $0xc,%esp
+80107a03:	56                   	push   %esi
       return 0;
-801070d4:	31 f6                	xor    %esi,%esi
+80107a04:	31 f6                	xor    %esi,%esi
       freevm(pgdir);
-801070d6:	e8 15 ff ff ff       	call   80106ff0 <freevm>
+80107a06:	e8 15 ff ff ff       	call   80107920 <freevm>
       return 0;
-801070db:	83 c4 10             	add    $0x10,%esp
+80107a0b:	83 c4 10             	add    $0x10,%esp
 }
-801070de:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801070e1:	89 f0                	mov    %esi,%eax
-801070e3:	5b                   	pop    %ebx
-801070e4:	5e                   	pop    %esi
-801070e5:	5d                   	pop    %ebp
-801070e6:	c3                   	ret    
-801070e7:	89 f6                	mov    %esi,%esi
-801070e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-801070f0 <kvmalloc>:
-{
-801070f0:	55                   	push   %ebp
-801070f1:	89 e5                	mov    %esp,%ebp
-801070f3:	83 ec 08             	sub    $0x8,%esp
+80107a0e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80107a11:	89 f0                	mov    %esi,%eax
+80107a13:	5b                   	pop    %ebx
+80107a14:	5e                   	pop    %esi
+80107a15:	5d                   	pop    %ebp
+80107a16:	c3                   	ret    
+80107a17:	89 f6                	mov    %esi,%esi
+80107a19:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80107a20 <kvmalloc>:
+{
+80107a20:	55                   	push   %ebp
+80107a21:	89 e5                	mov    %esp,%ebp
+80107a23:	83 ec 08             	sub    $0x8,%esp
   kpgdir = setupkvm();
-801070f6:	e8 75 ff ff ff       	call   80107070 <setupkvm>
-801070fb:	a3 a4 55 11 80       	mov    %eax,0x801155a4
+80107a26:	e8 75 ff ff ff       	call   801079a0 <setupkvm>
+80107a2b:	a3 d4 68 11 80       	mov    %eax,0x801168d4
   lcr3(V2P(kpgdir));   // switch to the kernel page table
-80107100:	05 00 00 00 80       	add    $0x80000000,%eax
-80107105:	0f 22 d8             	mov    %eax,%cr3
+80107a30:	05 00 00 00 80       	add    $0x80000000,%eax
+80107a35:	0f 22 d8             	mov    %eax,%cr3
 }
-80107108:	c9                   	leave  
-80107109:	c3                   	ret    
-8010710a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80107a38:	c9                   	leave  
+80107a39:	c3                   	ret    
+80107a3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80107110 <clearpteu>:
+80107a40 <clearpteu>:
 
 // Clear PTE_U on a page. Used to create an inaccessible
 // page beneath the user stack.
 void
 clearpteu(pde_t *pgdir, char *uva)
 {
-80107110:	55                   	push   %ebp
+80107a40:	55                   	push   %ebp
   pte_t *pte;
 
   pte = walkpgdir(pgdir, uva, 0);
-80107111:	31 c9                	xor    %ecx,%ecx
+80107a41:	31 c9                	xor    %ecx,%ecx
 {
-80107113:	89 e5                	mov    %esp,%ebp
-80107115:	83 ec 08             	sub    $0x8,%esp
+80107a43:	89 e5                	mov    %esp,%ebp
+80107a45:	83 ec 08             	sub    $0x8,%esp
   pte = walkpgdir(pgdir, uva, 0);
-80107118:	8b 55 0c             	mov    0xc(%ebp),%edx
-8010711b:	8b 45 08             	mov    0x8(%ebp),%eax
-8010711e:	e8 bd f8 ff ff       	call   801069e0 <walkpgdir>
+80107a48:	8b 55 0c             	mov    0xc(%ebp),%edx
+80107a4b:	8b 45 08             	mov    0x8(%ebp),%eax
+80107a4e:	e8 4d f8 ff ff       	call   801072a0 <walkpgdir>
   if(pte == 0)
-80107123:	85 c0                	test   %eax,%eax
-80107125:	74 05                	je     8010712c <clearpteu+0x1c>
+80107a53:	85 c0                	test   %eax,%eax
+80107a55:	74 05                	je     80107a5c <clearpteu+0x1c>
     panic("clearpteu");
   *pte &= ~PTE_U;
-80107127:	83 20 fb             	andl   $0xfffffffb,(%eax)
+80107a57:	83 20 fb             	andl   $0xfffffffb,(%eax)
 }
-8010712a:	c9                   	leave  
-8010712b:	c3                   	ret    
+80107a5a:	c9                   	leave  
+80107a5b:	c3                   	ret    
     panic("clearpteu");
-8010712c:	83 ec 0c             	sub    $0xc,%esp
-8010712f:	68 a6 7d 10 80       	push   $0x80107da6
-80107134:	e8 57 92 ff ff       	call   80100390 <panic>
-80107139:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107a5c:	83 ec 0c             	sub    $0xc,%esp
+80107a5f:	68 ce 87 10 80       	push   $0x801087ce
+80107a64:	e8 27 89 ff ff       	call   80100390 <panic>
+80107a69:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80107140 <copyuvm>:
+80107a70 <copyuvm>:
 
 // Given a parent process's page table, create a copy
 // of it for a child.
 pde_t*
 copyuvm(pde_t *pgdir, uint sz)
 {
-80107140:	55                   	push   %ebp
-80107141:	89 e5                	mov    %esp,%ebp
-80107143:	57                   	push   %edi
-80107144:	56                   	push   %esi
-80107145:	53                   	push   %ebx
-80107146:	83 ec 1c             	sub    $0x1c,%esp
+80107a70:	55                   	push   %ebp
+80107a71:	89 e5                	mov    %esp,%ebp
+80107a73:	57                   	push   %edi
+80107a74:	56                   	push   %esi
+80107a75:	53                   	push   %ebx
+80107a76:	83 ec 1c             	sub    $0x1c,%esp
   pde_t *d;
   pte_t *pte;
   uint pa, i, flags;
   char *mem;
 
   if((d = setupkvm()) == 0)
-80107149:	e8 22 ff ff ff       	call   80107070 <setupkvm>
-8010714e:	85 c0                	test   %eax,%eax
-80107150:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80107153:	0f 84 9f 00 00 00    	je     801071f8 <copyuvm+0xb8>
+80107a79:	e8 22 ff ff ff       	call   801079a0 <setupkvm>
+80107a7e:	85 c0                	test   %eax,%eax
+80107a80:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80107a83:	0f 84 a2 00 00 00    	je     80107b2b <copyuvm+0xbb>
     return 0;
   for(i = 0; i < sz; i += PGSIZE){
-80107159:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-8010715c:	85 c9                	test   %ecx,%ecx
-8010715e:	0f 84 94 00 00 00    	je     801071f8 <copyuvm+0xb8>
-80107164:	31 ff                	xor    %edi,%edi
-80107166:	eb 4a                	jmp    801071b2 <copyuvm+0x72>
-80107168:	90                   	nop
-80107169:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107a89:	8b 55 0c             	mov    0xc(%ebp),%edx
+80107a8c:	85 d2                	test   %edx,%edx
+80107a8e:	0f 84 97 00 00 00    	je     80107b2b <copyuvm+0xbb>
+80107a94:	31 f6                	xor    %esi,%esi
+80107a96:	eb 48                	jmp    80107ae0 <copyuvm+0x70>
+80107a98:	90                   	nop
+80107a99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       panic("copyuvm: page not present");
     pa = PTE_ADDR(*pte);
     flags = PTE_FLAGS(*pte);
     if((mem = kalloc()) == 0)
       goto bad;
     memmove(mem, (char*)P2V(pa), PGSIZE);
-80107170:	83 ec 04             	sub    $0x4,%esp
-80107173:	81 c3 00 00 00 80    	add    $0x80000000,%ebx
-80107179:	68 00 10 00 00       	push   $0x1000
-8010717e:	53                   	push   %ebx
-8010717f:	50                   	push   %eax
-80107180:	e8 bb d6 ff ff       	call   80104840 <memmove>
+80107aa0:	83 ec 04             	sub    $0x4,%esp
+80107aa3:	81 c3 00 00 00 80    	add    $0x80000000,%ebx
+80107aa9:	68 00 10 00 00       	push   $0x1000
+80107aae:	53                   	push   %ebx
+80107aaf:	50                   	push   %eax
+80107ab0:	e8 6b d6 ff ff       	call   80105120 <memmove>
     if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0) {
-80107185:	58                   	pop    %eax
-80107186:	8d 86 00 00 00 80    	lea    -0x80000000(%esi),%eax
-8010718c:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80107191:	5a                   	pop    %edx
-80107192:	ff 75 e4             	pushl  -0x1c(%ebp)
-80107195:	50                   	push   %eax
-80107196:	89 fa                	mov    %edi,%edx
-80107198:	8b 45 e0             	mov    -0x20(%ebp),%eax
-8010719b:	e8 c0 f8 ff ff       	call   80106a60 <mappages>
-801071a0:	83 c4 10             	add    $0x10,%esp
-801071a3:	85 c0                	test   %eax,%eax
-801071a5:	78 61                	js     80107208 <copyuvm+0xc8>
+80107ab5:	58                   	pop    %eax
+80107ab6:	8d 87 00 00 00 80    	lea    -0x80000000(%edi),%eax
+80107abc:	ff 75 e4             	pushl  -0x1c(%ebp)
+80107abf:	50                   	push   %eax
+80107ac0:	68 00 10 00 00       	push   $0x1000
+80107ac5:	56                   	push   %esi
+80107ac6:	ff 75 e0             	pushl  -0x20(%ebp)
+80107ac9:	e8 82 f9 ff ff       	call   80107450 <mappages>
+80107ace:	83 c4 20             	add    $0x20,%esp
+80107ad1:	85 c0                	test   %eax,%eax
+80107ad3:	78 6b                	js     80107b40 <copyuvm+0xd0>
   for(i = 0; i < sz; i += PGSIZE){
-801071a7:	81 c7 00 10 00 00    	add    $0x1000,%edi
-801071ad:	39 7d 0c             	cmp    %edi,0xc(%ebp)
-801071b0:	76 46                	jbe    801071f8 <copyuvm+0xb8>
+80107ad5:	81 c6 00 10 00 00    	add    $0x1000,%esi
+80107adb:	39 75 0c             	cmp    %esi,0xc(%ebp)
+80107ade:	76 4b                	jbe    80107b2b <copyuvm+0xbb>
     if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
-801071b2:	8b 45 08             	mov    0x8(%ebp),%eax
-801071b5:	31 c9                	xor    %ecx,%ecx
-801071b7:	89 fa                	mov    %edi,%edx
-801071b9:	e8 22 f8 ff ff       	call   801069e0 <walkpgdir>
-801071be:	85 c0                	test   %eax,%eax
-801071c0:	74 61                	je     80107223 <copyuvm+0xe3>
+80107ae0:	8b 45 08             	mov    0x8(%ebp),%eax
+80107ae3:	31 c9                	xor    %ecx,%ecx
+80107ae5:	89 f2                	mov    %esi,%edx
+80107ae7:	e8 b4 f7 ff ff       	call   801072a0 <walkpgdir>
+80107aec:	85 c0                	test   %eax,%eax
+80107aee:	74 6b                	je     80107b5b <copyuvm+0xeb>
     if(!(*pte & PTE_P))
-801071c2:	8b 00                	mov    (%eax),%eax
-801071c4:	a8 01                	test   $0x1,%al
-801071c6:	74 4e                	je     80107216 <copyuvm+0xd6>
+80107af0:	8b 38                	mov    (%eax),%edi
+80107af2:	f7 c7 01 00 00 00    	test   $0x1,%edi
+80107af8:	74 54                	je     80107b4e <copyuvm+0xde>
     pa = PTE_ADDR(*pte);
-801071c8:	89 c3                	mov    %eax,%ebx
+80107afa:	89 fb                	mov    %edi,%ebx
     flags = PTE_FLAGS(*pte);
-801071ca:	25 ff 0f 00 00       	and    $0xfff,%eax
+80107afc:	81 e7 ff 0f 00 00    	and    $0xfff,%edi
+80107b02:	89 7d e4             	mov    %edi,-0x1c(%ebp)
     pa = PTE_ADDR(*pte);
-801071cf:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
-    flags = PTE_FLAGS(*pte);
-801071d5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80107b05:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
     if((mem = kalloc()) == 0)
-801071d8:	e8 e3 b2 ff ff       	call   801024c0 <kalloc>
-801071dd:	85 c0                	test   %eax,%eax
-801071df:	89 c6                	mov    %eax,%esi
-801071e1:	75 8d                	jne    80107170 <copyuvm+0x30>
+80107b0b:	e8 30 aa ff ff       	call   80102540 <kalloc>
+80107b10:	85 c0                	test   %eax,%eax
+80107b12:	89 c7                	mov    %eax,%edi
+80107b14:	75 8a                	jne    80107aa0 <copyuvm+0x30>
     }
   }
   return d;
 
 bad:
   freevm(d);
-801071e3:	83 ec 0c             	sub    $0xc,%esp
-801071e6:	ff 75 e0             	pushl  -0x20(%ebp)
-801071e9:	e8 02 fe ff ff       	call   80106ff0 <freevm>
+80107b16:	83 ec 0c             	sub    $0xc,%esp
+80107b19:	ff 75 e0             	pushl  -0x20(%ebp)
+80107b1c:	e8 ff fd ff ff       	call   80107920 <freevm>
   return 0;
-801071ee:	83 c4 10             	add    $0x10,%esp
-801071f1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+80107b21:	83 c4 10             	add    $0x10,%esp
+80107b24:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
 }
-801071f8:	8b 45 e0             	mov    -0x20(%ebp),%eax
-801071fb:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801071fe:	5b                   	pop    %ebx
-801071ff:	5e                   	pop    %esi
-80107200:	5f                   	pop    %edi
-80107201:	5d                   	pop    %ebp
-80107202:	c3                   	ret    
-80107203:	90                   	nop
-80107204:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80107b2b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80107b2e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107b31:	5b                   	pop    %ebx
+80107b32:	5e                   	pop    %esi
+80107b33:	5f                   	pop    %edi
+80107b34:	5d                   	pop    %ebp
+80107b35:	c3                   	ret    
+80107b36:	8d 76 00             	lea    0x0(%esi),%esi
+80107b39:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
       kfree(mem);
-80107208:	83 ec 0c             	sub    $0xc,%esp
-8010720b:	56                   	push   %esi
-8010720c:	e8 ff b0 ff ff       	call   80102310 <kfree>
+80107b40:	83 ec 0c             	sub    $0xc,%esp
+80107b43:	57                   	push   %edi
+80107b44:	e8 c7 a7 ff ff       	call   80102310 <kfree>
       goto bad;
-80107211:	83 c4 10             	add    $0x10,%esp
-80107214:	eb cd                	jmp    801071e3 <copyuvm+0xa3>
+80107b49:	83 c4 10             	add    $0x10,%esp
+80107b4c:	eb c8                	jmp    80107b16 <copyuvm+0xa6>
       panic("copyuvm: page not present");
-80107216:	83 ec 0c             	sub    $0xc,%esp
-80107219:	68 ca 7d 10 80       	push   $0x80107dca
-8010721e:	e8 6d 91 ff ff       	call   80100390 <panic>
+80107b4e:	83 ec 0c             	sub    $0xc,%esp
+80107b51:	68 f2 87 10 80       	push   $0x801087f2
+80107b56:	e8 35 88 ff ff       	call   80100390 <panic>
       panic("copyuvm: pte should exist");
-80107223:	83 ec 0c             	sub    $0xc,%esp
-80107226:	68 b0 7d 10 80       	push   $0x80107db0
-8010722b:	e8 60 91 ff ff       	call   80100390 <panic>
+80107b5b:	83 ec 0c             	sub    $0xc,%esp
+80107b5e:	68 d8 87 10 80       	push   $0x801087d8
+80107b63:	e8 28 88 ff ff       	call   80100390 <panic>
+80107b68:	90                   	nop
+80107b69:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80107230 <uva2ka>:
+80107b70 <uva2ka>:
 
 //PAGEBREAK!
 // Map user virtual address to kernel address.
 char*
 uva2ka(pde_t *pgdir, char *uva)
 {
-80107230:	55                   	push   %ebp
+80107b70:	55                   	push   %ebp
   pte_t *pte;
 
   pte = walkpgdir(pgdir, uva, 0);
-80107231:	31 c9                	xor    %ecx,%ecx
+80107b71:	31 c9                	xor    %ecx,%ecx
 {
-80107233:	89 e5                	mov    %esp,%ebp
-80107235:	83 ec 08             	sub    $0x8,%esp
+80107b73:	89 e5                	mov    %esp,%ebp
+80107b75:	83 ec 08             	sub    $0x8,%esp
   pte = walkpgdir(pgdir, uva, 0);
-80107238:	8b 55 0c             	mov    0xc(%ebp),%edx
-8010723b:	8b 45 08             	mov    0x8(%ebp),%eax
-8010723e:	e8 9d f7 ff ff       	call   801069e0 <walkpgdir>
+80107b78:	8b 55 0c             	mov    0xc(%ebp),%edx
+80107b7b:	8b 45 08             	mov    0x8(%ebp),%eax
+80107b7e:	e8 1d f7 ff ff       	call   801072a0 <walkpgdir>
   if((*pte & PTE_P) == 0)
-80107243:	8b 00                	mov    (%eax),%eax
+80107b83:	8b 00                	mov    (%eax),%eax
     return 0;
   if((*pte & PTE_U) == 0)
     return 0;
   return (char*)P2V(PTE_ADDR(*pte));
 }
-80107245:	c9                   	leave  
+80107b85:	c9                   	leave  
   if((*pte & PTE_U) == 0)
-80107246:	89 c2                	mov    %eax,%edx
+80107b86:	89 c2                	mov    %eax,%edx
   return (char*)P2V(PTE_ADDR(*pte));
-80107248:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80107b88:	25 00 f0 ff ff       	and    $0xfffff000,%eax
   if((*pte & PTE_U) == 0)
-8010724d:	83 e2 05             	and    $0x5,%edx
+80107b8d:	83 e2 05             	and    $0x5,%edx
   return (char*)P2V(PTE_ADDR(*pte));
-80107250:	05 00 00 00 80       	add    $0x80000000,%eax
-80107255:	83 fa 05             	cmp    $0x5,%edx
-80107258:	ba 00 00 00 00       	mov    $0x0,%edx
-8010725d:	0f 45 c2             	cmovne %edx,%eax
-}
-80107260:	c3                   	ret    
-80107261:	eb 0d                	jmp    80107270 <copyout>
-80107263:	90                   	nop
-80107264:	90                   	nop
-80107265:	90                   	nop
-80107266:	90                   	nop
-80107267:	90                   	nop
-80107268:	90                   	nop
-80107269:	90                   	nop
-8010726a:	90                   	nop
-8010726b:	90                   	nop
-8010726c:	90                   	nop
-8010726d:	90                   	nop
-8010726e:	90                   	nop
-8010726f:	90                   	nop
+80107b90:	05 00 00 00 80       	add    $0x80000000,%eax
+80107b95:	83 fa 05             	cmp    $0x5,%edx
+80107b98:	ba 00 00 00 00       	mov    $0x0,%edx
+80107b9d:	0f 45 c2             	cmovne %edx,%eax
+}
+80107ba0:	c3                   	ret    
+80107ba1:	eb 0d                	jmp    80107bb0 <copyout>
+80107ba3:	90                   	nop
+80107ba4:	90                   	nop
+80107ba5:	90                   	nop
+80107ba6:	90                   	nop
+80107ba7:	90                   	nop
+80107ba8:	90                   	nop
+80107ba9:	90                   	nop
+80107baa:	90                   	nop
+80107bab:	90                   	nop
+80107bac:	90                   	nop
+80107bad:	90                   	nop
+80107bae:	90                   	nop
+80107baf:	90                   	nop
 
-80107270 <copyout>:
+80107bb0 <copyout>:
 // Copy len bytes from p to user address va in page table pgdir.
 // Most useful when pgdir is not the current page table.
 // uva2ka ensures this only works for PTE_U pages.
 int
 copyout(pde_t *pgdir, uint va, void *p, uint len)
 {
-80107270:	55                   	push   %ebp
-80107271:	89 e5                	mov    %esp,%ebp
-80107273:	57                   	push   %edi
-80107274:	56                   	push   %esi
-80107275:	53                   	push   %ebx
-80107276:	83 ec 1c             	sub    $0x1c,%esp
-80107279:	8b 5d 14             	mov    0x14(%ebp),%ebx
-8010727c:	8b 55 0c             	mov    0xc(%ebp),%edx
-8010727f:	8b 7d 10             	mov    0x10(%ebp),%edi
+80107bb0:	55                   	push   %ebp
+80107bb1:	89 e5                	mov    %esp,%ebp
+80107bb3:	57                   	push   %edi
+80107bb4:	56                   	push   %esi
+80107bb5:	53                   	push   %ebx
+80107bb6:	83 ec 1c             	sub    $0x1c,%esp
+80107bb9:	8b 5d 14             	mov    0x14(%ebp),%ebx
+80107bbc:	8b 55 0c             	mov    0xc(%ebp),%edx
+80107bbf:	8b 7d 10             	mov    0x10(%ebp),%edi
   char *buf, *pa0;
   uint n, va0;
 
   buf = (char*)p;
   while(len > 0){
-80107282:	85 db                	test   %ebx,%ebx
-80107284:	75 40                	jne    801072c6 <copyout+0x56>
-80107286:	eb 70                	jmp    801072f8 <copyout+0x88>
-80107288:	90                   	nop
-80107289:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107bc2:	85 db                	test   %ebx,%ebx
+80107bc4:	75 40                	jne    80107c06 <copyout+0x56>
+80107bc6:	eb 70                	jmp    80107c38 <copyout+0x88>
+80107bc8:	90                   	nop
+80107bc9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     va0 = (uint)PGROUNDDOWN(va);
     pa0 = uva2ka(pgdir, (char*)va0);
     if(pa0 == 0)
       return -1;
     n = PGSIZE - (va - va0);
-80107290:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-80107293:	89 f1                	mov    %esi,%ecx
-80107295:	29 d1                	sub    %edx,%ecx
-80107297:	81 c1 00 10 00 00    	add    $0x1000,%ecx
-8010729d:	39 d9                	cmp    %ebx,%ecx
-8010729f:	0f 47 cb             	cmova  %ebx,%ecx
+80107bd0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80107bd3:	89 f1                	mov    %esi,%ecx
+80107bd5:	29 d1                	sub    %edx,%ecx
+80107bd7:	81 c1 00 10 00 00    	add    $0x1000,%ecx
+80107bdd:	39 d9                	cmp    %ebx,%ecx
+80107bdf:	0f 47 cb             	cmova  %ebx,%ecx
     if(n > len)
       n = len;
     memmove(pa0 + (va - va0), buf, n);
-801072a2:	29 f2                	sub    %esi,%edx
-801072a4:	83 ec 04             	sub    $0x4,%esp
-801072a7:	01 d0                	add    %edx,%eax
-801072a9:	51                   	push   %ecx
-801072aa:	57                   	push   %edi
-801072ab:	50                   	push   %eax
-801072ac:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
-801072af:	e8 8c d5 ff ff       	call   80104840 <memmove>
+80107be2:	29 f2                	sub    %esi,%edx
+80107be4:	83 ec 04             	sub    $0x4,%esp
+80107be7:	01 d0                	add    %edx,%eax
+80107be9:	51                   	push   %ecx
+80107bea:	57                   	push   %edi
+80107beb:	50                   	push   %eax
+80107bec:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+80107bef:	e8 2c d5 ff ff       	call   80105120 <memmove>
     len -= n;
     buf += n;
-801072b4:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80107bf4:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
   while(len > 0){
-801072b7:	83 c4 10             	add    $0x10,%esp
+80107bf7:	83 c4 10             	add    $0x10,%esp
     va = va0 + PGSIZE;
-801072ba:	8d 96 00 10 00 00    	lea    0x1000(%esi),%edx
+80107bfa:	8d 96 00 10 00 00    	lea    0x1000(%esi),%edx
     buf += n;
-801072c0:	01 cf                	add    %ecx,%edi
+80107c00:	01 cf                	add    %ecx,%edi
   while(len > 0){
-801072c2:	29 cb                	sub    %ecx,%ebx
-801072c4:	74 32                	je     801072f8 <copyout+0x88>
+80107c02:	29 cb                	sub    %ecx,%ebx
+80107c04:	74 32                	je     80107c38 <copyout+0x88>
     va0 = (uint)PGROUNDDOWN(va);
-801072c6:	89 d6                	mov    %edx,%esi
+80107c06:	89 d6                	mov    %edx,%esi
     pa0 = uva2ka(pgdir, (char*)va0);
-801072c8:	83 ec 08             	sub    $0x8,%esp
+80107c08:	83 ec 08             	sub    $0x8,%esp
     va0 = (uint)PGROUNDDOWN(va);
-801072cb:	89 55 e4             	mov    %edx,-0x1c(%ebp)
-801072ce:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
+80107c0b:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+80107c0e:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
     pa0 = uva2ka(pgdir, (char*)va0);
-801072d4:	56                   	push   %esi
-801072d5:	ff 75 08             	pushl  0x8(%ebp)
-801072d8:	e8 53 ff ff ff       	call   80107230 <uva2ka>
+80107c14:	56                   	push   %esi
+80107c15:	ff 75 08             	pushl  0x8(%ebp)
+80107c18:	e8 53 ff ff ff       	call   80107b70 <uva2ka>
     if(pa0 == 0)
-801072dd:	83 c4 10             	add    $0x10,%esp
-801072e0:	85 c0                	test   %eax,%eax
-801072e2:	75 ac                	jne    80107290 <copyout+0x20>
+80107c1d:	83 c4 10             	add    $0x10,%esp
+80107c20:	85 c0                	test   %eax,%eax
+80107c22:	75 ac                	jne    80107bd0 <copyout+0x20>
   }
   return 0;
 }
-801072e4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107c24:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return -1;
-801072e7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80107c27:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-801072ec:	5b                   	pop    %ebx
-801072ed:	5e                   	pop    %esi
-801072ee:	5f                   	pop    %edi
-801072ef:	5d                   	pop    %ebp
-801072f0:	c3                   	ret    
-801072f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801072f8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107c2c:	5b                   	pop    %ebx
+80107c2d:	5e                   	pop    %esi
+80107c2e:	5f                   	pop    %edi
+80107c2f:	5d                   	pop    %ebp
+80107c30:	c3                   	ret    
+80107c31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107c38:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-801072fb:	31 c0                	xor    %eax,%eax
+80107c3b:	31 c0                	xor    %eax,%eax
 }
-801072fd:	5b                   	pop    %ebx
-801072fe:	5e                   	pop    %esi
-801072ff:	5f                   	pop    %edi
-80107300:	5d                   	pop    %ebp
-80107301:	c3                   	ret    
+80107c3d:	5b                   	pop    %ebx
+80107c3e:	5e                   	pop    %esi
+80107c3f:	5f                   	pop    %edi
+80107c40:	5d                   	pop    %ebp
+80107c41:	c3                   	ret    
diff -urN main/kernel.sym xv6-public/kernel.sym
--- main/kernel.sym	2022-09-26 21:21:11.926241000 +0530
+++ xv6-public/kernel.sym	2022-10-31 22:34:09.762270500 +0530
@@ -1,7 +1,7 @@
 80100000 .text
-80107320 .rodata
-80108000 .data
-8010a520 .bss
+80107c60 .rodata
+80109000 .data
+8010b520 .bss
 00000000 .debug_line
 00000000 .debug_info
 00000000 .debug_abbrev
@@ -12,11 +12,11 @@
 00000000 .comment
 00000000 bio.c
 00000000 console.c
-8010a520 cons
-8010a558 panicked
+8010b520 cons
+8010b558 panicked
 80100410 consputc
 80100580 printint
-80107390 digits.1540
+80107cd0 digits.1551
 00000000 exec.c
 00000000 file.c
 00000000 fs.c
@@ -27,497 +27,513 @@
 80101c60 namex
 00000000 ide.c
 80101f20 idestart
-8010a580 idelock
-8010a560 havedisk1
-8010a564 idequeue
+8010b580 idelock
+8010b560 havedisk1
+8010b564 idequeue
 00000000 ioapic.c
 00000000 kalloc.c
 00000000 kbd.c
-8010a5b4 shift.1380
-801076c0 shiftcode
-801075c0 togglecode
-801075a0 charcode.1381
-80108200 normalmap
-80108100 shiftmap
-80108000 ctlmap
+8010b5b4 shift.1391
+80108000 shiftcode
+80107f00 togglecode
+80107ee0 charcode.1392
+80109200 normalmap
+80109100 shiftmap
+80109000 ctlmap
 00000000 lapic.c
 00000000 log.c
-80102a00 install_trans
-80102aa0 write_head
+80102a80 install_trans
+80102b20 write_head
 00000000 main.c
-80102e40 mpmain
-80102e80 mpenter
+80102ec0 mpmain
+80102f00 mpenter
 00000000 mp.c
-80102fc0 mpsearch1
+80103040 mpsearch1
 00000000 picirq.c
 00000000 pipe.c
 00000000 proc.c
-80103600 allocproc
-8010a000 first.1582
-8010a5b8 initproc
-80107980 states.1608
+80103680 allocproc
+8010b000 first.1777
+801037a0 int_to_string.part.1
+8010b5c0 initproc
+801083d4 states.1803
 00000000 sleeplock.c
 00000000 spinlock.c
 00000000 string.c
 00000000 syscall.c
-80107a00 syscalls
+80108460 syscalls
 00000000 sysfile.c
-80104be0 create
-80104d80 argfd.constprop.0
+801054c0 create
+80105660 argfd.constprop.0
 00000000 sysproc.c
 00000000 trap.c
 00000000 uart.c
-80105de0 uartgetc
-8010a5bc uart
-80105e10 uartputc.part.0
+801066a0 uartgetc
+8010b5c4 uart
+801066d0 uartputc.part.0
 00000000 vm.c
-801069e0 walkpgdir
-80106a60 mappages
-80106af0 deallocuvm.part.0
-8010a420 kmap
+801072a0 walkpgdir
+80107320 deallocuvm.part.0
+8010b420 kmap
+80107450 mappages
 80100270 consoleread
-8010692f vector242
-80106386 vector119
+801071ef vector242
+80106c46 vector119
 8010000c entry
-80106266 vector87
-8010625d vector86
-80104970 safestrcpy
-80104f20 sys_close
-8010699b vector251
-8010628a vector91
-80106080 vector33
-8010656f vector162
-80103d30 yield
-80112680 log
-80112640 kmem
-801067d3 vector213
-80106323 vector108
-80105e60 uartinit
-801060da vector43
-80102750 lapiceoi
-80106593 vector165
-80106683 vector185
+80106b26 vector87
+80106b1d vector86
+80105250 safestrcpy
+80105800 sys_close
+8010725b vector251
+80106b4a vector91
+80106940 vector33
+80106e2f vector162
+80104700 yield
+801136a0 log
+80113660 kmem
+80107093 vector213
+80106be3 vector108
+80106720 uartinit
+8010699a vector43
+801027d0 lapiceoi
+80106e53 vector165
+80106f43 vector185
 80102220 ioapicinit
-80106362 vector115
+80106c22 vector115
 80100f60 fileread
-801063a1 vector122
-80105840 sys_sbrk
-80112760 ioapicid
-801042e0 thread_exit
-80106527 vector156
-80106953 vector245
-80112634 ioapic
-801066b3 vector189
-80105fa4 vector7
-8010617c vector61
-8010602f vector24
-8010633e vector111
-80106737 vector200
-801061b2 vector67
-8010644f vector138
-801061f1 vector74
-80103b40 sched
-80104840 memmove
-80106158 vector57
-80104b80 syscall
-801067df vector214
-801062d2 vector99
-801037c0 cpuid
+80106c61 vector122
+80106120 sys_sbrk
+80113780 ioapicid
+80103bf0 proc_read
+80106de7 vector156
+80107213 vector245
+80113654 ioapic
+80106f73 vector189
+80106864 vector7
+80106a3c vector61
+801068ef vector24
+80106bfe vector111
+80106ff7 vector200
+80106a72 vector67
+80106d0f vector138
+80106ab1 vector74
+801042c0 sched
+80105120 memmove
+80106a18 vector57
+80105460 syscall
+8010709f vector214
+80106b92 vector99
+80103b00 cpuid
 80101a60 writei
-80106473 vector141
-801057c0 sys_fork
-8010b5c0 bcache
-801065e7 vector172
-80106923 vector241
-80104560 getcallerpcs
-80105450 sys_mkdir
-801069b3 vector253
-80105f80 vector3
-80105f77 vector2
+80106d33 vector141
+801060a0 sys_fork
+8010c5e0 bcache
+80106ea7 vector172
+801071e3 vector241
+80104e40 getcallerpcs
+80105d30 sys_mkdir
+80107273 vector253
+80106840 vector3
+80106837 vector2
 80101b90 namecmp
-8010687b vector227
-801067af vector210
-80104b40 argstr
-80106857 vector224
-801060c8 vector41
+8010713b vector227
+8010706f vector210
+80105420 argstr
+80107117 vector224
+80106988 vector41
 80100660 cprintf
 80100df0 filedup
 80101ee0 namei
-80106014 vector21
+801068d4 vector21
 80100040 binit
-80106623 vector177
-8010637d vector118
-801061cd vector70
-801061c4 vector69
-801068f3 vector237
-80106197 vector64
-8010604a vector27
-80106407 vector132
-8010668f vector186
-80104e40 sys_read
-80106803 vector217
-801049e0 fetchint
-80107070 setupkvm
-801048a0 memcpy
-80106ff0 freevm
-80105f6e vector1
-8010662f vector178
-801060ad vector38
+80106ee3 vector177
+80106c3d vector118
+80106a8d vector70
+801168a0 sleeping_channel_lock
+80106a84 vector69
+801071b3 vector237
+80106a57 vector64
+8010690a vector27
+80106cc7 vector132
+8010b5c8 sleeping_channel_count
+80106f4f vector186
+80105720 sys_read
+801070c3 vector217
+801052c0 fetchint
+801079a0 setupkvm
+80105180 memcpy
+80107920 freevm
+8010682e vector1
+80106eef vector178
+8010696d vector38
+8010b5bc swap_in_process_exists
 80102310 kfree
-801068ff vector238
-80103740 mycpu
+801071bf vector238
+80103a80 mycpu
 801017b0 iput
-80106413 vector133
-801061e8 vector73
-80106497 vector144
-801069bf vector254
+80106cd3 vector133
+80106aa8 vector73
+80106d57 vector144
+8010727f vector254
 80101440 readsb
-8010a004 nextpid
-801062e4 vector101
-801067bb vector211
-80103040 mpinit
-801065ff vector174
-8010693b vector243
+8010b004 nextpid
+80106ba4 vector101
+8010707b vector211
+801030c0 mpinit
+80106ebf vector174
+801071fb vector243
 80100d60 fileinit
-80104540 initlock
-801063d7 vector128
-80107270 copyout
-80106230 vector81
-80103d80 sleep
-80102770 microdelay
-80105fd2 vector13
-80106122 vector51
-80105fe9 vector16
-8010ff20 input
-80106917 vector240
-8010613d vector54
-80106002 vector19
-80106293 vector92
-80106947 vector244
+80104e20 initlock
+80106c97 vector128
+80107bb0 copyout
+80106af0 vector81
+80104750 sleep
+801027f0 microdelay
+80106892 vector13
+801069e2 vector51
+801068a9 vector16
+80110f40 input
+801071d7 vector240
+801069fd vector54
+801068c2 vector19
+80116000 swap_in_lock
+80106b53 vector92
+80107207 vector244
 80101930 stati
-80106467 vector140
-801057f0 sys_kill
-801060ec vector45
-8010621e vector79
-80103350 pipeclose
-80106893 vector229
-8010653f vector158
-80104f70 sys_fstat
+80106d27 vector140
+801060d0 sys_kill
+801069ac vector45
+80106ade vector79
+801038d0 rpop2
+801033d0 pipeclose
+80107153 vector229
+80106dff vector158
+80105850 sys_fstat
 80100600 consolewrite
-801060b6 vector39
-801065b7 vector168
-80105970 sys_thread_create
-80102c10 end_op
-80106092 vector35
-80106350 vector113
-801023a0 freerange
-801063bc vector125
-80106e90 allocuvm
-80105a97 trapret
-801067f7 vector216
-8010618e vector63
-80106041 vector26
-801066e3 vector193
-80102630 lapicinit
-80106707 vector196
-801067a3 vector209
-80105f89 vector4
-801065cf vector170
-8010a5c0 stack
-80106437 vector136
-80105fbd vector10
-8010677f vector206
+80106976 vector39
+80106e77 vector168
+80102c90 end_op
+80106952 vector35
+80106c10 vector113
+80102420 freerange
+80113d40 rqueue
+80103c50 proc_open
+80106c7c vector125
+80107750 allocuvm
+801062e7 trapret
+80104380 swap_out_process_function
+801070b7 vector216
+80106a4e vector63
+80106901 vector26
+80106fa3 vector193
+801026b0 lapicinit
+80106fc7 vector196
+80107063 vector209
+80106849 vector4
+80106e8f vector170
+8010b5d0 stack
+80106cf7 vector136
+8010687d vector10
+8010703f vector206
 80101760 iunlock
-80105890 sys_sleep
-801069cb vector255
-80106653 vector181
-8010616a vector59
-80106254 vector85
-8010624b vector84
-8010666b vector183
-8010654b vector159
-801067c7 vector212
-80104fc0 sys_link
-801060fe vector47
-80106887 vector228
-801060d1 vector42
-80106359 vector114
-80107230 uva2ka
-8010660b vector175
-8010648b vector143
+80106170 sys_sleep
+8010728b vector255
+80106f13 vector181
+80106a2a vector59
+80104960 swap_in_process_function
+80106b14 vector85
+80106b0b vector84
+80106f2b vector183
+80106e0b vector159
+80107087 vector212
+801058a0 sys_link
+801069be vector47
+80107147 vector228
+80106991 vector42
+80106c19 vector114
+80103b80 proc_close
+80107b70 uva2ka
+80106ecb vector175
+80106d4b vector143
 80100d80 filealloc
-80103f30 wakeup
-801063ef vector130
-8010695f vector246
-80105fb4 vector9
-8010647f vector142
-801062db vector100
-80106743 vector201
-80107110 clearpteu
-801037e0 myproc
-80105ab0 tvinit
-80106173 vector60
-80106026 vector23
+80104900 wakeup
+80106caf vector130
+8010721f vector246
+80106874 vector9
+80106d3f vector142
+80106b9b vector100
+80107003 vector201
+80107a40 clearpteu
+80103e50 myproc
+801063b0 tvinit
+80106a33 vector60
+801068e6 vector23
 80101650 idup
-801068e7 vector236
-80102610 kbdintr
-801052f0 sys_open
-801068ab vector231
-801061a9 vector66
-8010605c vector29
+801071a7 vector236
+80102690 kbdintr
+80105bd0 sys_open
+8010716b vector231
+80106a69 vector66
+8010691c vector29
 80101960 readi
-8010642b vector135
+80106ceb vector135
 80100810 consoleintr
-80103f90 kill
-8010620c vector77
+80104b30 kill
+80106acc vector77
 80101510 ialloc
-80106647 vector180
-801155a4 kpgdir
-80106797 vector208
-80102810 cmostime
-80105f50 uartintr
-801062c9 vector98
-801062c0 vector97
-80106617 vector176
-801066ef vector194
-80106077 vector32
-801155a8 end
-8010672b vector199
-801063fb vector131
-801069a7 vector252
+80106f07 vector180
+801168d4 kpgdir
+80107057 vector208
+80102890 cmostime
+80106810 uartintr
+80103b20 proc_write
+80106b89 vector98
+80106b80 vector97
+80106ed7 vector176
+80106faf vector194
+80106937 vector32
+801168dc end
+80106feb vector199
+80106cbb vector131
+80107267 vector252
 80100ff0 filewrite
-80105f65 vector0
-80104a90 argint
+80106825 vector0
+80105370 argint
 80100a10 exec
-801064a3 vector145
-80104eb0 sys_write
-80104740 release
-80104a20 fetchstr
-8010631a vector107
-801060bf vector40
-80103e40 wait
-801062ed vector102
-80109000 entrypgdir
+80106d63 vector145
+80105790 sys_write
+80105020 release
+80105300 fetchstr
+80106bda vector107
+8010697f vector40
+80104810 wait
+80106bad vector102
+8010a000 entrypgdir
 0010000c _start
-8010614f vector56
-801061bb vector68
-80105f9b vector6
-8010a48c _binary_initcode_end
+80106a0f vector56
+80106a7b vector68
+8010685b vector6
+8010b48c _binary_initcode_end
 80100000 multiboot_header
-801063e3 vector129
-80103aa0 scheduler
+80106ca3 vector129
+80104170 scheduler
 80101bb0 dirlookup
-80106713 vector197
+80106fd3 vector197
 80100e40 fileclose
-80102ba0 begin_op
-801064f7 vector152
-801070f0 kvmalloc
-8010689f vector230
-801048b0 strncmp
-801060a4 vector37
-80106773 vector205
-80106563 vector161
-80114d60 tickslock
-801033f0 pipewrite
-80104910 strncpy
-801061d6 vector71
-80107140 copyuvm
-8010ffc0 ftable
-80106557 vector160
-80104ae0 argptr
-801067eb vector215
-80106533 vector157
-80104dd0 sys_dup
-80106347 vector112
+80102c20 begin_op
+80106db7 vector152
+80107a20 kvmalloc
+8010715f vector230
+80105190 strncmp
+80106964 vector37
+80107033 vector205
+80106e23 vector161
+80116040 tickslock
+80103470 pipewrite
+801051f0 strncpy
+80106a96 vector71
+80107a70 copyuvm
+80110fe0 ftable
+80106e17 vector160
+801053c0 argptr
+801070ab vector215
+80106df3 vector157
+801056b0 sys_dup
+80106c07 vector112
 80100390 panic
-801036d0 forkret
-8010665f vector182
-80105fcb vector12
-801047e0 memcmp
-80102530 kbdgetc
-8010632c vector109
-8010600b vector20
-80103980 fork
-80106134 vector53
-80105ff9 vector18
+80103750 forkret
+80106f1f vector182
+8010688b vector12
+801050c0 memcmp
+801025b0 kbdgetc
+80106bec vector109
+801068cb vector20
+80104050 fork
+801069f4 vector53
+801068b9 vector18
 0000008a _binary_entryother_size
-80112780 cpus
-801044b0 releasesleep
-801062ae vector95
-80104650 holding
-801109c0 sb
-80104680 acquire
-8010686f vector226
+801137a0 cpus
+80104d90 releasesleep
+80106b6e vector95
+80104f30 holding
+801119e0 sb
+80104f60 acquire
+8010712f vector226
 80101f00 nameiparent
-80106110 vector49
-801060e3 vector44
-8011267c lapic
-80106215 vector78
-80105a7f alltraps
-801065f3 vector173
-80106374 vector117
-80106239 vector82
-8010683f vector222
-80105fad vector8
-801064d3 vector149
+801069d0 vector49
+801069a3 vector44
+8011369c lapic
+80106ad5 vector78
+801062cf alltraps
+80106eb3 vector173
+80106c34 vector117
+80106af9 vector82
+801070ff vector222
+801039c0 rpush2
+8010686d vector8
+80106d93 vector149
 801015d0 iupdate
-80108000 data
-80104790 memset
-801068b7 vector232
-80102ea0 main
-80106c20 switchkvm
-80106311 vector106
-80106827 vector220
-80106281 vector90
-8010657b vector163
-801068cf vector234
-80102d70 log_write
-80104450 acquiresleep
-80105110 sys_unlink
-80106185 vector62
-80106038 vector25
-8010671f vector198
-8010638f vector120
-8010a48c _binary_entryother_start
-801023f0 kinit1
-80106119 vector50
-80105fe0 vector15
-801064eb vector151
-80106242 vector83
-80106278 vector89
-8010626f vector88
-80105b60 trap
-80105940 sys_uptime
-8010663b vector179
-80106089 vector34
-801060f5 vector46
-8010641f vector134
-8010684b vector223
-80114da0 idt
-8010680f vector218
-80103720 pinit
-80106fc0 deallocuvm
-80106863 vector225
-80102730 lapicid
-8010669b vector187
-80103900 growproc
-801044f0 holdingsleep
-80112d00 ncpu
-80106065 vector30
-80103810 userinit
+80109000 data
+80105070 memset
+80107177 vector232
+80102f20 main
+801074e0 switchkvm
+80113e80 rqueue2
+80106bd1 vector106
+80106300 handlePageFault
+801070e7 vector220
+80106b41 vector90
+80106e3b vector163
+8010718f vector234
+80102df0 log_write
+80104d30 acquiresleep
+801059f0 sys_unlink
+80106a45 vector62
+801068f8 vector25
+80106fdf vector198
+80106c4f vector120
+8010b48c _binary_entryother_start
+80104c70 create_kernel_process
+80102470 kinit1
+801069d9 vector50
+801068a0 vector15
+80106dab vector151
+80106b02 vector83
+80106b38 vector89
+80106b2f vector88
+80103950 rpush
+80106460 trap
+80106220 sys_uptime
+80106efb vector179
+80106949 vector34
+801069b5 vector46
+80106cdf vector134
+8010710b vector223
+80116080 idt
+801070cf vector218
+80103a30 pinit
+801078f0 deallocuvm
+80107123 vector225
+801027b0 lapicid
+80106f5b vector187
+80103fd0 growproc
+80104dd0 holdingsleep
+80113d20 ncpu
+80106925 vector30
+80103e80 userinit
 801000d0 bread
-801063ce vector127
-80103500 piperead
-801155a0 ticks
-801066d7 vector192
-8010659f vector166
+80106c8e vector127
+80103580 piperead
+80116880 ticks
+80106f97 vector192
+80106e5f vector166
 801009c0 consoleinit
-80106203 vector76
-801061fa vector75
+80106ac3 vector76
+80106aba vector75
 80102080 ideintr
-801066fb vector195
-801064df vector150
-80106161 vector58
-80106977 vector248
-801063aa vector123
-801062b7 vector96
-8010606e vector31
-8010675b vector203
-8010645b vector139
-80106503 vector153
-80106587 vector164
-80104010 procdump
-80106398 vector121
-80105f20 uartputc
-80105f92 vector5
-801065ab vector167
-8010651b vector155
-80106983 vector249
+80106fbb vector195
+80106d9f vector150
+80106a21 vector58
+80107237 vector248
+80106c6a vector123
+80106b77 vector96
+8010692e vector31
+8010701b vector203
+80106d1b vector139
+80106dc3 vector153
+80106e47 vector164
+80104bb0 procdump
+80106c58 vector121
+801067e0 uartputc
+80106852 vector5
+80106e6b vector167
+80106ddb vector155
+80107243 vector249
 801001e0 brelse
-8010698f vector250
-801063b3 vector124
-80106335 vector110
-80106767 vector204
+80103820 int_to_string
+8010724f vector250
+80106c73 vector124
+80106bf5 vector110
+80107027 vector204
 80101680 ilock
-801055f0 sys_exec
-80106443 vector137
-8010a460 _binary_initcode_start
-801049cb swtch
-8010696b vector247
-8010601d vector22
-8010674f vector202
-80106b90 seginit
+80105ed0 sys_exec
+80106d03 vector137
+8010b460 _binary_initcode_start
+801052ab swtch
+8010722b vector247
+801068dd vector22
+8010700f vector202
+801073c0 seginit
 80101910 iunlockput
-801061df vector72
-80106146 vector55
-801063c5 vector126
-801061a0 vector65
-80106053 vector28
-8010a516 _binary_entryother_end
-801065c3 vector169
+80106a9f vector72
+80106a06 vector55
+80106c85 vector126
+80106a60 vector65
+80106913 vector28
+8010b516 _binary_entryother_end
+80106e83 vector169
 801001a0 bwrite
-801068c3 vector233
-80105b30 idtinit
-80103c00 exit
-801057e0 sys_wait
-801057d0 sys_exit
+80107183 vector233
+80106430 idtinit
+801045d0 exit
+801060c0 sys_wait
+801060b0 sys_exit
 80101e20 dirlink
 0000002c _binary_initcode_size
-801064bb vector147
-80104410 initsleeplock
+80106d7b vector147
+80104cf0 initsleeplock
 80102000 ideinit
-80106dd0 loaduvm
-801062ff vector104
-8010636b vector116
-80112d20 ptable
+801168d8 sleeping_channel
+80107690 loaduvm
+80106bbf vector104
+80106c2b vector116
+80113fc0 ptable
 801022d0 ioapicenable
-801045f0 popcli
-8010a008 vectors
-8010612b vector52
-80105ff2 vector17
-80106677 vector184
-801049b0 strlen
-801056e0 sys_pipe
+80104ed0 popcli
+8010b008 vectors
+801069eb vector52
+801068b2 vector17
+80106f37 vector184
+80105290 strlen
+80105fc0 sys_pipe
 80101480 iinit
-80103220 picinit
-8010678b vector207
-80106d50 inituvm
-801066bf vector190
-801059c0 sys_thread_join
-8010690b vector239
-801062a5 vector94
-8010629c vector93
-80102b00 initlog
-801066a7 vector188
-801040d0 thread_create
-80106107 vector48
+801032a0 picinit
+8010704b vector207
+80107610 inituvm
+80106f7f vector190
+801071cb vector239
+80106b65 vector94
+80106b5c vector93
+80102b80 initlog
+80106f67 vector188
+801069c7 vector48
 80102120 iderw
-801059d0 sys_thread_exit
-8010681b vector219
-801064c7 vector148
-80106833 vector221
-801024c0 kalloc
-80110960 devsw
-80105830 sys_getpid
-801059e0 sys_draw
-80106227 vector80
-801065db vector171
-8010650f vector154
-8010609b vector36
-80103240 pipealloc
-801068db vector235
-80106308 vector105
-80105540 sys_chdir
-801109e0 icache
-801064af vector146
-801066cb vector191
-801062f6 vector103
-80104200 thread_join
-801054b0 sys_mknod
-80102780 lapicstartap
-80106c40 switchuvm
-801045b0 pushcli
-80102460 kinit2
-80105fc4 vector11
-80105fd9 vector14
+801070db vector219
+80106d87 vector148
+801070f3 vector221
+80102540 kalloc
+80111980 devsw
+80106110 sys_getpid
+80106250 sys_draw
+80103850 rpop
+80106ae7 vector80
+80106e9b vector171
+80106dcf vector154
+8010695b vector36
+801032c0 pipealloc
+8010719b vector235
+80106bc8 vector105
+80105e20 sys_chdir
+80111a00 icache
+80106d6f vector146
+80106f8b vector191
+80106bb6 vector103
+8010b5b8 swap_out_process_exists
+80105d90 sys_mknod
+80102800 lapicstartap
+80107500 switchuvm
+80104e90 pushcli
+801024e0 kinit2
+80106884 vector11
+80106899 vector14
 80100f10 filestat
Binary files main/_kill and xv6-public/_kill differ
diff -urN main/kill.asm xv6-public/kill.asm
--- main/kill.asm	2022-09-26 21:21:16.080318000 +0530
+++ xv6-public/kill.asm	2022-10-31 22:34:16.765770873 +0530
@@ -51,9 +51,9 @@
     printf(2, "usage: kill pid...\n");
   49:	50                   	push   %eax
   4a:	50                   	push   %eax
-  4b:	68 78 07 00 00       	push   $0x778
+  4b:	68 58 07 00 00       	push   $0x758
   50:	6a 02                	push   $0x2
-  52:	e8 c9 03 00 00       	call   420 <printf>
+  52:	e8 a9 03 00 00       	call   400 <printf>
     exit();
   57:	e8 56 02 00 00       	call   2b2 <exit>
   5c:	66 90                	xchg   %ax,%ax
@@ -577,614 +577,593 @@
  34f:	cd 40                	int    $0x40
  351:	c3                   	ret    
 
-00000352 <thread_create>:
-SYSCALL(thread_create)
+00000352 <draw>:
+SYSCALL(draw)
  352:	b8 16 00 00 00       	mov    $0x16,%eax
  357:	cd 40                	int    $0x40
  359:	c3                   	ret    
+ 35a:	66 90                	xchg   %ax,%ax
+ 35c:	66 90                	xchg   %ax,%ax
+ 35e:	66 90                	xchg   %ax,%ax
 
-0000035a <thread_join>:
-SYSCALL(thread_join)
- 35a:	b8 18 00 00 00       	mov    $0x18,%eax
- 35f:	cd 40                	int    $0x40
- 361:	c3                   	ret    
-
-00000362 <thread_exit>:
-SYSCALL(thread_exit)
- 362:	b8 17 00 00 00       	mov    $0x17,%eax
- 367:	cd 40                	int    $0x40
- 369:	c3                   	ret    
-
-0000036a <draw>:
- 36a:	b8 19 00 00 00       	mov    $0x19,%eax
- 36f:	cd 40                	int    $0x40
- 371:	c3                   	ret    
- 372:	66 90                	xchg   %ax,%ax
- 374:	66 90                	xchg   %ax,%ax
- 376:	66 90                	xchg   %ax,%ax
- 378:	66 90                	xchg   %ax,%ax
- 37a:	66 90                	xchg   %ax,%ax
- 37c:	66 90                	xchg   %ax,%ax
- 37e:	66 90                	xchg   %ax,%ax
-
-00000380 <printint>:
+00000360 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 380:	55                   	push   %ebp
- 381:	89 e5                	mov    %esp,%ebp
- 383:	57                   	push   %edi
- 384:	56                   	push   %esi
- 385:	53                   	push   %ebx
- 386:	83 ec 3c             	sub    $0x3c,%esp
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	57                   	push   %edi
+ 364:	56                   	push   %esi
+ 365:	53                   	push   %ebx
+ 366:	83 ec 3c             	sub    $0x3c,%esp
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 389:	85 d2                	test   %edx,%edx
+ 369:	85 d2                	test   %edx,%edx
 {
- 38b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 36b:	89 45 c0             	mov    %eax,-0x40(%ebp)
     neg = 1;
     x = -xx;
- 38e:	89 d0                	mov    %edx,%eax
+ 36e:	89 d0                	mov    %edx,%eax
   if(sgn && xx < 0){
- 390:	79 76                	jns    408 <printint+0x88>
- 392:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 396:	74 70                	je     408 <printint+0x88>
+ 370:	79 76                	jns    3e8 <printint+0x88>
+ 372:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 376:	74 70                	je     3e8 <printint+0x88>
     x = -xx;
- 398:	f7 d8                	neg    %eax
+ 378:	f7 d8                	neg    %eax
     neg = 1;
- 39a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+ 37a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
   } else {
     x = xx;
   }
 
   i = 0;
- 3a1:	31 f6                	xor    %esi,%esi
- 3a3:	8d 5d d7             	lea    -0x29(%ebp),%ebx
- 3a6:	eb 0a                	jmp    3b2 <printint+0x32>
- 3a8:	90                   	nop
- 3a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 381:	31 f6                	xor    %esi,%esi
+ 383:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 386:	eb 0a                	jmp    392 <printint+0x32>
+ 388:	90                   	nop
+ 389:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   do{
     buf[i++] = digits[x % base];
- 3b0:	89 fe                	mov    %edi,%esi
- 3b2:	31 d2                	xor    %edx,%edx
- 3b4:	8d 7e 01             	lea    0x1(%esi),%edi
- 3b7:	f7 f1                	div    %ecx
- 3b9:	0f b6 92 94 07 00 00 	movzbl 0x794(%edx),%edx
+ 390:	89 fe                	mov    %edi,%esi
+ 392:	31 d2                	xor    %edx,%edx
+ 394:	8d 7e 01             	lea    0x1(%esi),%edi
+ 397:	f7 f1                	div    %ecx
+ 399:	0f b6 92 74 07 00 00 	movzbl 0x774(%edx),%edx
   }while((x /= base) != 0);
- 3c0:	85 c0                	test   %eax,%eax
+ 3a0:	85 c0                	test   %eax,%eax
     buf[i++] = digits[x % base];
- 3c2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+ 3a2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
   }while((x /= base) != 0);
- 3c5:	75 e9                	jne    3b0 <printint+0x30>
+ 3a5:	75 e9                	jne    390 <printint+0x30>
   if(neg)
- 3c7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
- 3ca:	85 c0                	test   %eax,%eax
- 3cc:	74 08                	je     3d6 <printint+0x56>
+ 3a7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 3aa:	85 c0                	test   %eax,%eax
+ 3ac:	74 08                	je     3b6 <printint+0x56>
     buf[i++] = '-';
- 3ce:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
- 3d3:	8d 7e 02             	lea    0x2(%esi),%edi
- 3d6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
- 3da:	8b 7d c0             	mov    -0x40(%ebp),%edi
- 3dd:	8d 76 00             	lea    0x0(%esi),%esi
- 3e0:	0f b6 06             	movzbl (%esi),%eax
+ 3ae:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 3b3:	8d 7e 02             	lea    0x2(%esi),%edi
+ 3b6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 3ba:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 3bd:	8d 76 00             	lea    0x0(%esi),%esi
+ 3c0:	0f b6 06             	movzbl (%esi),%eax
   write(fd, &c, 1);
- 3e3:	83 ec 04             	sub    $0x4,%esp
- 3e6:	83 ee 01             	sub    $0x1,%esi
- 3e9:	6a 01                	push   $0x1
- 3eb:	53                   	push   %ebx
- 3ec:	57                   	push   %edi
- 3ed:	88 45 d7             	mov    %al,-0x29(%ebp)
- 3f0:	e8 dd fe ff ff       	call   2d2 <write>
+ 3c3:	83 ec 04             	sub    $0x4,%esp
+ 3c6:	83 ee 01             	sub    $0x1,%esi
+ 3c9:	6a 01                	push   $0x1
+ 3cb:	53                   	push   %ebx
+ 3cc:	57                   	push   %edi
+ 3cd:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 3d0:	e8 fd fe ff ff       	call   2d2 <write>
 
   while(--i >= 0)
- 3f5:	83 c4 10             	add    $0x10,%esp
- 3f8:	39 de                	cmp    %ebx,%esi
- 3fa:	75 e4                	jne    3e0 <printint+0x60>
+ 3d5:	83 c4 10             	add    $0x10,%esp
+ 3d8:	39 de                	cmp    %ebx,%esi
+ 3da:	75 e4                	jne    3c0 <printint+0x60>
     putc(fd, buf[i]);
 }
- 3fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 3ff:	5b                   	pop    %ebx
- 400:	5e                   	pop    %esi
- 401:	5f                   	pop    %edi
- 402:	5d                   	pop    %ebp
- 403:	c3                   	ret    
- 404:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 3dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3df:	5b                   	pop    %ebx
+ 3e0:	5e                   	pop    %esi
+ 3e1:	5f                   	pop    %edi
+ 3e2:	5d                   	pop    %ebp
+ 3e3:	c3                   	ret    
+ 3e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 408:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
- 40f:	eb 90                	jmp    3a1 <printint+0x21>
- 411:	eb 0d                	jmp    420 <printf>
- 413:	90                   	nop
- 414:	90                   	nop
- 415:	90                   	nop
- 416:	90                   	nop
- 417:	90                   	nop
- 418:	90                   	nop
- 419:	90                   	nop
- 41a:	90                   	nop
- 41b:	90                   	nop
- 41c:	90                   	nop
- 41d:	90                   	nop
- 41e:	90                   	nop
- 41f:	90                   	nop
+ 3e8:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 3ef:	eb 90                	jmp    381 <printint+0x21>
+ 3f1:	eb 0d                	jmp    400 <printf>
+ 3f3:	90                   	nop
+ 3f4:	90                   	nop
+ 3f5:	90                   	nop
+ 3f6:	90                   	nop
+ 3f7:	90                   	nop
+ 3f8:	90                   	nop
+ 3f9:	90                   	nop
+ 3fa:	90                   	nop
+ 3fb:	90                   	nop
+ 3fc:	90                   	nop
+ 3fd:	90                   	nop
+ 3fe:	90                   	nop
+ 3ff:	90                   	nop
 
-00000420 <printf>:
+00000400 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 420:	55                   	push   %ebp
- 421:	89 e5                	mov    %esp,%ebp
- 423:	57                   	push   %edi
- 424:	56                   	push   %esi
- 425:	53                   	push   %ebx
- 426:	83 ec 2c             	sub    $0x2c,%esp
+ 400:	55                   	push   %ebp
+ 401:	89 e5                	mov    %esp,%ebp
+ 403:	57                   	push   %edi
+ 404:	56                   	push   %esi
+ 405:	53                   	push   %ebx
+ 406:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 429:	8b 75 0c             	mov    0xc(%ebp),%esi
- 42c:	0f b6 1e             	movzbl (%esi),%ebx
- 42f:	84 db                	test   %bl,%bl
- 431:	0f 84 b3 00 00 00    	je     4ea <printf+0xca>
+ 409:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 40c:	0f b6 1e             	movzbl (%esi),%ebx
+ 40f:	84 db                	test   %bl,%bl
+ 411:	0f 84 b3 00 00 00    	je     4ca <printf+0xca>
   ap = (uint*)(void*)&fmt + 1;
- 437:	8d 45 10             	lea    0x10(%ebp),%eax
- 43a:	83 c6 01             	add    $0x1,%esi
+ 417:	8d 45 10             	lea    0x10(%ebp),%eax
+ 41a:	83 c6 01             	add    $0x1,%esi
   state = 0;
- 43d:	31 ff                	xor    %edi,%edi
+ 41d:	31 ff                	xor    %edi,%edi
   ap = (uint*)(void*)&fmt + 1;
- 43f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
- 442:	eb 2f                	jmp    473 <printf+0x53>
- 444:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 41f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 422:	eb 2f                	jmp    453 <printf+0x53>
+ 424:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
- 448:	83 f8 25             	cmp    $0x25,%eax
- 44b:	0f 84 a7 00 00 00    	je     4f8 <printf+0xd8>
+ 428:	83 f8 25             	cmp    $0x25,%eax
+ 42b:	0f 84 a7 00 00 00    	je     4d8 <printf+0xd8>
   write(fd, &c, 1);
- 451:	8d 45 e2             	lea    -0x1e(%ebp),%eax
- 454:	83 ec 04             	sub    $0x4,%esp
- 457:	88 5d e2             	mov    %bl,-0x1e(%ebp)
- 45a:	6a 01                	push   $0x1
- 45c:	50                   	push   %eax
- 45d:	ff 75 08             	pushl  0x8(%ebp)
- 460:	e8 6d fe ff ff       	call   2d2 <write>
- 465:	83 c4 10             	add    $0x10,%esp
- 468:	83 c6 01             	add    $0x1,%esi
+ 431:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 434:	83 ec 04             	sub    $0x4,%esp
+ 437:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 43a:	6a 01                	push   $0x1
+ 43c:	50                   	push   %eax
+ 43d:	ff 75 08             	pushl  0x8(%ebp)
+ 440:	e8 8d fe ff ff       	call   2d2 <write>
+ 445:	83 c4 10             	add    $0x10,%esp
+ 448:	83 c6 01             	add    $0x1,%esi
   for(i = 0; fmt[i]; i++){
- 46b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
- 46f:	84 db                	test   %bl,%bl
- 471:	74 77                	je     4ea <printf+0xca>
+ 44b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 44f:	84 db                	test   %bl,%bl
+ 451:	74 77                	je     4ca <printf+0xca>
     if(state == 0){
- 473:	85 ff                	test   %edi,%edi
+ 453:	85 ff                	test   %edi,%edi
     c = fmt[i] & 0xff;
- 475:	0f be cb             	movsbl %bl,%ecx
- 478:	0f b6 c3             	movzbl %bl,%eax
+ 455:	0f be cb             	movsbl %bl,%ecx
+ 458:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
- 47b:	74 cb                	je     448 <printf+0x28>
+ 45b:	74 cb                	je     428 <printf+0x28>
         state = '%';
       } else {
         putc(fd, c);
       }
     } else if(state == '%'){
- 47d:	83 ff 25             	cmp    $0x25,%edi
- 480:	75 e6                	jne    468 <printf+0x48>
+ 45d:	83 ff 25             	cmp    $0x25,%edi
+ 460:	75 e6                	jne    448 <printf+0x48>
       if(c == 'd'){
- 482:	83 f8 64             	cmp    $0x64,%eax
- 485:	0f 84 05 01 00 00    	je     590 <printf+0x170>
+ 462:	83 f8 64             	cmp    $0x64,%eax
+ 465:	0f 84 05 01 00 00    	je     570 <printf+0x170>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 48b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 491:	83 f9 70             	cmp    $0x70,%ecx
- 494:	74 72                	je     508 <printf+0xe8>
+ 46b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 471:	83 f9 70             	cmp    $0x70,%ecx
+ 474:	74 72                	je     4e8 <printf+0xe8>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 496:	83 f8 73             	cmp    $0x73,%eax
- 499:	0f 84 99 00 00 00    	je     538 <printf+0x118>
+ 476:	83 f8 73             	cmp    $0x73,%eax
+ 479:	0f 84 99 00 00 00    	je     518 <printf+0x118>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 49f:	83 f8 63             	cmp    $0x63,%eax
- 4a2:	0f 84 08 01 00 00    	je     5b0 <printf+0x190>
+ 47f:	83 f8 63             	cmp    $0x63,%eax
+ 482:	0f 84 08 01 00 00    	je     590 <printf+0x190>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 4a8:	83 f8 25             	cmp    $0x25,%eax
- 4ab:	0f 84 ef 00 00 00    	je     5a0 <printf+0x180>
+ 488:	83 f8 25             	cmp    $0x25,%eax
+ 48b:	0f 84 ef 00 00 00    	je     580 <printf+0x180>
   write(fd, &c, 1);
- 4b1:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 4b4:	83 ec 04             	sub    $0x4,%esp
- 4b7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 4bb:	6a 01                	push   $0x1
- 4bd:	50                   	push   %eax
- 4be:	ff 75 08             	pushl  0x8(%ebp)
- 4c1:	e8 0c fe ff ff       	call   2d2 <write>
- 4c6:	83 c4 0c             	add    $0xc,%esp
- 4c9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
- 4cc:	88 5d e6             	mov    %bl,-0x1a(%ebp)
- 4cf:	6a 01                	push   $0x1
- 4d1:	50                   	push   %eax
- 4d2:	ff 75 08             	pushl  0x8(%ebp)
- 4d5:	83 c6 01             	add    $0x1,%esi
+ 491:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 494:	83 ec 04             	sub    $0x4,%esp
+ 497:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 49b:	6a 01                	push   $0x1
+ 49d:	50                   	push   %eax
+ 49e:	ff 75 08             	pushl  0x8(%ebp)
+ 4a1:	e8 2c fe ff ff       	call   2d2 <write>
+ 4a6:	83 c4 0c             	add    $0xc,%esp
+ 4a9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 4ac:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 4af:	6a 01                	push   $0x1
+ 4b1:	50                   	push   %eax
+ 4b2:	ff 75 08             	pushl  0x8(%ebp)
+ 4b5:	83 c6 01             	add    $0x1,%esi
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
       }
       state = 0;
- 4d8:	31 ff                	xor    %edi,%edi
+ 4b8:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 4da:	e8 f3 fd ff ff       	call   2d2 <write>
+ 4ba:	e8 13 fe ff ff       	call   2d2 <write>
   for(i = 0; fmt[i]; i++){
- 4df:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 4bf:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
   write(fd, &c, 1);
- 4e3:	83 c4 10             	add    $0x10,%esp
+ 4c3:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 4e6:	84 db                	test   %bl,%bl
- 4e8:	75 89                	jne    473 <printf+0x53>
+ 4c6:	84 db                	test   %bl,%bl
+ 4c8:	75 89                	jne    453 <printf+0x53>
     }
   }
 }
- 4ea:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4ed:	5b                   	pop    %ebx
- 4ee:	5e                   	pop    %esi
- 4ef:	5f                   	pop    %edi
- 4f0:	5d                   	pop    %ebp
- 4f1:	c3                   	ret    
- 4f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 4ca:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4cd:	5b                   	pop    %ebx
+ 4ce:	5e                   	pop    %esi
+ 4cf:	5f                   	pop    %edi
+ 4d0:	5d                   	pop    %ebp
+ 4d1:	c3                   	ret    
+ 4d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         state = '%';
- 4f8:	bf 25 00 00 00       	mov    $0x25,%edi
- 4fd:	e9 66 ff ff ff       	jmp    468 <printf+0x48>
- 502:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 4d8:	bf 25 00 00 00       	mov    $0x25,%edi
+ 4dd:	e9 66 ff ff ff       	jmp    448 <printf+0x48>
+ 4e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 508:	83 ec 0c             	sub    $0xc,%esp
- 50b:	b9 10 00 00 00       	mov    $0x10,%ecx
- 510:	6a 00                	push   $0x0
- 512:	8b 7d d4             	mov    -0x2c(%ebp),%edi
- 515:	8b 45 08             	mov    0x8(%ebp),%eax
- 518:	8b 17                	mov    (%edi),%edx
- 51a:	e8 61 fe ff ff       	call   380 <printint>
+ 4e8:	83 ec 0c             	sub    $0xc,%esp
+ 4eb:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4f0:	6a 00                	push   $0x0
+ 4f2:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 4f5:	8b 45 08             	mov    0x8(%ebp),%eax
+ 4f8:	8b 17                	mov    (%edi),%edx
+ 4fa:	e8 61 fe ff ff       	call   360 <printint>
         ap++;
- 51f:	89 f8                	mov    %edi,%eax
- 521:	83 c4 10             	add    $0x10,%esp
+ 4ff:	89 f8                	mov    %edi,%eax
+ 501:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 524:	31 ff                	xor    %edi,%edi
+ 504:	31 ff                	xor    %edi,%edi
         ap++;
- 526:	83 c0 04             	add    $0x4,%eax
- 529:	89 45 d4             	mov    %eax,-0x2c(%ebp)
- 52c:	e9 37 ff ff ff       	jmp    468 <printf+0x48>
- 531:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 506:	83 c0 04             	add    $0x4,%eax
+ 509:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 50c:	e9 37 ff ff ff       	jmp    448 <printf+0x48>
+ 511:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 538:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 53b:	8b 08                	mov    (%eax),%ecx
+ 518:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 51b:	8b 08                	mov    (%eax),%ecx
         ap++;
- 53d:	83 c0 04             	add    $0x4,%eax
- 540:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 51d:	83 c0 04             	add    $0x4,%eax
+ 520:	89 45 d4             	mov    %eax,-0x2c(%ebp)
         if(s == 0)
- 543:	85 c9                	test   %ecx,%ecx
- 545:	0f 84 8e 00 00 00    	je     5d9 <printf+0x1b9>
+ 523:	85 c9                	test   %ecx,%ecx
+ 525:	0f 84 8e 00 00 00    	je     5b9 <printf+0x1b9>
         while(*s != 0){
- 54b:	0f b6 01             	movzbl (%ecx),%eax
+ 52b:	0f b6 01             	movzbl (%ecx),%eax
       state = 0;
- 54e:	31 ff                	xor    %edi,%edi
+ 52e:	31 ff                	xor    %edi,%edi
         s = (char*)*ap;
- 550:	89 cb                	mov    %ecx,%ebx
+ 530:	89 cb                	mov    %ecx,%ebx
         while(*s != 0){
- 552:	84 c0                	test   %al,%al
- 554:	0f 84 0e ff ff ff    	je     468 <printf+0x48>
- 55a:	89 75 d0             	mov    %esi,-0x30(%ebp)
- 55d:	89 de                	mov    %ebx,%esi
- 55f:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 562:	8d 7d e3             	lea    -0x1d(%ebp),%edi
- 565:	8d 76 00             	lea    0x0(%esi),%esi
+ 532:	84 c0                	test   %al,%al
+ 534:	0f 84 0e ff ff ff    	je     448 <printf+0x48>
+ 53a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 53d:	89 de                	mov    %ebx,%esi
+ 53f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 542:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 545:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 568:	83 ec 04             	sub    $0x4,%esp
+ 548:	83 ec 04             	sub    $0x4,%esp
           s++;
- 56b:	83 c6 01             	add    $0x1,%esi
- 56e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+ 54b:	83 c6 01             	add    $0x1,%esi
+ 54e:	88 45 e3             	mov    %al,-0x1d(%ebp)
   write(fd, &c, 1);
- 571:	6a 01                	push   $0x1
- 573:	57                   	push   %edi
- 574:	53                   	push   %ebx
- 575:	e8 58 fd ff ff       	call   2d2 <write>
+ 551:	6a 01                	push   $0x1
+ 553:	57                   	push   %edi
+ 554:	53                   	push   %ebx
+ 555:	e8 78 fd ff ff       	call   2d2 <write>
         while(*s != 0){
- 57a:	0f b6 06             	movzbl (%esi),%eax
- 57d:	83 c4 10             	add    $0x10,%esp
- 580:	84 c0                	test   %al,%al
- 582:	75 e4                	jne    568 <printf+0x148>
- 584:	8b 75 d0             	mov    -0x30(%ebp),%esi
+ 55a:	0f b6 06             	movzbl (%esi),%eax
+ 55d:	83 c4 10             	add    $0x10,%esp
+ 560:	84 c0                	test   %al,%al
+ 562:	75 e4                	jne    548 <printf+0x148>
+ 564:	8b 75 d0             	mov    -0x30(%ebp),%esi
       state = 0;
- 587:	31 ff                	xor    %edi,%edi
- 589:	e9 da fe ff ff       	jmp    468 <printf+0x48>
- 58e:	66 90                	xchg   %ax,%ax
+ 567:	31 ff                	xor    %edi,%edi
+ 569:	e9 da fe ff ff       	jmp    448 <printf+0x48>
+ 56e:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 10, 1);
- 590:	83 ec 0c             	sub    $0xc,%esp
- 593:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 598:	6a 01                	push   $0x1
- 59a:	e9 73 ff ff ff       	jmp    512 <printf+0xf2>
- 59f:	90                   	nop
+ 570:	83 ec 0c             	sub    $0xc,%esp
+ 573:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 578:	6a 01                	push   $0x1
+ 57a:	e9 73 ff ff ff       	jmp    4f2 <printf+0xf2>
+ 57f:	90                   	nop
   write(fd, &c, 1);
- 5a0:	83 ec 04             	sub    $0x4,%esp
- 5a3:	88 5d e5             	mov    %bl,-0x1b(%ebp)
- 5a6:	8d 45 e5             	lea    -0x1b(%ebp),%eax
- 5a9:	6a 01                	push   $0x1
- 5ab:	e9 21 ff ff ff       	jmp    4d1 <printf+0xb1>
+ 580:	83 ec 04             	sub    $0x4,%esp
+ 583:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 586:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 589:	6a 01                	push   $0x1
+ 58b:	e9 21 ff ff ff       	jmp    4b1 <printf+0xb1>
         putc(fd, *ap);
- 5b0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 590:	8b 7d d4             	mov    -0x2c(%ebp),%edi
   write(fd, &c, 1);
- 5b3:	83 ec 04             	sub    $0x4,%esp
+ 593:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 5b6:	8b 07                	mov    (%edi),%eax
+ 596:	8b 07                	mov    (%edi),%eax
   write(fd, &c, 1);
- 5b8:	6a 01                	push   $0x1
+ 598:	6a 01                	push   $0x1
         ap++;
- 5ba:	83 c7 04             	add    $0x4,%edi
+ 59a:	83 c7 04             	add    $0x4,%edi
         putc(fd, *ap);
- 5bd:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 59d:	88 45 e4             	mov    %al,-0x1c(%ebp)
   write(fd, &c, 1);
- 5c0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
- 5c3:	50                   	push   %eax
- 5c4:	ff 75 08             	pushl  0x8(%ebp)
- 5c7:	e8 06 fd ff ff       	call   2d2 <write>
+ 5a0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 5a3:	50                   	push   %eax
+ 5a4:	ff 75 08             	pushl  0x8(%ebp)
+ 5a7:	e8 26 fd ff ff       	call   2d2 <write>
         ap++;
- 5cc:	89 7d d4             	mov    %edi,-0x2c(%ebp)
- 5cf:	83 c4 10             	add    $0x10,%esp
+ 5ac:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 5af:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 5d2:	31 ff                	xor    %edi,%edi
- 5d4:	e9 8f fe ff ff       	jmp    468 <printf+0x48>
+ 5b2:	31 ff                	xor    %edi,%edi
+ 5b4:	e9 8f fe ff ff       	jmp    448 <printf+0x48>
           s = "(null)";
- 5d9:	bb 8c 07 00 00       	mov    $0x78c,%ebx
+ 5b9:	bb 6c 07 00 00       	mov    $0x76c,%ebx
         while(*s != 0){
- 5de:	b8 28 00 00 00       	mov    $0x28,%eax
- 5e3:	e9 72 ff ff ff       	jmp    55a <printf+0x13a>
- 5e8:	66 90                	xchg   %ax,%ax
- 5ea:	66 90                	xchg   %ax,%ax
- 5ec:	66 90                	xchg   %ax,%ax
- 5ee:	66 90                	xchg   %ax,%ax
+ 5be:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5c3:	e9 72 ff ff ff       	jmp    53a <printf+0x13a>
+ 5c8:	66 90                	xchg   %ax,%ax
+ 5ca:	66 90                	xchg   %ax,%ax
+ 5cc:	66 90                	xchg   %ax,%ax
+ 5ce:	66 90                	xchg   %ax,%ax
 
-000005f0 <free>:
+000005d0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 5f0:	55                   	push   %ebp
+ 5d0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5f1:	a1 40 0a 00 00       	mov    0xa40,%eax
+ 5d1:	a1 20 0a 00 00       	mov    0xa20,%eax
 {
- 5f6:	89 e5                	mov    %esp,%ebp
- 5f8:	57                   	push   %edi
- 5f9:	56                   	push   %esi
- 5fa:	53                   	push   %ebx
- 5fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5d6:	89 e5                	mov    %esp,%ebp
+ 5d8:	57                   	push   %edi
+ 5d9:	56                   	push   %esi
+ 5da:	53                   	push   %ebx
+ 5db:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 5fe:	8d 4b f8             	lea    -0x8(%ebx),%ecx
- 601:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5de:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 5e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 608:	39 c8                	cmp    %ecx,%eax
- 60a:	8b 10                	mov    (%eax),%edx
- 60c:	73 32                	jae    640 <free+0x50>
- 60e:	39 d1                	cmp    %edx,%ecx
- 610:	72 04                	jb     616 <free+0x26>
+ 5e8:	39 c8                	cmp    %ecx,%eax
+ 5ea:	8b 10                	mov    (%eax),%edx
+ 5ec:	73 32                	jae    620 <free+0x50>
+ 5ee:	39 d1                	cmp    %edx,%ecx
+ 5f0:	72 04                	jb     5f6 <free+0x26>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 612:	39 d0                	cmp    %edx,%eax
- 614:	72 32                	jb     648 <free+0x58>
+ 5f2:	39 d0                	cmp    %edx,%eax
+ 5f4:	72 32                	jb     628 <free+0x58>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 616:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 619:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 61c:	39 fa                	cmp    %edi,%edx
- 61e:	74 30                	je     650 <free+0x60>
+ 5f6:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 5f9:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 5fc:	39 fa                	cmp    %edi,%edx
+ 5fe:	74 30                	je     630 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 620:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 600:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 623:	8b 50 04             	mov    0x4(%eax),%edx
- 626:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 629:	39 f1                	cmp    %esi,%ecx
- 62b:	74 3a                	je     667 <free+0x77>
+ 603:	8b 50 04             	mov    0x4(%eax),%edx
+ 606:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 609:	39 f1                	cmp    %esi,%ecx
+ 60b:	74 3a                	je     647 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 62d:	89 08                	mov    %ecx,(%eax)
+ 60d:	89 08                	mov    %ecx,(%eax)
   freep = p;
- 62f:	a3 40 0a 00 00       	mov    %eax,0xa40
+ 60f:	a3 20 0a 00 00       	mov    %eax,0xa20
 }
- 634:	5b                   	pop    %ebx
- 635:	5e                   	pop    %esi
- 636:	5f                   	pop    %edi
- 637:	5d                   	pop    %ebp
- 638:	c3                   	ret    
- 639:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 614:	5b                   	pop    %ebx
+ 615:	5e                   	pop    %esi
+ 616:	5f                   	pop    %edi
+ 617:	5d                   	pop    %ebp
+ 618:	c3                   	ret    
+ 619:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 640:	39 d0                	cmp    %edx,%eax
- 642:	72 04                	jb     648 <free+0x58>
- 644:	39 d1                	cmp    %edx,%ecx
- 646:	72 ce                	jb     616 <free+0x26>
+ 620:	39 d0                	cmp    %edx,%eax
+ 622:	72 04                	jb     628 <free+0x58>
+ 624:	39 d1                	cmp    %edx,%ecx
+ 626:	72 ce                	jb     5f6 <free+0x26>
 {
- 648:	89 d0                	mov    %edx,%eax
- 64a:	eb bc                	jmp    608 <free+0x18>
- 64c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 628:	89 d0                	mov    %edx,%eax
+ 62a:	eb bc                	jmp    5e8 <free+0x18>
+ 62c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     bp->s.size += p->s.ptr->s.size;
- 650:	03 72 04             	add    0x4(%edx),%esi
- 653:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 630:	03 72 04             	add    0x4(%edx),%esi
+ 633:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 656:	8b 10                	mov    (%eax),%edx
- 658:	8b 12                	mov    (%edx),%edx
- 65a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 636:	8b 10                	mov    (%eax),%edx
+ 638:	8b 12                	mov    (%edx),%edx
+ 63a:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 65d:	8b 50 04             	mov    0x4(%eax),%edx
- 660:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 663:	39 f1                	cmp    %esi,%ecx
- 665:	75 c6                	jne    62d <free+0x3d>
+ 63d:	8b 50 04             	mov    0x4(%eax),%edx
+ 640:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 643:	39 f1                	cmp    %esi,%ecx
+ 645:	75 c6                	jne    60d <free+0x3d>
     p->s.size += bp->s.size;
- 667:	03 53 fc             	add    -0x4(%ebx),%edx
+ 647:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 66a:	a3 40 0a 00 00       	mov    %eax,0xa40
+ 64a:	a3 20 0a 00 00       	mov    %eax,0xa20
     p->s.size += bp->s.size;
- 66f:	89 50 04             	mov    %edx,0x4(%eax)
+ 64f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 672:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 675:	89 10                	mov    %edx,(%eax)
+ 652:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 655:	89 10                	mov    %edx,(%eax)
 }
- 677:	5b                   	pop    %ebx
- 678:	5e                   	pop    %esi
- 679:	5f                   	pop    %edi
- 67a:	5d                   	pop    %ebp
- 67b:	c3                   	ret    
- 67c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 657:	5b                   	pop    %ebx
+ 658:	5e                   	pop    %esi
+ 659:	5f                   	pop    %edi
+ 65a:	5d                   	pop    %ebp
+ 65b:	c3                   	ret    
+ 65c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-00000680 <malloc>:
+00000660 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 680:	55                   	push   %ebp
- 681:	89 e5                	mov    %esp,%ebp
- 683:	57                   	push   %edi
- 684:	56                   	push   %esi
- 685:	53                   	push   %ebx
- 686:	83 ec 0c             	sub    $0xc,%esp
+ 660:	55                   	push   %ebp
+ 661:	89 e5                	mov    %esp,%ebp
+ 663:	57                   	push   %edi
+ 664:	56                   	push   %esi
+ 665:	53                   	push   %ebx
+ 666:	83 ec 0c             	sub    $0xc,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 689:	8b 45 08             	mov    0x8(%ebp),%eax
+ 669:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 68c:	8b 15 40 0a 00 00    	mov    0xa40,%edx
+ 66c:	8b 15 20 0a 00 00    	mov    0xa20,%edx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 692:	8d 78 07             	lea    0x7(%eax),%edi
- 695:	c1 ef 03             	shr    $0x3,%edi
- 698:	83 c7 01             	add    $0x1,%edi
+ 672:	8d 78 07             	lea    0x7(%eax),%edi
+ 675:	c1 ef 03             	shr    $0x3,%edi
+ 678:	83 c7 01             	add    $0x1,%edi
   if((prevp = freep) == 0){
- 69b:	85 d2                	test   %edx,%edx
- 69d:	0f 84 9d 00 00 00    	je     740 <malloc+0xc0>
- 6a3:	8b 02                	mov    (%edx),%eax
- 6a5:	8b 48 04             	mov    0x4(%eax),%ecx
+ 67b:	85 d2                	test   %edx,%edx
+ 67d:	0f 84 9d 00 00 00    	je     720 <malloc+0xc0>
+ 683:	8b 02                	mov    (%edx),%eax
+ 685:	8b 48 04             	mov    0x4(%eax),%ecx
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
     if(p->s.size >= nunits){
- 6a8:	39 cf                	cmp    %ecx,%edi
- 6aa:	76 6c                	jbe    718 <malloc+0x98>
- 6ac:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
- 6b2:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 6b7:	0f 43 df             	cmovae %edi,%ebx
+ 688:	39 cf                	cmp    %ecx,%edi
+ 68a:	76 6c                	jbe    6f8 <malloc+0x98>
+ 68c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 692:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 697:	0f 43 df             	cmovae %edi,%ebx
   p = sbrk(nu * sizeof(Header));
- 6ba:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
- 6c1:	eb 0e                	jmp    6d1 <malloc+0x51>
- 6c3:	90                   	nop
- 6c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 69a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 6a1:	eb 0e                	jmp    6b1 <malloc+0x51>
+ 6a3:	90                   	nop
+ 6a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6c8:	8b 02                	mov    (%edx),%eax
+ 6a8:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 6ca:	8b 48 04             	mov    0x4(%eax),%ecx
- 6cd:	39 f9                	cmp    %edi,%ecx
- 6cf:	73 47                	jae    718 <malloc+0x98>
+ 6aa:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6ad:	39 f9                	cmp    %edi,%ecx
+ 6af:	73 47                	jae    6f8 <malloc+0x98>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 6d1:	39 05 40 0a 00 00    	cmp    %eax,0xa40
- 6d7:	89 c2                	mov    %eax,%edx
- 6d9:	75 ed                	jne    6c8 <malloc+0x48>
+ 6b1:	39 05 20 0a 00 00    	cmp    %eax,0xa20
+ 6b7:	89 c2                	mov    %eax,%edx
+ 6b9:	75 ed                	jne    6a8 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 6db:	83 ec 0c             	sub    $0xc,%esp
- 6de:	56                   	push   %esi
- 6df:	e8 56 fc ff ff       	call   33a <sbrk>
+ 6bb:	83 ec 0c             	sub    $0xc,%esp
+ 6be:	56                   	push   %esi
+ 6bf:	e8 76 fc ff ff       	call   33a <sbrk>
   if(p == (char*)-1)
- 6e4:	83 c4 10             	add    $0x10,%esp
- 6e7:	83 f8 ff             	cmp    $0xffffffff,%eax
- 6ea:	74 1c                	je     708 <malloc+0x88>
+ 6c4:	83 c4 10             	add    $0x10,%esp
+ 6c7:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6ca:	74 1c                	je     6e8 <malloc+0x88>
   hp->s.size = nu;
- 6ec:	89 58 04             	mov    %ebx,0x4(%eax)
+ 6cc:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 6ef:	83 ec 0c             	sub    $0xc,%esp
- 6f2:	83 c0 08             	add    $0x8,%eax
- 6f5:	50                   	push   %eax
- 6f6:	e8 f5 fe ff ff       	call   5f0 <free>
+ 6cf:	83 ec 0c             	sub    $0xc,%esp
+ 6d2:	83 c0 08             	add    $0x8,%eax
+ 6d5:	50                   	push   %eax
+ 6d6:	e8 f5 fe ff ff       	call   5d0 <free>
   return freep;
- 6fb:	8b 15 40 0a 00 00    	mov    0xa40,%edx
+ 6db:	8b 15 20 0a 00 00    	mov    0xa20,%edx
       if((p = morecore(nunits)) == 0)
- 701:	83 c4 10             	add    $0x10,%esp
- 704:	85 d2                	test   %edx,%edx
- 706:	75 c0                	jne    6c8 <malloc+0x48>
+ 6e1:	83 c4 10             	add    $0x10,%esp
+ 6e4:	85 d2                	test   %edx,%edx
+ 6e6:	75 c0                	jne    6a8 <malloc+0x48>
         return 0;
   }
 }
- 708:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6e8:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 70b:	31 c0                	xor    %eax,%eax
+ 6eb:	31 c0                	xor    %eax,%eax
 }
- 70d:	5b                   	pop    %ebx
- 70e:	5e                   	pop    %esi
- 70f:	5f                   	pop    %edi
- 710:	5d                   	pop    %ebp
- 711:	c3                   	ret    
- 712:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 6ed:	5b                   	pop    %ebx
+ 6ee:	5e                   	pop    %esi
+ 6ef:	5f                   	pop    %edi
+ 6f0:	5d                   	pop    %ebp
+ 6f1:	c3                   	ret    
+ 6f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 718:	39 cf                	cmp    %ecx,%edi
- 71a:	74 54                	je     770 <malloc+0xf0>
+ 6f8:	39 cf                	cmp    %ecx,%edi
+ 6fa:	74 54                	je     750 <malloc+0xf0>
         p->s.size -= nunits;
- 71c:	29 f9                	sub    %edi,%ecx
- 71e:	89 48 04             	mov    %ecx,0x4(%eax)
+ 6fc:	29 f9                	sub    %edi,%ecx
+ 6fe:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 721:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ 701:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 724:	89 78 04             	mov    %edi,0x4(%eax)
+ 704:	89 78 04             	mov    %edi,0x4(%eax)
       freep = prevp;
- 727:	89 15 40 0a 00 00    	mov    %edx,0xa40
+ 707:	89 15 20 0a 00 00    	mov    %edx,0xa20
 }
- 72d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 70d:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 730:	83 c0 08             	add    $0x8,%eax
+ 710:	83 c0 08             	add    $0x8,%eax
 }
- 733:	5b                   	pop    %ebx
- 734:	5e                   	pop    %esi
- 735:	5f                   	pop    %edi
- 736:	5d                   	pop    %ebp
- 737:	c3                   	ret    
- 738:	90                   	nop
- 739:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 713:	5b                   	pop    %ebx
+ 714:	5e                   	pop    %esi
+ 715:	5f                   	pop    %edi
+ 716:	5d                   	pop    %ebp
+ 717:	c3                   	ret    
+ 718:	90                   	nop
+ 719:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     base.s.ptr = freep = prevp = &base;
- 740:	c7 05 40 0a 00 00 44 	movl   $0xa44,0xa40
- 747:	0a 00 00 
- 74a:	c7 05 44 0a 00 00 44 	movl   $0xa44,0xa44
- 751:	0a 00 00 
+ 720:	c7 05 20 0a 00 00 24 	movl   $0xa24,0xa20
+ 727:	0a 00 00 
+ 72a:	c7 05 24 0a 00 00 24 	movl   $0xa24,0xa24
+ 731:	0a 00 00 
     base.s.size = 0;
- 754:	b8 44 0a 00 00       	mov    $0xa44,%eax
- 759:	c7 05 48 0a 00 00 00 	movl   $0x0,0xa48
- 760:	00 00 00 
- 763:	e9 44 ff ff ff       	jmp    6ac <malloc+0x2c>
- 768:	90                   	nop
- 769:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 734:	b8 24 0a 00 00       	mov    $0xa24,%eax
+ 739:	c7 05 28 0a 00 00 00 	movl   $0x0,0xa28
+ 740:	00 00 00 
+ 743:	e9 44 ff ff ff       	jmp    68c <malloc+0x2c>
+ 748:	90                   	nop
+ 749:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         prevp->s.ptr = p->s.ptr;
- 770:	8b 08                	mov    (%eax),%ecx
- 772:	89 0a                	mov    %ecx,(%edx)
- 774:	eb b1                	jmp    727 <malloc+0xa7>
+ 750:	8b 08                	mov    (%eax),%ecx
+ 752:	89 0a                	mov    %ecx,(%edx)
+ 754:	eb b1                	jmp    707 <malloc+0xa7>
Binary files main/kill.o and xv6-public/kill.o differ
diff -urN main/kill.sym xv6-public/kill.sym
--- main/kill.sym	2022-09-26 21:21:16.092324000 +0530
+++ xv6-public/kill.sym	2022-10-31 22:34:16.777776873 +0530
@@ -1,7 +1,7 @@
 00000000 .text
-00000778 .rodata
-000007a8 .eh_frame
-00000a40 .bss
+00000758 .rodata
+00000788 .eh_frame
+00000a20 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,19 +13,18 @@
 00000000 kill.c
 00000000 ulib.c
 00000000 printf.c
-00000380 printint
-00000794 digits.1050
+00000360 printint
+00000774 digits.1044
 00000000 umalloc.c
-00000a40 freep
-00000a44 base
+00000a20 freep
+00000a24 base
 00000060 strcpy
-00000420 printf
-00000362 thread_exit
+00000400 printf
 00000280 memmove
 000002fa mknod
 00000170 gets
 00000332 getpid
-00000680 malloc
+00000660 malloc
 00000342 sleep
 000002c2 pipe
 000002d2 write
@@ -39,23 +38,21 @@
 000002aa fork
 0000033a sbrk
 0000034a uptime
-00000a40 __bss_start
+00000a20 __bss_start
 00000110 memset
 00000000 main
 00000090 strcmp
 0000032a dup
 000001f0 stat
-00000a40 _edata
-00000a4c _end
+00000a20 _edata
+00000a2c _end
 00000312 link
 000002b2 exit
 00000240 atoi
-0000036a draw
+00000352 draw
 000000e0 strlen
 000002f2 open
 00000130 strchr
-00000352 thread_create
 0000031a mkdir
 000002da close
-0000035a thread_join
-000005f0 free
+000005d0 free
Binary files main/lapic.o and xv6-public/lapic.o differ
Binary files main/_ln and xv6-public/_ln differ
diff -urN main/ln.asm xv6-public/ln.asm
--- main/ln.asm	2022-09-26 21:21:16.188372000 +0530
+++ xv6-public/ln.asm	2022-10-31 22:34:16.845810877 +0530
@@ -27,9 +27,9 @@
     printf(2, "Usage: ln old new\n");
   17:	52                   	push   %edx
   18:	52                   	push   %edx
-  19:	68 78 07 00 00       	push   $0x778
+  19:	68 58 07 00 00       	push   $0x758
   1e:	6a 02                	push   $0x2
-  20:	e8 fb 03 00 00       	call   420 <printf>
+  20:	e8 db 03 00 00       	call   400 <printf>
     exit();
   25:	e8 88 02 00 00       	call   2b2 <exit>
   }
@@ -48,9 +48,9 @@
     printf(2, "link %s %s: failed\n", argv[1], argv[2]);
   43:	ff 73 08             	pushl  0x8(%ebx)
   46:	ff 73 04             	pushl  0x4(%ebx)
-  49:	68 8b 07 00 00       	push   $0x78b
+  49:	68 6b 07 00 00       	push   $0x76b
   4e:	6a 02                	push   $0x2
-  50:	e8 cb 03 00 00       	call   420 <printf>
+  50:	e8 ab 03 00 00       	call   400 <printf>
   55:	83 c4 10             	add    $0x10,%esp
   58:	eb e4                	jmp    3e <main+0x3e>
   5a:	66 90                	xchg   %ax,%ax
@@ -575,614 +575,593 @@
  34f:	cd 40                	int    $0x40
  351:	c3                   	ret    
 
-00000352 <thread_create>:
-SYSCALL(thread_create)
+00000352 <draw>:
+SYSCALL(draw)
  352:	b8 16 00 00 00       	mov    $0x16,%eax
  357:	cd 40                	int    $0x40
  359:	c3                   	ret    
+ 35a:	66 90                	xchg   %ax,%ax
+ 35c:	66 90                	xchg   %ax,%ax
+ 35e:	66 90                	xchg   %ax,%ax
 
-0000035a <thread_join>:
-SYSCALL(thread_join)
- 35a:	b8 18 00 00 00       	mov    $0x18,%eax
- 35f:	cd 40                	int    $0x40
- 361:	c3                   	ret    
-
-00000362 <thread_exit>:
-SYSCALL(thread_exit)
- 362:	b8 17 00 00 00       	mov    $0x17,%eax
- 367:	cd 40                	int    $0x40
- 369:	c3                   	ret    
-
-0000036a <draw>:
- 36a:	b8 19 00 00 00       	mov    $0x19,%eax
- 36f:	cd 40                	int    $0x40
- 371:	c3                   	ret    
- 372:	66 90                	xchg   %ax,%ax
- 374:	66 90                	xchg   %ax,%ax
- 376:	66 90                	xchg   %ax,%ax
- 378:	66 90                	xchg   %ax,%ax
- 37a:	66 90                	xchg   %ax,%ax
- 37c:	66 90                	xchg   %ax,%ax
- 37e:	66 90                	xchg   %ax,%ax
-
-00000380 <printint>:
+00000360 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 380:	55                   	push   %ebp
- 381:	89 e5                	mov    %esp,%ebp
- 383:	57                   	push   %edi
- 384:	56                   	push   %esi
- 385:	53                   	push   %ebx
- 386:	83 ec 3c             	sub    $0x3c,%esp
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	57                   	push   %edi
+ 364:	56                   	push   %esi
+ 365:	53                   	push   %ebx
+ 366:	83 ec 3c             	sub    $0x3c,%esp
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 389:	85 d2                	test   %edx,%edx
+ 369:	85 d2                	test   %edx,%edx
 {
- 38b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 36b:	89 45 c0             	mov    %eax,-0x40(%ebp)
     neg = 1;
     x = -xx;
- 38e:	89 d0                	mov    %edx,%eax
+ 36e:	89 d0                	mov    %edx,%eax
   if(sgn && xx < 0){
- 390:	79 76                	jns    408 <printint+0x88>
- 392:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 396:	74 70                	je     408 <printint+0x88>
+ 370:	79 76                	jns    3e8 <printint+0x88>
+ 372:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 376:	74 70                	je     3e8 <printint+0x88>
     x = -xx;
- 398:	f7 d8                	neg    %eax
+ 378:	f7 d8                	neg    %eax
     neg = 1;
- 39a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+ 37a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
   } else {
     x = xx;
   }
 
   i = 0;
- 3a1:	31 f6                	xor    %esi,%esi
- 3a3:	8d 5d d7             	lea    -0x29(%ebp),%ebx
- 3a6:	eb 0a                	jmp    3b2 <printint+0x32>
- 3a8:	90                   	nop
- 3a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 381:	31 f6                	xor    %esi,%esi
+ 383:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 386:	eb 0a                	jmp    392 <printint+0x32>
+ 388:	90                   	nop
+ 389:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   do{
     buf[i++] = digits[x % base];
- 3b0:	89 fe                	mov    %edi,%esi
- 3b2:	31 d2                	xor    %edx,%edx
- 3b4:	8d 7e 01             	lea    0x1(%esi),%edi
- 3b7:	f7 f1                	div    %ecx
- 3b9:	0f b6 92 a8 07 00 00 	movzbl 0x7a8(%edx),%edx
+ 390:	89 fe                	mov    %edi,%esi
+ 392:	31 d2                	xor    %edx,%edx
+ 394:	8d 7e 01             	lea    0x1(%esi),%edi
+ 397:	f7 f1                	div    %ecx
+ 399:	0f b6 92 88 07 00 00 	movzbl 0x788(%edx),%edx
   }while((x /= base) != 0);
- 3c0:	85 c0                	test   %eax,%eax
+ 3a0:	85 c0                	test   %eax,%eax
     buf[i++] = digits[x % base];
- 3c2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+ 3a2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
   }while((x /= base) != 0);
- 3c5:	75 e9                	jne    3b0 <printint+0x30>
+ 3a5:	75 e9                	jne    390 <printint+0x30>
   if(neg)
- 3c7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
- 3ca:	85 c0                	test   %eax,%eax
- 3cc:	74 08                	je     3d6 <printint+0x56>
+ 3a7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 3aa:	85 c0                	test   %eax,%eax
+ 3ac:	74 08                	je     3b6 <printint+0x56>
     buf[i++] = '-';
- 3ce:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
- 3d3:	8d 7e 02             	lea    0x2(%esi),%edi
- 3d6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
- 3da:	8b 7d c0             	mov    -0x40(%ebp),%edi
- 3dd:	8d 76 00             	lea    0x0(%esi),%esi
- 3e0:	0f b6 06             	movzbl (%esi),%eax
+ 3ae:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 3b3:	8d 7e 02             	lea    0x2(%esi),%edi
+ 3b6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 3ba:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 3bd:	8d 76 00             	lea    0x0(%esi),%esi
+ 3c0:	0f b6 06             	movzbl (%esi),%eax
   write(fd, &c, 1);
- 3e3:	83 ec 04             	sub    $0x4,%esp
- 3e6:	83 ee 01             	sub    $0x1,%esi
- 3e9:	6a 01                	push   $0x1
- 3eb:	53                   	push   %ebx
- 3ec:	57                   	push   %edi
- 3ed:	88 45 d7             	mov    %al,-0x29(%ebp)
- 3f0:	e8 dd fe ff ff       	call   2d2 <write>
+ 3c3:	83 ec 04             	sub    $0x4,%esp
+ 3c6:	83 ee 01             	sub    $0x1,%esi
+ 3c9:	6a 01                	push   $0x1
+ 3cb:	53                   	push   %ebx
+ 3cc:	57                   	push   %edi
+ 3cd:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 3d0:	e8 fd fe ff ff       	call   2d2 <write>
 
   while(--i >= 0)
- 3f5:	83 c4 10             	add    $0x10,%esp
- 3f8:	39 de                	cmp    %ebx,%esi
- 3fa:	75 e4                	jne    3e0 <printint+0x60>
+ 3d5:	83 c4 10             	add    $0x10,%esp
+ 3d8:	39 de                	cmp    %ebx,%esi
+ 3da:	75 e4                	jne    3c0 <printint+0x60>
     putc(fd, buf[i]);
 }
- 3fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 3ff:	5b                   	pop    %ebx
- 400:	5e                   	pop    %esi
- 401:	5f                   	pop    %edi
- 402:	5d                   	pop    %ebp
- 403:	c3                   	ret    
- 404:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 3dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3df:	5b                   	pop    %ebx
+ 3e0:	5e                   	pop    %esi
+ 3e1:	5f                   	pop    %edi
+ 3e2:	5d                   	pop    %ebp
+ 3e3:	c3                   	ret    
+ 3e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 408:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
- 40f:	eb 90                	jmp    3a1 <printint+0x21>
- 411:	eb 0d                	jmp    420 <printf>
- 413:	90                   	nop
- 414:	90                   	nop
- 415:	90                   	nop
- 416:	90                   	nop
- 417:	90                   	nop
- 418:	90                   	nop
- 419:	90                   	nop
- 41a:	90                   	nop
- 41b:	90                   	nop
- 41c:	90                   	nop
- 41d:	90                   	nop
- 41e:	90                   	nop
- 41f:	90                   	nop
+ 3e8:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 3ef:	eb 90                	jmp    381 <printint+0x21>
+ 3f1:	eb 0d                	jmp    400 <printf>
+ 3f3:	90                   	nop
+ 3f4:	90                   	nop
+ 3f5:	90                   	nop
+ 3f6:	90                   	nop
+ 3f7:	90                   	nop
+ 3f8:	90                   	nop
+ 3f9:	90                   	nop
+ 3fa:	90                   	nop
+ 3fb:	90                   	nop
+ 3fc:	90                   	nop
+ 3fd:	90                   	nop
+ 3fe:	90                   	nop
+ 3ff:	90                   	nop
 
-00000420 <printf>:
+00000400 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 420:	55                   	push   %ebp
- 421:	89 e5                	mov    %esp,%ebp
- 423:	57                   	push   %edi
- 424:	56                   	push   %esi
- 425:	53                   	push   %ebx
- 426:	83 ec 2c             	sub    $0x2c,%esp
+ 400:	55                   	push   %ebp
+ 401:	89 e5                	mov    %esp,%ebp
+ 403:	57                   	push   %edi
+ 404:	56                   	push   %esi
+ 405:	53                   	push   %ebx
+ 406:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 429:	8b 75 0c             	mov    0xc(%ebp),%esi
- 42c:	0f b6 1e             	movzbl (%esi),%ebx
- 42f:	84 db                	test   %bl,%bl
- 431:	0f 84 b3 00 00 00    	je     4ea <printf+0xca>
+ 409:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 40c:	0f b6 1e             	movzbl (%esi),%ebx
+ 40f:	84 db                	test   %bl,%bl
+ 411:	0f 84 b3 00 00 00    	je     4ca <printf+0xca>
   ap = (uint*)(void*)&fmt + 1;
- 437:	8d 45 10             	lea    0x10(%ebp),%eax
- 43a:	83 c6 01             	add    $0x1,%esi
+ 417:	8d 45 10             	lea    0x10(%ebp),%eax
+ 41a:	83 c6 01             	add    $0x1,%esi
   state = 0;
- 43d:	31 ff                	xor    %edi,%edi
+ 41d:	31 ff                	xor    %edi,%edi
   ap = (uint*)(void*)&fmt + 1;
- 43f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
- 442:	eb 2f                	jmp    473 <printf+0x53>
- 444:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 41f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 422:	eb 2f                	jmp    453 <printf+0x53>
+ 424:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
- 448:	83 f8 25             	cmp    $0x25,%eax
- 44b:	0f 84 a7 00 00 00    	je     4f8 <printf+0xd8>
+ 428:	83 f8 25             	cmp    $0x25,%eax
+ 42b:	0f 84 a7 00 00 00    	je     4d8 <printf+0xd8>
   write(fd, &c, 1);
- 451:	8d 45 e2             	lea    -0x1e(%ebp),%eax
- 454:	83 ec 04             	sub    $0x4,%esp
- 457:	88 5d e2             	mov    %bl,-0x1e(%ebp)
- 45a:	6a 01                	push   $0x1
- 45c:	50                   	push   %eax
- 45d:	ff 75 08             	pushl  0x8(%ebp)
- 460:	e8 6d fe ff ff       	call   2d2 <write>
- 465:	83 c4 10             	add    $0x10,%esp
- 468:	83 c6 01             	add    $0x1,%esi
+ 431:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 434:	83 ec 04             	sub    $0x4,%esp
+ 437:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 43a:	6a 01                	push   $0x1
+ 43c:	50                   	push   %eax
+ 43d:	ff 75 08             	pushl  0x8(%ebp)
+ 440:	e8 8d fe ff ff       	call   2d2 <write>
+ 445:	83 c4 10             	add    $0x10,%esp
+ 448:	83 c6 01             	add    $0x1,%esi
   for(i = 0; fmt[i]; i++){
- 46b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
- 46f:	84 db                	test   %bl,%bl
- 471:	74 77                	je     4ea <printf+0xca>
+ 44b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 44f:	84 db                	test   %bl,%bl
+ 451:	74 77                	je     4ca <printf+0xca>
     if(state == 0){
- 473:	85 ff                	test   %edi,%edi
+ 453:	85 ff                	test   %edi,%edi
     c = fmt[i] & 0xff;
- 475:	0f be cb             	movsbl %bl,%ecx
- 478:	0f b6 c3             	movzbl %bl,%eax
+ 455:	0f be cb             	movsbl %bl,%ecx
+ 458:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
- 47b:	74 cb                	je     448 <printf+0x28>
+ 45b:	74 cb                	je     428 <printf+0x28>
         state = '%';
       } else {
         putc(fd, c);
       }
     } else if(state == '%'){
- 47d:	83 ff 25             	cmp    $0x25,%edi
- 480:	75 e6                	jne    468 <printf+0x48>
+ 45d:	83 ff 25             	cmp    $0x25,%edi
+ 460:	75 e6                	jne    448 <printf+0x48>
       if(c == 'd'){
- 482:	83 f8 64             	cmp    $0x64,%eax
- 485:	0f 84 05 01 00 00    	je     590 <printf+0x170>
+ 462:	83 f8 64             	cmp    $0x64,%eax
+ 465:	0f 84 05 01 00 00    	je     570 <printf+0x170>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 48b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 491:	83 f9 70             	cmp    $0x70,%ecx
- 494:	74 72                	je     508 <printf+0xe8>
+ 46b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 471:	83 f9 70             	cmp    $0x70,%ecx
+ 474:	74 72                	je     4e8 <printf+0xe8>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 496:	83 f8 73             	cmp    $0x73,%eax
- 499:	0f 84 99 00 00 00    	je     538 <printf+0x118>
+ 476:	83 f8 73             	cmp    $0x73,%eax
+ 479:	0f 84 99 00 00 00    	je     518 <printf+0x118>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 49f:	83 f8 63             	cmp    $0x63,%eax
- 4a2:	0f 84 08 01 00 00    	je     5b0 <printf+0x190>
+ 47f:	83 f8 63             	cmp    $0x63,%eax
+ 482:	0f 84 08 01 00 00    	je     590 <printf+0x190>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 4a8:	83 f8 25             	cmp    $0x25,%eax
- 4ab:	0f 84 ef 00 00 00    	je     5a0 <printf+0x180>
+ 488:	83 f8 25             	cmp    $0x25,%eax
+ 48b:	0f 84 ef 00 00 00    	je     580 <printf+0x180>
   write(fd, &c, 1);
- 4b1:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 4b4:	83 ec 04             	sub    $0x4,%esp
- 4b7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 4bb:	6a 01                	push   $0x1
- 4bd:	50                   	push   %eax
- 4be:	ff 75 08             	pushl  0x8(%ebp)
- 4c1:	e8 0c fe ff ff       	call   2d2 <write>
- 4c6:	83 c4 0c             	add    $0xc,%esp
- 4c9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
- 4cc:	88 5d e6             	mov    %bl,-0x1a(%ebp)
- 4cf:	6a 01                	push   $0x1
- 4d1:	50                   	push   %eax
- 4d2:	ff 75 08             	pushl  0x8(%ebp)
- 4d5:	83 c6 01             	add    $0x1,%esi
+ 491:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 494:	83 ec 04             	sub    $0x4,%esp
+ 497:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 49b:	6a 01                	push   $0x1
+ 49d:	50                   	push   %eax
+ 49e:	ff 75 08             	pushl  0x8(%ebp)
+ 4a1:	e8 2c fe ff ff       	call   2d2 <write>
+ 4a6:	83 c4 0c             	add    $0xc,%esp
+ 4a9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 4ac:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 4af:	6a 01                	push   $0x1
+ 4b1:	50                   	push   %eax
+ 4b2:	ff 75 08             	pushl  0x8(%ebp)
+ 4b5:	83 c6 01             	add    $0x1,%esi
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
       }
       state = 0;
- 4d8:	31 ff                	xor    %edi,%edi
+ 4b8:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 4da:	e8 f3 fd ff ff       	call   2d2 <write>
+ 4ba:	e8 13 fe ff ff       	call   2d2 <write>
   for(i = 0; fmt[i]; i++){
- 4df:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 4bf:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
   write(fd, &c, 1);
- 4e3:	83 c4 10             	add    $0x10,%esp
+ 4c3:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 4e6:	84 db                	test   %bl,%bl
- 4e8:	75 89                	jne    473 <printf+0x53>
+ 4c6:	84 db                	test   %bl,%bl
+ 4c8:	75 89                	jne    453 <printf+0x53>
     }
   }
 }
- 4ea:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4ed:	5b                   	pop    %ebx
- 4ee:	5e                   	pop    %esi
- 4ef:	5f                   	pop    %edi
- 4f0:	5d                   	pop    %ebp
- 4f1:	c3                   	ret    
- 4f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 4ca:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4cd:	5b                   	pop    %ebx
+ 4ce:	5e                   	pop    %esi
+ 4cf:	5f                   	pop    %edi
+ 4d0:	5d                   	pop    %ebp
+ 4d1:	c3                   	ret    
+ 4d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         state = '%';
- 4f8:	bf 25 00 00 00       	mov    $0x25,%edi
- 4fd:	e9 66 ff ff ff       	jmp    468 <printf+0x48>
- 502:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 4d8:	bf 25 00 00 00       	mov    $0x25,%edi
+ 4dd:	e9 66 ff ff ff       	jmp    448 <printf+0x48>
+ 4e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 508:	83 ec 0c             	sub    $0xc,%esp
- 50b:	b9 10 00 00 00       	mov    $0x10,%ecx
- 510:	6a 00                	push   $0x0
- 512:	8b 7d d4             	mov    -0x2c(%ebp),%edi
- 515:	8b 45 08             	mov    0x8(%ebp),%eax
- 518:	8b 17                	mov    (%edi),%edx
- 51a:	e8 61 fe ff ff       	call   380 <printint>
+ 4e8:	83 ec 0c             	sub    $0xc,%esp
+ 4eb:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4f0:	6a 00                	push   $0x0
+ 4f2:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 4f5:	8b 45 08             	mov    0x8(%ebp),%eax
+ 4f8:	8b 17                	mov    (%edi),%edx
+ 4fa:	e8 61 fe ff ff       	call   360 <printint>
         ap++;
- 51f:	89 f8                	mov    %edi,%eax
- 521:	83 c4 10             	add    $0x10,%esp
+ 4ff:	89 f8                	mov    %edi,%eax
+ 501:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 524:	31 ff                	xor    %edi,%edi
+ 504:	31 ff                	xor    %edi,%edi
         ap++;
- 526:	83 c0 04             	add    $0x4,%eax
- 529:	89 45 d4             	mov    %eax,-0x2c(%ebp)
- 52c:	e9 37 ff ff ff       	jmp    468 <printf+0x48>
- 531:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 506:	83 c0 04             	add    $0x4,%eax
+ 509:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 50c:	e9 37 ff ff ff       	jmp    448 <printf+0x48>
+ 511:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 538:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 53b:	8b 08                	mov    (%eax),%ecx
+ 518:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 51b:	8b 08                	mov    (%eax),%ecx
         ap++;
- 53d:	83 c0 04             	add    $0x4,%eax
- 540:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 51d:	83 c0 04             	add    $0x4,%eax
+ 520:	89 45 d4             	mov    %eax,-0x2c(%ebp)
         if(s == 0)
- 543:	85 c9                	test   %ecx,%ecx
- 545:	0f 84 8e 00 00 00    	je     5d9 <printf+0x1b9>
+ 523:	85 c9                	test   %ecx,%ecx
+ 525:	0f 84 8e 00 00 00    	je     5b9 <printf+0x1b9>
         while(*s != 0){
- 54b:	0f b6 01             	movzbl (%ecx),%eax
+ 52b:	0f b6 01             	movzbl (%ecx),%eax
       state = 0;
- 54e:	31 ff                	xor    %edi,%edi
+ 52e:	31 ff                	xor    %edi,%edi
         s = (char*)*ap;
- 550:	89 cb                	mov    %ecx,%ebx
+ 530:	89 cb                	mov    %ecx,%ebx
         while(*s != 0){
- 552:	84 c0                	test   %al,%al
- 554:	0f 84 0e ff ff ff    	je     468 <printf+0x48>
- 55a:	89 75 d0             	mov    %esi,-0x30(%ebp)
- 55d:	89 de                	mov    %ebx,%esi
- 55f:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 562:	8d 7d e3             	lea    -0x1d(%ebp),%edi
- 565:	8d 76 00             	lea    0x0(%esi),%esi
+ 532:	84 c0                	test   %al,%al
+ 534:	0f 84 0e ff ff ff    	je     448 <printf+0x48>
+ 53a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 53d:	89 de                	mov    %ebx,%esi
+ 53f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 542:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 545:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 568:	83 ec 04             	sub    $0x4,%esp
+ 548:	83 ec 04             	sub    $0x4,%esp
           s++;
- 56b:	83 c6 01             	add    $0x1,%esi
- 56e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+ 54b:	83 c6 01             	add    $0x1,%esi
+ 54e:	88 45 e3             	mov    %al,-0x1d(%ebp)
   write(fd, &c, 1);
- 571:	6a 01                	push   $0x1
- 573:	57                   	push   %edi
- 574:	53                   	push   %ebx
- 575:	e8 58 fd ff ff       	call   2d2 <write>
+ 551:	6a 01                	push   $0x1
+ 553:	57                   	push   %edi
+ 554:	53                   	push   %ebx
+ 555:	e8 78 fd ff ff       	call   2d2 <write>
         while(*s != 0){
- 57a:	0f b6 06             	movzbl (%esi),%eax
- 57d:	83 c4 10             	add    $0x10,%esp
- 580:	84 c0                	test   %al,%al
- 582:	75 e4                	jne    568 <printf+0x148>
- 584:	8b 75 d0             	mov    -0x30(%ebp),%esi
+ 55a:	0f b6 06             	movzbl (%esi),%eax
+ 55d:	83 c4 10             	add    $0x10,%esp
+ 560:	84 c0                	test   %al,%al
+ 562:	75 e4                	jne    548 <printf+0x148>
+ 564:	8b 75 d0             	mov    -0x30(%ebp),%esi
       state = 0;
- 587:	31 ff                	xor    %edi,%edi
- 589:	e9 da fe ff ff       	jmp    468 <printf+0x48>
- 58e:	66 90                	xchg   %ax,%ax
+ 567:	31 ff                	xor    %edi,%edi
+ 569:	e9 da fe ff ff       	jmp    448 <printf+0x48>
+ 56e:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 10, 1);
- 590:	83 ec 0c             	sub    $0xc,%esp
- 593:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 598:	6a 01                	push   $0x1
- 59a:	e9 73 ff ff ff       	jmp    512 <printf+0xf2>
- 59f:	90                   	nop
+ 570:	83 ec 0c             	sub    $0xc,%esp
+ 573:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 578:	6a 01                	push   $0x1
+ 57a:	e9 73 ff ff ff       	jmp    4f2 <printf+0xf2>
+ 57f:	90                   	nop
   write(fd, &c, 1);
- 5a0:	83 ec 04             	sub    $0x4,%esp
- 5a3:	88 5d e5             	mov    %bl,-0x1b(%ebp)
- 5a6:	8d 45 e5             	lea    -0x1b(%ebp),%eax
- 5a9:	6a 01                	push   $0x1
- 5ab:	e9 21 ff ff ff       	jmp    4d1 <printf+0xb1>
+ 580:	83 ec 04             	sub    $0x4,%esp
+ 583:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 586:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 589:	6a 01                	push   $0x1
+ 58b:	e9 21 ff ff ff       	jmp    4b1 <printf+0xb1>
         putc(fd, *ap);
- 5b0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 590:	8b 7d d4             	mov    -0x2c(%ebp),%edi
   write(fd, &c, 1);
- 5b3:	83 ec 04             	sub    $0x4,%esp
+ 593:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 5b6:	8b 07                	mov    (%edi),%eax
+ 596:	8b 07                	mov    (%edi),%eax
   write(fd, &c, 1);
- 5b8:	6a 01                	push   $0x1
+ 598:	6a 01                	push   $0x1
         ap++;
- 5ba:	83 c7 04             	add    $0x4,%edi
+ 59a:	83 c7 04             	add    $0x4,%edi
         putc(fd, *ap);
- 5bd:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 59d:	88 45 e4             	mov    %al,-0x1c(%ebp)
   write(fd, &c, 1);
- 5c0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
- 5c3:	50                   	push   %eax
- 5c4:	ff 75 08             	pushl  0x8(%ebp)
- 5c7:	e8 06 fd ff ff       	call   2d2 <write>
+ 5a0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 5a3:	50                   	push   %eax
+ 5a4:	ff 75 08             	pushl  0x8(%ebp)
+ 5a7:	e8 26 fd ff ff       	call   2d2 <write>
         ap++;
- 5cc:	89 7d d4             	mov    %edi,-0x2c(%ebp)
- 5cf:	83 c4 10             	add    $0x10,%esp
+ 5ac:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 5af:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 5d2:	31 ff                	xor    %edi,%edi
- 5d4:	e9 8f fe ff ff       	jmp    468 <printf+0x48>
+ 5b2:	31 ff                	xor    %edi,%edi
+ 5b4:	e9 8f fe ff ff       	jmp    448 <printf+0x48>
           s = "(null)";
- 5d9:	bb 9f 07 00 00       	mov    $0x79f,%ebx
+ 5b9:	bb 7f 07 00 00       	mov    $0x77f,%ebx
         while(*s != 0){
- 5de:	b8 28 00 00 00       	mov    $0x28,%eax
- 5e3:	e9 72 ff ff ff       	jmp    55a <printf+0x13a>
- 5e8:	66 90                	xchg   %ax,%ax
- 5ea:	66 90                	xchg   %ax,%ax
- 5ec:	66 90                	xchg   %ax,%ax
- 5ee:	66 90                	xchg   %ax,%ax
+ 5be:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5c3:	e9 72 ff ff ff       	jmp    53a <printf+0x13a>
+ 5c8:	66 90                	xchg   %ax,%ax
+ 5ca:	66 90                	xchg   %ax,%ax
+ 5cc:	66 90                	xchg   %ax,%ax
+ 5ce:	66 90                	xchg   %ax,%ax
 
-000005f0 <free>:
+000005d0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 5f0:	55                   	push   %ebp
+ 5d0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5f1:	a1 50 0a 00 00       	mov    0xa50,%eax
+ 5d1:	a1 30 0a 00 00       	mov    0xa30,%eax
 {
- 5f6:	89 e5                	mov    %esp,%ebp
- 5f8:	57                   	push   %edi
- 5f9:	56                   	push   %esi
- 5fa:	53                   	push   %ebx
- 5fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5d6:	89 e5                	mov    %esp,%ebp
+ 5d8:	57                   	push   %edi
+ 5d9:	56                   	push   %esi
+ 5da:	53                   	push   %ebx
+ 5db:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 5fe:	8d 4b f8             	lea    -0x8(%ebx),%ecx
- 601:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5de:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 5e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 608:	39 c8                	cmp    %ecx,%eax
- 60a:	8b 10                	mov    (%eax),%edx
- 60c:	73 32                	jae    640 <free+0x50>
- 60e:	39 d1                	cmp    %edx,%ecx
- 610:	72 04                	jb     616 <free+0x26>
+ 5e8:	39 c8                	cmp    %ecx,%eax
+ 5ea:	8b 10                	mov    (%eax),%edx
+ 5ec:	73 32                	jae    620 <free+0x50>
+ 5ee:	39 d1                	cmp    %edx,%ecx
+ 5f0:	72 04                	jb     5f6 <free+0x26>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 612:	39 d0                	cmp    %edx,%eax
- 614:	72 32                	jb     648 <free+0x58>
+ 5f2:	39 d0                	cmp    %edx,%eax
+ 5f4:	72 32                	jb     628 <free+0x58>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 616:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 619:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 61c:	39 fa                	cmp    %edi,%edx
- 61e:	74 30                	je     650 <free+0x60>
+ 5f6:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 5f9:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 5fc:	39 fa                	cmp    %edi,%edx
+ 5fe:	74 30                	je     630 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 620:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 600:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 623:	8b 50 04             	mov    0x4(%eax),%edx
- 626:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 629:	39 f1                	cmp    %esi,%ecx
- 62b:	74 3a                	je     667 <free+0x77>
+ 603:	8b 50 04             	mov    0x4(%eax),%edx
+ 606:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 609:	39 f1                	cmp    %esi,%ecx
+ 60b:	74 3a                	je     647 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 62d:	89 08                	mov    %ecx,(%eax)
+ 60d:	89 08                	mov    %ecx,(%eax)
   freep = p;
- 62f:	a3 50 0a 00 00       	mov    %eax,0xa50
+ 60f:	a3 30 0a 00 00       	mov    %eax,0xa30
 }
- 634:	5b                   	pop    %ebx
- 635:	5e                   	pop    %esi
- 636:	5f                   	pop    %edi
- 637:	5d                   	pop    %ebp
- 638:	c3                   	ret    
- 639:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 614:	5b                   	pop    %ebx
+ 615:	5e                   	pop    %esi
+ 616:	5f                   	pop    %edi
+ 617:	5d                   	pop    %ebp
+ 618:	c3                   	ret    
+ 619:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 640:	39 d0                	cmp    %edx,%eax
- 642:	72 04                	jb     648 <free+0x58>
- 644:	39 d1                	cmp    %edx,%ecx
- 646:	72 ce                	jb     616 <free+0x26>
+ 620:	39 d0                	cmp    %edx,%eax
+ 622:	72 04                	jb     628 <free+0x58>
+ 624:	39 d1                	cmp    %edx,%ecx
+ 626:	72 ce                	jb     5f6 <free+0x26>
 {
- 648:	89 d0                	mov    %edx,%eax
- 64a:	eb bc                	jmp    608 <free+0x18>
- 64c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 628:	89 d0                	mov    %edx,%eax
+ 62a:	eb bc                	jmp    5e8 <free+0x18>
+ 62c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     bp->s.size += p->s.ptr->s.size;
- 650:	03 72 04             	add    0x4(%edx),%esi
- 653:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 630:	03 72 04             	add    0x4(%edx),%esi
+ 633:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 656:	8b 10                	mov    (%eax),%edx
- 658:	8b 12                	mov    (%edx),%edx
- 65a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 636:	8b 10                	mov    (%eax),%edx
+ 638:	8b 12                	mov    (%edx),%edx
+ 63a:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 65d:	8b 50 04             	mov    0x4(%eax),%edx
- 660:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 663:	39 f1                	cmp    %esi,%ecx
- 665:	75 c6                	jne    62d <free+0x3d>
+ 63d:	8b 50 04             	mov    0x4(%eax),%edx
+ 640:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 643:	39 f1                	cmp    %esi,%ecx
+ 645:	75 c6                	jne    60d <free+0x3d>
     p->s.size += bp->s.size;
- 667:	03 53 fc             	add    -0x4(%ebx),%edx
+ 647:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 66a:	a3 50 0a 00 00       	mov    %eax,0xa50
+ 64a:	a3 30 0a 00 00       	mov    %eax,0xa30
     p->s.size += bp->s.size;
- 66f:	89 50 04             	mov    %edx,0x4(%eax)
+ 64f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 672:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 675:	89 10                	mov    %edx,(%eax)
+ 652:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 655:	89 10                	mov    %edx,(%eax)
 }
- 677:	5b                   	pop    %ebx
- 678:	5e                   	pop    %esi
- 679:	5f                   	pop    %edi
- 67a:	5d                   	pop    %ebp
- 67b:	c3                   	ret    
- 67c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 657:	5b                   	pop    %ebx
+ 658:	5e                   	pop    %esi
+ 659:	5f                   	pop    %edi
+ 65a:	5d                   	pop    %ebp
+ 65b:	c3                   	ret    
+ 65c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-00000680 <malloc>:
+00000660 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 680:	55                   	push   %ebp
- 681:	89 e5                	mov    %esp,%ebp
- 683:	57                   	push   %edi
- 684:	56                   	push   %esi
- 685:	53                   	push   %ebx
- 686:	83 ec 0c             	sub    $0xc,%esp
+ 660:	55                   	push   %ebp
+ 661:	89 e5                	mov    %esp,%ebp
+ 663:	57                   	push   %edi
+ 664:	56                   	push   %esi
+ 665:	53                   	push   %ebx
+ 666:	83 ec 0c             	sub    $0xc,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 689:	8b 45 08             	mov    0x8(%ebp),%eax
+ 669:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 68c:	8b 15 50 0a 00 00    	mov    0xa50,%edx
+ 66c:	8b 15 30 0a 00 00    	mov    0xa30,%edx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 692:	8d 78 07             	lea    0x7(%eax),%edi
- 695:	c1 ef 03             	shr    $0x3,%edi
- 698:	83 c7 01             	add    $0x1,%edi
+ 672:	8d 78 07             	lea    0x7(%eax),%edi
+ 675:	c1 ef 03             	shr    $0x3,%edi
+ 678:	83 c7 01             	add    $0x1,%edi
   if((prevp = freep) == 0){
- 69b:	85 d2                	test   %edx,%edx
- 69d:	0f 84 9d 00 00 00    	je     740 <malloc+0xc0>
- 6a3:	8b 02                	mov    (%edx),%eax
- 6a5:	8b 48 04             	mov    0x4(%eax),%ecx
+ 67b:	85 d2                	test   %edx,%edx
+ 67d:	0f 84 9d 00 00 00    	je     720 <malloc+0xc0>
+ 683:	8b 02                	mov    (%edx),%eax
+ 685:	8b 48 04             	mov    0x4(%eax),%ecx
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
     if(p->s.size >= nunits){
- 6a8:	39 cf                	cmp    %ecx,%edi
- 6aa:	76 6c                	jbe    718 <malloc+0x98>
- 6ac:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
- 6b2:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 6b7:	0f 43 df             	cmovae %edi,%ebx
+ 688:	39 cf                	cmp    %ecx,%edi
+ 68a:	76 6c                	jbe    6f8 <malloc+0x98>
+ 68c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 692:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 697:	0f 43 df             	cmovae %edi,%ebx
   p = sbrk(nu * sizeof(Header));
- 6ba:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
- 6c1:	eb 0e                	jmp    6d1 <malloc+0x51>
- 6c3:	90                   	nop
- 6c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 69a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 6a1:	eb 0e                	jmp    6b1 <malloc+0x51>
+ 6a3:	90                   	nop
+ 6a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6c8:	8b 02                	mov    (%edx),%eax
+ 6a8:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 6ca:	8b 48 04             	mov    0x4(%eax),%ecx
- 6cd:	39 f9                	cmp    %edi,%ecx
- 6cf:	73 47                	jae    718 <malloc+0x98>
+ 6aa:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6ad:	39 f9                	cmp    %edi,%ecx
+ 6af:	73 47                	jae    6f8 <malloc+0x98>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 6d1:	39 05 50 0a 00 00    	cmp    %eax,0xa50
- 6d7:	89 c2                	mov    %eax,%edx
- 6d9:	75 ed                	jne    6c8 <malloc+0x48>
+ 6b1:	39 05 30 0a 00 00    	cmp    %eax,0xa30
+ 6b7:	89 c2                	mov    %eax,%edx
+ 6b9:	75 ed                	jne    6a8 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 6db:	83 ec 0c             	sub    $0xc,%esp
- 6de:	56                   	push   %esi
- 6df:	e8 56 fc ff ff       	call   33a <sbrk>
+ 6bb:	83 ec 0c             	sub    $0xc,%esp
+ 6be:	56                   	push   %esi
+ 6bf:	e8 76 fc ff ff       	call   33a <sbrk>
   if(p == (char*)-1)
- 6e4:	83 c4 10             	add    $0x10,%esp
- 6e7:	83 f8 ff             	cmp    $0xffffffff,%eax
- 6ea:	74 1c                	je     708 <malloc+0x88>
+ 6c4:	83 c4 10             	add    $0x10,%esp
+ 6c7:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6ca:	74 1c                	je     6e8 <malloc+0x88>
   hp->s.size = nu;
- 6ec:	89 58 04             	mov    %ebx,0x4(%eax)
+ 6cc:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 6ef:	83 ec 0c             	sub    $0xc,%esp
- 6f2:	83 c0 08             	add    $0x8,%eax
- 6f5:	50                   	push   %eax
- 6f6:	e8 f5 fe ff ff       	call   5f0 <free>
+ 6cf:	83 ec 0c             	sub    $0xc,%esp
+ 6d2:	83 c0 08             	add    $0x8,%eax
+ 6d5:	50                   	push   %eax
+ 6d6:	e8 f5 fe ff ff       	call   5d0 <free>
   return freep;
- 6fb:	8b 15 50 0a 00 00    	mov    0xa50,%edx
+ 6db:	8b 15 30 0a 00 00    	mov    0xa30,%edx
       if((p = morecore(nunits)) == 0)
- 701:	83 c4 10             	add    $0x10,%esp
- 704:	85 d2                	test   %edx,%edx
- 706:	75 c0                	jne    6c8 <malloc+0x48>
+ 6e1:	83 c4 10             	add    $0x10,%esp
+ 6e4:	85 d2                	test   %edx,%edx
+ 6e6:	75 c0                	jne    6a8 <malloc+0x48>
         return 0;
   }
 }
- 708:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6e8:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 70b:	31 c0                	xor    %eax,%eax
+ 6eb:	31 c0                	xor    %eax,%eax
 }
- 70d:	5b                   	pop    %ebx
- 70e:	5e                   	pop    %esi
- 70f:	5f                   	pop    %edi
- 710:	5d                   	pop    %ebp
- 711:	c3                   	ret    
- 712:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 6ed:	5b                   	pop    %ebx
+ 6ee:	5e                   	pop    %esi
+ 6ef:	5f                   	pop    %edi
+ 6f0:	5d                   	pop    %ebp
+ 6f1:	c3                   	ret    
+ 6f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 718:	39 cf                	cmp    %ecx,%edi
- 71a:	74 54                	je     770 <malloc+0xf0>
+ 6f8:	39 cf                	cmp    %ecx,%edi
+ 6fa:	74 54                	je     750 <malloc+0xf0>
         p->s.size -= nunits;
- 71c:	29 f9                	sub    %edi,%ecx
- 71e:	89 48 04             	mov    %ecx,0x4(%eax)
+ 6fc:	29 f9                	sub    %edi,%ecx
+ 6fe:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 721:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ 701:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 724:	89 78 04             	mov    %edi,0x4(%eax)
+ 704:	89 78 04             	mov    %edi,0x4(%eax)
       freep = prevp;
- 727:	89 15 50 0a 00 00    	mov    %edx,0xa50
+ 707:	89 15 30 0a 00 00    	mov    %edx,0xa30
 }
- 72d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 70d:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 730:	83 c0 08             	add    $0x8,%eax
+ 710:	83 c0 08             	add    $0x8,%eax
 }
- 733:	5b                   	pop    %ebx
- 734:	5e                   	pop    %esi
- 735:	5f                   	pop    %edi
- 736:	5d                   	pop    %ebp
- 737:	c3                   	ret    
- 738:	90                   	nop
- 739:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 713:	5b                   	pop    %ebx
+ 714:	5e                   	pop    %esi
+ 715:	5f                   	pop    %edi
+ 716:	5d                   	pop    %ebp
+ 717:	c3                   	ret    
+ 718:	90                   	nop
+ 719:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     base.s.ptr = freep = prevp = &base;
- 740:	c7 05 50 0a 00 00 54 	movl   $0xa54,0xa50
- 747:	0a 00 00 
- 74a:	c7 05 54 0a 00 00 54 	movl   $0xa54,0xa54
- 751:	0a 00 00 
+ 720:	c7 05 30 0a 00 00 34 	movl   $0xa34,0xa30
+ 727:	0a 00 00 
+ 72a:	c7 05 34 0a 00 00 34 	movl   $0xa34,0xa34
+ 731:	0a 00 00 
     base.s.size = 0;
- 754:	b8 54 0a 00 00       	mov    $0xa54,%eax
- 759:	c7 05 58 0a 00 00 00 	movl   $0x0,0xa58
- 760:	00 00 00 
- 763:	e9 44 ff ff ff       	jmp    6ac <malloc+0x2c>
- 768:	90                   	nop
- 769:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 734:	b8 34 0a 00 00       	mov    $0xa34,%eax
+ 739:	c7 05 38 0a 00 00 00 	movl   $0x0,0xa38
+ 740:	00 00 00 
+ 743:	e9 44 ff ff ff       	jmp    68c <malloc+0x2c>
+ 748:	90                   	nop
+ 749:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         prevp->s.ptr = p->s.ptr;
- 770:	8b 08                	mov    (%eax),%ecx
- 772:	89 0a                	mov    %ecx,(%edx)
- 774:	eb b1                	jmp    727 <malloc+0xa7>
+ 750:	8b 08                	mov    (%eax),%ecx
+ 752:	89 0a                	mov    %ecx,(%edx)
+ 754:	eb b1                	jmp    707 <malloc+0xa7>
Binary files main/ln.o and xv6-public/ln.o differ
diff -urN main/ln.sym xv6-public/ln.sym
--- main/ln.sym	2022-09-26 21:21:16.212384000 +0530
+++ xv6-public/ln.sym	2022-10-31 22:34:16.849812877 +0530
@@ -1,7 +1,7 @@
 00000000 .text
-00000778 .rodata
-000007bc .eh_frame
-00000a50 .bss
+00000758 .rodata
+0000079c .eh_frame
+00000a30 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,19 +13,18 @@
 00000000 ln.c
 00000000 ulib.c
 00000000 printf.c
-00000380 printint
-000007a8 digits.1050
+00000360 printint
+00000788 digits.1044
 00000000 umalloc.c
-00000a50 freep
-00000a54 base
+00000a30 freep
+00000a34 base
 00000060 strcpy
-00000420 printf
-00000362 thread_exit
+00000400 printf
 00000280 memmove
 000002fa mknod
 00000170 gets
 00000332 getpid
-00000680 malloc
+00000660 malloc
 00000342 sleep
 000002c2 pipe
 000002d2 write
@@ -39,23 +38,21 @@
 000002aa fork
 0000033a sbrk
 0000034a uptime
-00000a50 __bss_start
+00000a30 __bss_start
 00000110 memset
 00000000 main
 00000090 strcmp
 0000032a dup
 000001f0 stat
-00000a50 _edata
-00000a5c _end
+00000a30 _edata
+00000a3c _end
 00000312 link
 000002b2 exit
 00000240 atoi
-0000036a draw
+00000352 draw
 000000e0 strlen
 000002f2 open
 00000130 strchr
-00000352 thread_create
 0000031a mkdir
 000002da close
-0000035a thread_join
-000005f0 free
+000005d0 free
Binary files main/log.o and xv6-public/log.o differ
Binary files main/_ls and xv6-public/_ls differ
diff -urN main/ls.asm xv6-public/ls.asm
--- main/ls.asm	2022-09-26 21:21:16.360458000 +0530
+++ xv6-public/ls.asm	2022-10-31 22:34:16.961868883 +0530
@@ -48,7 +48,7 @@
   3c:	e8 41 05 00 00       	call   582 <exit>
     ls(".");
   41:	83 ec 0c             	sub    $0xc,%esp
-  44:	68 90 0a 00 00       	push   $0xa90
+  44:	68 70 0a 00 00       	push   $0xa70
   49:	e8 b2 00 00 00       	call   100 <ls>
     exit();
   4e:	e8 2f 05 00 00       	call   582 <exit>
@@ -97,7 +97,7 @@
   a9:	83 c4 0c             	add    $0xc,%esp
   ac:	50                   	push   %eax
   ad:	53                   	push   %ebx
-  ae:	68 bc 0d 00 00       	push   $0xdbc
+  ae:	68 9c 0d 00 00       	push   $0xd9c
   b3:	e8 98 04 00 00       	call   550 <memmove>
   memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
   b8:	89 1c 24             	mov    %ebx,(%esp)
@@ -105,12 +105,12 @@
   c0:	89 1c 24             	mov    %ebx,(%esp)
   c3:	89 c6                	mov    %eax,%esi
   return buf;
-  c5:	bb bc 0d 00 00       	mov    $0xdbc,%ebx
+  c5:	bb 9c 0d 00 00       	mov    $0xd9c,%ebx
   memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
   ca:	e8 e1 02 00 00       	call   3b0 <strlen>
   cf:	ba 0e 00 00 00       	mov    $0xe,%edx
   d4:	83 c4 0c             	add    $0xc,%esp
-  d7:	05 bc 0d 00 00       	add    $0xdbc,%eax
+  d7:	05 9c 0d 00 00       	add    $0xd9c,%eax
   dc:	29 f2                	sub    %esi,%edx
   de:	52                   	push   %edx
   df:	6a 20                	push   $0x20
@@ -177,9 +177,9 @@
     printf(2, "ls: cannot open %s\n", path);
  170:	83 ec 04             	sub    $0x4,%esp
  173:	57                   	push   %edi
- 174:	68 48 0a 00 00       	push   $0xa48
+ 174:	68 28 0a 00 00       	push   $0xa28
  179:	6a 02                	push   $0x2
- 17b:	e8 70 05 00 00       	call   6f0 <printf>
+ 17b:	e8 50 05 00 00       	call   6d0 <printf>
     return;
  180:	83 c4 10             	add    $0x10,%esp
 }
@@ -205,9 +205,9 @@
  1b4:	56                   	push   %esi
  1b5:	6a 02                	push   $0x2
  1b7:	50                   	push   %eax
- 1b8:	68 70 0a 00 00       	push   $0xa70
+ 1b8:	68 50 0a 00 00       	push   $0xa50
  1bd:	6a 01                	push   $0x1
- 1bf:	e8 2c 05 00 00       	call   6f0 <printf>
+ 1bf:	e8 0c 05 00 00       	call   6d0 <printf>
     break;
  1c4:	83 c4 20             	add    $0x20,%esp
  1c7:	eb 89                	jmp    152 <ls+0x52>
@@ -222,9 +222,9 @@
  1e4:	76 42                	jbe    228 <ls+0x128>
       printf(1, "ls: path too long\n");
  1e6:	83 ec 08             	sub    $0x8,%esp
- 1e9:	68 7d 0a 00 00       	push   $0xa7d
+ 1e9:	68 5d 0a 00 00       	push   $0xa5d
  1ee:	6a 01                	push   $0x1
- 1f0:	e8 fb 04 00 00       	call   6f0 <printf>
+ 1f0:	e8 db 04 00 00       	call   6d0 <printf>
       break;
  1f5:	83 c4 10             	add    $0x10,%esp
  1f8:	e9 55 ff ff ff       	jmp    152 <ls+0x52>
@@ -232,9 +232,9 @@
     printf(2, "ls: cannot stat %s\n", path);
  200:	83 ec 04             	sub    $0x4,%esp
  203:	57                   	push   %edi
- 204:	68 5c 0a 00 00       	push   $0xa5c
+ 204:	68 3c 0a 00 00       	push   $0xa3c
  209:	6a 02                	push   $0x2
- 20b:	e8 e0 04 00 00       	call   6f0 <printf>
+ 20b:	e8 c0 04 00 00       	call   6d0 <printf>
     close(fd);
  210:	89 1c 24             	mov    %ebx,(%esp)
  213:	e8 92 03 00 00       	call   5aa <close>
@@ -321,18 +321,18 @@
  2f6:	52                   	push   %edx
  2f7:	ff b5 b4 fd ff ff    	pushl  -0x24c(%ebp)
  2fd:	50                   	push   %eax
- 2fe:	68 70 0a 00 00       	push   $0xa70
+ 2fe:	68 50 0a 00 00       	push   $0xa50
  303:	6a 01                	push   $0x1
- 305:	e8 e6 03 00 00       	call   6f0 <printf>
+ 305:	e8 c6 03 00 00       	call   6d0 <printf>
  30a:	83 c4 20             	add    $0x20,%esp
  30d:	e9 4e ff ff ff       	jmp    260 <ls+0x160>
  312:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printf(1, "ls: cannot stat %s\n", buf);
  318:	83 ec 04             	sub    $0x4,%esp
  31b:	57                   	push   %edi
- 31c:	68 5c 0a 00 00       	push   $0xa5c
+ 31c:	68 3c 0a 00 00       	push   $0xa3c
  321:	6a 01                	push   $0x1
- 323:	e8 c8 03 00 00       	call   6f0 <printf>
+ 323:	e8 a8 03 00 00       	call   6d0 <printf>
         continue;
  328:	83 c4 10             	add    $0x10,%esp
  32b:	e9 30 ff ff ff       	jmp    260 <ls+0x160>
@@ -855,614 +855,593 @@
  61f:	cd 40                	int    $0x40
  621:	c3                   	ret    
 
-00000622 <thread_create>:
-SYSCALL(thread_create)
+00000622 <draw>:
+SYSCALL(draw)
  622:	b8 16 00 00 00       	mov    $0x16,%eax
  627:	cd 40                	int    $0x40
  629:	c3                   	ret    
+ 62a:	66 90                	xchg   %ax,%ax
+ 62c:	66 90                	xchg   %ax,%ax
+ 62e:	66 90                	xchg   %ax,%ax
 
-0000062a <thread_join>:
-SYSCALL(thread_join)
- 62a:	b8 18 00 00 00       	mov    $0x18,%eax
- 62f:	cd 40                	int    $0x40
- 631:	c3                   	ret    
-
-00000632 <thread_exit>:
-SYSCALL(thread_exit)
- 632:	b8 17 00 00 00       	mov    $0x17,%eax
- 637:	cd 40                	int    $0x40
- 639:	c3                   	ret    
-
-0000063a <draw>:
- 63a:	b8 19 00 00 00       	mov    $0x19,%eax
- 63f:	cd 40                	int    $0x40
- 641:	c3                   	ret    
- 642:	66 90                	xchg   %ax,%ax
- 644:	66 90                	xchg   %ax,%ax
- 646:	66 90                	xchg   %ax,%ax
- 648:	66 90                	xchg   %ax,%ax
- 64a:	66 90                	xchg   %ax,%ax
- 64c:	66 90                	xchg   %ax,%ax
- 64e:	66 90                	xchg   %ax,%ax
-
-00000650 <printint>:
+00000630 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 650:	55                   	push   %ebp
- 651:	89 e5                	mov    %esp,%ebp
- 653:	57                   	push   %edi
- 654:	56                   	push   %esi
- 655:	53                   	push   %ebx
- 656:	83 ec 3c             	sub    $0x3c,%esp
+ 630:	55                   	push   %ebp
+ 631:	89 e5                	mov    %esp,%ebp
+ 633:	57                   	push   %edi
+ 634:	56                   	push   %esi
+ 635:	53                   	push   %ebx
+ 636:	83 ec 3c             	sub    $0x3c,%esp
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 659:	85 d2                	test   %edx,%edx
+ 639:	85 d2                	test   %edx,%edx
 {
- 65b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 63b:	89 45 c0             	mov    %eax,-0x40(%ebp)
     neg = 1;
     x = -xx;
- 65e:	89 d0                	mov    %edx,%eax
+ 63e:	89 d0                	mov    %edx,%eax
   if(sgn && xx < 0){
- 660:	79 76                	jns    6d8 <printint+0x88>
- 662:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 666:	74 70                	je     6d8 <printint+0x88>
+ 640:	79 76                	jns    6b8 <printint+0x88>
+ 642:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 646:	74 70                	je     6b8 <printint+0x88>
     x = -xx;
- 668:	f7 d8                	neg    %eax
+ 648:	f7 d8                	neg    %eax
     neg = 1;
- 66a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+ 64a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
   } else {
     x = xx;
   }
 
   i = 0;
- 671:	31 f6                	xor    %esi,%esi
- 673:	8d 5d d7             	lea    -0x29(%ebp),%ebx
- 676:	eb 0a                	jmp    682 <printint+0x32>
- 678:	90                   	nop
- 679:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 651:	31 f6                	xor    %esi,%esi
+ 653:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 656:	eb 0a                	jmp    662 <printint+0x32>
+ 658:	90                   	nop
+ 659:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   do{
     buf[i++] = digits[x % base];
- 680:	89 fe                	mov    %edi,%esi
- 682:	31 d2                	xor    %edx,%edx
- 684:	8d 7e 01             	lea    0x1(%esi),%edi
- 687:	f7 f1                	div    %ecx
- 689:	0f b6 92 9c 0a 00 00 	movzbl 0xa9c(%edx),%edx
+ 660:	89 fe                	mov    %edi,%esi
+ 662:	31 d2                	xor    %edx,%edx
+ 664:	8d 7e 01             	lea    0x1(%esi),%edi
+ 667:	f7 f1                	div    %ecx
+ 669:	0f b6 92 7c 0a 00 00 	movzbl 0xa7c(%edx),%edx
   }while((x /= base) != 0);
- 690:	85 c0                	test   %eax,%eax
+ 670:	85 c0                	test   %eax,%eax
     buf[i++] = digits[x % base];
- 692:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+ 672:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
   }while((x /= base) != 0);
- 695:	75 e9                	jne    680 <printint+0x30>
+ 675:	75 e9                	jne    660 <printint+0x30>
   if(neg)
- 697:	8b 45 c4             	mov    -0x3c(%ebp),%eax
- 69a:	85 c0                	test   %eax,%eax
- 69c:	74 08                	je     6a6 <printint+0x56>
+ 677:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 67a:	85 c0                	test   %eax,%eax
+ 67c:	74 08                	je     686 <printint+0x56>
     buf[i++] = '-';
- 69e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
- 6a3:	8d 7e 02             	lea    0x2(%esi),%edi
- 6a6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
- 6aa:	8b 7d c0             	mov    -0x40(%ebp),%edi
- 6ad:	8d 76 00             	lea    0x0(%esi),%esi
- 6b0:	0f b6 06             	movzbl (%esi),%eax
+ 67e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 683:	8d 7e 02             	lea    0x2(%esi),%edi
+ 686:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 68a:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 68d:	8d 76 00             	lea    0x0(%esi),%esi
+ 690:	0f b6 06             	movzbl (%esi),%eax
   write(fd, &c, 1);
- 6b3:	83 ec 04             	sub    $0x4,%esp
- 6b6:	83 ee 01             	sub    $0x1,%esi
- 6b9:	6a 01                	push   $0x1
- 6bb:	53                   	push   %ebx
- 6bc:	57                   	push   %edi
- 6bd:	88 45 d7             	mov    %al,-0x29(%ebp)
- 6c0:	e8 dd fe ff ff       	call   5a2 <write>
+ 693:	83 ec 04             	sub    $0x4,%esp
+ 696:	83 ee 01             	sub    $0x1,%esi
+ 699:	6a 01                	push   $0x1
+ 69b:	53                   	push   %ebx
+ 69c:	57                   	push   %edi
+ 69d:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 6a0:	e8 fd fe ff ff       	call   5a2 <write>
 
   while(--i >= 0)
- 6c5:	83 c4 10             	add    $0x10,%esp
- 6c8:	39 de                	cmp    %ebx,%esi
- 6ca:	75 e4                	jne    6b0 <printint+0x60>
+ 6a5:	83 c4 10             	add    $0x10,%esp
+ 6a8:	39 de                	cmp    %ebx,%esi
+ 6aa:	75 e4                	jne    690 <printint+0x60>
     putc(fd, buf[i]);
 }
- 6cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 6cf:	5b                   	pop    %ebx
- 6d0:	5e                   	pop    %esi
- 6d1:	5f                   	pop    %edi
- 6d2:	5d                   	pop    %ebp
- 6d3:	c3                   	ret    
- 6d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6ac:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6af:	5b                   	pop    %ebx
+ 6b0:	5e                   	pop    %esi
+ 6b1:	5f                   	pop    %edi
+ 6b2:	5d                   	pop    %ebp
+ 6b3:	c3                   	ret    
+ 6b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 6d8:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
- 6df:	eb 90                	jmp    671 <printint+0x21>
- 6e1:	eb 0d                	jmp    6f0 <printf>
- 6e3:	90                   	nop
- 6e4:	90                   	nop
- 6e5:	90                   	nop
- 6e6:	90                   	nop
- 6e7:	90                   	nop
- 6e8:	90                   	nop
- 6e9:	90                   	nop
- 6ea:	90                   	nop
- 6eb:	90                   	nop
- 6ec:	90                   	nop
- 6ed:	90                   	nop
- 6ee:	90                   	nop
- 6ef:	90                   	nop
+ 6b8:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 6bf:	eb 90                	jmp    651 <printint+0x21>
+ 6c1:	eb 0d                	jmp    6d0 <printf>
+ 6c3:	90                   	nop
+ 6c4:	90                   	nop
+ 6c5:	90                   	nop
+ 6c6:	90                   	nop
+ 6c7:	90                   	nop
+ 6c8:	90                   	nop
+ 6c9:	90                   	nop
+ 6ca:	90                   	nop
+ 6cb:	90                   	nop
+ 6cc:	90                   	nop
+ 6cd:	90                   	nop
+ 6ce:	90                   	nop
+ 6cf:	90                   	nop
 
-000006f0 <printf>:
+000006d0 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 6f0:	55                   	push   %ebp
- 6f1:	89 e5                	mov    %esp,%ebp
- 6f3:	57                   	push   %edi
- 6f4:	56                   	push   %esi
- 6f5:	53                   	push   %ebx
- 6f6:	83 ec 2c             	sub    $0x2c,%esp
+ 6d0:	55                   	push   %ebp
+ 6d1:	89 e5                	mov    %esp,%ebp
+ 6d3:	57                   	push   %edi
+ 6d4:	56                   	push   %esi
+ 6d5:	53                   	push   %ebx
+ 6d6:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 6f9:	8b 75 0c             	mov    0xc(%ebp),%esi
- 6fc:	0f b6 1e             	movzbl (%esi),%ebx
- 6ff:	84 db                	test   %bl,%bl
- 701:	0f 84 b3 00 00 00    	je     7ba <printf+0xca>
+ 6d9:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 6dc:	0f b6 1e             	movzbl (%esi),%ebx
+ 6df:	84 db                	test   %bl,%bl
+ 6e1:	0f 84 b3 00 00 00    	je     79a <printf+0xca>
   ap = (uint*)(void*)&fmt + 1;
- 707:	8d 45 10             	lea    0x10(%ebp),%eax
- 70a:	83 c6 01             	add    $0x1,%esi
+ 6e7:	8d 45 10             	lea    0x10(%ebp),%eax
+ 6ea:	83 c6 01             	add    $0x1,%esi
   state = 0;
- 70d:	31 ff                	xor    %edi,%edi
+ 6ed:	31 ff                	xor    %edi,%edi
   ap = (uint*)(void*)&fmt + 1;
- 70f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
- 712:	eb 2f                	jmp    743 <printf+0x53>
- 714:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6ef:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 6f2:	eb 2f                	jmp    723 <printf+0x53>
+ 6f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
- 718:	83 f8 25             	cmp    $0x25,%eax
- 71b:	0f 84 a7 00 00 00    	je     7c8 <printf+0xd8>
+ 6f8:	83 f8 25             	cmp    $0x25,%eax
+ 6fb:	0f 84 a7 00 00 00    	je     7a8 <printf+0xd8>
   write(fd, &c, 1);
- 721:	8d 45 e2             	lea    -0x1e(%ebp),%eax
- 724:	83 ec 04             	sub    $0x4,%esp
- 727:	88 5d e2             	mov    %bl,-0x1e(%ebp)
- 72a:	6a 01                	push   $0x1
- 72c:	50                   	push   %eax
- 72d:	ff 75 08             	pushl  0x8(%ebp)
- 730:	e8 6d fe ff ff       	call   5a2 <write>
- 735:	83 c4 10             	add    $0x10,%esp
- 738:	83 c6 01             	add    $0x1,%esi
+ 701:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 704:	83 ec 04             	sub    $0x4,%esp
+ 707:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 70a:	6a 01                	push   $0x1
+ 70c:	50                   	push   %eax
+ 70d:	ff 75 08             	pushl  0x8(%ebp)
+ 710:	e8 8d fe ff ff       	call   5a2 <write>
+ 715:	83 c4 10             	add    $0x10,%esp
+ 718:	83 c6 01             	add    $0x1,%esi
   for(i = 0; fmt[i]; i++){
- 73b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
- 73f:	84 db                	test   %bl,%bl
- 741:	74 77                	je     7ba <printf+0xca>
+ 71b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 71f:	84 db                	test   %bl,%bl
+ 721:	74 77                	je     79a <printf+0xca>
     if(state == 0){
- 743:	85 ff                	test   %edi,%edi
+ 723:	85 ff                	test   %edi,%edi
     c = fmt[i] & 0xff;
- 745:	0f be cb             	movsbl %bl,%ecx
- 748:	0f b6 c3             	movzbl %bl,%eax
+ 725:	0f be cb             	movsbl %bl,%ecx
+ 728:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
- 74b:	74 cb                	je     718 <printf+0x28>
+ 72b:	74 cb                	je     6f8 <printf+0x28>
         state = '%';
       } else {
         putc(fd, c);
       }
     } else if(state == '%'){
- 74d:	83 ff 25             	cmp    $0x25,%edi
- 750:	75 e6                	jne    738 <printf+0x48>
+ 72d:	83 ff 25             	cmp    $0x25,%edi
+ 730:	75 e6                	jne    718 <printf+0x48>
       if(c == 'd'){
- 752:	83 f8 64             	cmp    $0x64,%eax
- 755:	0f 84 05 01 00 00    	je     860 <printf+0x170>
+ 732:	83 f8 64             	cmp    $0x64,%eax
+ 735:	0f 84 05 01 00 00    	je     840 <printf+0x170>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 75b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 761:	83 f9 70             	cmp    $0x70,%ecx
- 764:	74 72                	je     7d8 <printf+0xe8>
+ 73b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 741:	83 f9 70             	cmp    $0x70,%ecx
+ 744:	74 72                	je     7b8 <printf+0xe8>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 766:	83 f8 73             	cmp    $0x73,%eax
- 769:	0f 84 99 00 00 00    	je     808 <printf+0x118>
+ 746:	83 f8 73             	cmp    $0x73,%eax
+ 749:	0f 84 99 00 00 00    	je     7e8 <printf+0x118>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 76f:	83 f8 63             	cmp    $0x63,%eax
- 772:	0f 84 08 01 00 00    	je     880 <printf+0x190>
+ 74f:	83 f8 63             	cmp    $0x63,%eax
+ 752:	0f 84 08 01 00 00    	je     860 <printf+0x190>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 778:	83 f8 25             	cmp    $0x25,%eax
- 77b:	0f 84 ef 00 00 00    	je     870 <printf+0x180>
+ 758:	83 f8 25             	cmp    $0x25,%eax
+ 75b:	0f 84 ef 00 00 00    	je     850 <printf+0x180>
   write(fd, &c, 1);
- 781:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 784:	83 ec 04             	sub    $0x4,%esp
- 787:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 78b:	6a 01                	push   $0x1
- 78d:	50                   	push   %eax
- 78e:	ff 75 08             	pushl  0x8(%ebp)
- 791:	e8 0c fe ff ff       	call   5a2 <write>
- 796:	83 c4 0c             	add    $0xc,%esp
- 799:	8d 45 e6             	lea    -0x1a(%ebp),%eax
- 79c:	88 5d e6             	mov    %bl,-0x1a(%ebp)
- 79f:	6a 01                	push   $0x1
- 7a1:	50                   	push   %eax
- 7a2:	ff 75 08             	pushl  0x8(%ebp)
- 7a5:	83 c6 01             	add    $0x1,%esi
+ 761:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 764:	83 ec 04             	sub    $0x4,%esp
+ 767:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 76b:	6a 01                	push   $0x1
+ 76d:	50                   	push   %eax
+ 76e:	ff 75 08             	pushl  0x8(%ebp)
+ 771:	e8 2c fe ff ff       	call   5a2 <write>
+ 776:	83 c4 0c             	add    $0xc,%esp
+ 779:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 77c:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 77f:	6a 01                	push   $0x1
+ 781:	50                   	push   %eax
+ 782:	ff 75 08             	pushl  0x8(%ebp)
+ 785:	83 c6 01             	add    $0x1,%esi
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
       }
       state = 0;
- 7a8:	31 ff                	xor    %edi,%edi
+ 788:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 7aa:	e8 f3 fd ff ff       	call   5a2 <write>
+ 78a:	e8 13 fe ff ff       	call   5a2 <write>
   for(i = 0; fmt[i]; i++){
- 7af:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 78f:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
   write(fd, &c, 1);
- 7b3:	83 c4 10             	add    $0x10,%esp
+ 793:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 7b6:	84 db                	test   %bl,%bl
- 7b8:	75 89                	jne    743 <printf+0x53>
+ 796:	84 db                	test   %bl,%bl
+ 798:	75 89                	jne    723 <printf+0x53>
     }
   }
 }
- 7ba:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 7bd:	5b                   	pop    %ebx
- 7be:	5e                   	pop    %esi
- 7bf:	5f                   	pop    %edi
- 7c0:	5d                   	pop    %ebp
- 7c1:	c3                   	ret    
- 7c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 79a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 79d:	5b                   	pop    %ebx
+ 79e:	5e                   	pop    %esi
+ 79f:	5f                   	pop    %edi
+ 7a0:	5d                   	pop    %ebp
+ 7a1:	c3                   	ret    
+ 7a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         state = '%';
- 7c8:	bf 25 00 00 00       	mov    $0x25,%edi
- 7cd:	e9 66 ff ff ff       	jmp    738 <printf+0x48>
- 7d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 7a8:	bf 25 00 00 00       	mov    $0x25,%edi
+ 7ad:	e9 66 ff ff ff       	jmp    718 <printf+0x48>
+ 7b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 7d8:	83 ec 0c             	sub    $0xc,%esp
- 7db:	b9 10 00 00 00       	mov    $0x10,%ecx
- 7e0:	6a 00                	push   $0x0
- 7e2:	8b 7d d4             	mov    -0x2c(%ebp),%edi
- 7e5:	8b 45 08             	mov    0x8(%ebp),%eax
- 7e8:	8b 17                	mov    (%edi),%edx
- 7ea:	e8 61 fe ff ff       	call   650 <printint>
+ 7b8:	83 ec 0c             	sub    $0xc,%esp
+ 7bb:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 7c0:	6a 00                	push   $0x0
+ 7c2:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 7c5:	8b 45 08             	mov    0x8(%ebp),%eax
+ 7c8:	8b 17                	mov    (%edi),%edx
+ 7ca:	e8 61 fe ff ff       	call   630 <printint>
         ap++;
- 7ef:	89 f8                	mov    %edi,%eax
- 7f1:	83 c4 10             	add    $0x10,%esp
+ 7cf:	89 f8                	mov    %edi,%eax
+ 7d1:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 7f4:	31 ff                	xor    %edi,%edi
+ 7d4:	31 ff                	xor    %edi,%edi
         ap++;
- 7f6:	83 c0 04             	add    $0x4,%eax
- 7f9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
- 7fc:	e9 37 ff ff ff       	jmp    738 <printf+0x48>
- 801:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7d6:	83 c0 04             	add    $0x4,%eax
+ 7d9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 7dc:	e9 37 ff ff ff       	jmp    718 <printf+0x48>
+ 7e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 808:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 80b:	8b 08                	mov    (%eax),%ecx
+ 7e8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 7eb:	8b 08                	mov    (%eax),%ecx
         ap++;
- 80d:	83 c0 04             	add    $0x4,%eax
- 810:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 7ed:	83 c0 04             	add    $0x4,%eax
+ 7f0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
         if(s == 0)
- 813:	85 c9                	test   %ecx,%ecx
- 815:	0f 84 8e 00 00 00    	je     8a9 <printf+0x1b9>
+ 7f3:	85 c9                	test   %ecx,%ecx
+ 7f5:	0f 84 8e 00 00 00    	je     889 <printf+0x1b9>
         while(*s != 0){
- 81b:	0f b6 01             	movzbl (%ecx),%eax
+ 7fb:	0f b6 01             	movzbl (%ecx),%eax
       state = 0;
- 81e:	31 ff                	xor    %edi,%edi
+ 7fe:	31 ff                	xor    %edi,%edi
         s = (char*)*ap;
- 820:	89 cb                	mov    %ecx,%ebx
+ 800:	89 cb                	mov    %ecx,%ebx
         while(*s != 0){
- 822:	84 c0                	test   %al,%al
- 824:	0f 84 0e ff ff ff    	je     738 <printf+0x48>
- 82a:	89 75 d0             	mov    %esi,-0x30(%ebp)
- 82d:	89 de                	mov    %ebx,%esi
- 82f:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 832:	8d 7d e3             	lea    -0x1d(%ebp),%edi
- 835:	8d 76 00             	lea    0x0(%esi),%esi
+ 802:	84 c0                	test   %al,%al
+ 804:	0f 84 0e ff ff ff    	je     718 <printf+0x48>
+ 80a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 80d:	89 de                	mov    %ebx,%esi
+ 80f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 812:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 815:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 838:	83 ec 04             	sub    $0x4,%esp
+ 818:	83 ec 04             	sub    $0x4,%esp
           s++;
- 83b:	83 c6 01             	add    $0x1,%esi
- 83e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+ 81b:	83 c6 01             	add    $0x1,%esi
+ 81e:	88 45 e3             	mov    %al,-0x1d(%ebp)
   write(fd, &c, 1);
- 841:	6a 01                	push   $0x1
- 843:	57                   	push   %edi
- 844:	53                   	push   %ebx
- 845:	e8 58 fd ff ff       	call   5a2 <write>
+ 821:	6a 01                	push   $0x1
+ 823:	57                   	push   %edi
+ 824:	53                   	push   %ebx
+ 825:	e8 78 fd ff ff       	call   5a2 <write>
         while(*s != 0){
- 84a:	0f b6 06             	movzbl (%esi),%eax
- 84d:	83 c4 10             	add    $0x10,%esp
- 850:	84 c0                	test   %al,%al
- 852:	75 e4                	jne    838 <printf+0x148>
- 854:	8b 75 d0             	mov    -0x30(%ebp),%esi
+ 82a:	0f b6 06             	movzbl (%esi),%eax
+ 82d:	83 c4 10             	add    $0x10,%esp
+ 830:	84 c0                	test   %al,%al
+ 832:	75 e4                	jne    818 <printf+0x148>
+ 834:	8b 75 d0             	mov    -0x30(%ebp),%esi
       state = 0;
- 857:	31 ff                	xor    %edi,%edi
- 859:	e9 da fe ff ff       	jmp    738 <printf+0x48>
- 85e:	66 90                	xchg   %ax,%ax
+ 837:	31 ff                	xor    %edi,%edi
+ 839:	e9 da fe ff ff       	jmp    718 <printf+0x48>
+ 83e:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 10, 1);
- 860:	83 ec 0c             	sub    $0xc,%esp
- 863:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 868:	6a 01                	push   $0x1
- 86a:	e9 73 ff ff ff       	jmp    7e2 <printf+0xf2>
- 86f:	90                   	nop
+ 840:	83 ec 0c             	sub    $0xc,%esp
+ 843:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 848:	6a 01                	push   $0x1
+ 84a:	e9 73 ff ff ff       	jmp    7c2 <printf+0xf2>
+ 84f:	90                   	nop
   write(fd, &c, 1);
- 870:	83 ec 04             	sub    $0x4,%esp
- 873:	88 5d e5             	mov    %bl,-0x1b(%ebp)
- 876:	8d 45 e5             	lea    -0x1b(%ebp),%eax
- 879:	6a 01                	push   $0x1
- 87b:	e9 21 ff ff ff       	jmp    7a1 <printf+0xb1>
+ 850:	83 ec 04             	sub    $0x4,%esp
+ 853:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 856:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 859:	6a 01                	push   $0x1
+ 85b:	e9 21 ff ff ff       	jmp    781 <printf+0xb1>
         putc(fd, *ap);
- 880:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 860:	8b 7d d4             	mov    -0x2c(%ebp),%edi
   write(fd, &c, 1);
- 883:	83 ec 04             	sub    $0x4,%esp
+ 863:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 886:	8b 07                	mov    (%edi),%eax
+ 866:	8b 07                	mov    (%edi),%eax
   write(fd, &c, 1);
- 888:	6a 01                	push   $0x1
+ 868:	6a 01                	push   $0x1
         ap++;
- 88a:	83 c7 04             	add    $0x4,%edi
+ 86a:	83 c7 04             	add    $0x4,%edi
         putc(fd, *ap);
- 88d:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 86d:	88 45 e4             	mov    %al,-0x1c(%ebp)
   write(fd, &c, 1);
- 890:	8d 45 e4             	lea    -0x1c(%ebp),%eax
- 893:	50                   	push   %eax
- 894:	ff 75 08             	pushl  0x8(%ebp)
- 897:	e8 06 fd ff ff       	call   5a2 <write>
+ 870:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 873:	50                   	push   %eax
+ 874:	ff 75 08             	pushl  0x8(%ebp)
+ 877:	e8 26 fd ff ff       	call   5a2 <write>
         ap++;
- 89c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
- 89f:	83 c4 10             	add    $0x10,%esp
+ 87c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 87f:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 8a2:	31 ff                	xor    %edi,%edi
- 8a4:	e9 8f fe ff ff       	jmp    738 <printf+0x48>
+ 882:	31 ff                	xor    %edi,%edi
+ 884:	e9 8f fe ff ff       	jmp    718 <printf+0x48>
           s = "(null)";
- 8a9:	bb 92 0a 00 00       	mov    $0xa92,%ebx
+ 889:	bb 72 0a 00 00       	mov    $0xa72,%ebx
         while(*s != 0){
- 8ae:	b8 28 00 00 00       	mov    $0x28,%eax
- 8b3:	e9 72 ff ff ff       	jmp    82a <printf+0x13a>
- 8b8:	66 90                	xchg   %ax,%ax
- 8ba:	66 90                	xchg   %ax,%ax
- 8bc:	66 90                	xchg   %ax,%ax
- 8be:	66 90                	xchg   %ax,%ax
+ 88e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 893:	e9 72 ff ff ff       	jmp    80a <printf+0x13a>
+ 898:	66 90                	xchg   %ax,%ax
+ 89a:	66 90                	xchg   %ax,%ax
+ 89c:	66 90                	xchg   %ax,%ax
+ 89e:	66 90                	xchg   %ax,%ax
 
-000008c0 <free>:
+000008a0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 8c0:	55                   	push   %ebp
+ 8a0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 8c1:	a1 cc 0d 00 00       	mov    0xdcc,%eax
+ 8a1:	a1 ac 0d 00 00       	mov    0xdac,%eax
 {
- 8c6:	89 e5                	mov    %esp,%ebp
- 8c8:	57                   	push   %edi
- 8c9:	56                   	push   %esi
- 8ca:	53                   	push   %ebx
- 8cb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8a6:	89 e5                	mov    %esp,%ebp
+ 8a8:	57                   	push   %edi
+ 8a9:	56                   	push   %esi
+ 8aa:	53                   	push   %ebx
+ 8ab:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 8ce:	8d 4b f8             	lea    -0x8(%ebx),%ecx
- 8d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8ae:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 8b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 8d8:	39 c8                	cmp    %ecx,%eax
- 8da:	8b 10                	mov    (%eax),%edx
- 8dc:	73 32                	jae    910 <free+0x50>
- 8de:	39 d1                	cmp    %edx,%ecx
- 8e0:	72 04                	jb     8e6 <free+0x26>
+ 8b8:	39 c8                	cmp    %ecx,%eax
+ 8ba:	8b 10                	mov    (%eax),%edx
+ 8bc:	73 32                	jae    8f0 <free+0x50>
+ 8be:	39 d1                	cmp    %edx,%ecx
+ 8c0:	72 04                	jb     8c6 <free+0x26>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 8e2:	39 d0                	cmp    %edx,%eax
- 8e4:	72 32                	jb     918 <free+0x58>
+ 8c2:	39 d0                	cmp    %edx,%eax
+ 8c4:	72 32                	jb     8f8 <free+0x58>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 8e6:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 8e9:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 8ec:	39 fa                	cmp    %edi,%edx
- 8ee:	74 30                	je     920 <free+0x60>
+ 8c6:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 8c9:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 8cc:	39 fa                	cmp    %edi,%edx
+ 8ce:	74 30                	je     900 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 8f0:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 8d0:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 8f3:	8b 50 04             	mov    0x4(%eax),%edx
- 8f6:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 8f9:	39 f1                	cmp    %esi,%ecx
- 8fb:	74 3a                	je     937 <free+0x77>
+ 8d3:	8b 50 04             	mov    0x4(%eax),%edx
+ 8d6:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 8d9:	39 f1                	cmp    %esi,%ecx
+ 8db:	74 3a                	je     917 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 8fd:	89 08                	mov    %ecx,(%eax)
+ 8dd:	89 08                	mov    %ecx,(%eax)
   freep = p;
- 8ff:	a3 cc 0d 00 00       	mov    %eax,0xdcc
+ 8df:	a3 ac 0d 00 00       	mov    %eax,0xdac
 }
- 904:	5b                   	pop    %ebx
- 905:	5e                   	pop    %esi
- 906:	5f                   	pop    %edi
- 907:	5d                   	pop    %ebp
- 908:	c3                   	ret    
- 909:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8e4:	5b                   	pop    %ebx
+ 8e5:	5e                   	pop    %esi
+ 8e6:	5f                   	pop    %edi
+ 8e7:	5d                   	pop    %ebp
+ 8e8:	c3                   	ret    
+ 8e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 910:	39 d0                	cmp    %edx,%eax
- 912:	72 04                	jb     918 <free+0x58>
- 914:	39 d1                	cmp    %edx,%ecx
- 916:	72 ce                	jb     8e6 <free+0x26>
+ 8f0:	39 d0                	cmp    %edx,%eax
+ 8f2:	72 04                	jb     8f8 <free+0x58>
+ 8f4:	39 d1                	cmp    %edx,%ecx
+ 8f6:	72 ce                	jb     8c6 <free+0x26>
 {
- 918:	89 d0                	mov    %edx,%eax
- 91a:	eb bc                	jmp    8d8 <free+0x18>
- 91c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 8f8:	89 d0                	mov    %edx,%eax
+ 8fa:	eb bc                	jmp    8b8 <free+0x18>
+ 8fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     bp->s.size += p->s.ptr->s.size;
- 920:	03 72 04             	add    0x4(%edx),%esi
- 923:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 900:	03 72 04             	add    0x4(%edx),%esi
+ 903:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 926:	8b 10                	mov    (%eax),%edx
- 928:	8b 12                	mov    (%edx),%edx
- 92a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 906:	8b 10                	mov    (%eax),%edx
+ 908:	8b 12                	mov    (%edx),%edx
+ 90a:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 92d:	8b 50 04             	mov    0x4(%eax),%edx
- 930:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 933:	39 f1                	cmp    %esi,%ecx
- 935:	75 c6                	jne    8fd <free+0x3d>
+ 90d:	8b 50 04             	mov    0x4(%eax),%edx
+ 910:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 913:	39 f1                	cmp    %esi,%ecx
+ 915:	75 c6                	jne    8dd <free+0x3d>
     p->s.size += bp->s.size;
- 937:	03 53 fc             	add    -0x4(%ebx),%edx
+ 917:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 93a:	a3 cc 0d 00 00       	mov    %eax,0xdcc
+ 91a:	a3 ac 0d 00 00       	mov    %eax,0xdac
     p->s.size += bp->s.size;
- 93f:	89 50 04             	mov    %edx,0x4(%eax)
+ 91f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 942:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 945:	89 10                	mov    %edx,(%eax)
+ 922:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 925:	89 10                	mov    %edx,(%eax)
 }
- 947:	5b                   	pop    %ebx
- 948:	5e                   	pop    %esi
- 949:	5f                   	pop    %edi
- 94a:	5d                   	pop    %ebp
- 94b:	c3                   	ret    
- 94c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 927:	5b                   	pop    %ebx
+ 928:	5e                   	pop    %esi
+ 929:	5f                   	pop    %edi
+ 92a:	5d                   	pop    %ebp
+ 92b:	c3                   	ret    
+ 92c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-00000950 <malloc>:
+00000930 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 950:	55                   	push   %ebp
- 951:	89 e5                	mov    %esp,%ebp
- 953:	57                   	push   %edi
- 954:	56                   	push   %esi
- 955:	53                   	push   %ebx
- 956:	83 ec 0c             	sub    $0xc,%esp
+ 930:	55                   	push   %ebp
+ 931:	89 e5                	mov    %esp,%ebp
+ 933:	57                   	push   %edi
+ 934:	56                   	push   %esi
+ 935:	53                   	push   %ebx
+ 936:	83 ec 0c             	sub    $0xc,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 959:	8b 45 08             	mov    0x8(%ebp),%eax
+ 939:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 95c:	8b 15 cc 0d 00 00    	mov    0xdcc,%edx
+ 93c:	8b 15 ac 0d 00 00    	mov    0xdac,%edx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 962:	8d 78 07             	lea    0x7(%eax),%edi
- 965:	c1 ef 03             	shr    $0x3,%edi
- 968:	83 c7 01             	add    $0x1,%edi
+ 942:	8d 78 07             	lea    0x7(%eax),%edi
+ 945:	c1 ef 03             	shr    $0x3,%edi
+ 948:	83 c7 01             	add    $0x1,%edi
   if((prevp = freep) == 0){
- 96b:	85 d2                	test   %edx,%edx
- 96d:	0f 84 9d 00 00 00    	je     a10 <malloc+0xc0>
- 973:	8b 02                	mov    (%edx),%eax
- 975:	8b 48 04             	mov    0x4(%eax),%ecx
+ 94b:	85 d2                	test   %edx,%edx
+ 94d:	0f 84 9d 00 00 00    	je     9f0 <malloc+0xc0>
+ 953:	8b 02                	mov    (%edx),%eax
+ 955:	8b 48 04             	mov    0x4(%eax),%ecx
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
     if(p->s.size >= nunits){
- 978:	39 cf                	cmp    %ecx,%edi
- 97a:	76 6c                	jbe    9e8 <malloc+0x98>
- 97c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
- 982:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 987:	0f 43 df             	cmovae %edi,%ebx
+ 958:	39 cf                	cmp    %ecx,%edi
+ 95a:	76 6c                	jbe    9c8 <malloc+0x98>
+ 95c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 962:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 967:	0f 43 df             	cmovae %edi,%ebx
   p = sbrk(nu * sizeof(Header));
- 98a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
- 991:	eb 0e                	jmp    9a1 <malloc+0x51>
- 993:	90                   	nop
- 994:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 96a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 971:	eb 0e                	jmp    981 <malloc+0x51>
+ 973:	90                   	nop
+ 974:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 998:	8b 02                	mov    (%edx),%eax
+ 978:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 99a:	8b 48 04             	mov    0x4(%eax),%ecx
- 99d:	39 f9                	cmp    %edi,%ecx
- 99f:	73 47                	jae    9e8 <malloc+0x98>
+ 97a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 97d:	39 f9                	cmp    %edi,%ecx
+ 97f:	73 47                	jae    9c8 <malloc+0x98>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 9a1:	39 05 cc 0d 00 00    	cmp    %eax,0xdcc
- 9a7:	89 c2                	mov    %eax,%edx
- 9a9:	75 ed                	jne    998 <malloc+0x48>
+ 981:	39 05 ac 0d 00 00    	cmp    %eax,0xdac
+ 987:	89 c2                	mov    %eax,%edx
+ 989:	75 ed                	jne    978 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 9ab:	83 ec 0c             	sub    $0xc,%esp
- 9ae:	56                   	push   %esi
- 9af:	e8 56 fc ff ff       	call   60a <sbrk>
+ 98b:	83 ec 0c             	sub    $0xc,%esp
+ 98e:	56                   	push   %esi
+ 98f:	e8 76 fc ff ff       	call   60a <sbrk>
   if(p == (char*)-1)
- 9b4:	83 c4 10             	add    $0x10,%esp
- 9b7:	83 f8 ff             	cmp    $0xffffffff,%eax
- 9ba:	74 1c                	je     9d8 <malloc+0x88>
+ 994:	83 c4 10             	add    $0x10,%esp
+ 997:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 99a:	74 1c                	je     9b8 <malloc+0x88>
   hp->s.size = nu;
- 9bc:	89 58 04             	mov    %ebx,0x4(%eax)
+ 99c:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 9bf:	83 ec 0c             	sub    $0xc,%esp
- 9c2:	83 c0 08             	add    $0x8,%eax
- 9c5:	50                   	push   %eax
- 9c6:	e8 f5 fe ff ff       	call   8c0 <free>
+ 99f:	83 ec 0c             	sub    $0xc,%esp
+ 9a2:	83 c0 08             	add    $0x8,%eax
+ 9a5:	50                   	push   %eax
+ 9a6:	e8 f5 fe ff ff       	call   8a0 <free>
   return freep;
- 9cb:	8b 15 cc 0d 00 00    	mov    0xdcc,%edx
+ 9ab:	8b 15 ac 0d 00 00    	mov    0xdac,%edx
       if((p = morecore(nunits)) == 0)
- 9d1:	83 c4 10             	add    $0x10,%esp
- 9d4:	85 d2                	test   %edx,%edx
- 9d6:	75 c0                	jne    998 <malloc+0x48>
+ 9b1:	83 c4 10             	add    $0x10,%esp
+ 9b4:	85 d2                	test   %edx,%edx
+ 9b6:	75 c0                	jne    978 <malloc+0x48>
         return 0;
   }
 }
- 9d8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 9b8:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 9db:	31 c0                	xor    %eax,%eax
+ 9bb:	31 c0                	xor    %eax,%eax
 }
- 9dd:	5b                   	pop    %ebx
- 9de:	5e                   	pop    %esi
- 9df:	5f                   	pop    %edi
- 9e0:	5d                   	pop    %ebp
- 9e1:	c3                   	ret    
- 9e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 9bd:	5b                   	pop    %ebx
+ 9be:	5e                   	pop    %esi
+ 9bf:	5f                   	pop    %edi
+ 9c0:	5d                   	pop    %ebp
+ 9c1:	c3                   	ret    
+ 9c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 9e8:	39 cf                	cmp    %ecx,%edi
- 9ea:	74 54                	je     a40 <malloc+0xf0>
+ 9c8:	39 cf                	cmp    %ecx,%edi
+ 9ca:	74 54                	je     a20 <malloc+0xf0>
         p->s.size -= nunits;
- 9ec:	29 f9                	sub    %edi,%ecx
- 9ee:	89 48 04             	mov    %ecx,0x4(%eax)
+ 9cc:	29 f9                	sub    %edi,%ecx
+ 9ce:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 9f1:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ 9d1:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 9f4:	89 78 04             	mov    %edi,0x4(%eax)
+ 9d4:	89 78 04             	mov    %edi,0x4(%eax)
       freep = prevp;
- 9f7:	89 15 cc 0d 00 00    	mov    %edx,0xdcc
+ 9d7:	89 15 ac 0d 00 00    	mov    %edx,0xdac
 }
- 9fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 9dd:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- a00:	83 c0 08             	add    $0x8,%eax
+ 9e0:	83 c0 08             	add    $0x8,%eax
 }
- a03:	5b                   	pop    %ebx
- a04:	5e                   	pop    %esi
- a05:	5f                   	pop    %edi
- a06:	5d                   	pop    %ebp
- a07:	c3                   	ret    
- a08:	90                   	nop
- a09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 9e3:	5b                   	pop    %ebx
+ 9e4:	5e                   	pop    %esi
+ 9e5:	5f                   	pop    %edi
+ 9e6:	5d                   	pop    %ebp
+ 9e7:	c3                   	ret    
+ 9e8:	90                   	nop
+ 9e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     base.s.ptr = freep = prevp = &base;
- a10:	c7 05 cc 0d 00 00 d0 	movl   $0xdd0,0xdcc
- a17:	0d 00 00 
- a1a:	c7 05 d0 0d 00 00 d0 	movl   $0xdd0,0xdd0
- a21:	0d 00 00 
+ 9f0:	c7 05 ac 0d 00 00 b0 	movl   $0xdb0,0xdac
+ 9f7:	0d 00 00 
+ 9fa:	c7 05 b0 0d 00 00 b0 	movl   $0xdb0,0xdb0
+ a01:	0d 00 00 
     base.s.size = 0;
- a24:	b8 d0 0d 00 00       	mov    $0xdd0,%eax
- a29:	c7 05 d4 0d 00 00 00 	movl   $0x0,0xdd4
- a30:	00 00 00 
- a33:	e9 44 ff ff ff       	jmp    97c <malloc+0x2c>
- a38:	90                   	nop
- a39:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a04:	b8 b0 0d 00 00       	mov    $0xdb0,%eax
+ a09:	c7 05 b4 0d 00 00 00 	movl   $0x0,0xdb4
+ a10:	00 00 00 
+ a13:	e9 44 ff ff ff       	jmp    95c <malloc+0x2c>
+ a18:	90                   	nop
+ a19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         prevp->s.ptr = p->s.ptr;
- a40:	8b 08                	mov    (%eax),%ecx
- a42:	89 0a                	mov    %ecx,(%edx)
- a44:	eb b1                	jmp    9f7 <malloc+0xa7>
+ a20:	8b 08                	mov    (%eax),%ecx
+ a22:	89 0a                	mov    %ecx,(%edx)
+ a24:	eb b1                	jmp    9d7 <malloc+0xa7>
Binary files main/ls.o and xv6-public/ls.o differ
diff -urN main/ls.sym xv6-public/ls.sym
--- main/ls.sym	2022-09-26 21:21:16.384470000 +0530
+++ xv6-public/ls.sym	2022-10-31 22:34:16.969872883 +0530
@@ -1,7 +1,7 @@
 00000000 .text
-00000a48 .rodata
-00000ab0 .eh_frame
-00000dbc .bss
+00000a28 .rodata
+00000a90 .eh_frame
+00000d9c .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -11,23 +11,22 @@
 00000000 .debug_loc
 00000000 .debug_ranges
 00000000 ls.c
-00000dbc buf.1061
+00000d9c buf.1055
 00000000 ulib.c
 00000000 printf.c
-00000650 printint
-00000a9c digits.1050
+00000630 printint
+00000a7c digits.1044
 00000000 umalloc.c
-00000dcc freep
-00000dd0 base
+00000dac freep
+00000db0 base
 00000330 strcpy
 00000060 fmtname
-000006f0 printf
-00000632 thread_exit
+000006d0 printf
 00000550 memmove
 000005ca mknod
 00000440 gets
 00000602 getpid
-00000950 malloc
+00000930 malloc
 00000612 sleep
 00000592 pipe
 000005a2 write
@@ -41,24 +40,22 @@
 0000057a fork
 0000060a sbrk
 0000061a uptime
-00000dbc __bss_start
+00000d9c __bss_start
 000003e0 memset
 00000000 main
 00000360 strcmp
 000005fa dup
 000004c0 stat
-00000dbc _edata
-00000dd8 _end
+00000d9c _edata
+00000db8 _end
 000005e2 link
 00000100 ls
 00000582 exit
 00000510 atoi
-0000063a draw
+00000622 draw
 000003b0 strlen
 000005c2 open
 00000400 strchr
-00000622 thread_create
 000005ea mkdir
 000005aa close
-0000062a thread_join
-000008c0 free
+000008a0 free
Binary files main/main.o and xv6-public/main.o differ
diff -urN main/Makefile xv6-public/Makefile
--- main/Makefile	2022-09-03 12:22:51.000000000 +0530
+++ xv6-public/Makefile	2022-10-23 08:55:52.000000000 +0530
@@ -178,11 +178,12 @@
 	_rm\
 	_sh\
 	_stressfs\
+	_usertests\
 	_wc\
 	_zombie\
-	_thread\
-	_Drawtest\
-	
+	_drawtest\
+	_memtest\
+
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
 
@@ -250,7 +251,7 @@
 
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
-	ln.c ls.c mkdir.c rm.c stressfs.c  wc.c zombie.c thread.c Drawtest.c\
+	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c drawtest.c memtest.c\
 	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
Binary files main/_memtest and xv6-public/_memtest differ
diff -urN main/memtest.asm xv6-public/memtest.asm
--- main/memtest.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/memtest.asm	2022-10-31 22:34:18.350562957 +0530
@@ -0,0 +1,1244 @@
+
+_memtest:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+
+int main(int argc, char* argv[]){
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	53                   	push   %ebx
+  10:	51                   	push   %ecx
+	for(int i=0;i<20;i++){
+  11:	31 db                	xor    %ebx,%ebx
+int main(int argc, char* argv[]){
+  13:	83 ec 08             	sub    $0x8,%esp
+  16:	eb 11                	jmp    29 <main+0x29>
+  18:	90                   	nop
+  19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+	for(int i=0;i<20;i++){
+  20:	83 fb 14             	cmp    $0x14,%ebx
+  23:	0f 84 ae 00 00 00    	je     d7 <main+0xd7>
+		if(!fork()){
+  29:	e8 2c 03 00 00       	call   35a <fork>
+  2e:	83 c3 01             	add    $0x1,%ebx
+  31:	85 c0                	test   %eax,%eax
+  33:	75 eb                	jne    20 <main+0x20>
+			printf(1, "Child %d\n", i+1);
+  35:	50                   	push   %eax
+  36:	53                   	push   %ebx
+  37:	be 00 10 00 00       	mov    $0x1000,%esi
+  3c:	68 08 08 00 00       	push   $0x808
+  41:	6a 01                	push   $0x1
+			printf(1, "Iteration Matched Different\n");
+			int j = 0;
+  43:	31 db                	xor    %ebx,%ebx
+			printf(1, "Child %d\n", i+1);
+  45:	e8 66 04 00 00       	call   4b0 <printf>
+			printf(1, "Iteration Matched Different\n");
+  4a:	5a                   	pop    %edx
+  4b:	59                   	pop    %ecx
+  4c:	68 12 08 00 00       	push   $0x812
+  51:	6a 01                	push   $0x1
+  53:	e8 58 04 00 00       	call   4b0 <printf>
+  58:	83 c4 10             	add    $0x10,%esp
+  5b:	90                   	nop
+  5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+			while(j<10){
+				int *arr = malloc(4096);
+  60:	83 ec 0c             	sub    $0xc,%esp
+  63:	68 00 10 00 00       	push   $0x1000
+  68:	e8 a3 06 00 00       	call   710 <malloc>
+  6d:	83 c4 10             	add    $0x10,%esp
+				for(int k=0;k<1024;k++)arr[k] = k*k- 4*k +1;
+  70:	31 d2                	xor    %edx,%edx
+  72:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  78:	8d 4a fc             	lea    -0x4(%edx),%ecx
+  7b:	0f af ca             	imul   %edx,%ecx
+  7e:	83 c1 01             	add    $0x1,%ecx
+  81:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
+  84:	83 c2 01             	add    $0x1,%edx
+  87:	81 fa 00 04 00 00    	cmp    $0x400,%edx
+  8d:	75 e9                	jne    78 <main+0x78>
+				int matched=0;
+				for(int k=0;k<1024;k++){
+  8f:	31 d2                	xor    %edx,%edx
+				int matched=0;
+  91:	31 ff                	xor    %edi,%edi
+  93:	90                   	nop
+  94:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+					if(arr[k] == k*k- 4*k +1)matched+=4;
+  98:	8d 4a fc             	lea    -0x4(%edx),%ecx
+  9b:	0f af ca             	imul   %edx,%ecx
+  9e:	83 c1 01             	add    $0x1,%ecx
+  a1:	39 0c 90             	cmp    %ecx,(%eax,%edx,4)
+  a4:	75 03                	jne    a9 <main+0xa9>
+  a6:	83 c7 04             	add    $0x4,%edi
+				for(int k=0;k<1024;k++){
+  a9:	83 c2 01             	add    $0x1,%edx
+  ac:	81 fa 00 04 00 00    	cmp    $0x400,%edx
+  b2:	75 e4                	jne    98 <main+0x98>
+  b4:	89 f0                	mov    %esi,%eax
+  b6:	29 f8                	sub    %edi,%eax
+				}
+				if(j<9)printf(1, "    %d      %dB      %dB\n", j+1, matched, 4096-matched);
+  b8:	83 fb 09             	cmp    $0x9,%ebx
+  bb:	74 29                	je     e6 <main+0xe6>
+  bd:	83 ec 0c             	sub    $0xc,%esp
+  c0:	83 c3 01             	add    $0x1,%ebx
+  c3:	50                   	push   %eax
+  c4:	57                   	push   %edi
+  c5:	53                   	push   %ebx
+  c6:	68 2f 08 00 00       	push   $0x82f
+  cb:	6a 01                	push   $0x1
+  cd:	e8 de 03 00 00       	call   4b0 <printf>
+  d2:	83 c4 20             	add    $0x20,%esp
+  d5:	eb 89                	jmp    60 <main+0x60>
+	}
+	
+	
+	
+	
+	while(wait()!=-1);
+  d7:	e8 8e 02 00 00       	call   36a <wait>
+  dc:	83 f8 ff             	cmp    $0xffffffff,%eax
+  df:	75 f6                	jne    d7 <main+0xd7>
+	exit();
+  e1:	e8 7c 02 00 00       	call   362 <exit>
+				else printf(1, "   %d      %dB      %dB\n", j+1, matched, 4096-matched);
+  e6:	83 ec 0c             	sub    $0xc,%esp
+  e9:	50                   	push   %eax
+  ea:	57                   	push   %edi
+  eb:	6a 0a                	push   $0xa
+  ed:	68 30 08 00 00       	push   $0x830
+  f2:	6a 01                	push   $0x1
+  f4:	e8 b7 03 00 00       	call   4b0 <printf>
+			printf(1, "\n");
+  f9:	83 c4 18             	add    $0x18,%esp
+  fc:	68 47 08 00 00       	push   $0x847
+ 101:	6a 01                	push   $0x1
+ 103:	e8 a8 03 00 00       	call   4b0 <printf>
+			exit();
+ 108:	e8 55 02 00 00       	call   362 <exit>
+ 10d:	66 90                	xchg   %ax,%ax
+ 10f:	90                   	nop
+
+00000110 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 110:	55                   	push   %ebp
+ 111:	89 e5                	mov    %esp,%ebp
+ 113:	53                   	push   %ebx
+ 114:	8b 45 08             	mov    0x8(%ebp),%eax
+ 117:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 11a:	89 c2                	mov    %eax,%edx
+ 11c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 120:	83 c1 01             	add    $0x1,%ecx
+ 123:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+ 127:	83 c2 01             	add    $0x1,%edx
+ 12a:	84 db                	test   %bl,%bl
+ 12c:	88 5a ff             	mov    %bl,-0x1(%edx)
+ 12f:	75 ef                	jne    120 <strcpy+0x10>
+    ;
+  return os;
+}
+ 131:	5b                   	pop    %ebx
+ 132:	5d                   	pop    %ebp
+ 133:	c3                   	ret    
+ 134:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 13a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000140 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 140:	55                   	push   %ebp
+ 141:	89 e5                	mov    %esp,%ebp
+ 143:	53                   	push   %ebx
+ 144:	8b 55 08             	mov    0x8(%ebp),%edx
+ 147:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 14a:	0f b6 02             	movzbl (%edx),%eax
+ 14d:	0f b6 19             	movzbl (%ecx),%ebx
+ 150:	84 c0                	test   %al,%al
+ 152:	75 1c                	jne    170 <strcmp+0x30>
+ 154:	eb 2a                	jmp    180 <strcmp+0x40>
+ 156:	8d 76 00             	lea    0x0(%esi),%esi
+ 159:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+ 160:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 163:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+ 166:	83 c1 01             	add    $0x1,%ecx
+ 169:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+ 16c:	84 c0                	test   %al,%al
+ 16e:	74 10                	je     180 <strcmp+0x40>
+ 170:	38 d8                	cmp    %bl,%al
+ 172:	74 ec                	je     160 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 174:	29 d8                	sub    %ebx,%eax
+}
+ 176:	5b                   	pop    %ebx
+ 177:	5d                   	pop    %ebp
+ 178:	c3                   	ret    
+ 179:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 180:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 182:	29 d8                	sub    %ebx,%eax
+}
+ 184:	5b                   	pop    %ebx
+ 185:	5d                   	pop    %ebp
+ 186:	c3                   	ret    
+ 187:	89 f6                	mov    %esi,%esi
+ 189:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000190 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 190:	55                   	push   %ebp
+ 191:	89 e5                	mov    %esp,%ebp
+ 193:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 196:	80 39 00             	cmpb   $0x0,(%ecx)
+ 199:	74 15                	je     1b0 <strlen+0x20>
+ 19b:	31 d2                	xor    %edx,%edx
+ 19d:	8d 76 00             	lea    0x0(%esi),%esi
+ 1a0:	83 c2 01             	add    $0x1,%edx
+ 1a3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 1a7:	89 d0                	mov    %edx,%eax
+ 1a9:	75 f5                	jne    1a0 <strlen+0x10>
+    ;
+  return n;
+}
+ 1ab:	5d                   	pop    %ebp
+ 1ac:	c3                   	ret    
+ 1ad:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 1b0:	31 c0                	xor    %eax,%eax
+}
+ 1b2:	5d                   	pop    %ebp
+ 1b3:	c3                   	ret    
+ 1b4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1ba:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000001c0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 1c0:	55                   	push   %ebp
+ 1c1:	89 e5                	mov    %esp,%ebp
+ 1c3:	57                   	push   %edi
+ 1c4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 1c7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 1ca:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1cd:	89 d7                	mov    %edx,%edi
+ 1cf:	fc                   	cld    
+ 1d0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 1d2:	89 d0                	mov    %edx,%eax
+ 1d4:	5f                   	pop    %edi
+ 1d5:	5d                   	pop    %ebp
+ 1d6:	c3                   	ret    
+ 1d7:	89 f6                	mov    %esi,%esi
+ 1d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000001e0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 1e0:	55                   	push   %ebp
+ 1e1:	89 e5                	mov    %esp,%ebp
+ 1e3:	53                   	push   %ebx
+ 1e4:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1e7:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 1ea:	0f b6 10             	movzbl (%eax),%edx
+ 1ed:	84 d2                	test   %dl,%dl
+ 1ef:	74 1d                	je     20e <strchr+0x2e>
+    if(*s == c)
+ 1f1:	38 d3                	cmp    %dl,%bl
+ 1f3:	89 d9                	mov    %ebx,%ecx
+ 1f5:	75 0d                	jne    204 <strchr+0x24>
+ 1f7:	eb 17                	jmp    210 <strchr+0x30>
+ 1f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 200:	38 ca                	cmp    %cl,%dl
+ 202:	74 0c                	je     210 <strchr+0x30>
+  for(; *s; s++)
+ 204:	83 c0 01             	add    $0x1,%eax
+ 207:	0f b6 10             	movzbl (%eax),%edx
+ 20a:	84 d2                	test   %dl,%dl
+ 20c:	75 f2                	jne    200 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 20e:	31 c0                	xor    %eax,%eax
+}
+ 210:	5b                   	pop    %ebx
+ 211:	5d                   	pop    %ebp
+ 212:	c3                   	ret    
+ 213:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 219:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000220 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 220:	55                   	push   %ebp
+ 221:	89 e5                	mov    %esp,%ebp
+ 223:	57                   	push   %edi
+ 224:	56                   	push   %esi
+ 225:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 226:	31 f6                	xor    %esi,%esi
+ 228:	89 f3                	mov    %esi,%ebx
+{
+ 22a:	83 ec 1c             	sub    $0x1c,%esp
+ 22d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 230:	eb 2f                	jmp    261 <gets+0x41>
+ 232:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 238:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 23b:	83 ec 04             	sub    $0x4,%esp
+ 23e:	6a 01                	push   $0x1
+ 240:	50                   	push   %eax
+ 241:	6a 00                	push   $0x0
+ 243:	e8 32 01 00 00       	call   37a <read>
+    if(cc < 1)
+ 248:	83 c4 10             	add    $0x10,%esp
+ 24b:	85 c0                	test   %eax,%eax
+ 24d:	7e 1c                	jle    26b <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 24f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 253:	83 c7 01             	add    $0x1,%edi
+ 256:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 259:	3c 0a                	cmp    $0xa,%al
+ 25b:	74 23                	je     280 <gets+0x60>
+ 25d:	3c 0d                	cmp    $0xd,%al
+ 25f:	74 1f                	je     280 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 261:	83 c3 01             	add    $0x1,%ebx
+ 264:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 267:	89 fe                	mov    %edi,%esi
+ 269:	7c cd                	jl     238 <gets+0x18>
+ 26b:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 26d:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 270:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 273:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 276:	5b                   	pop    %ebx
+ 277:	5e                   	pop    %esi
+ 278:	5f                   	pop    %edi
+ 279:	5d                   	pop    %ebp
+ 27a:	c3                   	ret    
+ 27b:	90                   	nop
+ 27c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 280:	8b 75 08             	mov    0x8(%ebp),%esi
+ 283:	8b 45 08             	mov    0x8(%ebp),%eax
+ 286:	01 de                	add    %ebx,%esi
+ 288:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 28a:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 28d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 290:	5b                   	pop    %ebx
+ 291:	5e                   	pop    %esi
+ 292:	5f                   	pop    %edi
+ 293:	5d                   	pop    %ebp
+ 294:	c3                   	ret    
+ 295:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 299:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000002a0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 2a0:	55                   	push   %ebp
+ 2a1:	89 e5                	mov    %esp,%ebp
+ 2a3:	56                   	push   %esi
+ 2a4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2a5:	83 ec 08             	sub    $0x8,%esp
+ 2a8:	6a 00                	push   $0x0
+ 2aa:	ff 75 08             	pushl  0x8(%ebp)
+ 2ad:	e8 f0 00 00 00       	call   3a2 <open>
+  if(fd < 0)
+ 2b2:	83 c4 10             	add    $0x10,%esp
+ 2b5:	85 c0                	test   %eax,%eax
+ 2b7:	78 27                	js     2e0 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 2b9:	83 ec 08             	sub    $0x8,%esp
+ 2bc:	ff 75 0c             	pushl  0xc(%ebp)
+ 2bf:	89 c3                	mov    %eax,%ebx
+ 2c1:	50                   	push   %eax
+ 2c2:	e8 f3 00 00 00       	call   3ba <fstat>
+  close(fd);
+ 2c7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 2ca:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 2cc:	e8 b9 00 00 00       	call   38a <close>
+  return r;
+ 2d1:	83 c4 10             	add    $0x10,%esp
+}
+ 2d4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 2d7:	89 f0                	mov    %esi,%eax
+ 2d9:	5b                   	pop    %ebx
+ 2da:	5e                   	pop    %esi
+ 2db:	5d                   	pop    %ebp
+ 2dc:	c3                   	ret    
+ 2dd:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 2e0:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 2e5:	eb ed                	jmp    2d4 <stat+0x34>
+ 2e7:	89 f6                	mov    %esi,%esi
+ 2e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000002f0 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 2f0:	55                   	push   %ebp
+ 2f1:	89 e5                	mov    %esp,%ebp
+ 2f3:	53                   	push   %ebx
+ 2f4:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 2f7:	0f be 11             	movsbl (%ecx),%edx
+ 2fa:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 2fd:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 2ff:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 304:	77 1f                	ja     325 <atoi+0x35>
+ 306:	8d 76 00             	lea    0x0(%esi),%esi
+ 309:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 310:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 313:	83 c1 01             	add    $0x1,%ecx
+ 316:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 31a:	0f be 11             	movsbl (%ecx),%edx
+ 31d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 320:	80 fb 09             	cmp    $0x9,%bl
+ 323:	76 eb                	jbe    310 <atoi+0x20>
+  return n;
+}
+ 325:	5b                   	pop    %ebx
+ 326:	5d                   	pop    %ebp
+ 327:	c3                   	ret    
+ 328:	90                   	nop
+ 329:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000330 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 330:	55                   	push   %ebp
+ 331:	89 e5                	mov    %esp,%ebp
+ 333:	56                   	push   %esi
+ 334:	53                   	push   %ebx
+ 335:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 338:	8b 45 08             	mov    0x8(%ebp),%eax
+ 33b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 33e:	85 db                	test   %ebx,%ebx
+ 340:	7e 14                	jle    356 <memmove+0x26>
+ 342:	31 d2                	xor    %edx,%edx
+ 344:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 348:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 34c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 34f:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 352:	39 d3                	cmp    %edx,%ebx
+ 354:	75 f2                	jne    348 <memmove+0x18>
+  return vdst;
+}
+ 356:	5b                   	pop    %ebx
+ 357:	5e                   	pop    %esi
+ 358:	5d                   	pop    %ebp
+ 359:	c3                   	ret    
+
+0000035a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 35a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 35f:	cd 40                	int    $0x40
+ 361:	c3                   	ret    
+
+00000362 <exit>:
+SYSCALL(exit)
+ 362:	b8 02 00 00 00       	mov    $0x2,%eax
+ 367:	cd 40                	int    $0x40
+ 369:	c3                   	ret    
+
+0000036a <wait>:
+SYSCALL(wait)
+ 36a:	b8 03 00 00 00       	mov    $0x3,%eax
+ 36f:	cd 40                	int    $0x40
+ 371:	c3                   	ret    
+
+00000372 <pipe>:
+SYSCALL(pipe)
+ 372:	b8 04 00 00 00       	mov    $0x4,%eax
+ 377:	cd 40                	int    $0x40
+ 379:	c3                   	ret    
+
+0000037a <read>:
+SYSCALL(read)
+ 37a:	b8 05 00 00 00       	mov    $0x5,%eax
+ 37f:	cd 40                	int    $0x40
+ 381:	c3                   	ret    
+
+00000382 <write>:
+SYSCALL(write)
+ 382:	b8 10 00 00 00       	mov    $0x10,%eax
+ 387:	cd 40                	int    $0x40
+ 389:	c3                   	ret    
+
+0000038a <close>:
+SYSCALL(close)
+ 38a:	b8 15 00 00 00       	mov    $0x15,%eax
+ 38f:	cd 40                	int    $0x40
+ 391:	c3                   	ret    
+
+00000392 <kill>:
+SYSCALL(kill)
+ 392:	b8 06 00 00 00       	mov    $0x6,%eax
+ 397:	cd 40                	int    $0x40
+ 399:	c3                   	ret    
+
+0000039a <exec>:
+SYSCALL(exec)
+ 39a:	b8 07 00 00 00       	mov    $0x7,%eax
+ 39f:	cd 40                	int    $0x40
+ 3a1:	c3                   	ret    
+
+000003a2 <open>:
+SYSCALL(open)
+ 3a2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3a7:	cd 40                	int    $0x40
+ 3a9:	c3                   	ret    
+
+000003aa <mknod>:
+SYSCALL(mknod)
+ 3aa:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3af:	cd 40                	int    $0x40
+ 3b1:	c3                   	ret    
+
+000003b2 <unlink>:
+SYSCALL(unlink)
+ 3b2:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3b7:	cd 40                	int    $0x40
+ 3b9:	c3                   	ret    
+
+000003ba <fstat>:
+SYSCALL(fstat)
+ 3ba:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3bf:	cd 40                	int    $0x40
+ 3c1:	c3                   	ret    
+
+000003c2 <link>:
+SYSCALL(link)
+ 3c2:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3c7:	cd 40                	int    $0x40
+ 3c9:	c3                   	ret    
+
+000003ca <mkdir>:
+SYSCALL(mkdir)
+ 3ca:	b8 14 00 00 00       	mov    $0x14,%eax
+ 3cf:	cd 40                	int    $0x40
+ 3d1:	c3                   	ret    
+
+000003d2 <chdir>:
+SYSCALL(chdir)
+ 3d2:	b8 09 00 00 00       	mov    $0x9,%eax
+ 3d7:	cd 40                	int    $0x40
+ 3d9:	c3                   	ret    
+
+000003da <dup>:
+SYSCALL(dup)
+ 3da:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 3df:	cd 40                	int    $0x40
+ 3e1:	c3                   	ret    
+
+000003e2 <getpid>:
+SYSCALL(getpid)
+ 3e2:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 3e7:	cd 40                	int    $0x40
+ 3e9:	c3                   	ret    
+
+000003ea <sbrk>:
+SYSCALL(sbrk)
+ 3ea:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 3ef:	cd 40                	int    $0x40
+ 3f1:	c3                   	ret    
+
+000003f2 <sleep>:
+SYSCALL(sleep)
+ 3f2:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 3f7:	cd 40                	int    $0x40
+ 3f9:	c3                   	ret    
+
+000003fa <uptime>:
+SYSCALL(uptime)
+ 3fa:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 3ff:	cd 40                	int    $0x40
+ 401:	c3                   	ret    
+
+00000402 <draw>:
+SYSCALL(draw)
+ 402:	b8 16 00 00 00       	mov    $0x16,%eax
+ 407:	cd 40                	int    $0x40
+ 409:	c3                   	ret    
+ 40a:	66 90                	xchg   %ax,%ax
+ 40c:	66 90                	xchg   %ax,%ax
+ 40e:	66 90                	xchg   %ax,%ax
+
+00000410 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 410:	55                   	push   %ebp
+ 411:	89 e5                	mov    %esp,%ebp
+ 413:	57                   	push   %edi
+ 414:	56                   	push   %esi
+ 415:	53                   	push   %ebx
+ 416:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 419:	85 d2                	test   %edx,%edx
+{
+ 41b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 41e:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 420:	79 76                	jns    498 <printint+0x88>
+ 422:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 426:	74 70                	je     498 <printint+0x88>
+    x = -xx;
+ 428:	f7 d8                	neg    %eax
+    neg = 1;
+ 42a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 431:	31 f6                	xor    %esi,%esi
+ 433:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 436:	eb 0a                	jmp    442 <printint+0x32>
+ 438:	90                   	nop
+ 439:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 440:	89 fe                	mov    %edi,%esi
+ 442:	31 d2                	xor    %edx,%edx
+ 444:	8d 7e 01             	lea    0x1(%esi),%edi
+ 447:	f7 f1                	div    %ecx
+ 449:	0f b6 92 50 08 00 00 	movzbl 0x850(%edx),%edx
+  }while((x /= base) != 0);
+ 450:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 452:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 455:	75 e9                	jne    440 <printint+0x30>
+  if(neg)
+ 457:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 45a:	85 c0                	test   %eax,%eax
+ 45c:	74 08                	je     466 <printint+0x56>
+    buf[i++] = '-';
+ 45e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 463:	8d 7e 02             	lea    0x2(%esi),%edi
+ 466:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 46a:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 46d:	8d 76 00             	lea    0x0(%esi),%esi
+ 470:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 473:	83 ec 04             	sub    $0x4,%esp
+ 476:	83 ee 01             	sub    $0x1,%esi
+ 479:	6a 01                	push   $0x1
+ 47b:	53                   	push   %ebx
+ 47c:	57                   	push   %edi
+ 47d:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 480:	e8 fd fe ff ff       	call   382 <write>
+
+  while(--i >= 0)
+ 485:	83 c4 10             	add    $0x10,%esp
+ 488:	39 de                	cmp    %ebx,%esi
+ 48a:	75 e4                	jne    470 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 48c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 48f:	5b                   	pop    %ebx
+ 490:	5e                   	pop    %esi
+ 491:	5f                   	pop    %edi
+ 492:	5d                   	pop    %ebp
+ 493:	c3                   	ret    
+ 494:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 498:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 49f:	eb 90                	jmp    431 <printint+0x21>
+ 4a1:	eb 0d                	jmp    4b0 <printf>
+ 4a3:	90                   	nop
+ 4a4:	90                   	nop
+ 4a5:	90                   	nop
+ 4a6:	90                   	nop
+ 4a7:	90                   	nop
+ 4a8:	90                   	nop
+ 4a9:	90                   	nop
+ 4aa:	90                   	nop
+ 4ab:	90                   	nop
+ 4ac:	90                   	nop
+ 4ad:	90                   	nop
+ 4ae:	90                   	nop
+ 4af:	90                   	nop
+
+000004b0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 4b0:	55                   	push   %ebp
+ 4b1:	89 e5                	mov    %esp,%ebp
+ 4b3:	57                   	push   %edi
+ 4b4:	56                   	push   %esi
+ 4b5:	53                   	push   %ebx
+ 4b6:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4b9:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 4bc:	0f b6 1e             	movzbl (%esi),%ebx
+ 4bf:	84 db                	test   %bl,%bl
+ 4c1:	0f 84 b3 00 00 00    	je     57a <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 4c7:	8d 45 10             	lea    0x10(%ebp),%eax
+ 4ca:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 4cd:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 4cf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 4d2:	eb 2f                	jmp    503 <printf+0x53>
+ 4d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 4d8:	83 f8 25             	cmp    $0x25,%eax
+ 4db:	0f 84 a7 00 00 00    	je     588 <printf+0xd8>
+  write(fd, &c, 1);
+ 4e1:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 4e4:	83 ec 04             	sub    $0x4,%esp
+ 4e7:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 4ea:	6a 01                	push   $0x1
+ 4ec:	50                   	push   %eax
+ 4ed:	ff 75 08             	pushl  0x8(%ebp)
+ 4f0:	e8 8d fe ff ff       	call   382 <write>
+ 4f5:	83 c4 10             	add    $0x10,%esp
+ 4f8:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 4fb:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 4ff:	84 db                	test   %bl,%bl
+ 501:	74 77                	je     57a <printf+0xca>
+    if(state == 0){
+ 503:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 505:	0f be cb             	movsbl %bl,%ecx
+ 508:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 50b:	74 cb                	je     4d8 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 50d:	83 ff 25             	cmp    $0x25,%edi
+ 510:	75 e6                	jne    4f8 <printf+0x48>
+      if(c == 'd'){
+ 512:	83 f8 64             	cmp    $0x64,%eax
+ 515:	0f 84 05 01 00 00    	je     620 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 51b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 521:	83 f9 70             	cmp    $0x70,%ecx
+ 524:	74 72                	je     598 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 526:	83 f8 73             	cmp    $0x73,%eax
+ 529:	0f 84 99 00 00 00    	je     5c8 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 52f:	83 f8 63             	cmp    $0x63,%eax
+ 532:	0f 84 08 01 00 00    	je     640 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 538:	83 f8 25             	cmp    $0x25,%eax
+ 53b:	0f 84 ef 00 00 00    	je     630 <printf+0x180>
+  write(fd, &c, 1);
+ 541:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 544:	83 ec 04             	sub    $0x4,%esp
+ 547:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 54b:	6a 01                	push   $0x1
+ 54d:	50                   	push   %eax
+ 54e:	ff 75 08             	pushl  0x8(%ebp)
+ 551:	e8 2c fe ff ff       	call   382 <write>
+ 556:	83 c4 0c             	add    $0xc,%esp
+ 559:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 55c:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 55f:	6a 01                	push   $0x1
+ 561:	50                   	push   %eax
+ 562:	ff 75 08             	pushl  0x8(%ebp)
+ 565:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 568:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 56a:	e8 13 fe ff ff       	call   382 <write>
+  for(i = 0; fmt[i]; i++){
+ 56f:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 573:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 576:	84 db                	test   %bl,%bl
+ 578:	75 89                	jne    503 <printf+0x53>
+    }
+  }
+}
+ 57a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 57d:	5b                   	pop    %ebx
+ 57e:	5e                   	pop    %esi
+ 57f:	5f                   	pop    %edi
+ 580:	5d                   	pop    %ebp
+ 581:	c3                   	ret    
+ 582:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 588:	bf 25 00 00 00       	mov    $0x25,%edi
+ 58d:	e9 66 ff ff ff       	jmp    4f8 <printf+0x48>
+ 592:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 598:	83 ec 0c             	sub    $0xc,%esp
+ 59b:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5a0:	6a 00                	push   $0x0
+ 5a2:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 5a5:	8b 45 08             	mov    0x8(%ebp),%eax
+ 5a8:	8b 17                	mov    (%edi),%edx
+ 5aa:	e8 61 fe ff ff       	call   410 <printint>
+        ap++;
+ 5af:	89 f8                	mov    %edi,%eax
+ 5b1:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5b4:	31 ff                	xor    %edi,%edi
+        ap++;
+ 5b6:	83 c0 04             	add    $0x4,%eax
+ 5b9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 5bc:	e9 37 ff ff ff       	jmp    4f8 <printf+0x48>
+ 5c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 5c8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 5cb:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 5cd:	83 c0 04             	add    $0x4,%eax
+ 5d0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 5d3:	85 c9                	test   %ecx,%ecx
+ 5d5:	0f 84 8e 00 00 00    	je     669 <printf+0x1b9>
+        while(*s != 0){
+ 5db:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 5de:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 5e0:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 5e2:	84 c0                	test   %al,%al
+ 5e4:	0f 84 0e ff ff ff    	je     4f8 <printf+0x48>
+ 5ea:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 5ed:	89 de                	mov    %ebx,%esi
+ 5ef:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5f2:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 5f5:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 5f8:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5fb:	83 c6 01             	add    $0x1,%esi
+ 5fe:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 601:	6a 01                	push   $0x1
+ 603:	57                   	push   %edi
+ 604:	53                   	push   %ebx
+ 605:	e8 78 fd ff ff       	call   382 <write>
+        while(*s != 0){
+ 60a:	0f b6 06             	movzbl (%esi),%eax
+ 60d:	83 c4 10             	add    $0x10,%esp
+ 610:	84 c0                	test   %al,%al
+ 612:	75 e4                	jne    5f8 <printf+0x148>
+ 614:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 617:	31 ff                	xor    %edi,%edi
+ 619:	e9 da fe ff ff       	jmp    4f8 <printf+0x48>
+ 61e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 620:	83 ec 0c             	sub    $0xc,%esp
+ 623:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 628:	6a 01                	push   $0x1
+ 62a:	e9 73 ff ff ff       	jmp    5a2 <printf+0xf2>
+ 62f:	90                   	nop
+  write(fd, &c, 1);
+ 630:	83 ec 04             	sub    $0x4,%esp
+ 633:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 636:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 639:	6a 01                	push   $0x1
+ 63b:	e9 21 ff ff ff       	jmp    561 <printf+0xb1>
+        putc(fd, *ap);
+ 640:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 643:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 646:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 648:	6a 01                	push   $0x1
+        ap++;
+ 64a:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 64d:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 650:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 653:	50                   	push   %eax
+ 654:	ff 75 08             	pushl  0x8(%ebp)
+ 657:	e8 26 fd ff ff       	call   382 <write>
+        ap++;
+ 65c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 65f:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 662:	31 ff                	xor    %edi,%edi
+ 664:	e9 8f fe ff ff       	jmp    4f8 <printf+0x48>
+          s = "(null)";
+ 669:	bb 49 08 00 00       	mov    $0x849,%ebx
+        while(*s != 0){
+ 66e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 673:	e9 72 ff ff ff       	jmp    5ea <printf+0x13a>
+ 678:	66 90                	xchg   %ax,%ax
+ 67a:	66 90                	xchg   %ax,%ax
+ 67c:	66 90                	xchg   %ax,%ax
+ 67e:	66 90                	xchg   %ax,%ax
+
+00000680 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 680:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 681:	a1 00 0b 00 00       	mov    0xb00,%eax
+{
+ 686:	89 e5                	mov    %esp,%ebp
+ 688:	57                   	push   %edi
+ 689:	56                   	push   %esi
+ 68a:	53                   	push   %ebx
+ 68b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 68e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 691:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 698:	39 c8                	cmp    %ecx,%eax
+ 69a:	8b 10                	mov    (%eax),%edx
+ 69c:	73 32                	jae    6d0 <free+0x50>
+ 69e:	39 d1                	cmp    %edx,%ecx
+ 6a0:	72 04                	jb     6a6 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6a2:	39 d0                	cmp    %edx,%eax
+ 6a4:	72 32                	jb     6d8 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 6a6:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6a9:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6ac:	39 fa                	cmp    %edi,%edx
+ 6ae:	74 30                	je     6e0 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 6b0:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6b3:	8b 50 04             	mov    0x4(%eax),%edx
+ 6b6:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6b9:	39 f1                	cmp    %esi,%ecx
+ 6bb:	74 3a                	je     6f7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 6bd:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 6bf:	a3 00 0b 00 00       	mov    %eax,0xb00
+}
+ 6c4:	5b                   	pop    %ebx
+ 6c5:	5e                   	pop    %esi
+ 6c6:	5f                   	pop    %edi
+ 6c7:	5d                   	pop    %ebp
+ 6c8:	c3                   	ret    
+ 6c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6d0:	39 d0                	cmp    %edx,%eax
+ 6d2:	72 04                	jb     6d8 <free+0x58>
+ 6d4:	39 d1                	cmp    %edx,%ecx
+ 6d6:	72 ce                	jb     6a6 <free+0x26>
+{
+ 6d8:	89 d0                	mov    %edx,%eax
+ 6da:	eb bc                	jmp    698 <free+0x18>
+ 6dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 6e0:	03 72 04             	add    0x4(%edx),%esi
+ 6e3:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6e6:	8b 10                	mov    (%eax),%edx
+ 6e8:	8b 12                	mov    (%edx),%edx
+ 6ea:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6ed:	8b 50 04             	mov    0x4(%eax),%edx
+ 6f0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6f3:	39 f1                	cmp    %esi,%ecx
+ 6f5:	75 c6                	jne    6bd <free+0x3d>
+    p->s.size += bp->s.size;
+ 6f7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 6fa:	a3 00 0b 00 00       	mov    %eax,0xb00
+    p->s.size += bp->s.size;
+ 6ff:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 702:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 705:	89 10                	mov    %edx,(%eax)
+}
+ 707:	5b                   	pop    %ebx
+ 708:	5e                   	pop    %esi
+ 709:	5f                   	pop    %edi
+ 70a:	5d                   	pop    %ebp
+ 70b:	c3                   	ret    
+ 70c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000710 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 710:	55                   	push   %ebp
+ 711:	89 e5                	mov    %esp,%ebp
+ 713:	57                   	push   %edi
+ 714:	56                   	push   %esi
+ 715:	53                   	push   %ebx
+ 716:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 719:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 71c:	8b 15 00 0b 00 00    	mov    0xb00,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 722:	8d 78 07             	lea    0x7(%eax),%edi
+ 725:	c1 ef 03             	shr    $0x3,%edi
+ 728:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 72b:	85 d2                	test   %edx,%edx
+ 72d:	0f 84 9d 00 00 00    	je     7d0 <malloc+0xc0>
+ 733:	8b 02                	mov    (%edx),%eax
+ 735:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 738:	39 cf                	cmp    %ecx,%edi
+ 73a:	76 6c                	jbe    7a8 <malloc+0x98>
+ 73c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 742:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 747:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 74a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 751:	eb 0e                	jmp    761 <malloc+0x51>
+ 753:	90                   	nop
+ 754:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 758:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 75a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 75d:	39 f9                	cmp    %edi,%ecx
+ 75f:	73 47                	jae    7a8 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 761:	39 05 00 0b 00 00    	cmp    %eax,0xb00
+ 767:	89 c2                	mov    %eax,%edx
+ 769:	75 ed                	jne    758 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 76b:	83 ec 0c             	sub    $0xc,%esp
+ 76e:	56                   	push   %esi
+ 76f:	e8 76 fc ff ff       	call   3ea <sbrk>
+  if(p == (char*)-1)
+ 774:	83 c4 10             	add    $0x10,%esp
+ 777:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 77a:	74 1c                	je     798 <malloc+0x88>
+  hp->s.size = nu;
+ 77c:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 77f:	83 ec 0c             	sub    $0xc,%esp
+ 782:	83 c0 08             	add    $0x8,%eax
+ 785:	50                   	push   %eax
+ 786:	e8 f5 fe ff ff       	call   680 <free>
+  return freep;
+ 78b:	8b 15 00 0b 00 00    	mov    0xb00,%edx
+      if((p = morecore(nunits)) == 0)
+ 791:	83 c4 10             	add    $0x10,%esp
+ 794:	85 d2                	test   %edx,%edx
+ 796:	75 c0                	jne    758 <malloc+0x48>
+        return 0;
+  }
+}
+ 798:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 79b:	31 c0                	xor    %eax,%eax
+}
+ 79d:	5b                   	pop    %ebx
+ 79e:	5e                   	pop    %esi
+ 79f:	5f                   	pop    %edi
+ 7a0:	5d                   	pop    %ebp
+ 7a1:	c3                   	ret    
+ 7a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 7a8:	39 cf                	cmp    %ecx,%edi
+ 7aa:	74 54                	je     800 <malloc+0xf0>
+        p->s.size -= nunits;
+ 7ac:	29 f9                	sub    %edi,%ecx
+ 7ae:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 7b1:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 7b4:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 7b7:	89 15 00 0b 00 00    	mov    %edx,0xb00
+}
+ 7bd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 7c0:	83 c0 08             	add    $0x8,%eax
+}
+ 7c3:	5b                   	pop    %ebx
+ 7c4:	5e                   	pop    %esi
+ 7c5:	5f                   	pop    %edi
+ 7c6:	5d                   	pop    %ebp
+ 7c7:	c3                   	ret    
+ 7c8:	90                   	nop
+ 7c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 7d0:	c7 05 00 0b 00 00 04 	movl   $0xb04,0xb00
+ 7d7:	0b 00 00 
+ 7da:	c7 05 04 0b 00 00 04 	movl   $0xb04,0xb04
+ 7e1:	0b 00 00 
+    base.s.size = 0;
+ 7e4:	b8 04 0b 00 00       	mov    $0xb04,%eax
+ 7e9:	c7 05 08 0b 00 00 00 	movl   $0x0,0xb08
+ 7f0:	00 00 00 
+ 7f3:	e9 44 ff ff ff       	jmp    73c <malloc+0x2c>
+ 7f8:	90                   	nop
+ 7f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 800:	8b 08                	mov    (%eax),%ecx
+ 802:	89 0a                	mov    %ecx,(%edx)
+ 804:	eb b1                	jmp    7b7 <malloc+0xa7>
diff -urN main/memtest.c xv6-public/memtest.c
--- main/memtest.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/memtest.c	2022-10-30 16:08:54.000000000 +0530
@@ -0,0 +1,39 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+
+int main(int argc, char* argv[]){
+	for(int i=0;i<20;i++){
+		if(!fork()){
+			printf(1, "Child %d\n", i+1);
+			printf(1, "Iteration Matched Different\n");
+			int j = 0;
+			while(j<10){
+				int *arr = malloc(4096);
+				for(int k=0;k<1024;k++)arr[k] = k*k- 4*k +1;
+				int matched=0;
+				for(int k=0;k<1024;k++){
+					if(arr[k] == k*k- 4*k +1)matched+=4;
+				}
+				if(j<9)printf(1, "    %d      %dB      %dB\n", j+1, matched, 4096-matched);
+				else printf(1, "   %d      %dB      %dB\n", j+1, matched, 4096-matched);
+                
+                j++;
+				
+			}
+			
+			
+			printf(1, "\n");
+			
+			exit();
+		}
+	}
+	
+	
+	
+	
+	while(wait()!=-1);
+	exit();
+
+}
diff -urN main/memtest.d xv6-public/memtest.d
--- main/memtest.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/memtest.d	2022-10-31 22:34:18.326550956 +0530
@@ -0,0 +1 @@
+memtest.o: memtest.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files main/memtest.o and xv6-public/memtest.o differ
diff -urN main/memtest.sym xv6-public/memtest.sym
--- main/memtest.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/memtest.sym	2022-10-31 22:34:18.358566958 +0530
@@ -0,0 +1,58 @@
+00000000 .text
+00000808 .rodata
+00000864 .eh_frame
+00000b00 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 memtest.c
+00000000 ulib.c
+00000000 printf.c
+00000410 printint
+00000850 digits.1044
+00000000 umalloc.c
+00000b00 freep
+00000b04 base
+00000110 strcpy
+000004b0 printf
+00000330 memmove
+000003aa mknod
+00000220 gets
+000003e2 getpid
+00000710 malloc
+000003f2 sleep
+00000372 pipe
+00000382 write
+000003ba fstat
+00000392 kill
+000003d2 chdir
+0000039a exec
+0000036a wait
+0000037a read
+000003b2 unlink
+0000035a fork
+000003ea sbrk
+000003fa uptime
+00000b00 __bss_start
+000001c0 memset
+00000000 main
+00000140 strcmp
+000003da dup
+000002a0 stat
+00000b00 _edata
+00000b0c _end
+000003c2 link
+00000362 exit
+000002f0 atoi
+00000402 draw
+00000190 strlen
+000003a2 open
+000001e0 strchr
+000003ca mkdir
+0000038a close
+00000680 free
Binary files main/_mkdir and xv6-public/_mkdir differ
diff -urN main/mkdir.asm xv6-public/mkdir.asm
--- main/mkdir.asm	2022-09-26 21:21:16.492524000 +0530
+++ xv6-public/mkdir.asm	2022-10-31 22:34:17.049912887 +0530
@@ -59,18 +59,18 @@
       printf(2, "mkdir: %s failed to create\n", argv[i]);
   50:	50                   	push   %eax
   51:	ff 33                	pushl  (%ebx)
-  53:	68 af 07 00 00       	push   $0x7af
+  53:	68 8f 07 00 00       	push   $0x78f
   58:	6a 02                	push   $0x2
-  5a:	e8 e1 03 00 00       	call   440 <printf>
+  5a:	e8 c1 03 00 00       	call   420 <printf>
       break;
   5f:	83 c4 10             	add    $0x10,%esp
   62:	eb e7                	jmp    4b <main+0x4b>
     printf(2, "Usage: mkdir files...\n");
   64:	52                   	push   %edx
   65:	52                   	push   %edx
-  66:	68 98 07 00 00       	push   $0x798
+  66:	68 78 07 00 00       	push   $0x778
   6b:	6a 02                	push   $0x2
-  6d:	e8 ce 03 00 00       	call   440 <printf>
+  6d:	e8 ae 03 00 00       	call   420 <printf>
     exit();
   72:	e8 5b 02 00 00       	call   2d2 <exit>
   77:	66 90                	xchg   %ax,%ax
@@ -597,614 +597,593 @@
  36f:	cd 40                	int    $0x40
  371:	c3                   	ret    
 
-00000372 <thread_create>:
-SYSCALL(thread_create)
+00000372 <draw>:
+SYSCALL(draw)
  372:	b8 16 00 00 00       	mov    $0x16,%eax
  377:	cd 40                	int    $0x40
  379:	c3                   	ret    
+ 37a:	66 90                	xchg   %ax,%ax
+ 37c:	66 90                	xchg   %ax,%ax
+ 37e:	66 90                	xchg   %ax,%ax
 
-0000037a <thread_join>:
-SYSCALL(thread_join)
- 37a:	b8 18 00 00 00       	mov    $0x18,%eax
- 37f:	cd 40                	int    $0x40
- 381:	c3                   	ret    
-
-00000382 <thread_exit>:
-SYSCALL(thread_exit)
- 382:	b8 17 00 00 00       	mov    $0x17,%eax
- 387:	cd 40                	int    $0x40
- 389:	c3                   	ret    
-
-0000038a <draw>:
- 38a:	b8 19 00 00 00       	mov    $0x19,%eax
- 38f:	cd 40                	int    $0x40
- 391:	c3                   	ret    
- 392:	66 90                	xchg   %ax,%ax
- 394:	66 90                	xchg   %ax,%ax
- 396:	66 90                	xchg   %ax,%ax
- 398:	66 90                	xchg   %ax,%ax
- 39a:	66 90                	xchg   %ax,%ax
- 39c:	66 90                	xchg   %ax,%ax
- 39e:	66 90                	xchg   %ax,%ax
-
-000003a0 <printint>:
+00000380 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 3a0:	55                   	push   %ebp
- 3a1:	89 e5                	mov    %esp,%ebp
- 3a3:	57                   	push   %edi
- 3a4:	56                   	push   %esi
- 3a5:	53                   	push   %ebx
- 3a6:	83 ec 3c             	sub    $0x3c,%esp
+ 380:	55                   	push   %ebp
+ 381:	89 e5                	mov    %esp,%ebp
+ 383:	57                   	push   %edi
+ 384:	56                   	push   %esi
+ 385:	53                   	push   %ebx
+ 386:	83 ec 3c             	sub    $0x3c,%esp
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 3a9:	85 d2                	test   %edx,%edx
+ 389:	85 d2                	test   %edx,%edx
 {
- 3ab:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 38b:	89 45 c0             	mov    %eax,-0x40(%ebp)
     neg = 1;
     x = -xx;
- 3ae:	89 d0                	mov    %edx,%eax
+ 38e:	89 d0                	mov    %edx,%eax
   if(sgn && xx < 0){
- 3b0:	79 76                	jns    428 <printint+0x88>
- 3b2:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 3b6:	74 70                	je     428 <printint+0x88>
+ 390:	79 76                	jns    408 <printint+0x88>
+ 392:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 396:	74 70                	je     408 <printint+0x88>
     x = -xx;
- 3b8:	f7 d8                	neg    %eax
+ 398:	f7 d8                	neg    %eax
     neg = 1;
- 3ba:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+ 39a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
   } else {
     x = xx;
   }
 
   i = 0;
- 3c1:	31 f6                	xor    %esi,%esi
- 3c3:	8d 5d d7             	lea    -0x29(%ebp),%ebx
- 3c6:	eb 0a                	jmp    3d2 <printint+0x32>
- 3c8:	90                   	nop
- 3c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3a1:	31 f6                	xor    %esi,%esi
+ 3a3:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 3a6:	eb 0a                	jmp    3b2 <printint+0x32>
+ 3a8:	90                   	nop
+ 3a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   do{
     buf[i++] = digits[x % base];
- 3d0:	89 fe                	mov    %edi,%esi
- 3d2:	31 d2                	xor    %edx,%edx
- 3d4:	8d 7e 01             	lea    0x1(%esi),%edi
- 3d7:	f7 f1                	div    %ecx
- 3d9:	0f b6 92 d4 07 00 00 	movzbl 0x7d4(%edx),%edx
+ 3b0:	89 fe                	mov    %edi,%esi
+ 3b2:	31 d2                	xor    %edx,%edx
+ 3b4:	8d 7e 01             	lea    0x1(%esi),%edi
+ 3b7:	f7 f1                	div    %ecx
+ 3b9:	0f b6 92 b4 07 00 00 	movzbl 0x7b4(%edx),%edx
   }while((x /= base) != 0);
- 3e0:	85 c0                	test   %eax,%eax
+ 3c0:	85 c0                	test   %eax,%eax
     buf[i++] = digits[x % base];
- 3e2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+ 3c2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
   }while((x /= base) != 0);
- 3e5:	75 e9                	jne    3d0 <printint+0x30>
+ 3c5:	75 e9                	jne    3b0 <printint+0x30>
   if(neg)
- 3e7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
- 3ea:	85 c0                	test   %eax,%eax
- 3ec:	74 08                	je     3f6 <printint+0x56>
+ 3c7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 3ca:	85 c0                	test   %eax,%eax
+ 3cc:	74 08                	je     3d6 <printint+0x56>
     buf[i++] = '-';
- 3ee:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
- 3f3:	8d 7e 02             	lea    0x2(%esi),%edi
- 3f6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
- 3fa:	8b 7d c0             	mov    -0x40(%ebp),%edi
- 3fd:	8d 76 00             	lea    0x0(%esi),%esi
- 400:	0f b6 06             	movzbl (%esi),%eax
+ 3ce:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 3d3:	8d 7e 02             	lea    0x2(%esi),%edi
+ 3d6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 3da:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 3dd:	8d 76 00             	lea    0x0(%esi),%esi
+ 3e0:	0f b6 06             	movzbl (%esi),%eax
   write(fd, &c, 1);
- 403:	83 ec 04             	sub    $0x4,%esp
- 406:	83 ee 01             	sub    $0x1,%esi
- 409:	6a 01                	push   $0x1
- 40b:	53                   	push   %ebx
- 40c:	57                   	push   %edi
- 40d:	88 45 d7             	mov    %al,-0x29(%ebp)
- 410:	e8 dd fe ff ff       	call   2f2 <write>
+ 3e3:	83 ec 04             	sub    $0x4,%esp
+ 3e6:	83 ee 01             	sub    $0x1,%esi
+ 3e9:	6a 01                	push   $0x1
+ 3eb:	53                   	push   %ebx
+ 3ec:	57                   	push   %edi
+ 3ed:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 3f0:	e8 fd fe ff ff       	call   2f2 <write>
 
   while(--i >= 0)
- 415:	83 c4 10             	add    $0x10,%esp
- 418:	39 de                	cmp    %ebx,%esi
- 41a:	75 e4                	jne    400 <printint+0x60>
+ 3f5:	83 c4 10             	add    $0x10,%esp
+ 3f8:	39 de                	cmp    %ebx,%esi
+ 3fa:	75 e4                	jne    3e0 <printint+0x60>
     putc(fd, buf[i]);
 }
- 41c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 41f:	5b                   	pop    %ebx
- 420:	5e                   	pop    %esi
- 421:	5f                   	pop    %edi
- 422:	5d                   	pop    %ebp
- 423:	c3                   	ret    
- 424:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 3fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3ff:	5b                   	pop    %ebx
+ 400:	5e                   	pop    %esi
+ 401:	5f                   	pop    %edi
+ 402:	5d                   	pop    %ebp
+ 403:	c3                   	ret    
+ 404:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 428:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
- 42f:	eb 90                	jmp    3c1 <printint+0x21>
- 431:	eb 0d                	jmp    440 <printf>
- 433:	90                   	nop
- 434:	90                   	nop
- 435:	90                   	nop
- 436:	90                   	nop
- 437:	90                   	nop
- 438:	90                   	nop
- 439:	90                   	nop
- 43a:	90                   	nop
- 43b:	90                   	nop
- 43c:	90                   	nop
- 43d:	90                   	nop
- 43e:	90                   	nop
- 43f:	90                   	nop
+ 408:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 40f:	eb 90                	jmp    3a1 <printint+0x21>
+ 411:	eb 0d                	jmp    420 <printf>
+ 413:	90                   	nop
+ 414:	90                   	nop
+ 415:	90                   	nop
+ 416:	90                   	nop
+ 417:	90                   	nop
+ 418:	90                   	nop
+ 419:	90                   	nop
+ 41a:	90                   	nop
+ 41b:	90                   	nop
+ 41c:	90                   	nop
+ 41d:	90                   	nop
+ 41e:	90                   	nop
+ 41f:	90                   	nop
 
-00000440 <printf>:
+00000420 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 440:	55                   	push   %ebp
- 441:	89 e5                	mov    %esp,%ebp
- 443:	57                   	push   %edi
- 444:	56                   	push   %esi
- 445:	53                   	push   %ebx
- 446:	83 ec 2c             	sub    $0x2c,%esp
+ 420:	55                   	push   %ebp
+ 421:	89 e5                	mov    %esp,%ebp
+ 423:	57                   	push   %edi
+ 424:	56                   	push   %esi
+ 425:	53                   	push   %ebx
+ 426:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 449:	8b 75 0c             	mov    0xc(%ebp),%esi
- 44c:	0f b6 1e             	movzbl (%esi),%ebx
- 44f:	84 db                	test   %bl,%bl
- 451:	0f 84 b3 00 00 00    	je     50a <printf+0xca>
+ 429:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 42c:	0f b6 1e             	movzbl (%esi),%ebx
+ 42f:	84 db                	test   %bl,%bl
+ 431:	0f 84 b3 00 00 00    	je     4ea <printf+0xca>
   ap = (uint*)(void*)&fmt + 1;
- 457:	8d 45 10             	lea    0x10(%ebp),%eax
- 45a:	83 c6 01             	add    $0x1,%esi
+ 437:	8d 45 10             	lea    0x10(%ebp),%eax
+ 43a:	83 c6 01             	add    $0x1,%esi
   state = 0;
- 45d:	31 ff                	xor    %edi,%edi
+ 43d:	31 ff                	xor    %edi,%edi
   ap = (uint*)(void*)&fmt + 1;
- 45f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
- 462:	eb 2f                	jmp    493 <printf+0x53>
- 464:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 43f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 442:	eb 2f                	jmp    473 <printf+0x53>
+ 444:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
- 468:	83 f8 25             	cmp    $0x25,%eax
- 46b:	0f 84 a7 00 00 00    	je     518 <printf+0xd8>
+ 448:	83 f8 25             	cmp    $0x25,%eax
+ 44b:	0f 84 a7 00 00 00    	je     4f8 <printf+0xd8>
   write(fd, &c, 1);
- 471:	8d 45 e2             	lea    -0x1e(%ebp),%eax
- 474:	83 ec 04             	sub    $0x4,%esp
- 477:	88 5d e2             	mov    %bl,-0x1e(%ebp)
- 47a:	6a 01                	push   $0x1
- 47c:	50                   	push   %eax
- 47d:	ff 75 08             	pushl  0x8(%ebp)
- 480:	e8 6d fe ff ff       	call   2f2 <write>
- 485:	83 c4 10             	add    $0x10,%esp
- 488:	83 c6 01             	add    $0x1,%esi
+ 451:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 454:	83 ec 04             	sub    $0x4,%esp
+ 457:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 45a:	6a 01                	push   $0x1
+ 45c:	50                   	push   %eax
+ 45d:	ff 75 08             	pushl  0x8(%ebp)
+ 460:	e8 8d fe ff ff       	call   2f2 <write>
+ 465:	83 c4 10             	add    $0x10,%esp
+ 468:	83 c6 01             	add    $0x1,%esi
   for(i = 0; fmt[i]; i++){
- 48b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
- 48f:	84 db                	test   %bl,%bl
- 491:	74 77                	je     50a <printf+0xca>
+ 46b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 46f:	84 db                	test   %bl,%bl
+ 471:	74 77                	je     4ea <printf+0xca>
     if(state == 0){
- 493:	85 ff                	test   %edi,%edi
+ 473:	85 ff                	test   %edi,%edi
     c = fmt[i] & 0xff;
- 495:	0f be cb             	movsbl %bl,%ecx
- 498:	0f b6 c3             	movzbl %bl,%eax
+ 475:	0f be cb             	movsbl %bl,%ecx
+ 478:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
- 49b:	74 cb                	je     468 <printf+0x28>
+ 47b:	74 cb                	je     448 <printf+0x28>
         state = '%';
       } else {
         putc(fd, c);
       }
     } else if(state == '%'){
- 49d:	83 ff 25             	cmp    $0x25,%edi
- 4a0:	75 e6                	jne    488 <printf+0x48>
+ 47d:	83 ff 25             	cmp    $0x25,%edi
+ 480:	75 e6                	jne    468 <printf+0x48>
       if(c == 'd'){
- 4a2:	83 f8 64             	cmp    $0x64,%eax
- 4a5:	0f 84 05 01 00 00    	je     5b0 <printf+0x170>
+ 482:	83 f8 64             	cmp    $0x64,%eax
+ 485:	0f 84 05 01 00 00    	je     590 <printf+0x170>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 4ab:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 4b1:	83 f9 70             	cmp    $0x70,%ecx
- 4b4:	74 72                	je     528 <printf+0xe8>
+ 48b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 491:	83 f9 70             	cmp    $0x70,%ecx
+ 494:	74 72                	je     508 <printf+0xe8>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 4b6:	83 f8 73             	cmp    $0x73,%eax
- 4b9:	0f 84 99 00 00 00    	je     558 <printf+0x118>
+ 496:	83 f8 73             	cmp    $0x73,%eax
+ 499:	0f 84 99 00 00 00    	je     538 <printf+0x118>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 4bf:	83 f8 63             	cmp    $0x63,%eax
- 4c2:	0f 84 08 01 00 00    	je     5d0 <printf+0x190>
+ 49f:	83 f8 63             	cmp    $0x63,%eax
+ 4a2:	0f 84 08 01 00 00    	je     5b0 <printf+0x190>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 4c8:	83 f8 25             	cmp    $0x25,%eax
- 4cb:	0f 84 ef 00 00 00    	je     5c0 <printf+0x180>
+ 4a8:	83 f8 25             	cmp    $0x25,%eax
+ 4ab:	0f 84 ef 00 00 00    	je     5a0 <printf+0x180>
   write(fd, &c, 1);
- 4d1:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 4d4:	83 ec 04             	sub    $0x4,%esp
- 4d7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 4db:	6a 01                	push   $0x1
- 4dd:	50                   	push   %eax
- 4de:	ff 75 08             	pushl  0x8(%ebp)
- 4e1:	e8 0c fe ff ff       	call   2f2 <write>
- 4e6:	83 c4 0c             	add    $0xc,%esp
- 4e9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
- 4ec:	88 5d e6             	mov    %bl,-0x1a(%ebp)
- 4ef:	6a 01                	push   $0x1
- 4f1:	50                   	push   %eax
- 4f2:	ff 75 08             	pushl  0x8(%ebp)
- 4f5:	83 c6 01             	add    $0x1,%esi
+ 4b1:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 4b4:	83 ec 04             	sub    $0x4,%esp
+ 4b7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4bb:	6a 01                	push   $0x1
+ 4bd:	50                   	push   %eax
+ 4be:	ff 75 08             	pushl  0x8(%ebp)
+ 4c1:	e8 2c fe ff ff       	call   2f2 <write>
+ 4c6:	83 c4 0c             	add    $0xc,%esp
+ 4c9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 4cc:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 4cf:	6a 01                	push   $0x1
+ 4d1:	50                   	push   %eax
+ 4d2:	ff 75 08             	pushl  0x8(%ebp)
+ 4d5:	83 c6 01             	add    $0x1,%esi
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
       }
       state = 0;
- 4f8:	31 ff                	xor    %edi,%edi
+ 4d8:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 4fa:	e8 f3 fd ff ff       	call   2f2 <write>
+ 4da:	e8 13 fe ff ff       	call   2f2 <write>
   for(i = 0; fmt[i]; i++){
- 4ff:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 4df:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
   write(fd, &c, 1);
- 503:	83 c4 10             	add    $0x10,%esp
+ 4e3:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 506:	84 db                	test   %bl,%bl
- 508:	75 89                	jne    493 <printf+0x53>
+ 4e6:	84 db                	test   %bl,%bl
+ 4e8:	75 89                	jne    473 <printf+0x53>
     }
   }
 }
- 50a:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 50d:	5b                   	pop    %ebx
- 50e:	5e                   	pop    %esi
- 50f:	5f                   	pop    %edi
- 510:	5d                   	pop    %ebp
- 511:	c3                   	ret    
- 512:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 4ea:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4ed:	5b                   	pop    %ebx
+ 4ee:	5e                   	pop    %esi
+ 4ef:	5f                   	pop    %edi
+ 4f0:	5d                   	pop    %ebp
+ 4f1:	c3                   	ret    
+ 4f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         state = '%';
- 518:	bf 25 00 00 00       	mov    $0x25,%edi
- 51d:	e9 66 ff ff ff       	jmp    488 <printf+0x48>
- 522:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 4f8:	bf 25 00 00 00       	mov    $0x25,%edi
+ 4fd:	e9 66 ff ff ff       	jmp    468 <printf+0x48>
+ 502:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 528:	83 ec 0c             	sub    $0xc,%esp
- 52b:	b9 10 00 00 00       	mov    $0x10,%ecx
- 530:	6a 00                	push   $0x0
- 532:	8b 7d d4             	mov    -0x2c(%ebp),%edi
- 535:	8b 45 08             	mov    0x8(%ebp),%eax
- 538:	8b 17                	mov    (%edi),%edx
- 53a:	e8 61 fe ff ff       	call   3a0 <printint>
+ 508:	83 ec 0c             	sub    $0xc,%esp
+ 50b:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 510:	6a 00                	push   $0x0
+ 512:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 515:	8b 45 08             	mov    0x8(%ebp),%eax
+ 518:	8b 17                	mov    (%edi),%edx
+ 51a:	e8 61 fe ff ff       	call   380 <printint>
         ap++;
- 53f:	89 f8                	mov    %edi,%eax
- 541:	83 c4 10             	add    $0x10,%esp
+ 51f:	89 f8                	mov    %edi,%eax
+ 521:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 544:	31 ff                	xor    %edi,%edi
+ 524:	31 ff                	xor    %edi,%edi
         ap++;
- 546:	83 c0 04             	add    $0x4,%eax
- 549:	89 45 d4             	mov    %eax,-0x2c(%ebp)
- 54c:	e9 37 ff ff ff       	jmp    488 <printf+0x48>
- 551:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 526:	83 c0 04             	add    $0x4,%eax
+ 529:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 52c:	e9 37 ff ff ff       	jmp    468 <printf+0x48>
+ 531:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 558:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 55b:	8b 08                	mov    (%eax),%ecx
+ 538:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 53b:	8b 08                	mov    (%eax),%ecx
         ap++;
- 55d:	83 c0 04             	add    $0x4,%eax
- 560:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 53d:	83 c0 04             	add    $0x4,%eax
+ 540:	89 45 d4             	mov    %eax,-0x2c(%ebp)
         if(s == 0)
- 563:	85 c9                	test   %ecx,%ecx
- 565:	0f 84 8e 00 00 00    	je     5f9 <printf+0x1b9>
+ 543:	85 c9                	test   %ecx,%ecx
+ 545:	0f 84 8e 00 00 00    	je     5d9 <printf+0x1b9>
         while(*s != 0){
- 56b:	0f b6 01             	movzbl (%ecx),%eax
+ 54b:	0f b6 01             	movzbl (%ecx),%eax
       state = 0;
- 56e:	31 ff                	xor    %edi,%edi
+ 54e:	31 ff                	xor    %edi,%edi
         s = (char*)*ap;
- 570:	89 cb                	mov    %ecx,%ebx
+ 550:	89 cb                	mov    %ecx,%ebx
         while(*s != 0){
- 572:	84 c0                	test   %al,%al
- 574:	0f 84 0e ff ff ff    	je     488 <printf+0x48>
- 57a:	89 75 d0             	mov    %esi,-0x30(%ebp)
- 57d:	89 de                	mov    %ebx,%esi
- 57f:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 582:	8d 7d e3             	lea    -0x1d(%ebp),%edi
- 585:	8d 76 00             	lea    0x0(%esi),%esi
+ 552:	84 c0                	test   %al,%al
+ 554:	0f 84 0e ff ff ff    	je     468 <printf+0x48>
+ 55a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 55d:	89 de                	mov    %ebx,%esi
+ 55f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 562:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 565:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 588:	83 ec 04             	sub    $0x4,%esp
+ 568:	83 ec 04             	sub    $0x4,%esp
           s++;
- 58b:	83 c6 01             	add    $0x1,%esi
- 58e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+ 56b:	83 c6 01             	add    $0x1,%esi
+ 56e:	88 45 e3             	mov    %al,-0x1d(%ebp)
   write(fd, &c, 1);
- 591:	6a 01                	push   $0x1
- 593:	57                   	push   %edi
- 594:	53                   	push   %ebx
- 595:	e8 58 fd ff ff       	call   2f2 <write>
+ 571:	6a 01                	push   $0x1
+ 573:	57                   	push   %edi
+ 574:	53                   	push   %ebx
+ 575:	e8 78 fd ff ff       	call   2f2 <write>
         while(*s != 0){
- 59a:	0f b6 06             	movzbl (%esi),%eax
- 59d:	83 c4 10             	add    $0x10,%esp
- 5a0:	84 c0                	test   %al,%al
- 5a2:	75 e4                	jne    588 <printf+0x148>
- 5a4:	8b 75 d0             	mov    -0x30(%ebp),%esi
+ 57a:	0f b6 06             	movzbl (%esi),%eax
+ 57d:	83 c4 10             	add    $0x10,%esp
+ 580:	84 c0                	test   %al,%al
+ 582:	75 e4                	jne    568 <printf+0x148>
+ 584:	8b 75 d0             	mov    -0x30(%ebp),%esi
       state = 0;
- 5a7:	31 ff                	xor    %edi,%edi
- 5a9:	e9 da fe ff ff       	jmp    488 <printf+0x48>
- 5ae:	66 90                	xchg   %ax,%ax
+ 587:	31 ff                	xor    %edi,%edi
+ 589:	e9 da fe ff ff       	jmp    468 <printf+0x48>
+ 58e:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 10, 1);
- 5b0:	83 ec 0c             	sub    $0xc,%esp
- 5b3:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 5b8:	6a 01                	push   $0x1
- 5ba:	e9 73 ff ff ff       	jmp    532 <printf+0xf2>
- 5bf:	90                   	nop
+ 590:	83 ec 0c             	sub    $0xc,%esp
+ 593:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 598:	6a 01                	push   $0x1
+ 59a:	e9 73 ff ff ff       	jmp    512 <printf+0xf2>
+ 59f:	90                   	nop
   write(fd, &c, 1);
- 5c0:	83 ec 04             	sub    $0x4,%esp
- 5c3:	88 5d e5             	mov    %bl,-0x1b(%ebp)
- 5c6:	8d 45 e5             	lea    -0x1b(%ebp),%eax
- 5c9:	6a 01                	push   $0x1
- 5cb:	e9 21 ff ff ff       	jmp    4f1 <printf+0xb1>
+ 5a0:	83 ec 04             	sub    $0x4,%esp
+ 5a3:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 5a6:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 5a9:	6a 01                	push   $0x1
+ 5ab:	e9 21 ff ff ff       	jmp    4d1 <printf+0xb1>
         putc(fd, *ap);
- 5d0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 5b0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
   write(fd, &c, 1);
- 5d3:	83 ec 04             	sub    $0x4,%esp
+ 5b3:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 5d6:	8b 07                	mov    (%edi),%eax
+ 5b6:	8b 07                	mov    (%edi),%eax
   write(fd, &c, 1);
- 5d8:	6a 01                	push   $0x1
+ 5b8:	6a 01                	push   $0x1
         ap++;
- 5da:	83 c7 04             	add    $0x4,%edi
+ 5ba:	83 c7 04             	add    $0x4,%edi
         putc(fd, *ap);
- 5dd:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 5bd:	88 45 e4             	mov    %al,-0x1c(%ebp)
   write(fd, &c, 1);
- 5e0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
- 5e3:	50                   	push   %eax
- 5e4:	ff 75 08             	pushl  0x8(%ebp)
- 5e7:	e8 06 fd ff ff       	call   2f2 <write>
+ 5c0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 5c3:	50                   	push   %eax
+ 5c4:	ff 75 08             	pushl  0x8(%ebp)
+ 5c7:	e8 26 fd ff ff       	call   2f2 <write>
         ap++;
- 5ec:	89 7d d4             	mov    %edi,-0x2c(%ebp)
- 5ef:	83 c4 10             	add    $0x10,%esp
+ 5cc:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 5cf:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 5f2:	31 ff                	xor    %edi,%edi
- 5f4:	e9 8f fe ff ff       	jmp    488 <printf+0x48>
+ 5d2:	31 ff                	xor    %edi,%edi
+ 5d4:	e9 8f fe ff ff       	jmp    468 <printf+0x48>
           s = "(null)";
- 5f9:	bb cb 07 00 00       	mov    $0x7cb,%ebx
+ 5d9:	bb ab 07 00 00       	mov    $0x7ab,%ebx
         while(*s != 0){
- 5fe:	b8 28 00 00 00       	mov    $0x28,%eax
- 603:	e9 72 ff ff ff       	jmp    57a <printf+0x13a>
- 608:	66 90                	xchg   %ax,%ax
- 60a:	66 90                	xchg   %ax,%ax
- 60c:	66 90                	xchg   %ax,%ax
- 60e:	66 90                	xchg   %ax,%ax
+ 5de:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5e3:	e9 72 ff ff ff       	jmp    55a <printf+0x13a>
+ 5e8:	66 90                	xchg   %ax,%ax
+ 5ea:	66 90                	xchg   %ax,%ax
+ 5ec:	66 90                	xchg   %ax,%ax
+ 5ee:	66 90                	xchg   %ax,%ax
 
-00000610 <free>:
+000005f0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 610:	55                   	push   %ebp
+ 5f0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 611:	a1 84 0a 00 00       	mov    0xa84,%eax
+ 5f1:	a1 64 0a 00 00       	mov    0xa64,%eax
 {
- 616:	89 e5                	mov    %esp,%ebp
- 618:	57                   	push   %edi
- 619:	56                   	push   %esi
- 61a:	53                   	push   %ebx
- 61b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5f6:	89 e5                	mov    %esp,%ebp
+ 5f8:	57                   	push   %edi
+ 5f9:	56                   	push   %esi
+ 5fa:	53                   	push   %ebx
+ 5fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 61e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
- 621:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5fe:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 601:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 628:	39 c8                	cmp    %ecx,%eax
- 62a:	8b 10                	mov    (%eax),%edx
- 62c:	73 32                	jae    660 <free+0x50>
- 62e:	39 d1                	cmp    %edx,%ecx
- 630:	72 04                	jb     636 <free+0x26>
+ 608:	39 c8                	cmp    %ecx,%eax
+ 60a:	8b 10                	mov    (%eax),%edx
+ 60c:	73 32                	jae    640 <free+0x50>
+ 60e:	39 d1                	cmp    %edx,%ecx
+ 610:	72 04                	jb     616 <free+0x26>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 632:	39 d0                	cmp    %edx,%eax
- 634:	72 32                	jb     668 <free+0x58>
+ 612:	39 d0                	cmp    %edx,%eax
+ 614:	72 32                	jb     648 <free+0x58>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 636:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 639:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 63c:	39 fa                	cmp    %edi,%edx
- 63e:	74 30                	je     670 <free+0x60>
+ 616:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 619:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 61c:	39 fa                	cmp    %edi,%edx
+ 61e:	74 30                	je     650 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 640:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 620:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 643:	8b 50 04             	mov    0x4(%eax),%edx
- 646:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 649:	39 f1                	cmp    %esi,%ecx
- 64b:	74 3a                	je     687 <free+0x77>
+ 623:	8b 50 04             	mov    0x4(%eax),%edx
+ 626:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 629:	39 f1                	cmp    %esi,%ecx
+ 62b:	74 3a                	je     667 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 64d:	89 08                	mov    %ecx,(%eax)
+ 62d:	89 08                	mov    %ecx,(%eax)
   freep = p;
- 64f:	a3 84 0a 00 00       	mov    %eax,0xa84
+ 62f:	a3 64 0a 00 00       	mov    %eax,0xa64
 }
- 654:	5b                   	pop    %ebx
- 655:	5e                   	pop    %esi
- 656:	5f                   	pop    %edi
- 657:	5d                   	pop    %ebp
- 658:	c3                   	ret    
- 659:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 634:	5b                   	pop    %ebx
+ 635:	5e                   	pop    %esi
+ 636:	5f                   	pop    %edi
+ 637:	5d                   	pop    %ebp
+ 638:	c3                   	ret    
+ 639:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 660:	39 d0                	cmp    %edx,%eax
- 662:	72 04                	jb     668 <free+0x58>
- 664:	39 d1                	cmp    %edx,%ecx
- 666:	72 ce                	jb     636 <free+0x26>
+ 640:	39 d0                	cmp    %edx,%eax
+ 642:	72 04                	jb     648 <free+0x58>
+ 644:	39 d1                	cmp    %edx,%ecx
+ 646:	72 ce                	jb     616 <free+0x26>
 {
- 668:	89 d0                	mov    %edx,%eax
- 66a:	eb bc                	jmp    628 <free+0x18>
- 66c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 648:	89 d0                	mov    %edx,%eax
+ 64a:	eb bc                	jmp    608 <free+0x18>
+ 64c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     bp->s.size += p->s.ptr->s.size;
- 670:	03 72 04             	add    0x4(%edx),%esi
- 673:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 650:	03 72 04             	add    0x4(%edx),%esi
+ 653:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 676:	8b 10                	mov    (%eax),%edx
- 678:	8b 12                	mov    (%edx),%edx
- 67a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 656:	8b 10                	mov    (%eax),%edx
+ 658:	8b 12                	mov    (%edx),%edx
+ 65a:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 67d:	8b 50 04             	mov    0x4(%eax),%edx
- 680:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 683:	39 f1                	cmp    %esi,%ecx
- 685:	75 c6                	jne    64d <free+0x3d>
+ 65d:	8b 50 04             	mov    0x4(%eax),%edx
+ 660:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 663:	39 f1                	cmp    %esi,%ecx
+ 665:	75 c6                	jne    62d <free+0x3d>
     p->s.size += bp->s.size;
- 687:	03 53 fc             	add    -0x4(%ebx),%edx
+ 667:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 68a:	a3 84 0a 00 00       	mov    %eax,0xa84
+ 66a:	a3 64 0a 00 00       	mov    %eax,0xa64
     p->s.size += bp->s.size;
- 68f:	89 50 04             	mov    %edx,0x4(%eax)
+ 66f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 692:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 695:	89 10                	mov    %edx,(%eax)
+ 672:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 675:	89 10                	mov    %edx,(%eax)
 }
- 697:	5b                   	pop    %ebx
- 698:	5e                   	pop    %esi
- 699:	5f                   	pop    %edi
- 69a:	5d                   	pop    %ebp
- 69b:	c3                   	ret    
- 69c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 677:	5b                   	pop    %ebx
+ 678:	5e                   	pop    %esi
+ 679:	5f                   	pop    %edi
+ 67a:	5d                   	pop    %ebp
+ 67b:	c3                   	ret    
+ 67c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-000006a0 <malloc>:
+00000680 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 6a0:	55                   	push   %ebp
- 6a1:	89 e5                	mov    %esp,%ebp
- 6a3:	57                   	push   %edi
- 6a4:	56                   	push   %esi
- 6a5:	53                   	push   %ebx
- 6a6:	83 ec 0c             	sub    $0xc,%esp
+ 680:	55                   	push   %ebp
+ 681:	89 e5                	mov    %esp,%ebp
+ 683:	57                   	push   %edi
+ 684:	56                   	push   %esi
+ 685:	53                   	push   %ebx
+ 686:	83 ec 0c             	sub    $0xc,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6a9:	8b 45 08             	mov    0x8(%ebp),%eax
+ 689:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 6ac:	8b 15 84 0a 00 00    	mov    0xa84,%edx
+ 68c:	8b 15 64 0a 00 00    	mov    0xa64,%edx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6b2:	8d 78 07             	lea    0x7(%eax),%edi
- 6b5:	c1 ef 03             	shr    $0x3,%edi
- 6b8:	83 c7 01             	add    $0x1,%edi
+ 692:	8d 78 07             	lea    0x7(%eax),%edi
+ 695:	c1 ef 03             	shr    $0x3,%edi
+ 698:	83 c7 01             	add    $0x1,%edi
   if((prevp = freep) == 0){
- 6bb:	85 d2                	test   %edx,%edx
- 6bd:	0f 84 9d 00 00 00    	je     760 <malloc+0xc0>
- 6c3:	8b 02                	mov    (%edx),%eax
- 6c5:	8b 48 04             	mov    0x4(%eax),%ecx
+ 69b:	85 d2                	test   %edx,%edx
+ 69d:	0f 84 9d 00 00 00    	je     740 <malloc+0xc0>
+ 6a3:	8b 02                	mov    (%edx),%eax
+ 6a5:	8b 48 04             	mov    0x4(%eax),%ecx
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
     if(p->s.size >= nunits){
- 6c8:	39 cf                	cmp    %ecx,%edi
- 6ca:	76 6c                	jbe    738 <malloc+0x98>
- 6cc:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
- 6d2:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 6d7:	0f 43 df             	cmovae %edi,%ebx
+ 6a8:	39 cf                	cmp    %ecx,%edi
+ 6aa:	76 6c                	jbe    718 <malloc+0x98>
+ 6ac:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 6b2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6b7:	0f 43 df             	cmovae %edi,%ebx
   p = sbrk(nu * sizeof(Header));
- 6da:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
- 6e1:	eb 0e                	jmp    6f1 <malloc+0x51>
- 6e3:	90                   	nop
- 6e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6ba:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 6c1:	eb 0e                	jmp    6d1 <malloc+0x51>
+ 6c3:	90                   	nop
+ 6c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6e8:	8b 02                	mov    (%edx),%eax
+ 6c8:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 6ea:	8b 48 04             	mov    0x4(%eax),%ecx
- 6ed:	39 f9                	cmp    %edi,%ecx
- 6ef:	73 47                	jae    738 <malloc+0x98>
+ 6ca:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6cd:	39 f9                	cmp    %edi,%ecx
+ 6cf:	73 47                	jae    718 <malloc+0x98>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 6f1:	39 05 84 0a 00 00    	cmp    %eax,0xa84
- 6f7:	89 c2                	mov    %eax,%edx
- 6f9:	75 ed                	jne    6e8 <malloc+0x48>
+ 6d1:	39 05 64 0a 00 00    	cmp    %eax,0xa64
+ 6d7:	89 c2                	mov    %eax,%edx
+ 6d9:	75 ed                	jne    6c8 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 6fb:	83 ec 0c             	sub    $0xc,%esp
- 6fe:	56                   	push   %esi
- 6ff:	e8 56 fc ff ff       	call   35a <sbrk>
+ 6db:	83 ec 0c             	sub    $0xc,%esp
+ 6de:	56                   	push   %esi
+ 6df:	e8 76 fc ff ff       	call   35a <sbrk>
   if(p == (char*)-1)
- 704:	83 c4 10             	add    $0x10,%esp
- 707:	83 f8 ff             	cmp    $0xffffffff,%eax
- 70a:	74 1c                	je     728 <malloc+0x88>
+ 6e4:	83 c4 10             	add    $0x10,%esp
+ 6e7:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6ea:	74 1c                	je     708 <malloc+0x88>
   hp->s.size = nu;
- 70c:	89 58 04             	mov    %ebx,0x4(%eax)
+ 6ec:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 70f:	83 ec 0c             	sub    $0xc,%esp
- 712:	83 c0 08             	add    $0x8,%eax
- 715:	50                   	push   %eax
- 716:	e8 f5 fe ff ff       	call   610 <free>
+ 6ef:	83 ec 0c             	sub    $0xc,%esp
+ 6f2:	83 c0 08             	add    $0x8,%eax
+ 6f5:	50                   	push   %eax
+ 6f6:	e8 f5 fe ff ff       	call   5f0 <free>
   return freep;
- 71b:	8b 15 84 0a 00 00    	mov    0xa84,%edx
+ 6fb:	8b 15 64 0a 00 00    	mov    0xa64,%edx
       if((p = morecore(nunits)) == 0)
- 721:	83 c4 10             	add    $0x10,%esp
- 724:	85 d2                	test   %edx,%edx
- 726:	75 c0                	jne    6e8 <malloc+0x48>
+ 701:	83 c4 10             	add    $0x10,%esp
+ 704:	85 d2                	test   %edx,%edx
+ 706:	75 c0                	jne    6c8 <malloc+0x48>
         return 0;
   }
 }
- 728:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 708:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 72b:	31 c0                	xor    %eax,%eax
+ 70b:	31 c0                	xor    %eax,%eax
 }
- 72d:	5b                   	pop    %ebx
- 72e:	5e                   	pop    %esi
- 72f:	5f                   	pop    %edi
- 730:	5d                   	pop    %ebp
- 731:	c3                   	ret    
- 732:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 70d:	5b                   	pop    %ebx
+ 70e:	5e                   	pop    %esi
+ 70f:	5f                   	pop    %edi
+ 710:	5d                   	pop    %ebp
+ 711:	c3                   	ret    
+ 712:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 738:	39 cf                	cmp    %ecx,%edi
- 73a:	74 54                	je     790 <malloc+0xf0>
+ 718:	39 cf                	cmp    %ecx,%edi
+ 71a:	74 54                	je     770 <malloc+0xf0>
         p->s.size -= nunits;
- 73c:	29 f9                	sub    %edi,%ecx
- 73e:	89 48 04             	mov    %ecx,0x4(%eax)
+ 71c:	29 f9                	sub    %edi,%ecx
+ 71e:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 741:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ 721:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 744:	89 78 04             	mov    %edi,0x4(%eax)
+ 724:	89 78 04             	mov    %edi,0x4(%eax)
       freep = prevp;
- 747:	89 15 84 0a 00 00    	mov    %edx,0xa84
+ 727:	89 15 64 0a 00 00    	mov    %edx,0xa64
 }
- 74d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 72d:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 750:	83 c0 08             	add    $0x8,%eax
+ 730:	83 c0 08             	add    $0x8,%eax
 }
- 753:	5b                   	pop    %ebx
- 754:	5e                   	pop    %esi
- 755:	5f                   	pop    %edi
- 756:	5d                   	pop    %ebp
- 757:	c3                   	ret    
- 758:	90                   	nop
- 759:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 733:	5b                   	pop    %ebx
+ 734:	5e                   	pop    %esi
+ 735:	5f                   	pop    %edi
+ 736:	5d                   	pop    %ebp
+ 737:	c3                   	ret    
+ 738:	90                   	nop
+ 739:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     base.s.ptr = freep = prevp = &base;
- 760:	c7 05 84 0a 00 00 88 	movl   $0xa88,0xa84
- 767:	0a 00 00 
- 76a:	c7 05 88 0a 00 00 88 	movl   $0xa88,0xa88
- 771:	0a 00 00 
+ 740:	c7 05 64 0a 00 00 68 	movl   $0xa68,0xa64
+ 747:	0a 00 00 
+ 74a:	c7 05 68 0a 00 00 68 	movl   $0xa68,0xa68
+ 751:	0a 00 00 
     base.s.size = 0;
- 774:	b8 88 0a 00 00       	mov    $0xa88,%eax
- 779:	c7 05 8c 0a 00 00 00 	movl   $0x0,0xa8c
- 780:	00 00 00 
- 783:	e9 44 ff ff ff       	jmp    6cc <malloc+0x2c>
- 788:	90                   	nop
- 789:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 754:	b8 68 0a 00 00       	mov    $0xa68,%eax
+ 759:	c7 05 6c 0a 00 00 00 	movl   $0x0,0xa6c
+ 760:	00 00 00 
+ 763:	e9 44 ff ff ff       	jmp    6ac <malloc+0x2c>
+ 768:	90                   	nop
+ 769:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         prevp->s.ptr = p->s.ptr;
- 790:	8b 08                	mov    (%eax),%ecx
- 792:	89 0a                	mov    %ecx,(%edx)
- 794:	eb b1                	jmp    747 <malloc+0xa7>
+ 770:	8b 08                	mov    (%eax),%ecx
+ 772:	89 0a                	mov    %ecx,(%edx)
+ 774:	eb b1                	jmp    727 <malloc+0xa7>
Binary files main/mkdir.o and xv6-public/mkdir.o differ
diff -urN main/mkdir.sym xv6-public/mkdir.sym
--- main/mkdir.sym	2022-09-26 21:21:16.500528000 +0530
+++ xv6-public/mkdir.sym	2022-10-31 22:34:17.057916888 +0530
@@ -1,7 +1,7 @@
 00000000 .text
-00000798 .rodata
-000007e8 .eh_frame
-00000a84 .bss
+00000778 .rodata
+000007c8 .eh_frame
+00000a64 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,19 +13,18 @@
 00000000 mkdir.c
 00000000 ulib.c
 00000000 printf.c
-000003a0 printint
-000007d4 digits.1050
+00000380 printint
+000007b4 digits.1044
 00000000 umalloc.c
-00000a84 freep
-00000a88 base
+00000a64 freep
+00000a68 base
 00000080 strcpy
-00000440 printf
-00000382 thread_exit
+00000420 printf
 000002a0 memmove
 0000031a mknod
 00000190 gets
 00000352 getpid
-000006a0 malloc
+00000680 malloc
 00000362 sleep
 000002e2 pipe
 000002f2 write
@@ -39,23 +38,21 @@
 000002ca fork
 0000035a sbrk
 0000036a uptime
-00000a84 __bss_start
+00000a64 __bss_start
 00000130 memset
 00000000 main
 000000b0 strcmp
 0000034a dup
 00000210 stat
-00000a84 _edata
-00000a90 _end
+00000a64 _edata
+00000a70 _end
 00000332 link
 000002d2 exit
 00000260 atoi
-0000038a draw
+00000372 draw
 00000100 strlen
 00000312 open
 00000150 strchr
-00000372 thread_create
 0000033a mkdir
 000002fa close
-0000037a thread_join
-00000610 free
+000005f0 free
diff -urN main/mmu.h xv6-public/mmu.h
--- main/mmu.h	2022-08-11 19:48:39.000000000 +0530
+++ xv6-public/mmu.h	2022-10-23 09:08:48.000000000 +0530
@@ -95,6 +95,7 @@
 #define PTE_W           0x002   // Writeable
 #define PTE_U           0x004   // User
 #define PTE_PS          0x080   // Page Size
+#define PTE_A           0x020   // Accessed
 
 // Address in page table or page directory entry
 #define PTE_ADDR(pte)   ((uint)(pte) & ~0xFFF)
Binary files main/mp.o and xv6-public/mp.o differ
diff -urN main/mutex.h xv6-public/mutex.h
--- main/mutex.h	2022-09-05 20:31:30.000000000 +0530
+++ xv6-public/mutex.h	1970-01-01 05:30:00.000000000 +0530
@@ -1,33 +0,0 @@
-struct thread_mutex{
-    volatile uint lock;
-    char *name;
-};
-static inline uint xchg2(volatile uint *addr,uint newval){
-    uint result;
-
-    asm volatile("lock; xchgl %0, %1" :
-                  "+m" (*addr), "=a" (result) :
-                  "1" (newval) :
-                  "cc");
-    return result;
-}
-void thread_mutex_init(struct thread_mutex *lk){
-    lk->lock = 0;
-    lk->name = "null";
-}
-
-void thread_mutex_lock(struct thread_mutex *lk){
-    while(xchg2(&lk->lock,1)!=0){
-        sleep(1);
-    }
-
-    __sync_synchronize();
-}
-
-void thread_mutex_unlock(struct thread_mutex *lk){
-    __sync_synchronize();
-    asm volatile("movl $0, %0" : "+m" (lk->lock) : );
-}
-
-struct thread_mutex lock2;
-
diff -urN main/our_spinlock.h xv6-public/our_spinlock.h
--- main/our_spinlock.h	2022-09-05 20:46:38.000000000 +0530
+++ xv6-public/our_spinlock.h	1970-01-01 05:30:00.000000000 +0530
@@ -1,28 +0,0 @@
-struct thread_spinlock{
-    volatile uint lock;
-    char *name;
-};
-static inline uint xchg(volatile uint *addr,uint newval){
-    uint result;
-
-    asm volatile("lock; xchgl %0, %1" :
-                  "+m" (*addr), "=a" (result) :
-                  "1" (newval) :
-                  "cc");
-    return result;
-}
-void thread_spin_init(struct thread_spinlock *lk){
-    lk->lock = 0;
-    lk->name = "null";
-}
-
-void thread_spin_lock(struct thread_spinlock *lk){
-    while(xchg(&lk->lock,1)!=0);
-    __sync_synchronize();
-}
-
-void thread_spin_unlock(struct thread_spinlock *lk){
-    __sync_synchronize();
-    asm volatile("movl $0, %0" : "+m" (lk->lock) : );
-}
-struct thread_spinlock lock;
Binary files main/picirq.o and xv6-public/picirq.o differ
diff -urN main/pingff00 xv6-public/pingff00
--- main/pingff00	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/pingff00	2022-08-14 10:27:52.000000000 +0530
@@ -0,0 +1,918 @@
+PATTERN: 0xff00
+PING www.iitg.ac.in (172.17.0.22) 56(84) bytes of data.
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=1 ttl=61 time=0.770 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=3 ttl=61 time=1.32 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=5 ttl=61 time=1.18 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=7 ttl=61 time=1.03 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=8 ttl=61 time=1.42 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=9 ttl=61 time=1.30 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=11 ttl=61 time=0.678 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=13 ttl=61 time=1.13 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=15 ttl=61 time=1.06 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=17 ttl=61 time=1.17 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=18 ttl=61 time=1.14 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=20 ttl=61 time=1.57 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=21 ttl=61 time=1.08 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=22 ttl=61 time=1.08 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=23 ttl=61 time=1.10 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=25 ttl=61 time=1.12 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=26 ttl=61 time=1.18 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=28 ttl=61 time=0.939 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=29 ttl=61 time=1.23 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=31 ttl=61 time=0.838 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=33 ttl=61 time=4.16 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=35 ttl=61 time=1.10 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=36 ttl=61 time=0.969 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=37 ttl=61 time=0.966 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=38 ttl=61 time=2.15 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=40 ttl=61 time=1.26 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=41 ttl=61 time=1.10 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=43 ttl=61 time=1.07 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=44 ttl=61 time=1.06 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=45 ttl=61 time=0.992 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=46 ttl=61 time=1.21 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=47 ttl=61 time=0.945 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=49 ttl=61 time=1.04 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=50 ttl=61 time=1.05 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=51 ttl=61 time=0.775 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=53 ttl=61 time=0.999 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=54 ttl=61 time=0.982 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=56 ttl=61 time=1.07 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=57 ttl=61 time=0.869 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=58 ttl=61 time=1.21 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=59 ttl=61 time=0.958 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=60 ttl=61 time=0.918 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=61 ttl=61 time=1.11 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=63 ttl=61 time=1.05 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=64 ttl=61 time=0.955 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=66 ttl=61 time=1.29 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=67 ttl=61 time=1.03 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=68 ttl=61 time=1.17 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=69 ttl=61 time=1.22 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=70 ttl=61 time=1.26 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=71 ttl=61 time=0.991 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=73 ttl=61 time=1.00 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=74 ttl=61 time=1.18 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=75 ttl=61 time=1.24 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=76 ttl=61 time=1.15 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=77 ttl=61 time=0.929 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=78 ttl=61 time=1.18 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=80 ttl=61 time=1.21 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=81 ttl=61 time=1.20 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=82 ttl=61 time=1.30 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=84 ttl=61 time=1.08 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=85 ttl=61 time=1.17 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=86 ttl=61 time=1.25 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=88 ttl=61 time=0.953 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=89 ttl=61 time=1.28 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=91 ttl=61 time=1.35 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=92 ttl=61 time=1.32 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=94 ttl=61 time=1.18 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=96 ttl=61 time=1.31 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=98 ttl=61 time=1.15 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=100 ttl=61 time=1.27 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=102 ttl=61 time=1.16 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=103 ttl=61 time=1.33 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=104 ttl=61 time=1.14 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=106 ttl=61 time=0.956 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=108 ttl=61 time=0.922 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=110 ttl=61 time=1.27 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=111 ttl=61 time=1.07 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=112 ttl=61 time=1.10 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=114 ttl=61 time=1.30 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=116 ttl=61 time=1.23 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=118 ttl=61 time=1.07 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=120 ttl=61 time=1.35 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=122 ttl=61 time=1.06 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=123 ttl=61 time=1.18 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=124 ttl=61 time=1.06 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=125 ttl=61 time=1.25 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=126 ttl=61 time=1.18 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=127 ttl=61 time=1.26 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=128 ttl=61 time=1.03 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=129 ttl=61 time=1.12 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=130 ttl=61 time=1.26 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=131 ttl=61 time=1.27 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=132 ttl=61 time=1.32 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=133 ttl=61 time=1.39 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=134 ttl=61 time=1.28 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=135 ttl=61 time=0.975 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=136 ttl=61 time=1.17 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=137 ttl=61 time=1.36 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=138 ttl=61 time=1.06 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=139 ttl=61 time=1.38 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=140 ttl=61 time=1.18 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=142 ttl=61 time=1.18 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=143 ttl=61 time=0.902 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=145 ttl=61 time=1.36 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=147 ttl=61 time=1.02 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=149 ttl=61 time=1.04 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=150 ttl=61 time=1.42 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=151 ttl=61 time=1.29 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=153 ttl=61 time=1.21 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=155 ttl=61 time=1.32 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=156 ttl=61 time=1.27 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=158 ttl=61 time=1.05 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=160 ttl=61 time=1.22 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=161 ttl=61 time=1.01 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=163 ttl=61 time=1.32 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=164 ttl=61 time=0.988 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=165 ttl=61 time=4.25 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=166 ttl=61 time=1.11 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=168 ttl=61 time=1.44 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=169 ttl=61 time=1.55 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=170 ttl=61 time=1.89 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=172 ttl=61 time=1.10 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=173 ttl=61 time=1.16 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=174 ttl=61 time=1.06 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=175 ttl=61 time=0.896 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=177 ttl=61 time=1.04 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=178 ttl=61 time=1.49 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=180 ttl=61 time=1.22 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=181 ttl=61 time=1.31 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=182 ttl=61 time=1.36 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=183 ttl=61 time=6.84 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=184 ttl=61 time=1.11 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=185 ttl=61 time=1.02 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=186 ttl=61 time=1.50 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=187 ttl=61 time=1.27 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=188 ttl=61 time=1.75 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=189 ttl=61 time=1.34 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=191 ttl=61 time=3.38 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=192 ttl=61 time=2.17 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=194 ttl=61 time=1.46 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=195 ttl=61 time=1.27 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=196 ttl=61 time=1.50 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=198 ttl=61 time=1.23 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=200 ttl=61 time=1.22 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=201 ttl=61 time=1.22 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=202 ttl=61 time=1.27 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=204 ttl=61 time=1.34 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=206 ttl=61 time=1.13 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=208 ttl=61 time=1.46 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=209 ttl=61 time=1.42 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=210 ttl=61 time=1.21 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=211 ttl=61 time=1.24 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=212 ttl=61 time=1.45 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=214 ttl=61 time=1.37 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=215 ttl=61 time=1.37 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=216 ttl=61 time=1.47 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=217 ttl=61 time=1.06 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=218 ttl=61 time=1.14 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=219 ttl=61 time=1.18 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=220 ttl=61 time=1.13 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=222 ttl=61 time=1.17 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=223 ttl=61 time=1.28 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=224 ttl=61 time=1.36 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=226 ttl=61 time=1.38 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=228 ttl=61 time=1.45 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=229 ttl=61 time=1.34 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=230 ttl=61 time=1.50 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=231 ttl=61 time=1.07 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=232 ttl=61 time=1.28 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=233 ttl=61 time=1.45 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=234 ttl=61 time=1.06 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=235 ttl=61 time=2.15 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=236 ttl=61 time=1.30 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=237 ttl=61 time=0.956 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=238 ttl=61 time=1.01 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=239 ttl=61 time=1.37 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=240 ttl=61 time=1.46 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=241 ttl=61 time=1.50 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=242 ttl=61 time=1.73 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=243 ttl=61 time=1.30 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=244 ttl=61 time=1.11 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=245 ttl=61 time=1.62 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=246 ttl=61 time=3.54 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=247 ttl=61 time=1.37 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=248 ttl=61 time=1.60 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=249 ttl=61 time=1.29 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=250 ttl=61 time=1.28 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=251 ttl=61 time=1.44 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=252 ttl=61 time=1.55 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=253 ttl=61 time=1.21 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=254 ttl=61 time=1.48 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=255 ttl=61 time=1.47 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=256 ttl=61 time=1.21 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=257 ttl=61 time=1.30 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=258 ttl=61 time=1.10 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=259 ttl=61 time=1.35 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=260 ttl=61 time=1.63 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=261 ttl=61 time=1.72 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=262 ttl=61 time=1.47 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=263 ttl=61 time=1.23 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=264 ttl=61 time=1.37 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=265 ttl=61 time=1.11 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=266 ttl=61 time=1.39 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=267 ttl=61 time=1.55 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=268 ttl=61 time=1.33 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=269 ttl=61 time=1.40 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=272 ttl=61 time=1.50 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=273 ttl=61 time=1.28 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=274 ttl=61 time=1.72 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=275 ttl=61 time=1.43 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=276 ttl=61 time=1.29 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=277 ttl=61 time=1.21 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=278 ttl=61 time=4.31 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=279 ttl=61 time=1.58 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=280 ttl=61 time=1.14 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=281 ttl=61 time=1.25 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=282 ttl=61 time=1.08 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=283 ttl=61 time=1.22 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=284 ttl=61 time=1.43 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=285 ttl=61 time=1.32 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=286 ttl=61 time=1.54 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=287 ttl=61 time=1.48 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=288 ttl=61 time=1.55 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=289 ttl=61 time=1.48 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=290 ttl=61 time=1.29 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=291 ttl=61 time=1.39 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=292 ttl=61 time=1.49 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=293 ttl=61 time=1.57 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=294 ttl=61 time=1.13 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=295 ttl=61 time=1.20 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=296 ttl=61 time=1.36 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=297 ttl=61 time=1.55 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=298 ttl=61 time=1.72 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=299 ttl=61 time=1.03 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=300 ttl=61 time=1.09 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=301 ttl=61 time=1.56 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=302 ttl=61 time=1.30 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=303 ttl=61 time=1.63 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=304 ttl=61 time=1.76 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=305 ttl=61 time=1.32 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=306 ttl=61 time=1.50 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=307 ttl=61 time=1.38 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=308 ttl=61 time=1.40 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=309 ttl=61 time=1.51 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=310 ttl=61 time=1.52 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=311 ttl=61 time=1.22 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=312 ttl=61 time=1.41 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=313 ttl=61 time=1.30 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=314 ttl=61 time=1.20 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=315 ttl=61 time=1.51 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=316 ttl=61 time=1.74 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=317 ttl=61 time=1.05 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=318 ttl=61 time=1.56 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=319 ttl=61 time=1.11 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=320 ttl=61 time=1.84 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=321 ttl=61 time=1.37 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=322 ttl=61 time=1.36 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=323 ttl=61 time=1.34 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=324 ttl=61 time=1.49 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=325 ttl=61 time=1.34 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=326 ttl=61 time=1.01 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=327 ttl=61 time=1.38 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=328 ttl=61 time=1.44 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=329 ttl=61 time=1.51 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=330 ttl=61 time=1.48 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=331 ttl=61 time=1.60 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=332 ttl=61 time=1.45 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=333 ttl=61 time=1.57 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=334 ttl=61 time=1.76 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=335 ttl=61 time=1.42 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=336 ttl=61 time=1.57 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=337 ttl=61 time=1.37 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=338 ttl=61 time=1.36 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=339 ttl=61 time=1.49 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=340 ttl=61 time=1.59 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=341 ttl=61 time=1.28 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=342 ttl=61 time=1.55 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=343 ttl=61 time=1.20 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=344 ttl=61 time=1.06 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=345 ttl=61 time=1.44 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=346 ttl=61 time=1.34 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=347 ttl=61 time=1.35 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=348 ttl=61 time=1.09 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=349 ttl=61 time=1.29 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=350 ttl=61 time=1.44 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=351 ttl=61 time=1.04 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=352 ttl=61 time=1.28 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=353 ttl=61 time=1.34 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=354 ttl=61 time=1.54 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=355 ttl=61 time=1.26 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=356 ttl=61 time=1.34 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=357 ttl=61 time=1.55 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=358 ttl=61 time=1.92 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=359 ttl=61 time=1.33 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=360 ttl=61 time=1.77 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=361 ttl=61 time=1.68 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=362 ttl=61 time=1.11 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=363 ttl=61 time=1.30 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=364 ttl=61 time=1.91 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=365 ttl=61 time=1.55 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=366 ttl=61 time=1.45 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=367 ttl=61 time=1.56 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=368 ttl=61 time=1.31 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=369 ttl=61 time=1.18 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=370 ttl=61 time=1.44 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=371 ttl=61 time=1.31 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=372 ttl=61 time=1.33 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=373 ttl=61 time=1.83 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=374 ttl=61 time=1.36 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=375 ttl=61 time=1.57 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=376 ttl=61 time=1.65 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=377 ttl=61 time=1.50 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=378 ttl=61 time=1.05 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=379 ttl=61 time=1.07 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=380 ttl=61 time=1.48 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=381 ttl=61 time=1.27 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=382 ttl=61 time=1.50 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=383 ttl=61 time=1.48 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=384 ttl=61 time=1.30 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=385 ttl=61 time=1.43 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=386 ttl=61 time=1.49 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=387 ttl=61 time=1.58 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=388 ttl=61 time=1.65 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=389 ttl=61 time=1.41 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=390 ttl=61 time=1.11 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=391 ttl=61 time=1.57 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=392 ttl=61 time=1.35 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=393 ttl=61 time=1.57 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=394 ttl=61 time=1.44 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=395 ttl=61 time=1.02 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=396 ttl=61 time=1.96 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=397 ttl=61 time=1.33 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=398 ttl=61 time=1.29 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=399 ttl=61 time=1.37 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=400 ttl=61 time=2.22 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=401 ttl=61 time=1.61 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=402 ttl=61 time=1.29 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=403 ttl=61 time=2.19 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=404 ttl=61 time=1.54 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=405 ttl=61 time=1.23 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=406 ttl=61 time=1.68 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=407 ttl=61 time=1.49 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=408 ttl=61 time=1.51 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=409 ttl=61 time=1.51 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=410 ttl=61 time=1.29 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=411 ttl=61 time=1.44 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=412 ttl=61 time=1.32 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=413 ttl=61 time=1.39 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=414 ttl=61 time=1.45 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=415 ttl=61 time=2.05 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=416 ttl=61 time=1.38 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=417 ttl=61 time=1.57 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=418 ttl=61 time=1.45 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=419 ttl=61 time=1.21 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=420 ttl=61 time=1.35 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=421 ttl=61 time=1.15 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=422 ttl=61 time=1.53 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=423 ttl=61 time=1.36 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=424 ttl=61 time=1.54 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=425 ttl=61 time=1.73 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=426 ttl=61 time=1.52 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=427 ttl=61 time=1.51 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=428 ttl=61 time=1.42 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=429 ttl=61 time=1.33 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=430 ttl=61 time=1.39 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=431 ttl=61 time=1.05 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=432 ttl=61 time=1.44 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=433 ttl=61 time=1.28 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=434 ttl=61 time=1.15 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=435 ttl=61 time=1.19 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=436 ttl=61 time=1.47 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=437 ttl=61 time=1.42 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=438 ttl=61 time=1.09 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=439 ttl=61 time=1.11 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=440 ttl=61 time=1.49 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=441 ttl=61 time=1.42 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=442 ttl=61 time=1.54 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=443 ttl=61 time=1.24 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=444 ttl=61 time=1.68 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=445 ttl=61 time=1.18 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=446 ttl=61 time=1.46 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=447 ttl=61 time=1.33 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=448 ttl=61 time=1.26 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=449 ttl=61 time=1.16 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=450 ttl=61 time=1.05 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=451 ttl=61 time=1.67 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=452 ttl=61 time=1.72 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=453 ttl=61 time=1.49 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=454 ttl=61 time=1.64 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=455 ttl=61 time=1.46 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=456 ttl=61 time=1.34 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=457 ttl=61 time=1.67 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=458 ttl=61 time=1.67 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=459 ttl=61 time=1.11 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=460 ttl=61 time=1.60 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=461 ttl=61 time=1.36 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=462 ttl=61 time=1.44 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=463 ttl=61 time=1.43 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=464 ttl=61 time=1.56 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=465 ttl=61 time=1.64 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=466 ttl=61 time=1.38 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=467 ttl=61 time=1.68 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=468 ttl=61 time=1.29 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=469 ttl=61 time=1.60 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=470 ttl=61 time=1.36 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=471 ttl=61 time=1.46 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=472 ttl=61 time=1.18 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=473 ttl=61 time=1.37 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=474 ttl=61 time=1.67 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=475 ttl=61 time=1.33 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=476 ttl=61 time=1.58 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=477 ttl=61 time=1.71 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=478 ttl=61 time=1.55 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=479 ttl=61 time=1.54 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=480 ttl=61 time=1.66 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=481 ttl=61 time=1.50 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=482 ttl=61 time=1.25 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=483 ttl=61 time=1.47 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=484 ttl=61 time=1.22 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=485 ttl=61 time=1.50 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=486 ttl=61 time=1.93 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=487 ttl=61 time=1.37 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=488 ttl=61 time=1.39 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=489 ttl=61 time=1.28 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=490 ttl=61 time=1.61 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=491 ttl=61 time=1.06 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=492 ttl=61 time=1.03 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=493 ttl=61 time=3.43 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=494 ttl=61 time=1.61 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=495 ttl=61 time=1.89 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=496 ttl=61 time=1.51 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=497 ttl=61 time=1.37 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=498 ttl=61 time=1.59 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=499 ttl=61 time=1.52 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=500 ttl=61 time=1.46 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=501 ttl=61 time=3.78 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=502 ttl=61 time=1.58 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=503 ttl=61 time=1.03 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=504 ttl=61 time=1.31 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=505 ttl=61 time=1.42 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=506 ttl=61 time=1.34 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=507 ttl=61 time=1.58 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=508 ttl=61 time=1.45 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=509 ttl=61 time=1.58 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=510 ttl=61 time=1.48 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=511 ttl=61 time=1.21 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=512 ttl=61 time=1.64 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=513 ttl=61 time=2.02 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=514 ttl=61 time=1.50 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=515 ttl=61 time=1.50 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=516 ttl=61 time=1.61 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=517 ttl=61 time=1.60 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=518 ttl=61 time=1.53 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=519 ttl=61 time=1.31 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=520 ttl=61 time=1.67 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=521 ttl=61 time=1.23 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=522 ttl=61 time=3.28 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=523 ttl=61 time=1.41 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=524 ttl=61 time=1.22 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=525 ttl=61 time=1.35 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=526 ttl=61 time=1.11 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=527 ttl=61 time=1.25 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=528 ttl=61 time=2.57 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=529 ttl=61 time=1.40 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=530 ttl=61 time=1.65 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=531 ttl=61 time=1.71 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=532 ttl=61 time=1.11 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=533 ttl=61 time=1.99 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=534 ttl=61 time=1.53 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=535 ttl=61 time=1.07 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=536 ttl=61 time=1.63 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=537 ttl=61 time=1.38 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=538 ttl=61 time=1.43 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=539 ttl=61 time=1.68 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=540 ttl=61 time=1.17 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=541 ttl=61 time=1.49 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=542 ttl=61 time=1.19 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=543 ttl=61 time=1.37 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=544 ttl=61 time=1.84 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=545 ttl=61 time=2.04 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=546 ttl=61 time=1.72 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=547 ttl=61 time=1.07 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=548 ttl=61 time=1.03 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=549 ttl=61 time=1.51 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=550 ttl=61 time=0.997 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=551 ttl=61 time=1.50 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=552 ttl=61 time=1.11 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=553 ttl=61 time=0.976 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=554 ttl=61 time=1.66 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=555 ttl=61 time=1.16 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=556 ttl=61 time=1.12 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=557 ttl=61 time=2.08 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=558 ttl=61 time=1.20 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=559 ttl=61 time=0.964 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=560 ttl=61 time=1.03 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=561 ttl=61 time=1.53 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=562 ttl=61 time=1.54 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=563 ttl=61 time=2.03 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=564 ttl=61 time=4.66 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=565 ttl=61 time=1.45 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=566 ttl=61 time=1.43 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=567 ttl=61 time=1.67 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=568 ttl=61 time=1.49 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=569 ttl=61 time=1.53 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=570 ttl=61 time=1.55 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=571 ttl=61 time=1.70 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=572 ttl=61 time=1.21 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=573 ttl=61 time=1.22 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=574 ttl=61 time=1.48 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=575 ttl=61 time=1.33 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=576 ttl=61 time=1.11 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=577 ttl=61 time=1.29 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=578 ttl=61 time=1.67 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=579 ttl=61 time=1.21 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=580 ttl=61 time=1.90 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=581 ttl=61 time=2.03 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=582 ttl=61 time=1.69 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=583 ttl=61 time=1.08 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=584 ttl=61 time=1.14 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=585 ttl=61 time=1.19 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=586 ttl=61 time=1.03 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=587 ttl=61 time=1.53 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=588 ttl=61 time=1.34 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=589 ttl=61 time=1.16 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=590 ttl=61 time=1.79 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=591 ttl=61 time=1.03 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=592 ttl=61 time=4.56 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=593 ttl=61 time=2.07 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=594 ttl=61 time=1.56 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=595 ttl=61 time=1.67 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=596 ttl=61 time=1.49 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=597 ttl=61 time=0.993 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=598 ttl=61 time=1.64 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=599 ttl=61 time=1.49 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=600 ttl=61 time=1.57 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=601 ttl=61 time=1.56 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=602 ttl=61 time=1.41 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=603 ttl=61 time=1.30 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=604 ttl=61 time=1.30 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=605 ttl=61 time=1.17 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=606 ttl=61 time=1.40 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=607 ttl=61 time=1.64 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=608 ttl=61 time=1.55 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=609 ttl=61 time=1.48 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=610 ttl=61 time=1.78 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=611 ttl=61 time=1.14 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=612 ttl=61 time=1.56 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=613 ttl=61 time=1.56 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=614 ttl=61 time=1.68 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=615 ttl=61 time=1.64 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=616 ttl=61 time=1.38 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=617 ttl=61 time=1.38 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=618 ttl=61 time=1.52 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=619 ttl=61 time=1.36 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=620 ttl=61 time=1.56 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=621 ttl=61 time=1.78 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=622 ttl=61 time=2.05 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=623 ttl=61 time=1.28 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=624 ttl=61 time=1.17 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=625 ttl=61 time=1.41 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=626 ttl=61 time=1.10 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=627 ttl=61 time=1.47 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=628 ttl=61 time=6.19 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=629 ttl=61 time=1.27 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=630 ttl=61 time=4.46 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=631 ttl=61 time=1.09 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=632 ttl=61 time=1.60 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=633 ttl=61 time=1.10 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=634 ttl=61 time=1.23 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=635 ttl=61 time=1.23 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=636 ttl=61 time=1.25 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=637 ttl=61 time=1.22 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=638 ttl=61 time=1.72 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=639 ttl=61 time=1.16 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=641 ttl=61 time=1.14 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=643 ttl=61 time=1.47 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=644 ttl=61 time=1.32 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=645 ttl=61 time=1.40 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=647 ttl=61 time=1.60 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=649 ttl=61 time=1.80 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=650 ttl=61 time=1.45 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=651 ttl=61 time=1.32 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=653 ttl=61 time=1.32 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=654 ttl=61 time=1.16 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=655 ttl=61 time=1.56 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=657 ttl=61 time=1.60 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=659 ttl=61 time=1.42 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=660 ttl=61 time=1.58 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=661 ttl=61 time=1.70 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=663 ttl=61 time=1.56 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=665 ttl=61 time=1.40 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=666 ttl=61 time=1.11 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=667 ttl=61 time=1.66 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=669 ttl=61 time=4.28 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=670 ttl=61 time=1.57 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=671 ttl=61 time=1.49 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=673 ttl=61 time=1.52 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=674 ttl=61 time=1.23 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=675 ttl=61 time=1.74 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=676 ttl=61 time=1.06 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=677 ttl=61 time=1.12 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=678 ttl=61 time=1.44 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=679 ttl=61 time=1.63 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=680 ttl=61 time=1.44 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=681 ttl=61 time=1.18 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=682 ttl=61 time=1.14 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=683 ttl=61 time=1.47 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=684 ttl=61 time=1.36 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=685 ttl=61 time=1.12 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=686 ttl=61 time=1.59 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=687 ttl=61 time=1.45 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=688 ttl=61 time=1.51 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=689 ttl=61 time=1.19 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=690 ttl=61 time=1.91 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=691 ttl=61 time=1.38 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=692 ttl=61 time=1.46 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=693 ttl=61 time=1.60 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=694 ttl=61 time=1.31 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=695 ttl=61 time=1.29 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=696 ttl=61 time=1.69 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=697 ttl=61 time=1.83 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=698 ttl=61 time=0.984 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=699 ttl=61 time=1.68 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=700 ttl=61 time=1.58 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=701 ttl=61 time=1.72 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=702 ttl=61 time=1.59 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=703 ttl=61 time=1.69 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=704 ttl=61 time=2.12 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=705 ttl=61 time=1.98 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=706 ttl=61 time=1.36 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=707 ttl=61 time=1.62 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=708 ttl=61 time=1.05 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=709 ttl=61 time=1.13 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=710 ttl=61 time=1.56 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=711 ttl=61 time=1.60 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=712 ttl=61 time=1.26 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=713 ttl=61 time=1.63 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=714 ttl=61 time=1.23 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=715 ttl=61 time=1.67 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=716 ttl=61 time=1.18 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=717 ttl=61 time=1.66 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=718 ttl=61 time=1.37 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=719 ttl=61 time=1.46 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=720 ttl=61 time=1.05 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=721 ttl=61 time=1.07 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=722 ttl=61 time=1.44 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=723 ttl=61 time=1.51 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=724 ttl=61 time=1.31 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=725 ttl=61 time=1.94 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=726 ttl=61 time=1.68 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=727 ttl=61 time=1.69 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=728 ttl=61 time=1.45 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=729 ttl=61 time=1.57 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=730 ttl=61 time=1.40 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=731 ttl=61 time=1.62 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=732 ttl=61 time=1.60 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=733 ttl=61 time=1.27 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=734 ttl=61 time=1.65 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=735 ttl=61 time=1.12 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=736 ttl=61 time=1.51 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=737 ttl=61 time=1.27 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=738 ttl=61 time=1.59 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=739 ttl=61 time=1.59 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=740 ttl=61 time=1.61 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=741 ttl=61 time=1.44 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=742 ttl=61 time=1.98 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=743 ttl=61 time=1.70 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=744 ttl=61 time=1.50 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=745 ttl=61 time=1.56 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=746 ttl=61 time=1.29 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=747 ttl=61 time=1.48 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=748 ttl=61 time=1.79 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=749 ttl=61 time=1.67 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=750 ttl=61 time=1.06 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=751 ttl=61 time=1.29 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=752 ttl=61 time=1.41 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=753 ttl=61 time=1.64 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=754 ttl=61 time=1.19 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=755 ttl=61 time=1.17 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=756 ttl=61 time=1.27 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=757 ttl=61 time=1.12 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=758 ttl=61 time=1.63 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=759 ttl=61 time=1.29 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=760 ttl=61 time=1.55 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=761 ttl=61 time=2.56 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=762 ttl=61 time=1.44 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=763 ttl=61 time=1.55 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=764 ttl=61 time=1.63 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=765 ttl=61 time=1.17 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=766 ttl=61 time=1.66 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=767 ttl=61 time=1.60 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=768 ttl=61 time=1.77 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=769 ttl=61 time=1.52 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=770 ttl=61 time=1.63 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=771 ttl=61 time=1.28 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=772 ttl=61 time=1.57 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=773 ttl=61 time=1.68 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=774 ttl=61 time=1.44 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=775 ttl=61 time=1.65 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=776 ttl=61 time=5.83 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=777 ttl=61 time=1.73 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=778 ttl=61 time=1.16 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=779 ttl=61 time=1.58 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=780 ttl=61 time=1.02 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=781 ttl=61 time=1.18 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=782 ttl=61 time=1.70 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=783 ttl=61 time=3.58 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=784 ttl=61 time=1.68 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=785 ttl=61 time=1.43 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=786 ttl=61 time=1.72 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=787 ttl=61 time=1.13 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=788 ttl=61 time=1.32 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=789 ttl=61 time=1.70 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=790 ttl=61 time=1.54 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=791 ttl=61 time=1.24 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=792 ttl=61 time=1.75 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=793 ttl=61 time=1.53 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=794 ttl=61 time=1.93 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=795 ttl=61 time=1.63 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=796 ttl=61 time=1.74 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=797 ttl=61 time=0.929 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=798 ttl=61 time=1.38 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=799 ttl=61 time=1.81 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=800 ttl=61 time=1.44 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=801 ttl=61 time=1.65 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=802 ttl=61 time=1.59 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=803 ttl=61 time=1.54 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=804 ttl=61 time=1.55 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=805 ttl=61 time=1.17 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=806 ttl=61 time=1.56 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=807 ttl=61 time=1.27 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=808 ttl=61 time=1.44 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=809 ttl=61 time=1.57 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=810 ttl=61 time=1.24 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=811 ttl=61 time=1.77 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=812 ttl=61 time=1.66 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=813 ttl=61 time=1.56 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=814 ttl=61 time=1.69 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=815 ttl=61 time=1.98 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=816 ttl=61 time=1.61 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=817 ttl=61 time=4.35 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=818 ttl=61 time=1.75 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=819 ttl=61 time=1.19 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=820 ttl=61 time=1.63 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=821 ttl=61 time=1.45 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=822 ttl=61 time=1.49 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=823 ttl=61 time=2.00 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=824 ttl=61 time=1.24 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=825 ttl=61 time=1.52 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=826 ttl=61 time=1.57 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=827 ttl=61 time=1.37 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=828 ttl=61 time=1.20 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=829 ttl=61 time=1.72 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=830 ttl=61 time=1.70 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=831 ttl=61 time=1.45 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=832 ttl=61 time=1.15 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=833 ttl=61 time=1.48 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=834 ttl=61 time=1.11 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=835 ttl=61 time=1.35 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=836 ttl=61 time=1.10 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=837 ttl=61 time=1.38 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=838 ttl=61 time=1.56 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=839 ttl=61 time=1.59 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=840 ttl=61 time=1.34 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=841 ttl=61 time=1.48 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=842 ttl=61 time=1.70 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=843 ttl=61 time=1.29 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=844 ttl=61 time=1.69 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=845 ttl=61 time=3.99 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=846 ttl=61 time=1.56 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=847 ttl=61 time=1.10 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=848 ttl=61 time=1.54 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=849 ttl=61 time=1.79 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=850 ttl=61 time=3.12 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=851 ttl=61 time=1.41 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=852 ttl=61 time=1.65 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=853 ttl=61 time=1.59 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=854 ttl=61 time=2.03 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=855 ttl=61 time=1.26 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=856 ttl=61 time=1.46 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=857 ttl=61 time=1.09 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=858 ttl=61 time=1.16 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=859 ttl=61 time=1.24 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=860 ttl=61 time=1.46 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=861 ttl=61 time=1.57 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=862 ttl=61 time=1.47 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=863 ttl=61 time=1.21 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=864 ttl=61 time=1.37 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=865 ttl=61 time=1.16 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=866 ttl=61 time=2.01 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=867 ttl=61 time=1.03 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=868 ttl=61 time=1.26 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=869 ttl=61 time=1.13 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=870 ttl=61 time=1.02 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=871 ttl=61 time=1.34 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=872 ttl=61 time=1.65 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=873 ttl=61 time=1.21 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=874 ttl=61 time=1.71 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=875 ttl=61 time=1.96 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=876 ttl=61 time=1.77 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=877 ttl=61 time=1.71 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=878 ttl=61 time=1.16 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=879 ttl=61 time=1.03 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=880 ttl=61 time=1.09 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=881 ttl=61 time=1.29 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=882 ttl=61 time=1.36 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=883 ttl=61 time=1.39 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=884 ttl=61 time=1.73 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=885 ttl=61 time=1.42 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=886 ttl=61 time=1.53 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=887 ttl=61 time=1.47 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=888 ttl=61 time=1.38 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=889 ttl=61 time=1.56 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=890 ttl=61 time=1.31 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=891 ttl=61 time=1.56 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=892 ttl=61 time=7.11 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=893 ttl=61 time=1.38 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=894 ttl=61 time=1.05 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=895 ttl=61 time=1.40 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=896 ttl=61 time=1.42 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=897 ttl=61 time=1.51 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=898 ttl=61 time=1.13 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=899 ttl=61 time=1.74 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=900 ttl=61 time=1.36 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=901 ttl=61 time=1.10 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=902 ttl=61 time=1.28 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=903 ttl=61 time=1.07 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=904 ttl=61 time=1.13 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=905 ttl=61 time=1.41 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=906 ttl=61 time=1.57 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=907 ttl=61 time=3.47 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=908 ttl=61 time=1.48 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=909 ttl=61 time=1.40 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=910 ttl=61 time=1.34 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=911 ttl=61 time=1.25 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=912 ttl=61 time=1.16 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=914 ttl=61 time=1.64 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=916 ttl=61 time=1.41 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=917 ttl=61 time=1.31 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=919 ttl=61 time=1.43 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=920 ttl=61 time=1.32 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=922 ttl=61 time=1.19 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=924 ttl=61 time=2.00 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=925 ttl=61 time=1.46 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=927 ttl=61 time=1.44 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=928 ttl=61 time=1.09 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=930 ttl=61 time=4.12 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=932 ttl=61 time=1.24 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=933 ttl=61 time=1.57 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=935 ttl=61 time=1.16 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=936 ttl=61 time=1.58 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=937 ttl=61 time=1.04 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=939 ttl=61 time=1.56 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=940 ttl=61 time=1.57 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=942 ttl=61 time=1.04 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=944 ttl=61 time=0.960 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=945 ttl=61 time=1.28 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=946 ttl=61 time=1.13 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=947 ttl=61 time=1.53 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=948 ttl=61 time=1.58 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=949 ttl=61 time=1.51 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=950 ttl=61 time=1.30 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=951 ttl=61 time=1.30 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=952 ttl=61 time=1.28 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=953 ttl=61 time=1.11 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=954 ttl=61 time=0.964 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=955 ttl=61 time=1.48 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=956 ttl=61 time=1.63 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=958 ttl=61 time=1.36 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=959 ttl=61 time=1.42 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=960 ttl=61 time=2.21 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=961 ttl=61 time=1.46 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=962 ttl=61 time=1.58 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=963 ttl=61 time=1.04 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=964 ttl=61 time=1.41 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=965 ttl=61 time=1.63 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=966 ttl=61 time=1.43 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=967 ttl=61 time=1.32 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=968 ttl=61 time=1.38 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=969 ttl=61 time=1.64 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=970 ttl=61 time=1.52 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=971 ttl=61 time=1.18 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=972 ttl=61 time=2.31 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=973 ttl=61 time=1.28 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=974 ttl=61 time=1.96 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=975 ttl=61 time=1.20 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=976 ttl=61 time=1.45 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=977 ttl=61 time=1.80 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=978 ttl=61 time=1.43 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=979 ttl=61 time=1.64 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=980 ttl=61 time=1.45 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=981 ttl=61 time=1.94 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=982 ttl=61 time=1.68 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=983 ttl=61 time=1.26 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=984 ttl=61 time=1.18 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=985 ttl=61 time=1.42 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=986 ttl=61 time=1.54 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=987 ttl=61 time=1.46 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=988 ttl=61 time=1.24 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=989 ttl=61 time=1.77 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=990 ttl=61 time=1.61 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=991 ttl=61 time=1.67 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=992 ttl=61 time=1.40 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=993 ttl=61 time=1.13 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=994 ttl=61 time=2.27 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=995 ttl=61 time=1.19 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=996 ttl=61 time=1.41 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=997 ttl=61 time=1.34 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=998 ttl=61 time=1.44 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=999 ttl=61 time=1.46 ms
+64 bytes from 172.17.0.22 (172.17.0.22): icmp_seq=1000 ttl=61 time=1.56 ms
+
+--- www.iitg.ac.in ping statistics ---
+1000 packets transmitted, 912 received, 8.8% packet loss, time 1001748ms
+rtt min/avg/max/mdev = 0.678/1.469/7.107/0.552 ms
diff -urN main/pingn xv6-public/pingn
--- main/pingn	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/pingn	2022-08-14 10:27:28.000000000 +0530
@@ -0,0 +1,909 @@
+PING www.iitg.ac.in (172.17.0.22) 56(84) bytes of data.
+64 bytes from 172.17.0.22: icmp_seq=1 ttl=61 time=0.821 ms
+64 bytes from 172.17.0.22: icmp_seq=2 ttl=61 time=0.586 ms
+64 bytes from 172.17.0.22: icmp_seq=3 ttl=61 time=1.21 ms
+64 bytes from 172.17.0.22: icmp_seq=4 ttl=61 time=1.07 ms
+64 bytes from 172.17.0.22: icmp_seq=5 ttl=61 time=1.12 ms
+64 bytes from 172.17.0.22: icmp_seq=6 ttl=61 time=1.08 ms
+64 bytes from 172.17.0.22: icmp_seq=8 ttl=61 time=1.24 ms
+64 bytes from 172.17.0.22: icmp_seq=10 ttl=61 time=1.51 ms
+64 bytes from 172.17.0.22: icmp_seq=12 ttl=61 time=1.12 ms
+64 bytes from 172.17.0.22: icmp_seq=15 ttl=61 time=1.12 ms
+64 bytes from 172.17.0.22: icmp_seq=16 ttl=61 time=1.16 ms
+64 bytes from 172.17.0.22: icmp_seq=18 ttl=61 time=0.754 ms
+64 bytes from 172.17.0.22: icmp_seq=20 ttl=61 time=1.13 ms
+64 bytes from 172.17.0.22: icmp_seq=22 ttl=61 time=1.09 ms
+64 bytes from 172.17.0.22: icmp_seq=23 ttl=61 time=0.840 ms
+64 bytes from 172.17.0.22: icmp_seq=24 ttl=61 time=0.969 ms
+64 bytes from 172.17.0.22: icmp_seq=26 ttl=61 time=1.20 ms
+64 bytes from 172.17.0.22: icmp_seq=28 ttl=61 time=1.15 ms
+64 bytes from 172.17.0.22: icmp_seq=30 ttl=61 time=1.09 ms
+64 bytes from 172.17.0.22: icmp_seq=32 ttl=61 time=0.928 ms
+64 bytes from 172.17.0.22: icmp_seq=33 ttl=61 time=1.46 ms
+64 bytes from 172.17.0.22: icmp_seq=34 ttl=61 time=1.35 ms
+64 bytes from 172.17.0.22: icmp_seq=36 ttl=61 time=1.04 ms
+64 bytes from 172.17.0.22: icmp_seq=38 ttl=61 time=0.861 ms
+64 bytes from 172.17.0.22: icmp_seq=40 ttl=61 time=0.772 ms
+64 bytes from 172.17.0.22: icmp_seq=42 ttl=61 time=1.39 ms
+64 bytes from 172.17.0.22: icmp_seq=43 ttl=61 time=1.16 ms
+64 bytes from 172.17.0.22: icmp_seq=45 ttl=61 time=1.14 ms
+64 bytes from 172.17.0.22: icmp_seq=46 ttl=61 time=1.18 ms
+64 bytes from 172.17.0.22: icmp_seq=47 ttl=61 time=1.01 ms
+64 bytes from 172.17.0.22: icmp_seq=49 ttl=61 time=0.956 ms
+64 bytes from 172.17.0.22: icmp_seq=50 ttl=61 time=1.15 ms
+64 bytes from 172.17.0.22: icmp_seq=51 ttl=61 time=0.771 ms
+64 bytes from 172.17.0.22: icmp_seq=53 ttl=61 time=1.20 ms
+64 bytes from 172.17.0.22: icmp_seq=54 ttl=61 time=0.955 ms
+64 bytes from 172.17.0.22: icmp_seq=56 ttl=61 time=1.05 ms
+64 bytes from 172.17.0.22: icmp_seq=58 ttl=61 time=0.978 ms
+64 bytes from 172.17.0.22: icmp_seq=60 ttl=61 time=0.979 ms
+64 bytes from 172.17.0.22: icmp_seq=61 ttl=61 time=1.41 ms
+64 bytes from 172.17.0.22: icmp_seq=62 ttl=61 time=1.18 ms
+64 bytes from 172.17.0.22: icmp_seq=63 ttl=61 time=0.988 ms
+64 bytes from 172.17.0.22: icmp_seq=65 ttl=61 time=1.10 ms
+64 bytes from 172.17.0.22: icmp_seq=66 ttl=61 time=1.28 ms
+64 bytes from 172.17.0.22: icmp_seq=68 ttl=61 time=0.942 ms
+64 bytes from 172.17.0.22: icmp_seq=69 ttl=61 time=0.975 ms
+64 bytes from 172.17.0.22: icmp_seq=70 ttl=61 time=0.812 ms
+64 bytes from 172.17.0.22: icmp_seq=71 ttl=61 time=1.27 ms
+64 bytes from 172.17.0.22: icmp_seq=73 ttl=61 time=1.15 ms
+64 bytes from 172.17.0.22: icmp_seq=74 ttl=61 time=1.17 ms
+64 bytes from 172.17.0.22: icmp_seq=75 ttl=61 time=1.21 ms
+64 bytes from 172.17.0.22: icmp_seq=76 ttl=61 time=1.17 ms
+64 bytes from 172.17.0.22: icmp_seq=78 ttl=61 time=1.04 ms
+64 bytes from 172.17.0.22: icmp_seq=79 ttl=61 time=0.996 ms
+64 bytes from 172.17.0.22: icmp_seq=81 ttl=61 time=1.00 ms
+64 bytes from 172.17.0.22: icmp_seq=82 ttl=61 time=1.23 ms
+64 bytes from 172.17.0.22: icmp_seq=83 ttl=61 time=0.971 ms
+64 bytes from 172.17.0.22: icmp_seq=84 ttl=61 time=1.28 ms
+64 bytes from 172.17.0.22: icmp_seq=85 ttl=61 time=0.812 ms
+64 bytes from 172.17.0.22: icmp_seq=86 ttl=61 time=1.21 ms
+64 bytes from 172.17.0.22: icmp_seq=88 ttl=61 time=1.14 ms
+64 bytes from 172.17.0.22: icmp_seq=89 ttl=61 time=1.28 ms
+64 bytes from 172.17.0.22: icmp_seq=91 ttl=61 time=1.00 ms
+64 bytes from 172.17.0.22: icmp_seq=92 ttl=61 time=0.947 ms
+64 bytes from 172.17.0.22: icmp_seq=93 ttl=61 time=0.951 ms
+64 bytes from 172.17.0.22: icmp_seq=94 ttl=61 time=0.995 ms
+64 bytes from 172.17.0.22: icmp_seq=95 ttl=61 time=1.39 ms
+64 bytes from 172.17.0.22: icmp_seq=96 ttl=61 time=0.884 ms
+64 bytes from 172.17.0.22: icmp_seq=98 ttl=61 time=1.19 ms
+64 bytes from 172.17.0.22: icmp_seq=99 ttl=61 time=0.970 ms
+64 bytes from 172.17.0.22: icmp_seq=100 ttl=61 time=1.08 ms
+64 bytes from 172.17.0.22: icmp_seq=101 ttl=61 time=1.15 ms
+64 bytes from 172.17.0.22: icmp_seq=102 ttl=61 time=1.20 ms
+64 bytes from 172.17.0.22: icmp_seq=103 ttl=61 time=0.781 ms
+64 bytes from 172.17.0.22: icmp_seq=105 ttl=61 time=1.00 ms
+64 bytes from 172.17.0.22: icmp_seq=106 ttl=61 time=1.01 ms
+64 bytes from 172.17.0.22: icmp_seq=107 ttl=61 time=1.17 ms
+64 bytes from 172.17.0.22: icmp_seq=109 ttl=61 time=1.16 ms
+64 bytes from 172.17.0.22: icmp_seq=110 ttl=61 time=1.14 ms
+64 bytes from 172.17.0.22: icmp_seq=111 ttl=61 time=1.05 ms
+64 bytes from 172.17.0.22: icmp_seq=113 ttl=61 time=1.17 ms
+64 bytes from 172.17.0.22: icmp_seq=114 ttl=61 time=1.25 ms
+64 bytes from 172.17.0.22: icmp_seq=116 ttl=61 time=1.13 ms
+64 bytes from 172.17.0.22: icmp_seq=117 ttl=61 time=1.08 ms
+64 bytes from 172.17.0.22: icmp_seq=119 ttl=61 time=1.27 ms
+64 bytes from 172.17.0.22: icmp_seq=121 ttl=61 time=1.24 ms
+64 bytes from 172.17.0.22: icmp_seq=123 ttl=61 time=1.31 ms
+64 bytes from 172.17.0.22: icmp_seq=125 ttl=61 time=0.795 ms
+64 bytes from 172.17.0.22: icmp_seq=127 ttl=61 time=0.986 ms
+64 bytes from 172.17.0.22: icmp_seq=128 ttl=61 time=0.793 ms
+64 bytes from 172.17.0.22: icmp_seq=129 ttl=61 time=1.23 ms
+64 bytes from 172.17.0.22: icmp_seq=131 ttl=61 time=0.846 ms
+64 bytes from 172.17.0.22: icmp_seq=133 ttl=61 time=1.31 ms
+64 bytes from 172.17.0.22: icmp_seq=135 ttl=61 time=1.12 ms
+64 bytes from 172.17.0.22: icmp_seq=136 ttl=61 time=1.16 ms
+64 bytes from 172.17.0.22: icmp_seq=137 ttl=61 time=1.07 ms
+64 bytes from 172.17.0.22: icmp_seq=139 ttl=61 time=0.820 ms
+64 bytes from 172.17.0.22: icmp_seq=141 ttl=61 time=1.29 ms
+64 bytes from 172.17.0.22: icmp_seq=143 ttl=61 time=1.28 ms
+64 bytes from 172.17.0.22: icmp_seq=145 ttl=61 time=1.24 ms
+64 bytes from 172.17.0.22: icmp_seq=147 ttl=61 time=1.13 ms
+64 bytes from 172.17.0.22: icmp_seq=148 ttl=61 time=1.13 ms
+64 bytes from 172.17.0.22: icmp_seq=149 ttl=61 time=0.997 ms
+64 bytes from 172.17.0.22: icmp_seq=150 ttl=61 time=1.11 ms
+64 bytes from 172.17.0.22: icmp_seq=151 ttl=61 time=1.12 ms
+64 bytes from 172.17.0.22: icmp_seq=152 ttl=61 time=1.16 ms
+64 bytes from 172.17.0.22: icmp_seq=153 ttl=61 time=1.39 ms
+64 bytes from 172.17.0.22: icmp_seq=154 ttl=61 time=0.801 ms
+64 bytes from 172.17.0.22: icmp_seq=155 ttl=61 time=1.33 ms
+64 bytes from 172.17.0.22: icmp_seq=156 ttl=61 time=1.36 ms
+64 bytes from 172.17.0.22: icmp_seq=157 ttl=61 time=1.45 ms
+64 bytes from 172.17.0.22: icmp_seq=158 ttl=61 time=0.884 ms
+64 bytes from 172.17.0.22: icmp_seq=159 ttl=61 time=1.32 ms
+64 bytes from 172.17.0.22: icmp_seq=160 ttl=61 time=1.22 ms
+64 bytes from 172.17.0.22: icmp_seq=161 ttl=61 time=1.35 ms
+64 bytes from 172.17.0.22: icmp_seq=162 ttl=61 time=0.893 ms
+64 bytes from 172.17.0.22: icmp_seq=163 ttl=61 time=1.33 ms
+64 bytes from 172.17.0.22: icmp_seq=164 ttl=61 time=1.35 ms
+64 bytes from 172.17.0.22: icmp_seq=165 ttl=61 time=1.00 ms
+64 bytes from 172.17.0.22: icmp_seq=167 ttl=61 time=1.03 ms
+64 bytes from 172.17.0.22: icmp_seq=169 ttl=61 time=1.15 ms
+64 bytes from 172.17.0.22: icmp_seq=171 ttl=61 time=1.04 ms
+64 bytes from 172.17.0.22: icmp_seq=173 ttl=61 time=1.41 ms
+64 bytes from 172.17.0.22: icmp_seq=174 ttl=61 time=1.22 ms
+64 bytes from 172.17.0.22: icmp_seq=175 ttl=61 time=1.49 ms
+64 bytes from 172.17.0.22: icmp_seq=176 ttl=61 time=2.14 ms
+64 bytes from 172.17.0.22: icmp_seq=178 ttl=61 time=0.960 ms
+64 bytes from 172.17.0.22: icmp_seq=180 ttl=61 time=1.61 ms
+64 bytes from 172.17.0.22: icmp_seq=181 ttl=61 time=1.09 ms
+64 bytes from 172.17.0.22: icmp_seq=183 ttl=61 time=1.43 ms
+64 bytes from 172.17.0.22: icmp_seq=185 ttl=61 time=1.13 ms
+64 bytes from 172.17.0.22: icmp_seq=187 ttl=61 time=1.19 ms
+64 bytes from 172.17.0.22: icmp_seq=188 ttl=61 time=1.34 ms
+64 bytes from 172.17.0.22: icmp_seq=189 ttl=61 time=0.990 ms
+64 bytes from 172.17.0.22: icmp_seq=190 ttl=61 time=1.23 ms
+64 bytes from 172.17.0.22: icmp_seq=191 ttl=61 time=1.25 ms
+64 bytes from 172.17.0.22: icmp_seq=193 ttl=61 time=1.21 ms
+64 bytes from 172.17.0.22: icmp_seq=194 ttl=61 time=1.34 ms
+64 bytes from 172.17.0.22: icmp_seq=195 ttl=61 time=1.53 ms
+64 bytes from 172.17.0.22: icmp_seq=197 ttl=61 time=1.19 ms
+64 bytes from 172.17.0.22: icmp_seq=198 ttl=61 time=1.45 ms
+64 bytes from 172.17.0.22: icmp_seq=199 ttl=61 time=1.58 ms
+64 bytes from 172.17.0.22: icmp_seq=200 ttl=61 time=1.26 ms
+64 bytes from 172.17.0.22: icmp_seq=202 ttl=61 time=1.46 ms
+64 bytes from 172.17.0.22: icmp_seq=203 ttl=61 time=1.06 ms
+64 bytes from 172.17.0.22: icmp_seq=205 ttl=61 time=1.24 ms
+64 bytes from 172.17.0.22: icmp_seq=206 ttl=61 time=1.17 ms
+64 bytes from 172.17.0.22: icmp_seq=207 ttl=61 time=1.10 ms
+64 bytes from 172.17.0.22: icmp_seq=208 ttl=61 time=1.46 ms
+64 bytes from 172.17.0.22: icmp_seq=209 ttl=61 time=1.12 ms
+64 bytes from 172.17.0.22: icmp_seq=210 ttl=61 time=1.44 ms
+64 bytes from 172.17.0.22: icmp_seq=211 ttl=61 time=1.56 ms
+64 bytes from 172.17.0.22: icmp_seq=212 ttl=61 time=0.979 ms
+64 bytes from 172.17.0.22: icmp_seq=213 ttl=61 time=2.04 ms
+64 bytes from 172.17.0.22: icmp_seq=214 ttl=61 time=1.58 ms
+64 bytes from 172.17.0.22: icmp_seq=216 ttl=61 time=1.49 ms
+64 bytes from 172.17.0.22: icmp_seq=217 ttl=61 time=1.37 ms
+64 bytes from 172.17.0.22: icmp_seq=219 ttl=61 time=1.11 ms
+64 bytes from 172.17.0.22: icmp_seq=220 ttl=61 time=1.31 ms
+64 bytes from 172.17.0.22: icmp_seq=222 ttl=61 time=1.33 ms
+64 bytes from 172.17.0.22: icmp_seq=223 ttl=61 time=1.17 ms
+64 bytes from 172.17.0.22: icmp_seq=225 ttl=61 time=1.41 ms
+64 bytes from 172.17.0.22: icmp_seq=226 ttl=61 time=1.33 ms
+64 bytes from 172.17.0.22: icmp_seq=228 ttl=61 time=3.16 ms
+64 bytes from 172.17.0.22: icmp_seq=229 ttl=61 time=1.42 ms
+64 bytes from 172.17.0.22: icmp_seq=231 ttl=61 time=1.47 ms
+64 bytes from 172.17.0.22: icmp_seq=233 ttl=61 time=1.31 ms
+64 bytes from 172.17.0.22: icmp_seq=234 ttl=61 time=1.23 ms
+64 bytes from 172.17.0.22: icmp_seq=235 ttl=61 time=1.43 ms
+64 bytes from 172.17.0.22: icmp_seq=236 ttl=61 time=1.75 ms
+64 bytes from 172.17.0.22: icmp_seq=237 ttl=61 time=1.39 ms
+64 bytes from 172.17.0.22: icmp_seq=239 ttl=61 time=1.32 ms
+64 bytes from 172.17.0.22: icmp_seq=240 ttl=61 time=1.32 ms
+64 bytes from 172.17.0.22: icmp_seq=241 ttl=61 time=1.77 ms
+64 bytes from 172.17.0.22: icmp_seq=242 ttl=61 time=1.05 ms
+64 bytes from 172.17.0.22: icmp_seq=243 ttl=61 time=1.22 ms
+64 bytes from 172.17.0.22: icmp_seq=244 ttl=61 time=1.67 ms
+64 bytes from 172.17.0.22: icmp_seq=246 ttl=61 time=1.54 ms
+64 bytes from 172.17.0.22: icmp_seq=247 ttl=61 time=1.36 ms
+64 bytes from 172.17.0.22: icmp_seq=248 ttl=61 time=1.34 ms
+64 bytes from 172.17.0.22: icmp_seq=250 ttl=61 time=1.27 ms
+64 bytes from 172.17.0.22: icmp_seq=251 ttl=61 time=1.28 ms
+64 bytes from 172.17.0.22: icmp_seq=253 ttl=61 time=1.36 ms
+64 bytes from 172.17.0.22: icmp_seq=254 ttl=61 time=1.25 ms
+64 bytes from 172.17.0.22: icmp_seq=255 ttl=61 time=0.988 ms
+64 bytes from 172.17.0.22: icmp_seq=256 ttl=61 time=1.02 ms
+64 bytes from 172.17.0.22: icmp_seq=257 ttl=61 time=0.995 ms
+64 bytes from 172.17.0.22: icmp_seq=258 ttl=61 time=1.30 ms
+64 bytes from 172.17.0.22: icmp_seq=259 ttl=61 time=1.69 ms
+64 bytes from 172.17.0.22: icmp_seq=260 ttl=61 time=1.14 ms
+64 bytes from 172.17.0.22: icmp_seq=261 ttl=61 time=1.02 ms
+64 bytes from 172.17.0.22: icmp_seq=262 ttl=61 time=1.18 ms
+64 bytes from 172.17.0.22: icmp_seq=263 ttl=61 time=1.13 ms
+64 bytes from 172.17.0.22: icmp_seq=264 ttl=61 time=1.06 ms
+64 bytes from 172.17.0.22: icmp_seq=265 ttl=61 time=1.40 ms
+64 bytes from 172.17.0.22: icmp_seq=266 ttl=61 time=1.18 ms
+64 bytes from 172.17.0.22: icmp_seq=267 ttl=61 time=1.36 ms
+64 bytes from 172.17.0.22: icmp_seq=268 ttl=61 time=1.24 ms
+64 bytes from 172.17.0.22: icmp_seq=269 ttl=61 time=1.57 ms
+64 bytes from 172.17.0.22: icmp_seq=270 ttl=61 time=1.15 ms
+64 bytes from 172.17.0.22: icmp_seq=271 ttl=61 time=1.61 ms
+64 bytes from 172.17.0.22: icmp_seq=272 ttl=61 time=1.07 ms
+64 bytes from 172.17.0.22: icmp_seq=273 ttl=61 time=1.22 ms
+64 bytes from 172.17.0.22: icmp_seq=274 ttl=61 time=1.04 ms
+64 bytes from 172.17.0.22: icmp_seq=275 ttl=61 time=1.35 ms
+64 bytes from 172.17.0.22: icmp_seq=276 ttl=61 time=1.07 ms
+64 bytes from 172.17.0.22: icmp_seq=277 ttl=61 time=1.39 ms
+64 bytes from 172.17.0.22: icmp_seq=278 ttl=61 time=1.13 ms
+64 bytes from 172.17.0.22: icmp_seq=279 ttl=61 time=1.27 ms
+64 bytes from 172.17.0.22: icmp_seq=280 ttl=61 time=1.02 ms
+64 bytes from 172.17.0.22: icmp_seq=281 ttl=61 time=1.07 ms
+64 bytes from 172.17.0.22: icmp_seq=282 ttl=61 time=1.23 ms
+64 bytes from 172.17.0.22: icmp_seq=283 ttl=61 time=1.25 ms
+64 bytes from 172.17.0.22: icmp_seq=284 ttl=61 time=1.22 ms
+64 bytes from 172.17.0.22: icmp_seq=285 ttl=61 time=1.16 ms
+64 bytes from 172.17.0.22: icmp_seq=286 ttl=61 time=1.39 ms
+64 bytes from 172.17.0.22: icmp_seq=287 ttl=61 time=1.22 ms
+64 bytes from 172.17.0.22: icmp_seq=288 ttl=61 time=1.72 ms
+64 bytes from 172.17.0.22: icmp_seq=289 ttl=61 time=1.27 ms
+64 bytes from 172.17.0.22: icmp_seq=290 ttl=61 time=1.36 ms
+64 bytes from 172.17.0.22: icmp_seq=291 ttl=61 time=1.49 ms
+64 bytes from 172.17.0.22: icmp_seq=292 ttl=61 time=1.32 ms
+64 bytes from 172.17.0.22: icmp_seq=293 ttl=61 time=1.24 ms
+64 bytes from 172.17.0.22: icmp_seq=294 ttl=61 time=1.17 ms
+64 bytes from 172.17.0.22: icmp_seq=296 ttl=61 time=1.36 ms
+64 bytes from 172.17.0.22: icmp_seq=297 ttl=61 time=1.54 ms
+64 bytes from 172.17.0.22: icmp_seq=298 ttl=61 time=1.48 ms
+64 bytes from 172.17.0.22: icmp_seq=299 ttl=61 time=1.36 ms
+64 bytes from 172.17.0.22: icmp_seq=300 ttl=61 time=1.39 ms
+64 bytes from 172.17.0.22: icmp_seq=301 ttl=61 time=1.42 ms
+64 bytes from 172.17.0.22: icmp_seq=302 ttl=61 time=1.49 ms
+64 bytes from 172.17.0.22: icmp_seq=303 ttl=61 time=1.20 ms
+64 bytes from 172.17.0.22: icmp_seq=304 ttl=61 time=1.41 ms
+64 bytes from 172.17.0.22: icmp_seq=305 ttl=61 time=1.40 ms
+64 bytes from 172.17.0.22: icmp_seq=306 ttl=61 time=1.35 ms
+64 bytes from 172.17.0.22: icmp_seq=307 ttl=61 time=1.34 ms
+64 bytes from 172.17.0.22: icmp_seq=308 ttl=61 time=1.25 ms
+64 bytes from 172.17.0.22: icmp_seq=309 ttl=61 time=1.34 ms
+64 bytes from 172.17.0.22: icmp_seq=310 ttl=61 time=1.19 ms
+64 bytes from 172.17.0.22: icmp_seq=311 ttl=61 time=0.908 ms
+64 bytes from 172.17.0.22: icmp_seq=312 ttl=61 time=1.22 ms
+64 bytes from 172.17.0.22: icmp_seq=313 ttl=61 time=1.09 ms
+64 bytes from 172.17.0.22: icmp_seq=314 ttl=61 time=1.56 ms
+64 bytes from 172.17.0.22: icmp_seq=315 ttl=61 time=1.27 ms
+64 bytes from 172.17.0.22: icmp_seq=316 ttl=61 time=1.20 ms
+64 bytes from 172.17.0.22: icmp_seq=317 ttl=61 time=1.43 ms
+64 bytes from 172.17.0.22: icmp_seq=318 ttl=61 time=1.27 ms
+64 bytes from 172.17.0.22: icmp_seq=319 ttl=61 time=1.30 ms
+64 bytes from 172.17.0.22: icmp_seq=320 ttl=61 time=1.46 ms
+64 bytes from 172.17.0.22: icmp_seq=321 ttl=61 time=1.50 ms
+64 bytes from 172.17.0.22: icmp_seq=322 ttl=61 time=1.34 ms
+64 bytes from 172.17.0.22: icmp_seq=323 ttl=61 time=1.34 ms
+64 bytes from 172.17.0.22: icmp_seq=324 ttl=61 time=1.53 ms
+64 bytes from 172.17.0.22: icmp_seq=325 ttl=61 time=1.57 ms
+64 bytes from 172.17.0.22: icmp_seq=326 ttl=61 time=1.90 ms
+64 bytes from 172.17.0.22: icmp_seq=327 ttl=61 time=1.56 ms
+64 bytes from 172.17.0.22: icmp_seq=328 ttl=61 time=1.31 ms
+64 bytes from 172.17.0.22: icmp_seq=329 ttl=61 time=1.12 ms
+64 bytes from 172.17.0.22: icmp_seq=330 ttl=61 time=1.37 ms
+64 bytes from 172.17.0.22: icmp_seq=331 ttl=61 time=2.17 ms
+64 bytes from 172.17.0.22: icmp_seq=332 ttl=61 time=1.00 ms
+64 bytes from 172.17.0.22: icmp_seq=333 ttl=61 time=1.22 ms
+64 bytes from 172.17.0.22: icmp_seq=334 ttl=61 time=1.18 ms
+64 bytes from 172.17.0.22: icmp_seq=335 ttl=61 time=1.60 ms
+64 bytes from 172.17.0.22: icmp_seq=336 ttl=61 time=1.56 ms
+64 bytes from 172.17.0.22: icmp_seq=337 ttl=61 time=1.57 ms
+64 bytes from 172.17.0.22: icmp_seq=338 ttl=61 time=1.54 ms
+64 bytes from 172.17.0.22: icmp_seq=339 ttl=61 time=1.32 ms
+64 bytes from 172.17.0.22: icmp_seq=340 ttl=61 time=4.51 ms
+64 bytes from 172.17.0.22: icmp_seq=341 ttl=61 time=1.35 ms
+64 bytes from 172.17.0.22: icmp_seq=342 ttl=61 time=1.03 ms
+64 bytes from 172.17.0.22: icmp_seq=343 ttl=61 time=1.57 ms
+64 bytes from 172.17.0.22: icmp_seq=344 ttl=61 time=1.25 ms
+64 bytes from 172.17.0.22: icmp_seq=345 ttl=61 time=1.68 ms
+64 bytes from 172.17.0.22: icmp_seq=346 ttl=61 time=1.12 ms
+64 bytes from 172.17.0.22: icmp_seq=347 ttl=61 time=1.55 ms
+64 bytes from 172.17.0.22: icmp_seq=348 ttl=61 time=1.53 ms
+64 bytes from 172.17.0.22: icmp_seq=349 ttl=61 time=1.32 ms
+64 bytes from 172.17.0.22: icmp_seq=350 ttl=61 time=1.77 ms
+64 bytes from 172.17.0.22: icmp_seq=351 ttl=61 time=1.43 ms
+64 bytes from 172.17.0.22: icmp_seq=352 ttl=61 time=1.24 ms
+64 bytes from 172.17.0.22: icmp_seq=353 ttl=61 time=1.38 ms
+64 bytes from 172.17.0.22: icmp_seq=354 ttl=61 time=1.53 ms
+64 bytes from 172.17.0.22: icmp_seq=355 ttl=61 time=1.46 ms
+64 bytes from 172.17.0.22: icmp_seq=356 ttl=61 time=1.05 ms
+64 bytes from 172.17.0.22: icmp_seq=357 ttl=61 time=1.12 ms
+64 bytes from 172.17.0.22: icmp_seq=358 ttl=61 time=1.49 ms
+64 bytes from 172.17.0.22: icmp_seq=359 ttl=61 time=1.40 ms
+64 bytes from 172.17.0.22: icmp_seq=360 ttl=61 time=1.25 ms
+64 bytes from 172.17.0.22: icmp_seq=361 ttl=61 time=1.22 ms
+64 bytes from 172.17.0.22: icmp_seq=362 ttl=61 time=1.46 ms
+64 bytes from 172.17.0.22: icmp_seq=363 ttl=61 time=1.64 ms
+64 bytes from 172.17.0.22: icmp_seq=364 ttl=61 time=1.41 ms
+64 bytes from 172.17.0.22: icmp_seq=365 ttl=61 time=1.55 ms
+64 bytes from 172.17.0.22: icmp_seq=366 ttl=61 time=1.58 ms
+64 bytes from 172.17.0.22: icmp_seq=367 ttl=61 time=1.59 ms
+64 bytes from 172.17.0.22: icmp_seq=368 ttl=61 time=1.40 ms
+64 bytes from 172.17.0.22: icmp_seq=369 ttl=61 time=1.59 ms
+64 bytes from 172.17.0.22: icmp_seq=370 ttl=61 time=1.39 ms
+64 bytes from 172.17.0.22: icmp_seq=371 ttl=61 time=2.06 ms
+64 bytes from 172.17.0.22: icmp_seq=372 ttl=61 time=1.32 ms
+64 bytes from 172.17.0.22: icmp_seq=373 ttl=61 time=1.15 ms
+64 bytes from 172.17.0.22: icmp_seq=374 ttl=61 time=1.40 ms
+64 bytes from 172.17.0.22: icmp_seq=375 ttl=61 time=1.09 ms
+64 bytes from 172.17.0.22: icmp_seq=376 ttl=61 time=1.52 ms
+64 bytes from 172.17.0.22: icmp_seq=377 ttl=61 time=1.33 ms
+64 bytes from 172.17.0.22: icmp_seq=378 ttl=61 time=1.15 ms
+64 bytes from 172.17.0.22: icmp_seq=379 ttl=61 time=1.35 ms
+64 bytes from 172.17.0.22: icmp_seq=380 ttl=61 time=1.55 ms
+64 bytes from 172.17.0.22: icmp_seq=381 ttl=61 time=1.39 ms
+64 bytes from 172.17.0.22: icmp_seq=382 ttl=61 time=1.47 ms
+64 bytes from 172.17.0.22: icmp_seq=383 ttl=61 time=1.43 ms
+64 bytes from 172.17.0.22: icmp_seq=384 ttl=61 time=1.45 ms
+64 bytes from 172.17.0.22: icmp_seq=385 ttl=61 time=1.32 ms
+64 bytes from 172.17.0.22: icmp_seq=386 ttl=61 time=2.01 ms
+64 bytes from 172.17.0.22: icmp_seq=387 ttl=61 time=1.56 ms
+64 bytes from 172.17.0.22: icmp_seq=388 ttl=61 time=1.34 ms
+64 bytes from 172.17.0.22: icmp_seq=389 ttl=61 time=1.11 ms
+64 bytes from 172.17.0.22: icmp_seq=390 ttl=61 time=4.05 ms
+64 bytes from 172.17.0.22: icmp_seq=391 ttl=61 time=1.14 ms
+64 bytes from 172.17.0.22: icmp_seq=392 ttl=61 time=0.967 ms
+64 bytes from 172.17.0.22: icmp_seq=393 ttl=61 time=1.48 ms
+64 bytes from 172.17.0.22: icmp_seq=394 ttl=61 time=1.35 ms
+64 bytes from 172.17.0.22: icmp_seq=395 ttl=61 time=1.46 ms
+64 bytes from 172.17.0.22: icmp_seq=396 ttl=61 time=1.45 ms
+64 bytes from 172.17.0.22: icmp_seq=397 ttl=61 time=1.36 ms
+64 bytes from 172.17.0.22: icmp_seq=398 ttl=61 time=1.43 ms
+64 bytes from 172.17.0.22: icmp_seq=399 ttl=61 time=1.19 ms
+64 bytes from 172.17.0.22: icmp_seq=400 ttl=61 time=1.29 ms
+64 bytes from 172.17.0.22: icmp_seq=401 ttl=61 time=1.35 ms
+64 bytes from 172.17.0.22: icmp_seq=402 ttl=61 time=1.34 ms
+64 bytes from 172.17.0.22: icmp_seq=403 ttl=61 time=1.23 ms
+64 bytes from 172.17.0.22: icmp_seq=404 ttl=61 time=2.01 ms
+64 bytes from 172.17.0.22: icmp_seq=405 ttl=61 time=1.86 ms
+64 bytes from 172.17.0.22: icmp_seq=406 ttl=61 time=1.54 ms
+64 bytes from 172.17.0.22: icmp_seq=407 ttl=61 time=1.32 ms
+64 bytes from 172.17.0.22: icmp_seq=408 ttl=61 time=1.49 ms
+64 bytes from 172.17.0.22: icmp_seq=409 ttl=61 time=1.11 ms
+64 bytes from 172.17.0.22: icmp_seq=410 ttl=61 time=1.13 ms
+64 bytes from 172.17.0.22: icmp_seq=411 ttl=61 time=1.72 ms
+64 bytes from 172.17.0.22: icmp_seq=412 ttl=61 time=1.30 ms
+64 bytes from 172.17.0.22: icmp_seq=413 ttl=61 time=1.49 ms
+64 bytes from 172.17.0.22: icmp_seq=414 ttl=61 time=1.35 ms
+64 bytes from 172.17.0.22: icmp_seq=415 ttl=61 time=4.80 ms
+64 bytes from 172.17.0.22: icmp_seq=416 ttl=61 time=1.23 ms
+64 bytes from 172.17.0.22: icmp_seq=417 ttl=61 time=1.33 ms
+64 bytes from 172.17.0.22: icmp_seq=418 ttl=61 time=1.33 ms
+64 bytes from 172.17.0.22: icmp_seq=419 ttl=61 time=1.28 ms
+64 bytes from 172.17.0.22: icmp_seq=420 ttl=61 time=1.01 ms
+64 bytes from 172.17.0.22: icmp_seq=421 ttl=61 time=1.05 ms
+64 bytes from 172.17.0.22: icmp_seq=422 ttl=61 time=2.02 ms
+64 bytes from 172.17.0.22: icmp_seq=423 ttl=61 time=1.45 ms
+64 bytes from 172.17.0.22: icmp_seq=424 ttl=61 time=1.33 ms
+64 bytes from 172.17.0.22: icmp_seq=425 ttl=61 time=1.42 ms
+64 bytes from 172.17.0.22: icmp_seq=426 ttl=61 time=1.54 ms
+64 bytes from 172.17.0.22: icmp_seq=427 ttl=61 time=1.52 ms
+64 bytes from 172.17.0.22: icmp_seq=428 ttl=61 time=1.31 ms
+64 bytes from 172.17.0.22: icmp_seq=429 ttl=61 time=1.70 ms
+64 bytes from 172.17.0.22: icmp_seq=430 ttl=61 time=1.04 ms
+64 bytes from 172.17.0.22: icmp_seq=431 ttl=61 time=2.03 ms
+64 bytes from 172.17.0.22: icmp_seq=432 ttl=61 time=1.39 ms
+64 bytes from 172.17.0.22: icmp_seq=433 ttl=61 time=1.48 ms
+64 bytes from 172.17.0.22: icmp_seq=434 ttl=61 time=1.32 ms
+64 bytes from 172.17.0.22: icmp_seq=435 ttl=61 time=1.70 ms
+64 bytes from 172.17.0.22: icmp_seq=436 ttl=61 time=1.31 ms
+64 bytes from 172.17.0.22: icmp_seq=437 ttl=61 time=1.30 ms
+64 bytes from 172.17.0.22: icmp_seq=438 ttl=61 time=1.69 ms
+64 bytes from 172.17.0.22: icmp_seq=439 ttl=61 time=1.58 ms
+64 bytes from 172.17.0.22: icmp_seq=440 ttl=61 time=1.49 ms
+64 bytes from 172.17.0.22: icmp_seq=441 ttl=61 time=1.56 ms
+64 bytes from 172.17.0.22: icmp_seq=442 ttl=61 time=1.58 ms
+64 bytes from 172.17.0.22: icmp_seq=443 ttl=61 time=1.34 ms
+64 bytes from 172.17.0.22: icmp_seq=444 ttl=61 time=1.26 ms
+64 bytes from 172.17.0.22: icmp_seq=445 ttl=61 time=1.29 ms
+64 bytes from 172.17.0.22: icmp_seq=446 ttl=61 time=1.47 ms
+64 bytes from 172.17.0.22: icmp_seq=447 ttl=61 time=1.34 ms
+64 bytes from 172.17.0.22: icmp_seq=448 ttl=61 time=1.49 ms
+64 bytes from 172.17.0.22: icmp_seq=449 ttl=61 time=1.10 ms
+64 bytes from 172.17.0.22: icmp_seq=450 ttl=61 time=1.52 ms
+64 bytes from 172.17.0.22: icmp_seq=451 ttl=61 time=1.34 ms
+64 bytes from 172.17.0.22: icmp_seq=452 ttl=61 time=1.18 ms
+64 bytes from 172.17.0.22: icmp_seq=453 ttl=61 time=1.25 ms
+64 bytes from 172.17.0.22: icmp_seq=454 ttl=61 time=1.74 ms
+64 bytes from 172.17.0.22: icmp_seq=455 ttl=61 time=1.06 ms
+64 bytes from 172.17.0.22: icmp_seq=456 ttl=61 time=1.55 ms
+64 bytes from 172.17.0.22: icmp_seq=457 ttl=61 time=1.32 ms
+64 bytes from 172.17.0.22: icmp_seq=458 ttl=61 time=1.28 ms
+64 bytes from 172.17.0.22: icmp_seq=459 ttl=61 time=1.83 ms
+64 bytes from 172.17.0.22: icmp_seq=460 ttl=61 time=1.45 ms
+64 bytes from 172.17.0.22: icmp_seq=461 ttl=61 time=1.48 ms
+64 bytes from 172.17.0.22: icmp_seq=462 ttl=61 time=1.36 ms
+64 bytes from 172.17.0.22: icmp_seq=463 ttl=61 time=1.34 ms
+64 bytes from 172.17.0.22: icmp_seq=464 ttl=61 time=1.54 ms
+64 bytes from 172.17.0.22: icmp_seq=465 ttl=61 time=1.36 ms
+64 bytes from 172.17.0.22: icmp_seq=466 ttl=61 time=1.13 ms
+64 bytes from 172.17.0.22: icmp_seq=467 ttl=61 time=1.20 ms
+64 bytes from 172.17.0.22: icmp_seq=468 ttl=61 time=1.65 ms
+64 bytes from 172.17.0.22: icmp_seq=469 ttl=61 time=1.62 ms
+64 bytes from 172.17.0.22: icmp_seq=470 ttl=61 time=1.37 ms
+64 bytes from 172.17.0.22: icmp_seq=471 ttl=61 time=1.09 ms
+64 bytes from 172.17.0.22: icmp_seq=472 ttl=61 time=1.10 ms
+64 bytes from 172.17.0.22: icmp_seq=473 ttl=61 time=1.00 ms
+64 bytes from 172.17.0.22: icmp_seq=474 ttl=61 time=1.81 ms
+64 bytes from 172.17.0.22: icmp_seq=475 ttl=61 time=1.17 ms
+64 bytes from 172.17.0.22: icmp_seq=476 ttl=61 time=2.46 ms
+64 bytes from 172.17.0.22: icmp_seq=477 ttl=61 time=2.24 ms
+64 bytes from 172.17.0.22: icmp_seq=478 ttl=61 time=4.28 ms
+64 bytes from 172.17.0.22: icmp_seq=479 ttl=61 time=1.51 ms
+64 bytes from 172.17.0.22: icmp_seq=480 ttl=61 time=1.16 ms
+64 bytes from 172.17.0.22: icmp_seq=481 ttl=61 time=1.44 ms
+64 bytes from 172.17.0.22: icmp_seq=482 ttl=61 time=0.952 ms
+64 bytes from 172.17.0.22: icmp_seq=483 ttl=61 time=1.30 ms
+64 bytes from 172.17.0.22: icmp_seq=484 ttl=61 time=1.45 ms
+64 bytes from 172.17.0.22: icmp_seq=485 ttl=61 time=1.53 ms
+64 bytes from 172.17.0.22: icmp_seq=486 ttl=61 time=1.13 ms
+64 bytes from 172.17.0.22: icmp_seq=487 ttl=61 time=1.28 ms
+64 bytes from 172.17.0.22: icmp_seq=488 ttl=61 time=1.51 ms
+64 bytes from 172.17.0.22: icmp_seq=489 ttl=61 time=1.12 ms
+64 bytes from 172.17.0.22: icmp_seq=490 ttl=61 time=1.61 ms
+64 bytes from 172.17.0.22: icmp_seq=491 ttl=61 time=1.34 ms
+64 bytes from 172.17.0.22: icmp_seq=492 ttl=61 time=1.62 ms
+64 bytes from 172.17.0.22: icmp_seq=493 ttl=61 time=1.66 ms
+64 bytes from 172.17.0.22: icmp_seq=494 ttl=61 time=1.35 ms
+64 bytes from 172.17.0.22: icmp_seq=495 ttl=61 time=1.12 ms
+64 bytes from 172.17.0.22: icmp_seq=496 ttl=61 time=1.45 ms
+64 bytes from 172.17.0.22: icmp_seq=497 ttl=61 time=1.16 ms
+64 bytes from 172.17.0.22: icmp_seq=498 ttl=61 time=1.63 ms
+64 bytes from 172.17.0.22: icmp_seq=499 ttl=61 time=1.33 ms
+64 bytes from 172.17.0.22: icmp_seq=500 ttl=61 time=1.14 ms
+64 bytes from 172.17.0.22: icmp_seq=501 ttl=61 time=1.60 ms
+64 bytes from 172.17.0.22: icmp_seq=502 ttl=61 time=1.46 ms
+64 bytes from 172.17.0.22: icmp_seq=503 ttl=61 time=1.10 ms
+64 bytes from 172.17.0.22: icmp_seq=504 ttl=61 time=1.14 ms
+64 bytes from 172.17.0.22: icmp_seq=505 ttl=61 time=1.47 ms
+64 bytes from 172.17.0.22: icmp_seq=506 ttl=61 time=1.34 ms
+64 bytes from 172.17.0.22: icmp_seq=507 ttl=61 time=1.50 ms
+64 bytes from 172.17.0.22: icmp_seq=508 ttl=61 time=1.47 ms
+64 bytes from 172.17.0.22: icmp_seq=509 ttl=61 time=1.06 ms
+64 bytes from 172.17.0.22: icmp_seq=510 ttl=61 time=1.79 ms
+64 bytes from 172.17.0.22: icmp_seq=511 ttl=61 time=1.36 ms
+64 bytes from 172.17.0.22: icmp_seq=512 ttl=61 time=1.04 ms
+64 bytes from 172.17.0.22: icmp_seq=513 ttl=61 time=1.28 ms
+64 bytes from 172.17.0.22: icmp_seq=514 ttl=61 time=2.13 ms
+64 bytes from 172.17.0.22: icmp_seq=515 ttl=61 time=1.73 ms
+64 bytes from 172.17.0.22: icmp_seq=516 ttl=61 time=1.14 ms
+64 bytes from 172.17.0.22: icmp_seq=517 ttl=61 time=1.13 ms
+64 bytes from 172.17.0.22: icmp_seq=518 ttl=61 time=1.39 ms
+64 bytes from 172.17.0.22: icmp_seq=519 ttl=61 time=1.41 ms
+64 bytes from 172.17.0.22: icmp_seq=520 ttl=61 time=1.61 ms
+64 bytes from 172.17.0.22: icmp_seq=521 ttl=61 time=1.41 ms
+64 bytes from 172.17.0.22: icmp_seq=522 ttl=61 time=1.66 ms
+64 bytes from 172.17.0.22: icmp_seq=523 ttl=61 time=1.28 ms
+64 bytes from 172.17.0.22: icmp_seq=524 ttl=61 time=1.25 ms
+64 bytes from 172.17.0.22: icmp_seq=525 ttl=61 time=1.39 ms
+64 bytes from 172.17.0.22: icmp_seq=526 ttl=61 time=1.35 ms
+64 bytes from 172.17.0.22: icmp_seq=527 ttl=61 time=1.48 ms
+64 bytes from 172.17.0.22: icmp_seq=528 ttl=61 time=1.09 ms
+64 bytes from 172.17.0.22: icmp_seq=529 ttl=61 time=1.56 ms
+64 bytes from 172.17.0.22: icmp_seq=530 ttl=61 time=1.52 ms
+64 bytes from 172.17.0.22: icmp_seq=531 ttl=61 time=1.34 ms
+64 bytes from 172.17.0.22: icmp_seq=532 ttl=61 time=1.43 ms
+64 bytes from 172.17.0.22: icmp_seq=533 ttl=61 time=1.26 ms
+64 bytes from 172.17.0.22: icmp_seq=534 ttl=61 time=1.40 ms
+64 bytes from 172.17.0.22: icmp_seq=535 ttl=61 time=1.23 ms
+64 bytes from 172.17.0.22: icmp_seq=536 ttl=61 time=1.37 ms
+64 bytes from 172.17.0.22: icmp_seq=537 ttl=61 time=1.33 ms
+64 bytes from 172.17.0.22: icmp_seq=538 ttl=61 time=1.83 ms
+64 bytes from 172.17.0.22: icmp_seq=539 ttl=61 time=1.55 ms
+64 bytes from 172.17.0.22: icmp_seq=540 ttl=61 time=1.75 ms
+64 bytes from 172.17.0.22: icmp_seq=541 ttl=61 time=1.57 ms
+64 bytes from 172.17.0.22: icmp_seq=542 ttl=61 time=1.58 ms
+64 bytes from 172.17.0.22: icmp_seq=543 ttl=61 time=1.32 ms
+64 bytes from 172.17.0.22: icmp_seq=544 ttl=61 time=1.68 ms
+64 bytes from 172.17.0.22: icmp_seq=545 ttl=61 time=1.52 ms
+64 bytes from 172.17.0.22: icmp_seq=546 ttl=61 time=1.56 ms
+64 bytes from 172.17.0.22: icmp_seq=547 ttl=61 time=1.54 ms
+64 bytes from 172.17.0.22: icmp_seq=548 ttl=61 time=1.44 ms
+64 bytes from 172.17.0.22: icmp_seq=549 ttl=61 time=1.56 ms
+64 bytes from 172.17.0.22: icmp_seq=550 ttl=61 time=1.74 ms
+64 bytes from 172.17.0.22: icmp_seq=551 ttl=61 time=1.11 ms
+64 bytes from 172.17.0.22: icmp_seq=552 ttl=61 time=1.28 ms
+64 bytes from 172.17.0.22: icmp_seq=553 ttl=61 time=1.39 ms
+64 bytes from 172.17.0.22: icmp_seq=554 ttl=61 time=1.24 ms
+64 bytes from 172.17.0.22: icmp_seq=555 ttl=61 time=1.48 ms
+64 bytes from 172.17.0.22: icmp_seq=556 ttl=61 time=1.33 ms
+64 bytes from 172.17.0.22: icmp_seq=557 ttl=61 time=1.44 ms
+64 bytes from 172.17.0.22: icmp_seq=558 ttl=61 time=1.28 ms
+64 bytes from 172.17.0.22: icmp_seq=559 ttl=61 time=1.42 ms
+64 bytes from 172.17.0.22: icmp_seq=560 ttl=61 time=1.23 ms
+64 bytes from 172.17.0.22: icmp_seq=561 ttl=61 time=1.73 ms
+64 bytes from 172.17.0.22: icmp_seq=562 ttl=61 time=1.42 ms
+64 bytes from 172.17.0.22: icmp_seq=563 ttl=61 time=1.77 ms
+64 bytes from 172.17.0.22: icmp_seq=564 ttl=61 time=1.20 ms
+64 bytes from 172.17.0.22: icmp_seq=565 ttl=61 time=1.49 ms
+64 bytes from 172.17.0.22: icmp_seq=566 ttl=61 time=1.38 ms
+64 bytes from 172.17.0.22: icmp_seq=567 ttl=61 time=2.34 ms
+64 bytes from 172.17.0.22: icmp_seq=568 ttl=61 time=1.23 ms
+64 bytes from 172.17.0.22: icmp_seq=569 ttl=61 time=1.40 ms
+64 bytes from 172.17.0.22: icmp_seq=570 ttl=61 time=1.47 ms
+64 bytes from 172.17.0.22: icmp_seq=571 ttl=61 time=1.38 ms
+64 bytes from 172.17.0.22: icmp_seq=572 ttl=61 time=1.37 ms
+64 bytes from 172.17.0.22: icmp_seq=573 ttl=61 time=1.92 ms
+64 bytes from 172.17.0.22: icmp_seq=574 ttl=61 time=1.14 ms
+64 bytes from 172.17.0.22: icmp_seq=575 ttl=61 time=1.25 ms
+64 bytes from 172.17.0.22: icmp_seq=576 ttl=61 time=2.84 ms
+64 bytes from 172.17.0.22: icmp_seq=577 ttl=61 time=0.975 ms
+64 bytes from 172.17.0.22: icmp_seq=578 ttl=61 time=1.48 ms
+64 bytes from 172.17.0.22: icmp_seq=579 ttl=61 time=1.61 ms
+64 bytes from 172.17.0.22: icmp_seq=580 ttl=61 time=0.957 ms
+64 bytes from 172.17.0.22: icmp_seq=581 ttl=61 time=0.997 ms
+64 bytes from 172.17.0.22: icmp_seq=582 ttl=61 time=0.983 ms
+64 bytes from 172.17.0.22: icmp_seq=583 ttl=61 time=0.922 ms
+64 bytes from 172.17.0.22: icmp_seq=584 ttl=61 time=1.00 ms
+64 bytes from 172.17.0.22: icmp_seq=585 ttl=61 time=1.19 ms
+64 bytes from 172.17.0.22: icmp_seq=586 ttl=61 time=1.04 ms
+64 bytes from 172.17.0.22: icmp_seq=587 ttl=61 time=1.65 ms
+64 bytes from 172.17.0.22: icmp_seq=588 ttl=61 time=1.05 ms
+64 bytes from 172.17.0.22: icmp_seq=589 ttl=61 time=1.39 ms
+64 bytes from 172.17.0.22: icmp_seq=590 ttl=61 time=1.77 ms
+64 bytes from 172.17.0.22: icmp_seq=591 ttl=61 time=2.10 ms
+64 bytes from 172.17.0.22: icmp_seq=592 ttl=61 time=1.33 ms
+64 bytes from 172.17.0.22: icmp_seq=593 ttl=61 time=1.55 ms
+64 bytes from 172.17.0.22: icmp_seq=594 ttl=61 time=1.36 ms
+64 bytes from 172.17.0.22: icmp_seq=595 ttl=61 time=1.53 ms
+64 bytes from 172.17.0.22: icmp_seq=596 ttl=61 time=1.01 ms
+64 bytes from 172.17.0.22: icmp_seq=597 ttl=61 time=1.62 ms
+64 bytes from 172.17.0.22: icmp_seq=598 ttl=61 time=1.53 ms
+64 bytes from 172.17.0.22: icmp_seq=599 ttl=61 time=1.63 ms
+64 bytes from 172.17.0.22: icmp_seq=600 ttl=61 time=1.77 ms
+64 bytes from 172.17.0.22: icmp_seq=601 ttl=61 time=1.49 ms
+64 bytes from 172.17.0.22: icmp_seq=602 ttl=61 time=1.49 ms
+64 bytes from 172.17.0.22: icmp_seq=603 ttl=61 time=1.62 ms
+64 bytes from 172.17.0.22: icmp_seq=604 ttl=61 time=1.64 ms
+64 bytes from 172.17.0.22: icmp_seq=605 ttl=61 time=1.59 ms
+64 bytes from 172.17.0.22: icmp_seq=606 ttl=61 time=1.38 ms
+64 bytes from 172.17.0.22: icmp_seq=607 ttl=61 time=1.71 ms
+64 bytes from 172.17.0.22: icmp_seq=608 ttl=61 time=2.14 ms
+64 bytes from 172.17.0.22: icmp_seq=609 ttl=61 time=3.14 ms
+64 bytes from 172.17.0.22: icmp_seq=610 ttl=61 time=1.29 ms
+64 bytes from 172.17.0.22: icmp_seq=611 ttl=61 time=1.61 ms
+64 bytes from 172.17.0.22: icmp_seq=612 ttl=61 time=1.59 ms
+64 bytes from 172.17.0.22: icmp_seq=613 ttl=61 time=1.99 ms
+64 bytes from 172.17.0.22: icmp_seq=614 ttl=61 time=1.22 ms
+64 bytes from 172.17.0.22: icmp_seq=615 ttl=61 time=2.19 ms
+64 bytes from 172.17.0.22: icmp_seq=616 ttl=61 time=1.21 ms
+64 bytes from 172.17.0.22: icmp_seq=617 ttl=61 time=1.38 ms
+64 bytes from 172.17.0.22: icmp_seq=618 ttl=61 time=1.71 ms
+64 bytes from 172.17.0.22: icmp_seq=619 ttl=61 time=1.25 ms
+64 bytes from 172.17.0.22: icmp_seq=620 ttl=61 time=1.72 ms
+64 bytes from 172.17.0.22: icmp_seq=621 ttl=61 time=1.96 ms
+64 bytes from 172.17.0.22: icmp_seq=622 ttl=61 time=1.22 ms
+64 bytes from 172.17.0.22: icmp_seq=623 ttl=61 time=1.46 ms
+64 bytes from 172.17.0.22: icmp_seq=624 ttl=61 time=1.17 ms
+64 bytes from 172.17.0.22: icmp_seq=625 ttl=61 time=1.19 ms
+64 bytes from 172.17.0.22: icmp_seq=626 ttl=61 time=1.80 ms
+64 bytes from 172.17.0.22: icmp_seq=627 ttl=61 time=1.66 ms
+64 bytes from 172.17.0.22: icmp_seq=628 ttl=61 time=2.19 ms
+64 bytes from 172.17.0.22: icmp_seq=629 ttl=61 time=1.68 ms
+64 bytes from 172.17.0.22: icmp_seq=630 ttl=61 time=1.49 ms
+64 bytes from 172.17.0.22: icmp_seq=631 ttl=61 time=1.48 ms
+64 bytes from 172.17.0.22: icmp_seq=632 ttl=61 time=4.53 ms
+64 bytes from 172.17.0.22: icmp_seq=633 ttl=61 time=1.61 ms
+64 bytes from 172.17.0.22: icmp_seq=634 ttl=61 time=1.40 ms
+64 bytes from 172.17.0.22: icmp_seq=635 ttl=61 time=1.66 ms
+64 bytes from 172.17.0.22: icmp_seq=636 ttl=61 time=1.99 ms
+64 bytes from 172.17.0.22: icmp_seq=637 ttl=61 time=1.61 ms
+64 bytes from 172.17.0.22: icmp_seq=638 ttl=61 time=1.67 ms
+64 bytes from 172.17.0.22: icmp_seq=639 ttl=61 time=1.56 ms
+64 bytes from 172.17.0.22: icmp_seq=640 ttl=61 time=1.75 ms
+64 bytes from 172.17.0.22: icmp_seq=641 ttl=61 time=4.35 ms
+64 bytes from 172.17.0.22: icmp_seq=642 ttl=61 time=1.81 ms
+64 bytes from 172.17.0.22: icmp_seq=643 ttl=61 time=1.69 ms
+64 bytes from 172.17.0.22: icmp_seq=644 ttl=61 time=1.70 ms
+64 bytes from 172.17.0.22: icmp_seq=645 ttl=61 time=1.66 ms
+64 bytes from 172.17.0.22: icmp_seq=646 ttl=61 time=1.19 ms
+64 bytes from 172.17.0.22: icmp_seq=647 ttl=61 time=1.53 ms
+64 bytes from 172.17.0.22: icmp_seq=648 ttl=61 time=1.46 ms
+64 bytes from 172.17.0.22: icmp_seq=649 ttl=61 time=1.86 ms
+64 bytes from 172.17.0.22: icmp_seq=650 ttl=61 time=1.81 ms
+64 bytes from 172.17.0.22: icmp_seq=651 ttl=61 time=2.29 ms
+64 bytes from 172.17.0.22: icmp_seq=652 ttl=61 time=2.03 ms
+64 bytes from 172.17.0.22: icmp_seq=653 ttl=61 time=2.12 ms
+64 bytes from 172.17.0.22: icmp_seq=654 ttl=61 time=3.92 ms
+64 bytes from 172.17.0.22: icmp_seq=655 ttl=61 time=1.74 ms
+64 bytes from 172.17.0.22: icmp_seq=656 ttl=61 time=1.21 ms
+64 bytes from 172.17.0.22: icmp_seq=657 ttl=61 time=1.29 ms
+64 bytes from 172.17.0.22: icmp_seq=658 ttl=61 time=1.67 ms
+64 bytes from 172.17.0.22: icmp_seq=659 ttl=61 time=1.58 ms
+64 bytes from 172.17.0.22: icmp_seq=660 ttl=61 time=1.32 ms
+64 bytes from 172.17.0.22: icmp_seq=661 ttl=61 time=1.28 ms
+64 bytes from 172.17.0.22: icmp_seq=662 ttl=61 time=1.06 ms
+64 bytes from 172.17.0.22: icmp_seq=663 ttl=61 time=1.34 ms
+64 bytes from 172.17.0.22: icmp_seq=665 ttl=61 time=1.52 ms
+64 bytes from 172.17.0.22: icmp_seq=666 ttl=61 time=1.18 ms
+64 bytes from 172.17.0.22: icmp_seq=668 ttl=61 time=1.58 ms
+64 bytes from 172.17.0.22: icmp_seq=669 ttl=61 time=1.38 ms
+64 bytes from 172.17.0.22: icmp_seq=671 ttl=61 time=1.33 ms
+64 bytes from 172.17.0.22: icmp_seq=673 ttl=61 time=1.69 ms
+64 bytes from 172.17.0.22: icmp_seq=674 ttl=61 time=1.72 ms
+64 bytes from 172.17.0.22: icmp_seq=675 ttl=61 time=1.38 ms
+64 bytes from 172.17.0.22: icmp_seq=677 ttl=61 time=1.17 ms
+64 bytes from 172.17.0.22: icmp_seq=678 ttl=61 time=1.15 ms
+64 bytes from 172.17.0.22: icmp_seq=679 ttl=61 time=4.40 ms
+64 bytes from 172.17.0.22: icmp_seq=681 ttl=61 time=1.42 ms
+64 bytes from 172.17.0.22: icmp_seq=683 ttl=61 time=1.43 ms
+64 bytes from 172.17.0.22: icmp_seq=684 ttl=61 time=1.04 ms
+64 bytes from 172.17.0.22: icmp_seq=685 ttl=61 time=1.22 ms
+64 bytes from 172.17.0.22: icmp_seq=687 ttl=61 time=1.74 ms
+64 bytes from 172.17.0.22: icmp_seq=689 ttl=61 time=1.34 ms
+64 bytes from 172.17.0.22: icmp_seq=690 ttl=61 time=1.72 ms
+64 bytes from 172.17.0.22: icmp_seq=691 ttl=61 time=2.27 ms
+64 bytes from 172.17.0.22: icmp_seq=693 ttl=61 time=1.53 ms
+64 bytes from 172.17.0.22: icmp_seq=694 ttl=61 time=1.86 ms
+64 bytes from 172.17.0.22: icmp_seq=695 ttl=61 time=1.17 ms
+64 bytes from 172.17.0.22: icmp_seq=697 ttl=61 time=1.19 ms
+64 bytes from 172.17.0.22: icmp_seq=698 ttl=61 time=1.24 ms
+64 bytes from 172.17.0.22: icmp_seq=699 ttl=61 time=1.53 ms
+64 bytes from 172.17.0.22: icmp_seq=700 ttl=61 time=1.29 ms
+64 bytes from 172.17.0.22: icmp_seq=701 ttl=61 time=1.90 ms
+64 bytes from 172.17.0.22: icmp_seq=702 ttl=61 time=1.71 ms
+64 bytes from 172.17.0.22: icmp_seq=703 ttl=61 time=1.54 ms
+64 bytes from 172.17.0.22: icmp_seq=704 ttl=61 time=1.50 ms
+64 bytes from 172.17.0.22: icmp_seq=705 ttl=61 time=1.34 ms
+64 bytes from 172.17.0.22: icmp_seq=706 ttl=61 time=1.62 ms
+64 bytes from 172.17.0.22: icmp_seq=707 ttl=61 time=1.38 ms
+64 bytes from 172.17.0.22: icmp_seq=708 ttl=61 time=1.43 ms
+64 bytes from 172.17.0.22: icmp_seq=709 ttl=61 time=1.44 ms
+64 bytes from 172.17.0.22: icmp_seq=710 ttl=61 time=1.42 ms
+64 bytes from 172.17.0.22: icmp_seq=711 ttl=61 time=1.66 ms
+64 bytes from 172.17.0.22: icmp_seq=712 ttl=61 time=1.43 ms
+64 bytes from 172.17.0.22: icmp_seq=713 ttl=61 time=1.08 ms
+64 bytes from 172.17.0.22: icmp_seq=714 ttl=61 time=3.44 ms
+64 bytes from 172.17.0.22: icmp_seq=715 ttl=61 time=1.38 ms
+64 bytes from 172.17.0.22: icmp_seq=716 ttl=61 time=2.15 ms
+64 bytes from 172.17.0.22: icmp_seq=717 ttl=61 time=1.42 ms
+64 bytes from 172.17.0.22: icmp_seq=718 ttl=61 time=1.46 ms
+64 bytes from 172.17.0.22: icmp_seq=719 ttl=61 time=1.61 ms
+64 bytes from 172.17.0.22: icmp_seq=720 ttl=61 time=1.23 ms
+64 bytes from 172.17.0.22: icmp_seq=721 ttl=61 time=1.52 ms
+64 bytes from 172.17.0.22: icmp_seq=722 ttl=61 time=0.958 ms
+64 bytes from 172.17.0.22: icmp_seq=723 ttl=61 time=1.18 ms
+64 bytes from 172.17.0.22: icmp_seq=724 ttl=61 time=0.990 ms
+64 bytes from 172.17.0.22: icmp_seq=725 ttl=61 time=1.60 ms
+64 bytes from 172.17.0.22: icmp_seq=726 ttl=61 time=1.16 ms
+64 bytes from 172.17.0.22: icmp_seq=727 ttl=61 time=1.21 ms
+64 bytes from 172.17.0.22: icmp_seq=728 ttl=61 time=1.83 ms
+64 bytes from 172.17.0.22: icmp_seq=729 ttl=61 time=1.14 ms
+64 bytes from 172.17.0.22: icmp_seq=730 ttl=61 time=1.33 ms
+64 bytes from 172.17.0.22: icmp_seq=731 ttl=61 time=1.20 ms
+64 bytes from 172.17.0.22: icmp_seq=732 ttl=61 time=1.74 ms
+64 bytes from 172.17.0.22: icmp_seq=733 ttl=61 time=1.92 ms
+64 bytes from 172.17.0.22: icmp_seq=734 ttl=61 time=1.27 ms
+64 bytes from 172.17.0.22: icmp_seq=735 ttl=61 time=1.65 ms
+64 bytes from 172.17.0.22: icmp_seq=736 ttl=61 time=1.73 ms
+64 bytes from 172.17.0.22: icmp_seq=737 ttl=61 time=3.38 ms
+64 bytes from 172.17.0.22: icmp_seq=738 ttl=61 time=2.29 ms
+64 bytes from 172.17.0.22: icmp_seq=739 ttl=61 time=1.24 ms
+64 bytes from 172.17.0.22: icmp_seq=740 ttl=61 time=1.41 ms
+64 bytes from 172.17.0.22: icmp_seq=741 ttl=61 time=1.63 ms
+64 bytes from 172.17.0.22: icmp_seq=742 ttl=61 time=1.61 ms
+64 bytes from 172.17.0.22: icmp_seq=743 ttl=61 time=1.10 ms
+64 bytes from 172.17.0.22: icmp_seq=744 ttl=61 time=1.42 ms
+64 bytes from 172.17.0.22: icmp_seq=745 ttl=61 time=1.36 ms
+64 bytes from 172.17.0.22: icmp_seq=746 ttl=61 time=1.60 ms
+64 bytes from 172.17.0.22: icmp_seq=747 ttl=61 time=1.25 ms
+64 bytes from 172.17.0.22: icmp_seq=748 ttl=61 time=1.50 ms
+64 bytes from 172.17.0.22: icmp_seq=749 ttl=61 time=1.14 ms
+64 bytes from 172.17.0.22: icmp_seq=750 ttl=61 time=1.14 ms
+64 bytes from 172.17.0.22: icmp_seq=751 ttl=61 time=1.16 ms
+64 bytes from 172.17.0.22: icmp_seq=752 ttl=61 time=1.28 ms
+64 bytes from 172.17.0.22: icmp_seq=753 ttl=61 time=1.66 ms
+64 bytes from 172.17.0.22: icmp_seq=754 ttl=61 time=1.74 ms
+64 bytes from 172.17.0.22: icmp_seq=755 ttl=61 time=1.27 ms
+64 bytes from 172.17.0.22: icmp_seq=756 ttl=61 time=1.62 ms
+64 bytes from 172.17.0.22: icmp_seq=757 ttl=61 time=1.77 ms
+64 bytes from 172.17.0.22: icmp_seq=758 ttl=61 time=2.16 ms
+64 bytes from 172.17.0.22: icmp_seq=759 ttl=61 time=4.84 ms
+64 bytes from 172.17.0.22: icmp_seq=760 ttl=61 time=1.93 ms
+64 bytes from 172.17.0.22: icmp_seq=761 ttl=61 time=1.45 ms
+64 bytes from 172.17.0.22: icmp_seq=762 ttl=61 time=2.53 ms
+64 bytes from 172.17.0.22: icmp_seq=763 ttl=61 time=1.37 ms
+64 bytes from 172.17.0.22: icmp_seq=764 ttl=61 time=1.51 ms
+64 bytes from 172.17.0.22: icmp_seq=765 ttl=61 time=1.62 ms
+64 bytes from 172.17.0.22: icmp_seq=766 ttl=61 time=2.10 ms
+64 bytes from 172.17.0.22: icmp_seq=767 ttl=61 time=1.29 ms
+64 bytes from 172.17.0.22: icmp_seq=768 ttl=61 time=1.13 ms
+64 bytes from 172.17.0.22: icmp_seq=769 ttl=61 time=2.15 ms
+64 bytes from 172.17.0.22: icmp_seq=770 ttl=61 time=1.67 ms
+64 bytes from 172.17.0.22: icmp_seq=771 ttl=61 time=1.58 ms
+64 bytes from 172.17.0.22: icmp_seq=772 ttl=61 time=1.17 ms
+64 bytes from 172.17.0.22: icmp_seq=773 ttl=61 time=1.40 ms
+64 bytes from 172.17.0.22: icmp_seq=774 ttl=61 time=1.60 ms
+64 bytes from 172.17.0.22: icmp_seq=775 ttl=61 time=1.08 ms
+64 bytes from 172.17.0.22: icmp_seq=776 ttl=61 time=1.60 ms
+64 bytes from 172.17.0.22: icmp_seq=777 ttl=61 time=1.12 ms
+64 bytes from 172.17.0.22: icmp_seq=778 ttl=61 time=3.12 ms
+64 bytes from 172.17.0.22: icmp_seq=779 ttl=61 time=1.45 ms
+64 bytes from 172.17.0.22: icmp_seq=780 ttl=61 time=2.23 ms
+64 bytes from 172.17.0.22: icmp_seq=781 ttl=61 time=1.13 ms
+64 bytes from 172.17.0.22: icmp_seq=782 ttl=61 time=1.68 ms
+64 bytes from 172.17.0.22: icmp_seq=783 ttl=61 time=1.72 ms
+64 bytes from 172.17.0.22: icmp_seq=784 ttl=61 time=1.98 ms
+64 bytes from 172.17.0.22: icmp_seq=785 ttl=61 time=1.11 ms
+64 bytes from 172.17.0.22: icmp_seq=786 ttl=61 time=1.54 ms
+64 bytes from 172.17.0.22: icmp_seq=787 ttl=61 time=1.55 ms
+64 bytes from 172.17.0.22: icmp_seq=788 ttl=61 time=1.68 ms
+64 bytes from 172.17.0.22: icmp_seq=789 ttl=61 time=1.71 ms
+64 bytes from 172.17.0.22: icmp_seq=790 ttl=61 time=1.56 ms
+64 bytes from 172.17.0.22: icmp_seq=791 ttl=61 time=1.36 ms
+64 bytes from 172.17.0.22: icmp_seq=792 ttl=61 time=1.25 ms
+64 bytes from 172.17.0.22: icmp_seq=793 ttl=61 time=1.33 ms
+64 bytes from 172.17.0.22: icmp_seq=794 ttl=61 time=1.52 ms
+64 bytes from 172.17.0.22: icmp_seq=795 ttl=61 time=1.11 ms
+64 bytes from 172.17.0.22: icmp_seq=796 ttl=61 time=1.59 ms
+64 bytes from 172.17.0.22: icmp_seq=797 ttl=61 time=1.71 ms
+64 bytes from 172.17.0.22: icmp_seq=798 ttl=61 time=1.62 ms
+64 bytes from 172.17.0.22: icmp_seq=799 ttl=61 time=1.25 ms
+64 bytes from 172.17.0.22: icmp_seq=800 ttl=61 time=1.38 ms
+64 bytes from 172.17.0.22: icmp_seq=801 ttl=61 time=1.67 ms
+64 bytes from 172.17.0.22: icmp_seq=802 ttl=61 time=1.36 ms
+64 bytes from 172.17.0.22: icmp_seq=803 ttl=61 time=1.19 ms
+64 bytes from 172.17.0.22: icmp_seq=804 ttl=61 time=1.49 ms
+64 bytes from 172.17.0.22: icmp_seq=805 ttl=61 time=1.56 ms
+64 bytes from 172.17.0.22: icmp_seq=806 ttl=61 time=1.17 ms
+64 bytes from 172.17.0.22: icmp_seq=807 ttl=61 time=1.60 ms
+64 bytes from 172.17.0.22: icmp_seq=808 ttl=61 time=1.60 ms
+64 bytes from 172.17.0.22: icmp_seq=809 ttl=61 time=1.95 ms
+64 bytes from 172.17.0.22: icmp_seq=810 ttl=61 time=1.25 ms
+64 bytes from 172.17.0.22: icmp_seq=811 ttl=61 time=1.53 ms
+64 bytes from 172.17.0.22: icmp_seq=812 ttl=61 time=1.34 ms
+64 bytes from 172.17.0.22: icmp_seq=813 ttl=61 time=1.65 ms
+64 bytes from 172.17.0.22: icmp_seq=814 ttl=61 time=1.68 ms
+64 bytes from 172.17.0.22: icmp_seq=815 ttl=61 time=1.20 ms
+64 bytes from 172.17.0.22: icmp_seq=816 ttl=61 time=1.70 ms
+64 bytes from 172.17.0.22: icmp_seq=817 ttl=61 time=1.32 ms
+64 bytes from 172.17.0.22: icmp_seq=818 ttl=61 time=1.14 ms
+64 bytes from 172.17.0.22: icmp_seq=819 ttl=61 time=1.90 ms
+64 bytes from 172.17.0.22: icmp_seq=820 ttl=61 time=1.42 ms
+64 bytes from 172.17.0.22: icmp_seq=821 ttl=61 time=4.94 ms
+64 bytes from 172.17.0.22: icmp_seq=822 ttl=61 time=1.23 ms
+64 bytes from 172.17.0.22: icmp_seq=823 ttl=61 time=1.25 ms
+64 bytes from 172.17.0.22: icmp_seq=824 ttl=61 time=1.41 ms
+64 bytes from 172.17.0.22: icmp_seq=825 ttl=61 time=1.31 ms
+64 bytes from 172.17.0.22: icmp_seq=826 ttl=61 time=1.59 ms
+64 bytes from 172.17.0.22: icmp_seq=827 ttl=61 time=1.93 ms
+64 bytes from 172.17.0.22: icmp_seq=828 ttl=61 time=1.31 ms
+64 bytes from 172.17.0.22: icmp_seq=829 ttl=61 time=1.53 ms
+64 bytes from 172.17.0.22: icmp_seq=830 ttl=61 time=1.93 ms
+64 bytes from 172.17.0.22: icmp_seq=831 ttl=61 time=2.32 ms
+64 bytes from 172.17.0.22: icmp_seq=832 ttl=61 time=2.52 ms
+64 bytes from 172.17.0.22: icmp_seq=833 ttl=61 time=1.43 ms
+64 bytes from 172.17.0.22: icmp_seq=834 ttl=61 time=1.65 ms
+64 bytes from 172.17.0.22: icmp_seq=835 ttl=61 time=2.17 ms
+64 bytes from 172.17.0.22: icmp_seq=836 ttl=61 time=1.90 ms
+64 bytes from 172.17.0.22: icmp_seq=837 ttl=61 time=1.43 ms
+64 bytes from 172.17.0.22: icmp_seq=838 ttl=61 time=1.22 ms
+64 bytes from 172.17.0.22: icmp_seq=839 ttl=61 time=1.59 ms
+64 bytes from 172.17.0.22: icmp_seq=840 ttl=61 time=1.41 ms
+64 bytes from 172.17.0.22: icmp_seq=841 ttl=61 time=1.23 ms
+64 bytes from 172.17.0.22: icmp_seq=842 ttl=61 time=4.16 ms
+64 bytes from 172.17.0.22: icmp_seq=843 ttl=61 time=1.63 ms
+64 bytes from 172.17.0.22: icmp_seq=844 ttl=61 time=1.66 ms
+64 bytes from 172.17.0.22: icmp_seq=845 ttl=61 time=1.45 ms
+64 bytes from 172.17.0.22: icmp_seq=846 ttl=61 time=1.49 ms
+64 bytes from 172.17.0.22: icmp_seq=847 ttl=61 time=0.971 ms
+64 bytes from 172.17.0.22: icmp_seq=848 ttl=61 time=1.36 ms
+64 bytes from 172.17.0.22: icmp_seq=849 ttl=61 time=1.29 ms
+64 bytes from 172.17.0.22: icmp_seq=850 ttl=61 time=1.57 ms
+64 bytes from 172.17.0.22: icmp_seq=851 ttl=61 time=1.63 ms
+64 bytes from 172.17.0.22: icmp_seq=852 ttl=61 time=1.47 ms
+64 bytes from 172.17.0.22: icmp_seq=853 ttl=61 time=1.52 ms
+64 bytes from 172.17.0.22: icmp_seq=854 ttl=61 time=1.99 ms
+64 bytes from 172.17.0.22: icmp_seq=855 ttl=61 time=1.44 ms
+64 bytes from 172.17.0.22: icmp_seq=856 ttl=61 time=1.58 ms
+64 bytes from 172.17.0.22: icmp_seq=857 ttl=61 time=1.43 ms
+64 bytes from 172.17.0.22: icmp_seq=858 ttl=61 time=1.26 ms
+64 bytes from 172.17.0.22: icmp_seq=859 ttl=61 time=1.09 ms
+64 bytes from 172.17.0.22: icmp_seq=860 ttl=61 time=1.48 ms
+64 bytes from 172.17.0.22: icmp_seq=861 ttl=61 time=1.70 ms
+64 bytes from 172.17.0.22: icmp_seq=862 ttl=61 time=1.46 ms
+64 bytes from 172.17.0.22: icmp_seq=863 ttl=61 time=1.63 ms
+64 bytes from 172.17.0.22: icmp_seq=864 ttl=61 time=1.62 ms
+64 bytes from 172.17.0.22: icmp_seq=865 ttl=61 time=2.23 ms
+64 bytes from 172.17.0.22: icmp_seq=866 ttl=61 time=1.40 ms
+64 bytes from 172.17.0.22: icmp_seq=867 ttl=61 time=1.62 ms
+64 bytes from 172.17.0.22: icmp_seq=868 ttl=61 time=1.35 ms
+64 bytes from 172.17.0.22: icmp_seq=869 ttl=61 time=1.71 ms
+64 bytes from 172.17.0.22: icmp_seq=870 ttl=61 time=1.53 ms
+64 bytes from 172.17.0.22: icmp_seq=871 ttl=61 time=1.72 ms
+64 bytes from 172.17.0.22: icmp_seq=872 ttl=61 time=1.17 ms
+64 bytes from 172.17.0.22: icmp_seq=873 ttl=61 time=1.79 ms
+64 bytes from 172.17.0.22: icmp_seq=874 ttl=61 time=1.92 ms
+64 bytes from 172.17.0.22: icmp_seq=875 ttl=61 time=1.74 ms
+64 bytes from 172.17.0.22: icmp_seq=876 ttl=61 time=1.35 ms
+64 bytes from 172.17.0.22: icmp_seq=877 ttl=61 time=1.53 ms
+64 bytes from 172.17.0.22: icmp_seq=878 ttl=61 time=1.22 ms
+64 bytes from 172.17.0.22: icmp_seq=879 ttl=61 time=1.40 ms
+64 bytes from 172.17.0.22: icmp_seq=880 ttl=61 time=1.39 ms
+64 bytes from 172.17.0.22: icmp_seq=881 ttl=61 time=1.38 ms
+64 bytes from 172.17.0.22: icmp_seq=882 ttl=61 time=1.13 ms
+64 bytes from 172.17.0.22: icmp_seq=883 ttl=61 time=1.64 ms
+64 bytes from 172.17.0.22: icmp_seq=884 ttl=61 time=1.56 ms
+64 bytes from 172.17.0.22: icmp_seq=885 ttl=61 time=1.22 ms
+64 bytes from 172.17.0.22: icmp_seq=886 ttl=61 time=1.20 ms
+64 bytes from 172.17.0.22: icmp_seq=887 ttl=61 time=1.63 ms
+64 bytes from 172.17.0.22: icmp_seq=888 ttl=61 time=1.03 ms
+64 bytes from 172.17.0.22: icmp_seq=889 ttl=61 time=1.72 ms
+64 bytes from 172.17.0.22: icmp_seq=890 ttl=61 time=1.08 ms
+64 bytes from 172.17.0.22: icmp_seq=891 ttl=61 time=1.20 ms
+64 bytes from 172.17.0.22: icmp_seq=892 ttl=61 time=0.986 ms
+64 bytes from 172.17.0.22: icmp_seq=893 ttl=61 time=1.65 ms
+64 bytes from 172.17.0.22: icmp_seq=894 ttl=61 time=1.57 ms
+64 bytes from 172.17.0.22: icmp_seq=895 ttl=61 time=1.21 ms
+64 bytes from 172.17.0.22: icmp_seq=896 ttl=61 time=1.57 ms
+64 bytes from 172.17.0.22: icmp_seq=897 ttl=61 time=1.86 ms
+64 bytes from 172.17.0.22: icmp_seq=898 ttl=61 time=1.56 ms
+64 bytes from 172.17.0.22: icmp_seq=899 ttl=61 time=1.53 ms
+64 bytes from 172.17.0.22: icmp_seq=900 ttl=61 time=1.54 ms
+64 bytes from 172.17.0.22: icmp_seq=901 ttl=61 time=1.59 ms
+64 bytes from 172.17.0.22: icmp_seq=902 ttl=61 time=1.46 ms
+64 bytes from 172.17.0.22: icmp_seq=903 ttl=61 time=1.50 ms
+64 bytes from 172.17.0.22: icmp_seq=904 ttl=61 time=1.28 ms
+64 bytes from 172.17.0.22: icmp_seq=905 ttl=61 time=1.60 ms
+64 bytes from 172.17.0.22: icmp_seq=906 ttl=61 time=1.27 ms
+64 bytes from 172.17.0.22: icmp_seq=907 ttl=61 time=1.36 ms
+64 bytes from 172.17.0.22: icmp_seq=908 ttl=61 time=1.43 ms
+64 bytes from 172.17.0.22: icmp_seq=909 ttl=61 time=1.44 ms
+64 bytes from 172.17.0.22: icmp_seq=910 ttl=61 time=1.36 ms
+64 bytes from 172.17.0.22: icmp_seq=911 ttl=61 time=1.02 ms
+64 bytes from 172.17.0.22: icmp_seq=912 ttl=61 time=2.42 ms
+64 bytes from 172.17.0.22: icmp_seq=913 ttl=61 time=2.38 ms
+64 bytes from 172.17.0.22: icmp_seq=914 ttl=61 time=1.17 ms
+64 bytes from 172.17.0.22: icmp_seq=915 ttl=61 time=1.54 ms
+64 bytes from 172.17.0.22: icmp_seq=916 ttl=61 time=1.17 ms
+64 bytes from 172.17.0.22: icmp_seq=917 ttl=61 time=1.74 ms
+64 bytes from 172.17.0.22: icmp_seq=918 ttl=61 time=1.28 ms
+64 bytes from 172.17.0.22: icmp_seq=919 ttl=61 time=1.36 ms
+64 bytes from 172.17.0.22: icmp_seq=920 ttl=61 time=1.20 ms
+64 bytes from 172.17.0.22: icmp_seq=921 ttl=61 time=1.59 ms
+64 bytes from 172.17.0.22: icmp_seq=922 ttl=61 time=1.47 ms
+64 bytes from 172.17.0.22: icmp_seq=923 ttl=61 time=1.08 ms
+64 bytes from 172.17.0.22: icmp_seq=924 ttl=61 time=1.42 ms
+64 bytes from 172.17.0.22: icmp_seq=925 ttl=61 time=1.40 ms
+64 bytes from 172.17.0.22: icmp_seq=926 ttl=61 time=2.01 ms
+64 bytes from 172.17.0.22: icmp_seq=927 ttl=61 time=1.44 ms
+64 bytes from 172.17.0.22: icmp_seq=928 ttl=61 time=1.75 ms
+64 bytes from 172.17.0.22: icmp_seq=929 ttl=61 time=1.60 ms
+64 bytes from 172.17.0.22: icmp_seq=930 ttl=61 time=1.85 ms
+64 bytes from 172.17.0.22: icmp_seq=931 ttl=61 time=1.67 ms
+64 bytes from 172.17.0.22: icmp_seq=932 ttl=61 time=1.15 ms
+64 bytes from 172.17.0.22: icmp_seq=933 ttl=61 time=1.12 ms
+64 bytes from 172.17.0.22: icmp_seq=934 ttl=61 time=1.35 ms
+64 bytes from 172.17.0.22: icmp_seq=935 ttl=61 time=1.06 ms
+64 bytes from 172.17.0.22: icmp_seq=936 ttl=61 time=1.32 ms
+64 bytes from 172.17.0.22: icmp_seq=937 ttl=61 time=1.91 ms
+64 bytes from 172.17.0.22: icmp_seq=939 ttl=61 time=2.51 ms
+64 bytes from 172.17.0.22: icmp_seq=941 ttl=61 time=1.63 ms
+64 bytes from 172.17.0.22: icmp_seq=943 ttl=61 time=1.28 ms
+64 bytes from 172.17.0.22: icmp_seq=944 ttl=61 time=1.12 ms
+64 bytes from 172.17.0.22: icmp_seq=945 ttl=61 time=1.53 ms
+64 bytes from 172.17.0.22: icmp_seq=947 ttl=61 time=1.45 ms
+64 bytes from 172.17.0.22: icmp_seq=949 ttl=61 time=1.37 ms
+64 bytes from 172.17.0.22: icmp_seq=951 ttl=61 time=1.03 ms
+64 bytes from 172.17.0.22: icmp_seq=952 ttl=61 time=1.76 ms
+64 bytes from 172.17.0.22: icmp_seq=954 ttl=61 time=1.04 ms
+64 bytes from 172.17.0.22: icmp_seq=955 ttl=61 time=1.33 ms
+64 bytes from 172.17.0.22: icmp_seq=957 ttl=61 time=1.56 ms
+64 bytes from 172.17.0.22: icmp_seq=959 ttl=61 time=1.05 ms
+64 bytes from 172.17.0.22: icmp_seq=960 ttl=61 time=1.75 ms
+64 bytes from 172.17.0.22: icmp_seq=961 ttl=61 time=1.00 ms
+64 bytes from 172.17.0.22: icmp_seq=963 ttl=61 time=1.33 ms
+64 bytes from 172.17.0.22: icmp_seq=964 ttl=61 time=1.71 ms
+64 bytes from 172.17.0.22: icmp_seq=966 ttl=61 time=1.68 ms
+64 bytes from 172.17.0.22: icmp_seq=967 ttl=61 time=4.48 ms
+64 bytes from 172.17.0.22: icmp_seq=969 ttl=61 time=1.49 ms
+64 bytes from 172.17.0.22: icmp_seq=970 ttl=61 time=1.60 ms
+64 bytes from 172.17.0.22: icmp_seq=971 ttl=61 time=1.75 ms
+64 bytes from 172.17.0.22: icmp_seq=972 ttl=61 time=1.27 ms
+64 bytes from 172.17.0.22: icmp_seq=973 ttl=61 time=2.23 ms
+64 bytes from 172.17.0.22: icmp_seq=974 ttl=61 time=1.21 ms
+64 bytes from 172.17.0.22: icmp_seq=975 ttl=61 time=1.50 ms
+64 bytes from 172.17.0.22: icmp_seq=976 ttl=61 time=1.37 ms
+64 bytes from 172.17.0.22: icmp_seq=977 ttl=61 time=1.66 ms
+64 bytes from 172.17.0.22: icmp_seq=978 ttl=61 time=1.62 ms
+64 bytes from 172.17.0.22: icmp_seq=979 ttl=61 time=1.65 ms
+64 bytes from 172.17.0.22: icmp_seq=980 ttl=61 time=1.49 ms
+64 bytes from 172.17.0.22: icmp_seq=982 ttl=61 time=1.61 ms
+64 bytes from 172.17.0.22: icmp_seq=983 ttl=61 time=1.44 ms
+64 bytes from 172.17.0.22: icmp_seq=984 ttl=61 time=1.71 ms
+64 bytes from 172.17.0.22: icmp_seq=985 ttl=61 time=1.62 ms
+64 bytes from 172.17.0.22: icmp_seq=986 ttl=61 time=1.20 ms
+64 bytes from 172.17.0.22: icmp_seq=987 ttl=61 time=1.67 ms
+64 bytes from 172.17.0.22: icmp_seq=988 ttl=61 time=1.76 ms
+64 bytes from 172.17.0.22: icmp_seq=989 ttl=61 time=1.43 ms
+64 bytes from 172.17.0.22: icmp_seq=990 ttl=61 time=1.32 ms
+64 bytes from 172.17.0.22: icmp_seq=991 ttl=61 time=1.39 ms
+64 bytes from 172.17.0.22: icmp_seq=992 ttl=61 time=1.20 ms
+64 bytes from 172.17.0.22: icmp_seq=993 ttl=61 time=1.35 ms
+64 bytes from 172.17.0.22: icmp_seq=994 ttl=61 time=1.19 ms
+64 bytes from 172.17.0.22: icmp_seq=995 ttl=61 time=1.92 ms
+64 bytes from 172.17.0.22: icmp_seq=996 ttl=61 time=1.54 ms
+64 bytes from 172.17.0.22: icmp_seq=997 ttl=61 time=1.57 ms
+64 bytes from 172.17.0.22: icmp_seq=998 ttl=61 time=1.09 ms
+64 bytes from 172.17.0.22: icmp_seq=999 ttl=61 time=1.91 ms
+64 bytes from 172.17.0.22: icmp_seq=1000 ttl=61 time=1.49 ms
+
+--- www.iitg.ac.in ping statistics ---
+1000 packets transmitted, 904 received, 9.6% packet loss, time 1002598ms
+rtt min/avg/max/mdev = 0.586/1.449/4.935/0.475 ms
Binary files main/pipe.o and xv6-public/pipe.o differ
Binary files main/printf.o and xv6-public/printf.o differ
diff -urN main/proc.c xv6-public/proc.c
--- main/proc.c	2022-09-05 22:12:46.000000000 +0530
+++ xv6-public/proc.c	2022-10-31 00:03:32.000000000 +0530
@@ -3,9 +3,357 @@
 #include "param.h"
 #include "memlayout.h"
 #include "mmu.h"
+#include "stat.h"
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include "fcntl.h"
+#include "sleeplock.h"
+#include "fs.h"
+#include "file.h"
+
+
+struct rq{
+  struct spinlock lock;
+  struct proc* queue[NPROC];
+  int s;
+  int e;
+};
+int swap_in_process_exists=0;
+int swap_out_process_exists=0;
+int mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm);
+
+void int_to_string(int x, char *c){
+  if(x==0){
+    c[0]='0';
+    c[1]='\0';
+    return;
+  }
+  int i=0;
+  
+  while(x>0){
+    c[i]=x%10+'0';
+    i++;
+    x/=10;
+  }
+  c[i]='\0';
+
+  for(int j=0;j<i/2;j++){
+    char a=c[j];
+    c[j]=c[i-j-1];
+    c[i-j-1]=a;
+  }
+
+}
+
+int proc_write(int fd, char *p, int n){
+  struct file *f;
+  if(fd>= NOFILE || fd<0|| (f=myproc()->ofile[fd])== 0)return -1;
+  return filewrite(f, p, n);
+}
+
+
+int proc_close(int fd){
+  struct file *f;
+  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)return -1;
+  
+  
+  
+  myproc()->ofile[fd] = 0;
+  fileclose(f);
+  return 0;
+}
+
+int proc_read(int fd, int n, char *p){
+  struct file *f;
+  if(fd >= NOFILE|| fd<0 || (f=myproc()->ofile[fd]) == 0)return -1;
+  return fileread(f, p, n);
+
+}
+
+
+
+static struct inode*
+proc_create(char *path, short type, short major, short minor)
+{
+  struct inode *ip, *dp;
+  char name[DIRSIZ];
+
+  if((dp = nameiparent(path, name)) == 0)
+    return 0;
+  ilock(dp);
+
+  if((ip = dirlookup(dp, name, 0)) != 0){
+    iunlockput(dp);
+    ilock(ip);
+    if(type == T_FILE && ip->type == T_FILE)
+      return ip;
+    iunlockput(ip);
+    return 0;
+  }
+
+  if((ip = ialloc(dp->dev, type)) == 0)
+    panic("create: ialloc");
+
+  ilock(ip);
+  ip->major = major;
+  ip->minor = minor;
+  ip->nlink = 1;
+  iupdate(ip);
+
+  if(type == T_DIR){  // Create . and .. entries.
+    dp->nlink++;  // for ".."
+    iupdate(dp);
+    // No ip->nlink++ for ".": avoid cyclic ref count.
+    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)panic("create dots");
+  }
+
+  if(dirlink(dp, name, ip->inum) < 0)panic("create: dirlink");
+
+  iunlockput(dp);
+  return ip;
+}
+
+
+static int proc_fdalloc(struct file *f){
+  struct proc *curproc = myproc();
+  int fd;
+  for(fd = 0; fd < NOFILE; fd++){
+    if(curproc->ofile[fd] == 0){
+      curproc->ofile[fd] = f;
+      return fd;
+    }
+  }
+  return -1;
+}
+
+int proc_open(char *path, int omode){
+
+  int fd;
+  struct file *f;
+  struct inode *ip;
+
+  begin_op();
+
+  if(omode & O_CREATE){
+    ip = proc_create(path, T_FILE, 0, 0);
+    if(ip == 0){
+      end_op();
+      return -1;
+    }
+  } else {
+    if((ip = namei(path)) == 0){
+      end_op();
+      return -1;
+    }
+    ilock(ip);
+    if(ip->type == T_DIR && omode != O_RDONLY){
+      iunlockput(ip);
+      end_op();
+      return -1;
+    }
+  }
+
+  if((f = filealloc()) == 0 || (fd = proc_fdalloc(f)) < 0){
+    if(f)fileclose(f);
+    
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+  iunlock(ip);
+  end_op();
+  
+  
+  f->ip = ip;
+  f->off = 0;
+
+  f->type = FD_INODE;
+  f->readable = !(omode & O_WRONLY);
+  
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+  return fd;
+
+}
+
+
+struct rq rqueue, rqueue2;
+struct proc* rpop(){
+  acquire(&rqueue.lock);
+  if(rqueue.s==rqueue.e){
+  	release(&rqueue.lock);
+  	return 0;
+  }
+  struct proc *p=rqueue.queue[rqueue.s];
+  (rqueue.s)++;
+  (rqueue.s)%=NPROC;
+  release(&rqueue.lock);
+  return p;
+}
+struct proc* rpop2(){
+
+	acquire(&rqueue2.lock);
+	if(rqueue2.s==rqueue2.e){
+		release(&rqueue2.lock);
+		return 0;
+	}
+	struct proc* p=rqueue2.queue[rqueue2.s];
+	(rqueue2.s)++;
+	(rqueue2.s)%=NPROC;
+	release(&rqueue2.lock);
+	return p;
+}
+int rpush(struct proc *p){
+
+  acquire(&rqueue.lock);
+  if((rqueue.e+1)%NPROC==rqueue.s){
+  	release(&rqueue.lock);
+	return 0;
+  }
+  rqueue.queue[rqueue.e]=p;
+  rqueue.e++;
+  (rqueue.e)%=NPROC;
+  release(&rqueue.lock);
+  return 1;
+}
+
+
+int rpush2(struct proc* p){
+	acquire(&rqueue2.lock);
+	if((rqueue2.e+1)%NPROC==rqueue2.s){
+		release(&rqueue2.lock);
+		return 0;
+	}
+	rqueue2.queue[rqueue2.e]=p;
+	(rqueue2.e)++;
+	(rqueue2.e)%=NPROC;
+	release(&rqueue2.lock);
+	return 1;
+}
+
+ 
+void swap_out_process_function(){
+  acquire(&rqueue.lock);
+  while(rqueue.s!=rqueue.e){
+    struct proc *p=rpop();
+    pde_t* pd = p->pgdir;
+    for(int i=0;i<NPDENTRIES;i++){
+      if(pd[i]&PTE_A)continue;
+      pte_t *pgtab = (pte_t*)P2V(PTE_ADDR(pd[i]));
+      for(int j=0;j<NPTENTRIES;j++){
+        //Skip if found
+        if((pgtab[j]&PTE_A) || !(pgtab[j]&PTE_P))continue;
+        pte_t *pte=(pte_t*)P2V(PTE_ADDR(pgtab[j]));
+
+        int pid=p->pid;
+        int virt = ((1<<22)*i)+((1<<12)*j);
+        char c[50];
+        
+        
+        int_to_string(pid,c);
+        int x=strlen(c);
+        c[x]='_';
+        
+        
+        
+        int_to_string(virt,c+x+1);
+        safestrcpy(c+strlen(c),".swp",5);
+
+        // file management
+        int fd=proc_open(c, O_CREATE | O_RDWR);
+        if(fd<0){
+        
+        
+          cprintf("error creating or opening file: %s\n", c);
+          panic("swap_out_process");
+        }
+        
+        
+
+        if(proc_write(fd,(char *)pte, PGSIZE) != PGSIZE){
+          cprintf("error writing to file: %s\n", c);
+          panic("swap_out_process");
+        }
+        
+        
+        proc_close(fd);
+
+        kfree((char*)pte);
+        memset(&pgtab[j],0,sizeof(pgtab[j]));
+
+        pgtab[j]=((pgtab[j])^(0x080));
+        break;
+      }
+    }
+
+  }
+
+  release(&rqueue.lock);
+  
+  struct proc *p;
+  if((p=myproc())==0) panic("swap out process");
+
+  swap_out_process_exists=0;
+  
+  p->killed = 0;
+  p->state = UNUSED;
+  p->parent = 0;
+  p->name[0] = '*';
+  sched();
+}
+
+
+
+void swap_in_process_function(){
+	acquire(&rqueue2.lock);
+	while(rqueue2.s!=rqueue2.e){
+		struct proc *p=rpop2();
+		int pid=p->pid;
+		int virt=PTE_ADDR(p->addr);
+
+		char c[50];
+	    	int_to_string(pid,c);
+	    	int x=strlen(c);
+	    	c[x]='_';
+	    	
+	    	
+	    	int_to_string(virt,c+x+1);
+	    	safestrcpy(c+strlen(c),".swp",5);
+	    	int fd=proc_open(c,O_RDONLY);
+	    	if(fd<0){
+	    	
+	    		release(&rqueue2.lock);
+	    		cprintf("could not find page file in memory: %s\n", c);
+	    		panic("swap_in_process");
+	    	}
+	    	char *mem=kalloc();
+	    	
+	    	
+	    	proc_read(fd,PGSIZE,mem);
+
+	    	if(mappages(p->pgdir, (void *)virt, PGSIZE, V2P(mem), PTE_W|PTE_U)<0){
+	    		release(&rqueue2.lock);
+	    		panic("mappages");
+	    	}
+	    	wakeup(p);
+	}
+
+    release(&rqueue2.lock);
+    struct proc *p;
+	if((p=myproc())==0)panic("swap_in_process");
+
+	swap_in_process_exists=0;
+	p->killed = 0;
+	
+	
+	p->state = UNUSED;
+	p->parent = 0;
+	
+	
+	p->name[0] = '*';
+	sched();
+
+}
 
 struct {
   struct spinlock lock;
@@ -24,6 +372,9 @@
 pinit(void)
 {
   initlock(&ptable.lock, "ptable");
+  initlock(&rqueue2.lock, "rqueue2");
+  initlock(&rqueue.lock, "rqueue");
+  initlock(&sleeping_channel_lock, "sleeping_channel");
 }
 
 // Must be called with interrupts disabled
@@ -115,11 +466,22 @@
   return p;
 }
 
+
 //PAGEBREAK: 32
 // Set up first user process.
 void
 userinit(void)
 {
+  acquire(&rqueue.lock);
+  rqueue.s=0;
+  rqueue.e=0;
+  release(&rqueue.lock);
+
+  acquire(&rqueue2.lock);
+  rqueue2.s=0;
+  rqueue2.e=0;
+  release(&rqueue2.lock);
+
   struct proc *p;
   extern char _binary_initcode_start[], _binary_initcode_size[];
 
@@ -151,6 +513,7 @@
   p->state = RUNNABLE;
 
   release(&ptable.lock);
+
 }
 
 // Grow current process's memory by n bytes.
@@ -180,6 +543,7 @@
 int
 fork(void)
 {
+
   int i, pid;
   struct proc *np;
   struct proc *curproc = myproc();
@@ -227,6 +591,7 @@
 void
 exit(void)
 {
+
   struct proc *curproc = myproc();
   struct proc *p;
   int fd;
@@ -242,6 +607,7 @@
     }
   }
 
+
   begin_op();
   iput(curproc->cwd);
   end_op();
@@ -333,9 +699,32 @@
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+
+      //If the swap out process has stopped running, free its stack and name.
+      if(p->state==UNUSED && p->name[0]=='*'){
+
+        kfree(p->kstack);
+        p->pid=0;
+        p->kstack=0;
+        p->name[0]=0;
+      }
+
       if(p->state != RUNNABLE)
         continue;
 
+      for(int i=0;i<NPDENTRIES;i++){
+        if(((p->pgdir)[i])&PTE_P && ((p->pgdir)[i])&PTE_A){
+          pte_t* pgtab = (pte_t*)P2V(PTE_ADDR((p->pgdir)[i]));
+          for(int j=0;j<NPTENTRIES;j++){
+            if(pgtab[j]&PTE_A){
+              pgtab[j]^=PTE_A;
+            }
+          }
+
+          ((p->pgdir)[i])^=PTE_A;
+        }
+      }
+
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
@@ -365,6 +754,7 @@
 void
 sched(void)
 {
+
   int intena;
   struct proc *p = myproc();
 
@@ -533,108 +923,20 @@
   }
 }
 
-// our addition to the code starts from here
+void create_kernel_process(const char *name, void (*entrypoint)()){
+    
+  struct proc *p = allocproc();
+  if(p == 0) panic("create_kernel_process failed");
+  if((p->pgdir = setupkvm()) == 0) panic("setupkvm failed");
+
+  //This is a kernel process. Trap frame stores user space registers. We don't need to initialise tf. Also, since this doesn't need to have a userspace, we don't need to assign a size to this process. eip stores address of next instruction to be executed
+  p->context->eip = (uint)entrypoint;
+  safestrcpy(p->name, name, sizeof(p->name));
 
-int thread_create(void (*fcn)(void *),void *arg,void* stack){
-  if((uint)stack==0) return -1;
-  int i,par_id;
-  struct proc *newproc;
-  struct proc *curproc = myproc();  //Current process in which thread is being created
-
-  if((newproc=allocproc())==0)return -1;
-  newproc->pgdir = curproc->pgdir;
-  newproc->sz = curproc->sz;
-  newproc->parent = curproc;
-  *newproc->tf = *curproc->tf;
-
-  newproc->isThread = 1;
-
-  newproc->tf->eax = 0;
-
-  newproc->tf->eip = (int)fcn;
-
-  newproc->tf->esp = (int) stack + 4096;
-  newproc->tf->esp -= 4;
-  *((int*)(newproc->tf->esp)) = (int) arg;
-  newproc->tf->esp-=4;
-  *((int*)(newproc->tf->esp)) = 0xffffffff;
-  for(i=0;i<NOFILE;++i){
-  	if(curproc->ofile[i]) newproc->ofile[i] = filedup(curproc->ofile[i]);	
-  }	
-  newproc->cwd = idup(curproc->cwd);
-  safestrcpy(newproc->name,curproc->name,sizeof(curproc->name));
-  par_id = newproc->pid;
   acquire(&ptable.lock);
-  newproc->state = RUNNABLE;
+  p->state = RUNNABLE;
   release(&ptable.lock);
-  return par_id;	
-}
-
-int thread_join(void){
-	struct proc *p;
-	int havekids, pid;
-	struct proc *curproc = myproc();
-
-	acquire(&ptable.lock);
-	while(1){
-		havekids = 0;
-		for(p = ptable.proc;p< &ptable.proc[NPROC];++p){
-			if(p->isThread==0||p->parent!=curproc)continue;	
-			havekids = 1;
-			if(p->state==ZOMBIE){
-				pid = p->pid;
-				p->kstack = 0;
-				p->pid = 0;
-				p->parent = 0;
-				p->name[0] = 0;
-				p->killed = 0;
-				p->state = UNUSED;
-				release(&ptable.lock);
-				return pid;
-			}
-		}
-		if(!havekids||curproc->killed){
-			release(&ptable.lock);
-			return -1;
-		}
-		sleep(curproc,&ptable.lock);
-	}
 
 }
 
 
-int thread_exit(){
-	struct proc *curproc = myproc();
-	struct proc *p;
-	int fd;
-
-	if(curproc==initproc)
-	{
-		panic("init exiting");
-	}
-	for(fd = 0;fd<NOFILE;fd++){
-		if(curproc->ofile[fd]){
-			fileclose(curproc->ofile[fd]);
-			curproc->ofile[fd] = 0;
-		}
-	}
-	begin_op();
-	iput(curproc->cwd);
-	end_op();
-	curproc->cwd = 0;
-	acquire(&ptable.lock);
-
-	wakeup1(curproc->parent);
-	
-	for(p=ptable.proc;p<&ptable.proc[NPROC];++p){
-		if(p->parent==curproc){
-			p->parent = initproc;
-			if(p->state==ZOMBIE){
-				wakeup1(initproc);
-			}
-		}
-	}
-	curproc->state = ZOMBIE;
-	sched();
-	panic("zombie exit");
-}
diff -urN main/proc.d xv6-public/proc.d
--- main/proc.d	2022-09-26 21:21:09.933245000 +0530
+++ xv6-public/proc.d	2022-10-31 22:34:08.409594428 +0530
@@ -1,2 +1,3 @@
 proc.o: proc.c /usr/include/stdc-predef.h types.h defs.h param.h \
- memlayout.h mmu.h x86.h proc.h spinlock.h
+ memlayout.h mmu.h stat.h x86.h proc.h spinlock.h fcntl.h sleeplock.h \
+ fs.h file.h
diff -urN main/proc.h xv6-public/proc.h
--- main/proc.h	2022-09-05 12:35:25.000000000 +0530
+++ xv6-public/proc.h	2022-10-30 08:35:18.000000000 +0530
@@ -48,8 +48,8 @@
   int killed;                  // If non-zero, have been killed
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
-  char name[16];
-  int isThread;               // Process name (debugging), implemented by us
+  char name[16];               // Process name (debugging)
+  int addr;                    // virtual address of pagefalut
 };
 
 // Process memory is laid out contiguously, low addresses first:
Binary files main/proc.o and xv6-public/proc.o differ
Binary files main/_rm and xv6-public/_rm differ
diff -urN main/rm.asm xv6-public/rm.asm
--- main/rm.asm	2022-09-26 21:21:16.604580000 +0530
+++ xv6-public/rm.asm	2022-10-31 22:34:17.145960893 +0530
@@ -59,18 +59,18 @@
       printf(2, "rm: %s failed to delete\n", argv[i]);
   50:	50                   	push   %eax
   51:	ff 33                	pushl  (%ebx)
-  53:	68 ac 07 00 00       	push   $0x7ac
+  53:	68 8c 07 00 00       	push   $0x78c
   58:	6a 02                	push   $0x2
-  5a:	e8 e1 03 00 00       	call   440 <printf>
+  5a:	e8 c1 03 00 00       	call   420 <printf>
       break;
   5f:	83 c4 10             	add    $0x10,%esp
   62:	eb e7                	jmp    4b <main+0x4b>
     printf(2, "Usage: rm files...\n");
   64:	52                   	push   %edx
   65:	52                   	push   %edx
-  66:	68 98 07 00 00       	push   $0x798
+  66:	68 78 07 00 00       	push   $0x778
   6b:	6a 02                	push   $0x2
-  6d:	e8 ce 03 00 00       	call   440 <printf>
+  6d:	e8 ae 03 00 00       	call   420 <printf>
     exit();
   72:	e8 5b 02 00 00       	call   2d2 <exit>
   77:	66 90                	xchg   %ax,%ax
@@ -597,614 +597,593 @@
  36f:	cd 40                	int    $0x40
  371:	c3                   	ret    
 
-00000372 <thread_create>:
-SYSCALL(thread_create)
+00000372 <draw>:
+SYSCALL(draw)
  372:	b8 16 00 00 00       	mov    $0x16,%eax
  377:	cd 40                	int    $0x40
  379:	c3                   	ret    
+ 37a:	66 90                	xchg   %ax,%ax
+ 37c:	66 90                	xchg   %ax,%ax
+ 37e:	66 90                	xchg   %ax,%ax
 
-0000037a <thread_join>:
-SYSCALL(thread_join)
- 37a:	b8 18 00 00 00       	mov    $0x18,%eax
- 37f:	cd 40                	int    $0x40
- 381:	c3                   	ret    
-
-00000382 <thread_exit>:
-SYSCALL(thread_exit)
- 382:	b8 17 00 00 00       	mov    $0x17,%eax
- 387:	cd 40                	int    $0x40
- 389:	c3                   	ret    
-
-0000038a <draw>:
- 38a:	b8 19 00 00 00       	mov    $0x19,%eax
- 38f:	cd 40                	int    $0x40
- 391:	c3                   	ret    
- 392:	66 90                	xchg   %ax,%ax
- 394:	66 90                	xchg   %ax,%ax
- 396:	66 90                	xchg   %ax,%ax
- 398:	66 90                	xchg   %ax,%ax
- 39a:	66 90                	xchg   %ax,%ax
- 39c:	66 90                	xchg   %ax,%ax
- 39e:	66 90                	xchg   %ax,%ax
-
-000003a0 <printint>:
+00000380 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 3a0:	55                   	push   %ebp
- 3a1:	89 e5                	mov    %esp,%ebp
- 3a3:	57                   	push   %edi
- 3a4:	56                   	push   %esi
- 3a5:	53                   	push   %ebx
- 3a6:	83 ec 3c             	sub    $0x3c,%esp
+ 380:	55                   	push   %ebp
+ 381:	89 e5                	mov    %esp,%ebp
+ 383:	57                   	push   %edi
+ 384:	56                   	push   %esi
+ 385:	53                   	push   %ebx
+ 386:	83 ec 3c             	sub    $0x3c,%esp
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 3a9:	85 d2                	test   %edx,%edx
+ 389:	85 d2                	test   %edx,%edx
 {
- 3ab:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 38b:	89 45 c0             	mov    %eax,-0x40(%ebp)
     neg = 1;
     x = -xx;
- 3ae:	89 d0                	mov    %edx,%eax
+ 38e:	89 d0                	mov    %edx,%eax
   if(sgn && xx < 0){
- 3b0:	79 76                	jns    428 <printint+0x88>
- 3b2:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 3b6:	74 70                	je     428 <printint+0x88>
+ 390:	79 76                	jns    408 <printint+0x88>
+ 392:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 396:	74 70                	je     408 <printint+0x88>
     x = -xx;
- 3b8:	f7 d8                	neg    %eax
+ 398:	f7 d8                	neg    %eax
     neg = 1;
- 3ba:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+ 39a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
   } else {
     x = xx;
   }
 
   i = 0;
- 3c1:	31 f6                	xor    %esi,%esi
- 3c3:	8d 5d d7             	lea    -0x29(%ebp),%ebx
- 3c6:	eb 0a                	jmp    3d2 <printint+0x32>
- 3c8:	90                   	nop
- 3c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3a1:	31 f6                	xor    %esi,%esi
+ 3a3:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 3a6:	eb 0a                	jmp    3b2 <printint+0x32>
+ 3a8:	90                   	nop
+ 3a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   do{
     buf[i++] = digits[x % base];
- 3d0:	89 fe                	mov    %edi,%esi
- 3d2:	31 d2                	xor    %edx,%edx
- 3d4:	8d 7e 01             	lea    0x1(%esi),%edi
- 3d7:	f7 f1                	div    %ecx
- 3d9:	0f b6 92 cc 07 00 00 	movzbl 0x7cc(%edx),%edx
+ 3b0:	89 fe                	mov    %edi,%esi
+ 3b2:	31 d2                	xor    %edx,%edx
+ 3b4:	8d 7e 01             	lea    0x1(%esi),%edi
+ 3b7:	f7 f1                	div    %ecx
+ 3b9:	0f b6 92 ac 07 00 00 	movzbl 0x7ac(%edx),%edx
   }while((x /= base) != 0);
- 3e0:	85 c0                	test   %eax,%eax
+ 3c0:	85 c0                	test   %eax,%eax
     buf[i++] = digits[x % base];
- 3e2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+ 3c2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
   }while((x /= base) != 0);
- 3e5:	75 e9                	jne    3d0 <printint+0x30>
+ 3c5:	75 e9                	jne    3b0 <printint+0x30>
   if(neg)
- 3e7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
- 3ea:	85 c0                	test   %eax,%eax
- 3ec:	74 08                	je     3f6 <printint+0x56>
+ 3c7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 3ca:	85 c0                	test   %eax,%eax
+ 3cc:	74 08                	je     3d6 <printint+0x56>
     buf[i++] = '-';
- 3ee:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
- 3f3:	8d 7e 02             	lea    0x2(%esi),%edi
- 3f6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
- 3fa:	8b 7d c0             	mov    -0x40(%ebp),%edi
- 3fd:	8d 76 00             	lea    0x0(%esi),%esi
- 400:	0f b6 06             	movzbl (%esi),%eax
+ 3ce:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 3d3:	8d 7e 02             	lea    0x2(%esi),%edi
+ 3d6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 3da:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 3dd:	8d 76 00             	lea    0x0(%esi),%esi
+ 3e0:	0f b6 06             	movzbl (%esi),%eax
   write(fd, &c, 1);
- 403:	83 ec 04             	sub    $0x4,%esp
- 406:	83 ee 01             	sub    $0x1,%esi
- 409:	6a 01                	push   $0x1
- 40b:	53                   	push   %ebx
- 40c:	57                   	push   %edi
- 40d:	88 45 d7             	mov    %al,-0x29(%ebp)
- 410:	e8 dd fe ff ff       	call   2f2 <write>
+ 3e3:	83 ec 04             	sub    $0x4,%esp
+ 3e6:	83 ee 01             	sub    $0x1,%esi
+ 3e9:	6a 01                	push   $0x1
+ 3eb:	53                   	push   %ebx
+ 3ec:	57                   	push   %edi
+ 3ed:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 3f0:	e8 fd fe ff ff       	call   2f2 <write>
 
   while(--i >= 0)
- 415:	83 c4 10             	add    $0x10,%esp
- 418:	39 de                	cmp    %ebx,%esi
- 41a:	75 e4                	jne    400 <printint+0x60>
+ 3f5:	83 c4 10             	add    $0x10,%esp
+ 3f8:	39 de                	cmp    %ebx,%esi
+ 3fa:	75 e4                	jne    3e0 <printint+0x60>
     putc(fd, buf[i]);
 }
- 41c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 41f:	5b                   	pop    %ebx
- 420:	5e                   	pop    %esi
- 421:	5f                   	pop    %edi
- 422:	5d                   	pop    %ebp
- 423:	c3                   	ret    
- 424:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 3fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3ff:	5b                   	pop    %ebx
+ 400:	5e                   	pop    %esi
+ 401:	5f                   	pop    %edi
+ 402:	5d                   	pop    %ebp
+ 403:	c3                   	ret    
+ 404:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 428:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
- 42f:	eb 90                	jmp    3c1 <printint+0x21>
- 431:	eb 0d                	jmp    440 <printf>
- 433:	90                   	nop
- 434:	90                   	nop
- 435:	90                   	nop
- 436:	90                   	nop
- 437:	90                   	nop
- 438:	90                   	nop
- 439:	90                   	nop
- 43a:	90                   	nop
- 43b:	90                   	nop
- 43c:	90                   	nop
- 43d:	90                   	nop
- 43e:	90                   	nop
- 43f:	90                   	nop
+ 408:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 40f:	eb 90                	jmp    3a1 <printint+0x21>
+ 411:	eb 0d                	jmp    420 <printf>
+ 413:	90                   	nop
+ 414:	90                   	nop
+ 415:	90                   	nop
+ 416:	90                   	nop
+ 417:	90                   	nop
+ 418:	90                   	nop
+ 419:	90                   	nop
+ 41a:	90                   	nop
+ 41b:	90                   	nop
+ 41c:	90                   	nop
+ 41d:	90                   	nop
+ 41e:	90                   	nop
+ 41f:	90                   	nop
 
-00000440 <printf>:
+00000420 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 440:	55                   	push   %ebp
- 441:	89 e5                	mov    %esp,%ebp
- 443:	57                   	push   %edi
- 444:	56                   	push   %esi
- 445:	53                   	push   %ebx
- 446:	83 ec 2c             	sub    $0x2c,%esp
+ 420:	55                   	push   %ebp
+ 421:	89 e5                	mov    %esp,%ebp
+ 423:	57                   	push   %edi
+ 424:	56                   	push   %esi
+ 425:	53                   	push   %ebx
+ 426:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 449:	8b 75 0c             	mov    0xc(%ebp),%esi
- 44c:	0f b6 1e             	movzbl (%esi),%ebx
- 44f:	84 db                	test   %bl,%bl
- 451:	0f 84 b3 00 00 00    	je     50a <printf+0xca>
+ 429:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 42c:	0f b6 1e             	movzbl (%esi),%ebx
+ 42f:	84 db                	test   %bl,%bl
+ 431:	0f 84 b3 00 00 00    	je     4ea <printf+0xca>
   ap = (uint*)(void*)&fmt + 1;
- 457:	8d 45 10             	lea    0x10(%ebp),%eax
- 45a:	83 c6 01             	add    $0x1,%esi
+ 437:	8d 45 10             	lea    0x10(%ebp),%eax
+ 43a:	83 c6 01             	add    $0x1,%esi
   state = 0;
- 45d:	31 ff                	xor    %edi,%edi
+ 43d:	31 ff                	xor    %edi,%edi
   ap = (uint*)(void*)&fmt + 1;
- 45f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
- 462:	eb 2f                	jmp    493 <printf+0x53>
- 464:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 43f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 442:	eb 2f                	jmp    473 <printf+0x53>
+ 444:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
- 468:	83 f8 25             	cmp    $0x25,%eax
- 46b:	0f 84 a7 00 00 00    	je     518 <printf+0xd8>
+ 448:	83 f8 25             	cmp    $0x25,%eax
+ 44b:	0f 84 a7 00 00 00    	je     4f8 <printf+0xd8>
   write(fd, &c, 1);
- 471:	8d 45 e2             	lea    -0x1e(%ebp),%eax
- 474:	83 ec 04             	sub    $0x4,%esp
- 477:	88 5d e2             	mov    %bl,-0x1e(%ebp)
- 47a:	6a 01                	push   $0x1
- 47c:	50                   	push   %eax
- 47d:	ff 75 08             	pushl  0x8(%ebp)
- 480:	e8 6d fe ff ff       	call   2f2 <write>
- 485:	83 c4 10             	add    $0x10,%esp
- 488:	83 c6 01             	add    $0x1,%esi
+ 451:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 454:	83 ec 04             	sub    $0x4,%esp
+ 457:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 45a:	6a 01                	push   $0x1
+ 45c:	50                   	push   %eax
+ 45d:	ff 75 08             	pushl  0x8(%ebp)
+ 460:	e8 8d fe ff ff       	call   2f2 <write>
+ 465:	83 c4 10             	add    $0x10,%esp
+ 468:	83 c6 01             	add    $0x1,%esi
   for(i = 0; fmt[i]; i++){
- 48b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
- 48f:	84 db                	test   %bl,%bl
- 491:	74 77                	je     50a <printf+0xca>
+ 46b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 46f:	84 db                	test   %bl,%bl
+ 471:	74 77                	je     4ea <printf+0xca>
     if(state == 0){
- 493:	85 ff                	test   %edi,%edi
+ 473:	85 ff                	test   %edi,%edi
     c = fmt[i] & 0xff;
- 495:	0f be cb             	movsbl %bl,%ecx
- 498:	0f b6 c3             	movzbl %bl,%eax
+ 475:	0f be cb             	movsbl %bl,%ecx
+ 478:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
- 49b:	74 cb                	je     468 <printf+0x28>
+ 47b:	74 cb                	je     448 <printf+0x28>
         state = '%';
       } else {
         putc(fd, c);
       }
     } else if(state == '%'){
- 49d:	83 ff 25             	cmp    $0x25,%edi
- 4a0:	75 e6                	jne    488 <printf+0x48>
+ 47d:	83 ff 25             	cmp    $0x25,%edi
+ 480:	75 e6                	jne    468 <printf+0x48>
       if(c == 'd'){
- 4a2:	83 f8 64             	cmp    $0x64,%eax
- 4a5:	0f 84 05 01 00 00    	je     5b0 <printf+0x170>
+ 482:	83 f8 64             	cmp    $0x64,%eax
+ 485:	0f 84 05 01 00 00    	je     590 <printf+0x170>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 4ab:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 4b1:	83 f9 70             	cmp    $0x70,%ecx
- 4b4:	74 72                	je     528 <printf+0xe8>
+ 48b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 491:	83 f9 70             	cmp    $0x70,%ecx
+ 494:	74 72                	je     508 <printf+0xe8>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 4b6:	83 f8 73             	cmp    $0x73,%eax
- 4b9:	0f 84 99 00 00 00    	je     558 <printf+0x118>
+ 496:	83 f8 73             	cmp    $0x73,%eax
+ 499:	0f 84 99 00 00 00    	je     538 <printf+0x118>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 4bf:	83 f8 63             	cmp    $0x63,%eax
- 4c2:	0f 84 08 01 00 00    	je     5d0 <printf+0x190>
+ 49f:	83 f8 63             	cmp    $0x63,%eax
+ 4a2:	0f 84 08 01 00 00    	je     5b0 <printf+0x190>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 4c8:	83 f8 25             	cmp    $0x25,%eax
- 4cb:	0f 84 ef 00 00 00    	je     5c0 <printf+0x180>
+ 4a8:	83 f8 25             	cmp    $0x25,%eax
+ 4ab:	0f 84 ef 00 00 00    	je     5a0 <printf+0x180>
   write(fd, &c, 1);
- 4d1:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 4d4:	83 ec 04             	sub    $0x4,%esp
- 4d7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 4db:	6a 01                	push   $0x1
- 4dd:	50                   	push   %eax
- 4de:	ff 75 08             	pushl  0x8(%ebp)
- 4e1:	e8 0c fe ff ff       	call   2f2 <write>
- 4e6:	83 c4 0c             	add    $0xc,%esp
- 4e9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
- 4ec:	88 5d e6             	mov    %bl,-0x1a(%ebp)
- 4ef:	6a 01                	push   $0x1
- 4f1:	50                   	push   %eax
- 4f2:	ff 75 08             	pushl  0x8(%ebp)
- 4f5:	83 c6 01             	add    $0x1,%esi
+ 4b1:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 4b4:	83 ec 04             	sub    $0x4,%esp
+ 4b7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4bb:	6a 01                	push   $0x1
+ 4bd:	50                   	push   %eax
+ 4be:	ff 75 08             	pushl  0x8(%ebp)
+ 4c1:	e8 2c fe ff ff       	call   2f2 <write>
+ 4c6:	83 c4 0c             	add    $0xc,%esp
+ 4c9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 4cc:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 4cf:	6a 01                	push   $0x1
+ 4d1:	50                   	push   %eax
+ 4d2:	ff 75 08             	pushl  0x8(%ebp)
+ 4d5:	83 c6 01             	add    $0x1,%esi
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
       }
       state = 0;
- 4f8:	31 ff                	xor    %edi,%edi
+ 4d8:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 4fa:	e8 f3 fd ff ff       	call   2f2 <write>
+ 4da:	e8 13 fe ff ff       	call   2f2 <write>
   for(i = 0; fmt[i]; i++){
- 4ff:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 4df:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
   write(fd, &c, 1);
- 503:	83 c4 10             	add    $0x10,%esp
+ 4e3:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 506:	84 db                	test   %bl,%bl
- 508:	75 89                	jne    493 <printf+0x53>
+ 4e6:	84 db                	test   %bl,%bl
+ 4e8:	75 89                	jne    473 <printf+0x53>
     }
   }
 }
- 50a:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 50d:	5b                   	pop    %ebx
- 50e:	5e                   	pop    %esi
- 50f:	5f                   	pop    %edi
- 510:	5d                   	pop    %ebp
- 511:	c3                   	ret    
- 512:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 4ea:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4ed:	5b                   	pop    %ebx
+ 4ee:	5e                   	pop    %esi
+ 4ef:	5f                   	pop    %edi
+ 4f0:	5d                   	pop    %ebp
+ 4f1:	c3                   	ret    
+ 4f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         state = '%';
- 518:	bf 25 00 00 00       	mov    $0x25,%edi
- 51d:	e9 66 ff ff ff       	jmp    488 <printf+0x48>
- 522:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 4f8:	bf 25 00 00 00       	mov    $0x25,%edi
+ 4fd:	e9 66 ff ff ff       	jmp    468 <printf+0x48>
+ 502:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 528:	83 ec 0c             	sub    $0xc,%esp
- 52b:	b9 10 00 00 00       	mov    $0x10,%ecx
- 530:	6a 00                	push   $0x0
- 532:	8b 7d d4             	mov    -0x2c(%ebp),%edi
- 535:	8b 45 08             	mov    0x8(%ebp),%eax
- 538:	8b 17                	mov    (%edi),%edx
- 53a:	e8 61 fe ff ff       	call   3a0 <printint>
+ 508:	83 ec 0c             	sub    $0xc,%esp
+ 50b:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 510:	6a 00                	push   $0x0
+ 512:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 515:	8b 45 08             	mov    0x8(%ebp),%eax
+ 518:	8b 17                	mov    (%edi),%edx
+ 51a:	e8 61 fe ff ff       	call   380 <printint>
         ap++;
- 53f:	89 f8                	mov    %edi,%eax
- 541:	83 c4 10             	add    $0x10,%esp
+ 51f:	89 f8                	mov    %edi,%eax
+ 521:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 544:	31 ff                	xor    %edi,%edi
+ 524:	31 ff                	xor    %edi,%edi
         ap++;
- 546:	83 c0 04             	add    $0x4,%eax
- 549:	89 45 d4             	mov    %eax,-0x2c(%ebp)
- 54c:	e9 37 ff ff ff       	jmp    488 <printf+0x48>
- 551:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 526:	83 c0 04             	add    $0x4,%eax
+ 529:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 52c:	e9 37 ff ff ff       	jmp    468 <printf+0x48>
+ 531:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 558:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 55b:	8b 08                	mov    (%eax),%ecx
+ 538:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 53b:	8b 08                	mov    (%eax),%ecx
         ap++;
- 55d:	83 c0 04             	add    $0x4,%eax
- 560:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 53d:	83 c0 04             	add    $0x4,%eax
+ 540:	89 45 d4             	mov    %eax,-0x2c(%ebp)
         if(s == 0)
- 563:	85 c9                	test   %ecx,%ecx
- 565:	0f 84 8e 00 00 00    	je     5f9 <printf+0x1b9>
+ 543:	85 c9                	test   %ecx,%ecx
+ 545:	0f 84 8e 00 00 00    	je     5d9 <printf+0x1b9>
         while(*s != 0){
- 56b:	0f b6 01             	movzbl (%ecx),%eax
+ 54b:	0f b6 01             	movzbl (%ecx),%eax
       state = 0;
- 56e:	31 ff                	xor    %edi,%edi
+ 54e:	31 ff                	xor    %edi,%edi
         s = (char*)*ap;
- 570:	89 cb                	mov    %ecx,%ebx
+ 550:	89 cb                	mov    %ecx,%ebx
         while(*s != 0){
- 572:	84 c0                	test   %al,%al
- 574:	0f 84 0e ff ff ff    	je     488 <printf+0x48>
- 57a:	89 75 d0             	mov    %esi,-0x30(%ebp)
- 57d:	89 de                	mov    %ebx,%esi
- 57f:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 582:	8d 7d e3             	lea    -0x1d(%ebp),%edi
- 585:	8d 76 00             	lea    0x0(%esi),%esi
+ 552:	84 c0                	test   %al,%al
+ 554:	0f 84 0e ff ff ff    	je     468 <printf+0x48>
+ 55a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 55d:	89 de                	mov    %ebx,%esi
+ 55f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 562:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 565:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 588:	83 ec 04             	sub    $0x4,%esp
+ 568:	83 ec 04             	sub    $0x4,%esp
           s++;
- 58b:	83 c6 01             	add    $0x1,%esi
- 58e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+ 56b:	83 c6 01             	add    $0x1,%esi
+ 56e:	88 45 e3             	mov    %al,-0x1d(%ebp)
   write(fd, &c, 1);
- 591:	6a 01                	push   $0x1
- 593:	57                   	push   %edi
- 594:	53                   	push   %ebx
- 595:	e8 58 fd ff ff       	call   2f2 <write>
+ 571:	6a 01                	push   $0x1
+ 573:	57                   	push   %edi
+ 574:	53                   	push   %ebx
+ 575:	e8 78 fd ff ff       	call   2f2 <write>
         while(*s != 0){
- 59a:	0f b6 06             	movzbl (%esi),%eax
- 59d:	83 c4 10             	add    $0x10,%esp
- 5a0:	84 c0                	test   %al,%al
- 5a2:	75 e4                	jne    588 <printf+0x148>
- 5a4:	8b 75 d0             	mov    -0x30(%ebp),%esi
+ 57a:	0f b6 06             	movzbl (%esi),%eax
+ 57d:	83 c4 10             	add    $0x10,%esp
+ 580:	84 c0                	test   %al,%al
+ 582:	75 e4                	jne    568 <printf+0x148>
+ 584:	8b 75 d0             	mov    -0x30(%ebp),%esi
       state = 0;
- 5a7:	31 ff                	xor    %edi,%edi
- 5a9:	e9 da fe ff ff       	jmp    488 <printf+0x48>
- 5ae:	66 90                	xchg   %ax,%ax
+ 587:	31 ff                	xor    %edi,%edi
+ 589:	e9 da fe ff ff       	jmp    468 <printf+0x48>
+ 58e:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 10, 1);
- 5b0:	83 ec 0c             	sub    $0xc,%esp
- 5b3:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 5b8:	6a 01                	push   $0x1
- 5ba:	e9 73 ff ff ff       	jmp    532 <printf+0xf2>
- 5bf:	90                   	nop
+ 590:	83 ec 0c             	sub    $0xc,%esp
+ 593:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 598:	6a 01                	push   $0x1
+ 59a:	e9 73 ff ff ff       	jmp    512 <printf+0xf2>
+ 59f:	90                   	nop
   write(fd, &c, 1);
- 5c0:	83 ec 04             	sub    $0x4,%esp
- 5c3:	88 5d e5             	mov    %bl,-0x1b(%ebp)
- 5c6:	8d 45 e5             	lea    -0x1b(%ebp),%eax
- 5c9:	6a 01                	push   $0x1
- 5cb:	e9 21 ff ff ff       	jmp    4f1 <printf+0xb1>
+ 5a0:	83 ec 04             	sub    $0x4,%esp
+ 5a3:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 5a6:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 5a9:	6a 01                	push   $0x1
+ 5ab:	e9 21 ff ff ff       	jmp    4d1 <printf+0xb1>
         putc(fd, *ap);
- 5d0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 5b0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
   write(fd, &c, 1);
- 5d3:	83 ec 04             	sub    $0x4,%esp
+ 5b3:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 5d6:	8b 07                	mov    (%edi),%eax
+ 5b6:	8b 07                	mov    (%edi),%eax
   write(fd, &c, 1);
- 5d8:	6a 01                	push   $0x1
+ 5b8:	6a 01                	push   $0x1
         ap++;
- 5da:	83 c7 04             	add    $0x4,%edi
+ 5ba:	83 c7 04             	add    $0x4,%edi
         putc(fd, *ap);
- 5dd:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 5bd:	88 45 e4             	mov    %al,-0x1c(%ebp)
   write(fd, &c, 1);
- 5e0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
- 5e3:	50                   	push   %eax
- 5e4:	ff 75 08             	pushl  0x8(%ebp)
- 5e7:	e8 06 fd ff ff       	call   2f2 <write>
+ 5c0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 5c3:	50                   	push   %eax
+ 5c4:	ff 75 08             	pushl  0x8(%ebp)
+ 5c7:	e8 26 fd ff ff       	call   2f2 <write>
         ap++;
- 5ec:	89 7d d4             	mov    %edi,-0x2c(%ebp)
- 5ef:	83 c4 10             	add    $0x10,%esp
+ 5cc:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 5cf:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 5f2:	31 ff                	xor    %edi,%edi
- 5f4:	e9 8f fe ff ff       	jmp    488 <printf+0x48>
+ 5d2:	31 ff                	xor    %edi,%edi
+ 5d4:	e9 8f fe ff ff       	jmp    468 <printf+0x48>
           s = "(null)";
- 5f9:	bb c5 07 00 00       	mov    $0x7c5,%ebx
+ 5d9:	bb a5 07 00 00       	mov    $0x7a5,%ebx
         while(*s != 0){
- 5fe:	b8 28 00 00 00       	mov    $0x28,%eax
- 603:	e9 72 ff ff ff       	jmp    57a <printf+0x13a>
- 608:	66 90                	xchg   %ax,%ax
- 60a:	66 90                	xchg   %ax,%ax
- 60c:	66 90                	xchg   %ax,%ax
- 60e:	66 90                	xchg   %ax,%ax
+ 5de:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5e3:	e9 72 ff ff ff       	jmp    55a <printf+0x13a>
+ 5e8:	66 90                	xchg   %ax,%ax
+ 5ea:	66 90                	xchg   %ax,%ax
+ 5ec:	66 90                	xchg   %ax,%ax
+ 5ee:	66 90                	xchg   %ax,%ax
 
-00000610 <free>:
+000005f0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 610:	55                   	push   %ebp
+ 5f0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 611:	a1 7c 0a 00 00       	mov    0xa7c,%eax
+ 5f1:	a1 5c 0a 00 00       	mov    0xa5c,%eax
 {
- 616:	89 e5                	mov    %esp,%ebp
- 618:	57                   	push   %edi
- 619:	56                   	push   %esi
- 61a:	53                   	push   %ebx
- 61b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5f6:	89 e5                	mov    %esp,%ebp
+ 5f8:	57                   	push   %edi
+ 5f9:	56                   	push   %esi
+ 5fa:	53                   	push   %ebx
+ 5fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 61e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
- 621:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5fe:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 601:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 628:	39 c8                	cmp    %ecx,%eax
- 62a:	8b 10                	mov    (%eax),%edx
- 62c:	73 32                	jae    660 <free+0x50>
- 62e:	39 d1                	cmp    %edx,%ecx
- 630:	72 04                	jb     636 <free+0x26>
+ 608:	39 c8                	cmp    %ecx,%eax
+ 60a:	8b 10                	mov    (%eax),%edx
+ 60c:	73 32                	jae    640 <free+0x50>
+ 60e:	39 d1                	cmp    %edx,%ecx
+ 610:	72 04                	jb     616 <free+0x26>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 632:	39 d0                	cmp    %edx,%eax
- 634:	72 32                	jb     668 <free+0x58>
+ 612:	39 d0                	cmp    %edx,%eax
+ 614:	72 32                	jb     648 <free+0x58>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 636:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 639:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 63c:	39 fa                	cmp    %edi,%edx
- 63e:	74 30                	je     670 <free+0x60>
+ 616:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 619:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 61c:	39 fa                	cmp    %edi,%edx
+ 61e:	74 30                	je     650 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 640:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 620:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 643:	8b 50 04             	mov    0x4(%eax),%edx
- 646:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 649:	39 f1                	cmp    %esi,%ecx
- 64b:	74 3a                	je     687 <free+0x77>
+ 623:	8b 50 04             	mov    0x4(%eax),%edx
+ 626:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 629:	39 f1                	cmp    %esi,%ecx
+ 62b:	74 3a                	je     667 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 64d:	89 08                	mov    %ecx,(%eax)
+ 62d:	89 08                	mov    %ecx,(%eax)
   freep = p;
- 64f:	a3 7c 0a 00 00       	mov    %eax,0xa7c
+ 62f:	a3 5c 0a 00 00       	mov    %eax,0xa5c
 }
- 654:	5b                   	pop    %ebx
- 655:	5e                   	pop    %esi
- 656:	5f                   	pop    %edi
- 657:	5d                   	pop    %ebp
- 658:	c3                   	ret    
- 659:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 634:	5b                   	pop    %ebx
+ 635:	5e                   	pop    %esi
+ 636:	5f                   	pop    %edi
+ 637:	5d                   	pop    %ebp
+ 638:	c3                   	ret    
+ 639:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 660:	39 d0                	cmp    %edx,%eax
- 662:	72 04                	jb     668 <free+0x58>
- 664:	39 d1                	cmp    %edx,%ecx
- 666:	72 ce                	jb     636 <free+0x26>
+ 640:	39 d0                	cmp    %edx,%eax
+ 642:	72 04                	jb     648 <free+0x58>
+ 644:	39 d1                	cmp    %edx,%ecx
+ 646:	72 ce                	jb     616 <free+0x26>
 {
- 668:	89 d0                	mov    %edx,%eax
- 66a:	eb bc                	jmp    628 <free+0x18>
- 66c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 648:	89 d0                	mov    %edx,%eax
+ 64a:	eb bc                	jmp    608 <free+0x18>
+ 64c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     bp->s.size += p->s.ptr->s.size;
- 670:	03 72 04             	add    0x4(%edx),%esi
- 673:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 650:	03 72 04             	add    0x4(%edx),%esi
+ 653:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 676:	8b 10                	mov    (%eax),%edx
- 678:	8b 12                	mov    (%edx),%edx
- 67a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 656:	8b 10                	mov    (%eax),%edx
+ 658:	8b 12                	mov    (%edx),%edx
+ 65a:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 67d:	8b 50 04             	mov    0x4(%eax),%edx
- 680:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 683:	39 f1                	cmp    %esi,%ecx
- 685:	75 c6                	jne    64d <free+0x3d>
+ 65d:	8b 50 04             	mov    0x4(%eax),%edx
+ 660:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 663:	39 f1                	cmp    %esi,%ecx
+ 665:	75 c6                	jne    62d <free+0x3d>
     p->s.size += bp->s.size;
- 687:	03 53 fc             	add    -0x4(%ebx),%edx
+ 667:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 68a:	a3 7c 0a 00 00       	mov    %eax,0xa7c
+ 66a:	a3 5c 0a 00 00       	mov    %eax,0xa5c
     p->s.size += bp->s.size;
- 68f:	89 50 04             	mov    %edx,0x4(%eax)
+ 66f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 692:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 695:	89 10                	mov    %edx,(%eax)
+ 672:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 675:	89 10                	mov    %edx,(%eax)
 }
- 697:	5b                   	pop    %ebx
- 698:	5e                   	pop    %esi
- 699:	5f                   	pop    %edi
- 69a:	5d                   	pop    %ebp
- 69b:	c3                   	ret    
- 69c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 677:	5b                   	pop    %ebx
+ 678:	5e                   	pop    %esi
+ 679:	5f                   	pop    %edi
+ 67a:	5d                   	pop    %ebp
+ 67b:	c3                   	ret    
+ 67c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-000006a0 <malloc>:
+00000680 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 6a0:	55                   	push   %ebp
- 6a1:	89 e5                	mov    %esp,%ebp
- 6a3:	57                   	push   %edi
- 6a4:	56                   	push   %esi
- 6a5:	53                   	push   %ebx
- 6a6:	83 ec 0c             	sub    $0xc,%esp
+ 680:	55                   	push   %ebp
+ 681:	89 e5                	mov    %esp,%ebp
+ 683:	57                   	push   %edi
+ 684:	56                   	push   %esi
+ 685:	53                   	push   %ebx
+ 686:	83 ec 0c             	sub    $0xc,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6a9:	8b 45 08             	mov    0x8(%ebp),%eax
+ 689:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 6ac:	8b 15 7c 0a 00 00    	mov    0xa7c,%edx
+ 68c:	8b 15 5c 0a 00 00    	mov    0xa5c,%edx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6b2:	8d 78 07             	lea    0x7(%eax),%edi
- 6b5:	c1 ef 03             	shr    $0x3,%edi
- 6b8:	83 c7 01             	add    $0x1,%edi
+ 692:	8d 78 07             	lea    0x7(%eax),%edi
+ 695:	c1 ef 03             	shr    $0x3,%edi
+ 698:	83 c7 01             	add    $0x1,%edi
   if((prevp = freep) == 0){
- 6bb:	85 d2                	test   %edx,%edx
- 6bd:	0f 84 9d 00 00 00    	je     760 <malloc+0xc0>
- 6c3:	8b 02                	mov    (%edx),%eax
- 6c5:	8b 48 04             	mov    0x4(%eax),%ecx
+ 69b:	85 d2                	test   %edx,%edx
+ 69d:	0f 84 9d 00 00 00    	je     740 <malloc+0xc0>
+ 6a3:	8b 02                	mov    (%edx),%eax
+ 6a5:	8b 48 04             	mov    0x4(%eax),%ecx
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
     if(p->s.size >= nunits){
- 6c8:	39 cf                	cmp    %ecx,%edi
- 6ca:	76 6c                	jbe    738 <malloc+0x98>
- 6cc:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
- 6d2:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 6d7:	0f 43 df             	cmovae %edi,%ebx
+ 6a8:	39 cf                	cmp    %ecx,%edi
+ 6aa:	76 6c                	jbe    718 <malloc+0x98>
+ 6ac:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 6b2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6b7:	0f 43 df             	cmovae %edi,%ebx
   p = sbrk(nu * sizeof(Header));
- 6da:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
- 6e1:	eb 0e                	jmp    6f1 <malloc+0x51>
- 6e3:	90                   	nop
- 6e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6ba:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 6c1:	eb 0e                	jmp    6d1 <malloc+0x51>
+ 6c3:	90                   	nop
+ 6c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6e8:	8b 02                	mov    (%edx),%eax
+ 6c8:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 6ea:	8b 48 04             	mov    0x4(%eax),%ecx
- 6ed:	39 f9                	cmp    %edi,%ecx
- 6ef:	73 47                	jae    738 <malloc+0x98>
+ 6ca:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6cd:	39 f9                	cmp    %edi,%ecx
+ 6cf:	73 47                	jae    718 <malloc+0x98>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 6f1:	39 05 7c 0a 00 00    	cmp    %eax,0xa7c
- 6f7:	89 c2                	mov    %eax,%edx
- 6f9:	75 ed                	jne    6e8 <malloc+0x48>
+ 6d1:	39 05 5c 0a 00 00    	cmp    %eax,0xa5c
+ 6d7:	89 c2                	mov    %eax,%edx
+ 6d9:	75 ed                	jne    6c8 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 6fb:	83 ec 0c             	sub    $0xc,%esp
- 6fe:	56                   	push   %esi
- 6ff:	e8 56 fc ff ff       	call   35a <sbrk>
+ 6db:	83 ec 0c             	sub    $0xc,%esp
+ 6de:	56                   	push   %esi
+ 6df:	e8 76 fc ff ff       	call   35a <sbrk>
   if(p == (char*)-1)
- 704:	83 c4 10             	add    $0x10,%esp
- 707:	83 f8 ff             	cmp    $0xffffffff,%eax
- 70a:	74 1c                	je     728 <malloc+0x88>
+ 6e4:	83 c4 10             	add    $0x10,%esp
+ 6e7:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6ea:	74 1c                	je     708 <malloc+0x88>
   hp->s.size = nu;
- 70c:	89 58 04             	mov    %ebx,0x4(%eax)
+ 6ec:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 70f:	83 ec 0c             	sub    $0xc,%esp
- 712:	83 c0 08             	add    $0x8,%eax
- 715:	50                   	push   %eax
- 716:	e8 f5 fe ff ff       	call   610 <free>
+ 6ef:	83 ec 0c             	sub    $0xc,%esp
+ 6f2:	83 c0 08             	add    $0x8,%eax
+ 6f5:	50                   	push   %eax
+ 6f6:	e8 f5 fe ff ff       	call   5f0 <free>
   return freep;
- 71b:	8b 15 7c 0a 00 00    	mov    0xa7c,%edx
+ 6fb:	8b 15 5c 0a 00 00    	mov    0xa5c,%edx
       if((p = morecore(nunits)) == 0)
- 721:	83 c4 10             	add    $0x10,%esp
- 724:	85 d2                	test   %edx,%edx
- 726:	75 c0                	jne    6e8 <malloc+0x48>
+ 701:	83 c4 10             	add    $0x10,%esp
+ 704:	85 d2                	test   %edx,%edx
+ 706:	75 c0                	jne    6c8 <malloc+0x48>
         return 0;
   }
 }
- 728:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 708:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 72b:	31 c0                	xor    %eax,%eax
+ 70b:	31 c0                	xor    %eax,%eax
 }
- 72d:	5b                   	pop    %ebx
- 72e:	5e                   	pop    %esi
- 72f:	5f                   	pop    %edi
- 730:	5d                   	pop    %ebp
- 731:	c3                   	ret    
- 732:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 70d:	5b                   	pop    %ebx
+ 70e:	5e                   	pop    %esi
+ 70f:	5f                   	pop    %edi
+ 710:	5d                   	pop    %ebp
+ 711:	c3                   	ret    
+ 712:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 738:	39 cf                	cmp    %ecx,%edi
- 73a:	74 54                	je     790 <malloc+0xf0>
+ 718:	39 cf                	cmp    %ecx,%edi
+ 71a:	74 54                	je     770 <malloc+0xf0>
         p->s.size -= nunits;
- 73c:	29 f9                	sub    %edi,%ecx
- 73e:	89 48 04             	mov    %ecx,0x4(%eax)
+ 71c:	29 f9                	sub    %edi,%ecx
+ 71e:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 741:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ 721:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 744:	89 78 04             	mov    %edi,0x4(%eax)
+ 724:	89 78 04             	mov    %edi,0x4(%eax)
       freep = prevp;
- 747:	89 15 7c 0a 00 00    	mov    %edx,0xa7c
+ 727:	89 15 5c 0a 00 00    	mov    %edx,0xa5c
 }
- 74d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 72d:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 750:	83 c0 08             	add    $0x8,%eax
+ 730:	83 c0 08             	add    $0x8,%eax
 }
- 753:	5b                   	pop    %ebx
- 754:	5e                   	pop    %esi
- 755:	5f                   	pop    %edi
- 756:	5d                   	pop    %ebp
- 757:	c3                   	ret    
- 758:	90                   	nop
- 759:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 733:	5b                   	pop    %ebx
+ 734:	5e                   	pop    %esi
+ 735:	5f                   	pop    %edi
+ 736:	5d                   	pop    %ebp
+ 737:	c3                   	ret    
+ 738:	90                   	nop
+ 739:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     base.s.ptr = freep = prevp = &base;
- 760:	c7 05 7c 0a 00 00 80 	movl   $0xa80,0xa7c
- 767:	0a 00 00 
- 76a:	c7 05 80 0a 00 00 80 	movl   $0xa80,0xa80
- 771:	0a 00 00 
+ 740:	c7 05 5c 0a 00 00 60 	movl   $0xa60,0xa5c
+ 747:	0a 00 00 
+ 74a:	c7 05 60 0a 00 00 60 	movl   $0xa60,0xa60
+ 751:	0a 00 00 
     base.s.size = 0;
- 774:	b8 80 0a 00 00       	mov    $0xa80,%eax
- 779:	c7 05 84 0a 00 00 00 	movl   $0x0,0xa84
- 780:	00 00 00 
- 783:	e9 44 ff ff ff       	jmp    6cc <malloc+0x2c>
- 788:	90                   	nop
- 789:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 754:	b8 60 0a 00 00       	mov    $0xa60,%eax
+ 759:	c7 05 64 0a 00 00 00 	movl   $0x0,0xa64
+ 760:	00 00 00 
+ 763:	e9 44 ff ff ff       	jmp    6ac <malloc+0x2c>
+ 768:	90                   	nop
+ 769:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         prevp->s.ptr = p->s.ptr;
- 790:	8b 08                	mov    (%eax),%ecx
- 792:	89 0a                	mov    %ecx,(%edx)
- 794:	eb b1                	jmp    747 <malloc+0xa7>
+ 770:	8b 08                	mov    (%eax),%ecx
+ 772:	89 0a                	mov    %ecx,(%edx)
+ 774:	eb b1                	jmp    727 <malloc+0xa7>
Binary files main/rm.o and xv6-public/rm.o differ
diff -urN main/rm.sym xv6-public/rm.sym
--- main/rm.sym	2022-09-26 21:21:16.616586000 +0530
+++ xv6-public/rm.sym	2022-10-31 22:34:17.153964893 +0530
@@ -1,7 +1,7 @@
 00000000 .text
-00000798 .rodata
-000007e0 .eh_frame
-00000a7c .bss
+00000778 .rodata
+000007c0 .eh_frame
+00000a5c .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,19 +13,18 @@
 00000000 rm.c
 00000000 ulib.c
 00000000 printf.c
-000003a0 printint
-000007cc digits.1050
+00000380 printint
+000007ac digits.1044
 00000000 umalloc.c
-00000a7c freep
-00000a80 base
+00000a5c freep
+00000a60 base
 00000080 strcpy
-00000440 printf
-00000382 thread_exit
+00000420 printf
 000002a0 memmove
 0000031a mknod
 00000190 gets
 00000352 getpid
-000006a0 malloc
+00000680 malloc
 00000362 sleep
 000002e2 pipe
 000002f2 write
@@ -39,23 +38,21 @@
 000002ca fork
 0000035a sbrk
 0000036a uptime
-00000a7c __bss_start
+00000a5c __bss_start
 00000130 memset
 00000000 main
 000000b0 strcmp
 0000034a dup
 00000210 stat
-00000a7c _edata
-00000a88 _end
+00000a5c _edata
+00000a68 _end
 00000332 link
 000002d2 exit
 00000260 atoi
-0000038a draw
+00000372 draw
 00000100 strlen
 00000312 open
 00000150 strchr
-00000372 thread_create
 0000033a mkdir
 000002fa close
-0000037a thread_join
-00000610 free
+000005f0 free
Binary files main/_sh and xv6-public/_sh differ
diff -urN main/sh.asm xv6-public/sh.asm
--- main/sh.asm	2022-09-26 21:21:16.988772000 +0530
+++ xv6-public/sh.asm	2022-10-31 22:34:17.398086906 +0530
@@ -32,7 +32,7 @@
   while((fd = open("console", O_RDWR)) >= 0){
       1d:	83 ec 08             	sub    $0x8,%esp
       20:	6a 02                	push   $0x2
-      22:	68 79 12 00 00       	push   $0x1279
+      22:	68 59 12 00 00       	push   $0x1259
       27:	e8 26 0d 00 00       	call   d52 <open>
       2c:	83 c4 10             	add    $0x10,%esp
       2f:	85 c0                	test   %eax,%eax
@@ -45,7 +45,7 @@
   // Read and run input commands.
   while(getcmd(buf, sizeof(buf)) >= 0){
     if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
-      38:	80 3d a2 18 00 00 20 	cmpb   $0x20,0x18a2
+      38:	80 3d 82 18 00 00 20 	cmpb   $0x20,0x1882
       3f:	74 7a                	je     bb <main+0xbb>
 int
 fork1(void)
@@ -65,15 +65,15 @@
   while(getcmd(buf, sizeof(buf)) >= 0){
       54:	83 ec 08             	sub    $0x8,%esp
       57:	6a 64                	push   $0x64
-      59:	68 a0 18 00 00       	push   $0x18a0
+      59:	68 80 18 00 00       	push   $0x1880
       5e:	e8 9d 00 00 00       	call   100 <getcmd>
       63:	83 c4 10             	add    $0x10,%esp
       66:	85 c0                	test   %eax,%eax
       68:	78 37                	js     a1 <main+0xa1>
     if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
-      6a:	80 3d a0 18 00 00 63 	cmpb   $0x63,0x18a0
+      6a:	80 3d 80 18 00 00 63 	cmpb   $0x63,0x1880
       71:	75 ce                	jne    41 <main+0x41>
-      73:	80 3d a1 18 00 00 64 	cmpb   $0x64,0x18a1
+      73:	80 3d 81 18 00 00 64 	cmpb   $0x64,0x1881
       7a:	74 bc                	je     38 <main+0x38>
   pid = fork();
       7c:	e8 89 0c 00 00       	call   d0a <fork>
@@ -82,7 +82,7 @@
       84:	75 c5                	jne    4b <main+0x4b>
     panic("fork");
       86:	83 ec 0c             	sub    $0xc,%esp
-      89:	68 02 12 00 00       	push   $0x1202
+      89:	68 e2 11 00 00       	push   $0x11e2
       8e:	e8 bd 00 00 00       	call   150 <panic>
       close(fd);
       93:	83 ec 0c             	sub    $0xc,%esp
@@ -95,18 +95,18 @@
       a1:	e8 6c 0c 00 00       	call   d12 <exit>
       runcmd(parsecmd(buf));
       a6:	83 ec 0c             	sub    $0xc,%esp
-      a9:	68 a0 18 00 00       	push   $0x18a0
+      a9:	68 80 18 00 00       	push   $0x1880
       ae:	e8 9d 09 00 00       	call   a50 <parsecmd>
       b3:	89 04 24             	mov    %eax,(%esp)
       b6:	e8 b5 00 00 00       	call   170 <runcmd>
       buf[strlen(buf)-1] = 0;  // chop \n
       bb:	83 ec 0c             	sub    $0xc,%esp
-      be:	68 a0 18 00 00       	push   $0x18a0
+      be:	68 80 18 00 00       	push   $0x1880
       c3:	e8 78 0a 00 00       	call   b40 <strlen>
       if(chdir(buf+3) < 0)
-      c8:	c7 04 24 a3 18 00 00 	movl   $0x18a3,(%esp)
+      c8:	c7 04 24 83 18 00 00 	movl   $0x1883,(%esp)
       buf[strlen(buf)-1] = 0;  // chop \n
-      cf:	c6 80 9f 18 00 00 00 	movb   $0x0,0x189f(%eax)
+      cf:	c6 80 7f 18 00 00 00 	movb   $0x0,0x187f(%eax)
       if(chdir(buf+3) < 0)
       d6:	e8 a7 0c 00 00       	call   d82 <chdir>
       db:	83 c4 10             	add    $0x10,%esp
@@ -114,10 +114,10 @@
       e0:	0f 89 6e ff ff ff    	jns    54 <main+0x54>
         printf(2, "cannot cd %s\n", buf+3);
       e6:	50                   	push   %eax
-      e7:	68 a3 18 00 00       	push   $0x18a3
-      ec:	68 81 12 00 00       	push   $0x1281
+      e7:	68 83 18 00 00       	push   $0x1883
+      ec:	68 61 12 00 00       	push   $0x1261
       f1:	6a 02                	push   $0x2
-      f3:	e8 88 0d 00 00       	call   e80 <printf>
+      f3:	e8 68 0d 00 00       	call   e60 <printf>
       f8:	83 c4 10             	add    $0x10,%esp
       fb:	e9 54 ff ff ff       	jmp    54 <main+0x54>
 
@@ -131,9 +131,9 @@
      108:	8b 5d 08             	mov    0x8(%ebp),%ebx
   printf(2, "$ ");
      10b:	83 ec 08             	sub    $0x8,%esp
-     10e:	68 d8 11 00 00       	push   $0x11d8
+     10e:	68 b8 11 00 00       	push   $0x11b8
      113:	6a 02                	push   $0x2
-     115:	e8 66 0d 00 00       	call   e80 <printf>
+     115:	e8 46 0d 00 00       	call   e60 <printf>
   memset(buf, 0, nbuf);
      11a:	83 c4 0c             	add    $0xc,%esp
      11d:	56                   	push   %esi
@@ -170,9 +170,9 @@
      153:	83 ec 0c             	sub    $0xc,%esp
   printf(2, "%s\n", s);
      156:	ff 75 08             	pushl  0x8(%ebp)
-     159:	68 75 12 00 00       	push   $0x1275
+     159:	68 55 12 00 00       	push   $0x1255
      15e:	6a 02                	push   $0x2
-     160:	e8 1b 0d 00 00       	call   e80 <printf>
+     160:	e8 fb 0c 00 00       	call   e60 <printf>
   exit();
      165:	e8 a8 0b 00 00       	call   d12 <exit>
      16a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -191,7 +191,7 @@
      17e:	83 3b 05             	cmpl   $0x5,(%ebx)
      181:	0f 87 06 01 00 00    	ja     28d <runcmd+0x11d>
      187:	8b 03                	mov    (%ebx),%eax
-     189:	ff 24 85 90 12 00 00 	jmp    *0x1290(,%eax,4)
+     189:	ff 24 85 70 12 00 00 	jmp    *0x1270(,%eax,4)
     if(ecmd->argv[0] == 0)
      190:	8b 43 04             	mov    0x4(%ebx),%eax
      193:	85 c0                	test   %eax,%eax
@@ -206,9 +206,9 @@
     printf(2, "exec %s failed\n", ecmd->argv[0]);
      1a3:	83 c4 0c             	add    $0xc,%esp
      1a6:	ff 73 04             	pushl  0x4(%ebx)
-     1a9:	68 e2 11 00 00       	push   $0x11e2
+     1a9:	68 c2 11 00 00       	push   $0x11c2
      1ae:	6a 02                	push   $0x2
-     1b0:	e8 cb 0c 00 00       	call   e80 <printf>
+     1b0:	e8 ab 0c 00 00       	call   e60 <printf>
     break;
      1b5:	83 c4 10             	add    $0x10,%esp
     exit();
@@ -241,9 +241,9 @@
       printf(2, "open %s failed\n", rcmd->file);
      1f9:	52                   	push   %edx
      1fa:	ff 73 08             	pushl  0x8(%ebx)
-     1fd:	68 f2 11 00 00       	push   $0x11f2
+     1fd:	68 d2 11 00 00       	push   $0x11d2
      202:	6a 02                	push   $0x2
-     204:	e8 77 0c 00 00       	call   e80 <printf>
+     204:	e8 57 0c 00 00       	call   e60 <printf>
       exit();
      209:	e8 04 0b 00 00       	call   d12 <exit>
     if(pipe(p) < 0)
@@ -301,11 +301,11 @@
      288:	e8 e3 fe ff ff       	call   170 <runcmd>
     panic("runcmd");
      28d:	83 ec 0c             	sub    $0xc,%esp
-     290:	68 db 11 00 00       	push   $0x11db
+     290:	68 bb 11 00 00       	push   $0x11bb
      295:	e8 b6 fe ff ff       	call   150 <panic>
     panic("fork");
      29a:	83 ec 0c             	sub    $0xc,%esp
-     29d:	68 02 12 00 00       	push   $0x1202
+     29d:	68 e2 11 00 00       	push   $0x11e2
      2a2:	e8 a9 fe ff ff       	call   150 <panic>
       close(0);
      2a7:	83 ec 0c             	sub    $0xc,%esp
@@ -329,7 +329,7 @@
      2d0:	e8 9b fe ff ff       	call   170 <runcmd>
       panic("pipe");
      2d5:	83 ec 0c             	sub    $0xc,%esp
-     2d8:	68 07 12 00 00       	push   $0x1207
+     2d8:	68 e7 11 00 00       	push   $0x11e7
      2dd:	e8 6e fe ff ff       	call   150 <panic>
       close(1);
      2e2:	83 ec 0c             	sub    $0xc,%esp
@@ -368,7 +368,7 @@
      321:	c3                   	ret    
     panic("fork");
      322:	83 ec 0c             	sub    $0xc,%esp
-     325:	68 02 12 00 00       	push   $0x1202
+     325:	68 e2 11 00 00       	push   $0x11e2
      32a:	e8 21 fe ff ff       	call   150 <panic>
      32f:	90                   	nop
 
@@ -387,7 +387,7 @@
 
   cmd = malloc(sizeof(*cmd));
      337:	6a 54                	push   $0x54
-     339:	e8 a2 0d 00 00       	call   10e0 <malloc>
+     339:	e8 82 0d 00 00       	call   10c0 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      33e:	83 c4 0c             	add    $0xc,%esp
   cmd = malloc(sizeof(*cmd));
@@ -420,7 +420,7 @@
 
   cmd = malloc(sizeof(*cmd));
      367:	6a 18                	push   $0x18
-     369:	e8 72 0d 00 00       	call   10e0 <malloc>
+     369:	e8 52 0d 00 00       	call   10c0 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      36e:	83 c4 0c             	add    $0xc,%esp
   cmd = malloc(sizeof(*cmd));
@@ -471,7 +471,7 @@
 
   cmd = malloc(sizeof(*cmd));
      3b7:	6a 0c                	push   $0xc
-     3b9:	e8 22 0d 00 00       	call   10e0 <malloc>
+     3b9:	e8 02 0d 00 00       	call   10c0 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      3be:	83 c4 0c             	add    $0xc,%esp
   cmd = malloc(sizeof(*cmd));
@@ -513,7 +513,7 @@
 
   cmd = malloc(sizeof(*cmd));
      3f7:	6a 0c                	push   $0xc
-     3f9:	e8 e2 0c 00 00       	call   10e0 <malloc>
+     3f9:	e8 c2 0c 00 00       	call   10c0 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      3fe:	83 c4 0c             	add    $0xc,%esp
   cmd = malloc(sizeof(*cmd));
@@ -555,7 +555,7 @@
 
   cmd = malloc(sizeof(*cmd));
      437:	6a 08                	push   $0x8
-     439:	e8 a2 0c 00 00       	call   10e0 <malloc>
+     439:	e8 82 0c 00 00       	call   10c0 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      43e:	83 c4 0c             	add    $0xc,%esp
   cmd = malloc(sizeof(*cmd));
@@ -615,7 +615,7 @@
      487:	0f be 06             	movsbl (%esi),%eax
      48a:	83 ec 08             	sub    $0x8,%esp
      48d:	50                   	push   %eax
-     48e:	68 8c 18 00 00       	push   $0x188c
+     48e:	68 6c 18 00 00       	push   $0x186c
      493:	e8 f8 06 00 00       	call   b90 <strchr>
      498:	83 c4 10             	add    $0x10,%esp
      49b:	85 c0                	test   %eax,%eax
@@ -660,7 +660,7 @@
      4d7:	0f be 06             	movsbl (%esi),%eax
      4da:	83 ec 08             	sub    $0x8,%esp
      4dd:	50                   	push   %eax
-     4de:	68 8c 18 00 00       	push   $0x188c
+     4de:	68 6c 18 00 00       	push   $0x186c
      4e3:	e8 a8 06 00 00       	call   b90 <strchr>
      4e8:	83 c4 10             	add    $0x10,%esp
      4eb:	85 c0                	test   %eax,%eax
@@ -704,7 +704,7 @@
      530:	0f be 06             	movsbl (%esi),%eax
      533:	83 ec 08             	sub    $0x8,%esp
      536:	50                   	push   %eax
-     537:	68 84 18 00 00       	push   $0x1884
+     537:	68 64 18 00 00       	push   $0x1864
      53c:	e8 4f 06 00 00       	call   b90 <strchr>
      541:	83 c4 10             	add    $0x10,%esp
      544:	85 c0                	test   %eax,%eax
@@ -717,7 +717,7 @@
      54f:	0f be 06             	movsbl (%esi),%eax
      552:	83 ec 08             	sub    $0x8,%esp
      555:	50                   	push   %eax
-     556:	68 8c 18 00 00       	push   $0x188c
+     556:	68 6c 18 00 00       	push   $0x186c
      55b:	e8 30 06 00 00       	call   b90 <strchr>
      560:	83 c4 10             	add    $0x10,%esp
      563:	85 c0                	test   %eax,%eax
@@ -788,7 +788,7 @@
      5f7:	0f be 03             	movsbl (%ebx),%eax
      5fa:	83 ec 08             	sub    $0x8,%esp
      5fd:	50                   	push   %eax
-     5fe:	68 8c 18 00 00       	push   $0x188c
+     5fe:	68 6c 18 00 00       	push   $0x186c
      603:	e8 88 05 00 00       	call   b90 <strchr>
      608:	83 c4 10             	add    $0x10,%esp
      60b:	85 c0                	test   %eax,%eax
@@ -838,7 +838,7 @@
 
   while(peek(ps, es, "<>")){
      650:	83 ec 04             	sub    $0x4,%esp
-     653:	68 29 12 00 00       	push   $0x1229
+     653:	68 09 12 00 00       	push   $0x1209
      658:	53                   	push   %ebx
      659:	56                   	push   %esi
      65a:	e8 71 ff ff ff       	call   5d0 <peek>
@@ -910,7 +910,7 @@
      6da:	c3                   	ret    
       panic("missing file for redirection");
      6db:	83 ec 0c             	sub    $0xc,%esp
-     6de:	68 0c 12 00 00       	push   $0x120c
+     6de:	68 ec 11 00 00       	push   $0x11ec
      6e3:	e8 68 fa ff ff       	call   150 <panic>
      6e8:	90                   	nop
      6e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -936,7 +936,7 @@
   struct cmd *ret;
 
   if(peek(ps, es, "("))
-     6ff:	68 2c 12 00 00       	push   $0x122c
+     6ff:	68 0c 12 00 00       	push   $0x120c
      704:	57                   	push   %edi
      705:	56                   	push   %esi
      706:	e8 c5 fe ff ff       	call   5d0 <peek>
@@ -980,7 +980,7 @@
      748:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   while(!peek(ps, es, "|)&;")){
      74b:	83 ec 04             	sub    $0x4,%esp
-     74e:	68 43 12 00 00       	push   $0x1243
+     74e:	68 23 12 00 00       	push   $0x1223
      753:	57                   	push   %edi
      754:	56                   	push   %esi
      755:	e8 76 fe ff ff       	call   5d0 <peek>
@@ -1015,7 +1015,7 @@
      793:	75 a3                	jne    738 <parseexec+0x48>
       panic("too many args");
      795:	83 ec 0c             	sub    $0xc,%esp
-     798:	68 35 12 00 00       	push   $0x1235
+     798:	68 15 12 00 00       	push   $0x1215
      79d:	e8 ae f9 ff ff       	call   150 <panic>
      7a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     return parseblock(ps, es);
@@ -1055,7 +1055,7 @@
      7e6:	c3                   	ret    
       panic("syntax");
      7e7:	83 ec 0c             	sub    $0xc,%esp
-     7ea:	68 2e 12 00 00       	push   $0x122e
+     7ea:	68 0e 12 00 00       	push   $0x120e
      7ef:	e8 5c f9 ff ff       	call   150 <panic>
      7f4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
      7fa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
@@ -1079,7 +1079,7 @@
   cmd = parseexec(ps, es);
      819:	89 c7                	mov    %eax,%edi
   if(peek(ps, es, "|")){
-     81b:	68 48 12 00 00       	push   $0x1248
+     81b:	68 28 12 00 00       	push   $0x1228
      820:	56                   	push   %esi
      821:	53                   	push   %ebx
      822:	e8 a9 fd ff ff       	call   5d0 <peek>
@@ -1155,7 +1155,7 @@
      8a6:	89 c7                	mov    %eax,%edi
   while(peek(ps, es, "&")){
      8a8:	83 ec 04             	sub    $0x4,%esp
-     8ab:	68 4a 12 00 00       	push   $0x124a
+     8ab:	68 2a 12 00 00       	push   $0x122a
      8b0:	56                   	push   %esi
      8b1:	53                   	push   %ebx
      8b2:	e8 19 fd ff ff       	call   5d0 <peek>
@@ -1164,7 +1164,7 @@
      8bc:	75 d2                	jne    890 <parseline+0x20>
   if(peek(ps, es, ";")){
      8be:	83 ec 04             	sub    $0x4,%esp
-     8c1:	68 46 12 00 00       	push   $0x1246
+     8c1:	68 26 12 00 00       	push   $0x1226
      8c6:	56                   	push   %esi
      8c7:	53                   	push   %ebx
      8c8:	e8 03 fd ff ff       	call   5d0 <peek>
@@ -1216,7 +1216,7 @@
      919:	8b 5d 08             	mov    0x8(%ebp),%ebx
      91c:	8b 75 0c             	mov    0xc(%ebp),%esi
   if(!peek(ps, es, "("))
-     91f:	68 2c 12 00 00       	push   $0x122c
+     91f:	68 0c 12 00 00       	push   $0x120c
      924:	56                   	push   %esi
      925:	53                   	push   %ebx
      926:	e8 a5 fc ff ff       	call   5d0 <peek>
@@ -1240,7 +1240,7 @@
   cmd = parseline(ps, es);
      949:	89 c7                	mov    %eax,%edi
   if(!peek(ps, es, ")"))
-     94b:	68 68 12 00 00       	push   $0x1268
+     94b:	68 48 12 00 00       	push   $0x1248
      950:	56                   	push   %esi
      951:	53                   	push   %ebx
      952:	e8 79 fc ff ff       	call   5d0 <peek>
@@ -1268,11 +1268,11 @@
      97b:	c3                   	ret    
     panic("parseblock");
      97c:	83 ec 0c             	sub    $0xc,%esp
-     97f:	68 4c 12 00 00       	push   $0x124c
+     97f:	68 2c 12 00 00       	push   $0x122c
      984:	e8 c7 f7 ff ff       	call   150 <panic>
     panic("syntax - missing )");
      989:	83 ec 0c             	sub    $0xc,%esp
-     98c:	68 57 12 00 00       	push   $0x1257
+     98c:	68 37 12 00 00       	push   $0x1237
      991:	e8 ba f7 ff ff       	call   150 <panic>
      996:	8d 76 00             	lea    0x0(%esi),%esi
      999:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
@@ -1302,7 +1302,7 @@
      9ae:	83 3b 05             	cmpl   $0x5,(%ebx)
      9b1:	77 1b                	ja     9ce <nulterminate+0x2e>
      9b3:	8b 03                	mov    (%ebx),%eax
-     9b5:	ff 24 85 a8 12 00 00 	jmp    *0x12a8(,%eax,4)
+     9b5:	ff 24 85 88 12 00 00 	jmp    *0x1288(,%eax,4)
      9bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     nulterminate(lcmd->right);
     break;
@@ -1405,7 +1405,7 @@
   peek(&s, es, "");
      a71:	8d 45 08             	lea    0x8(%ebp),%eax
      a74:	83 c4 0c             	add    $0xc,%esp
-     a77:	68 f1 11 00 00       	push   $0x11f1
+     a77:	68 d1 11 00 00       	push   $0x11d1
      a7c:	53                   	push   %ebx
      a7d:	50                   	push   %eax
      a7e:	e8 4d fb ff ff       	call   5d0 <peek>
@@ -1428,11 +1428,11 @@
     printf(2, "leftovers: %s\n", s);
      a9f:	52                   	push   %edx
      aa0:	50                   	push   %eax
-     aa1:	68 6a 12 00 00       	push   $0x126a
+     aa1:	68 4a 12 00 00       	push   $0x124a
      aa6:	6a 02                	push   $0x2
-     aa8:	e8 d3 03 00 00       	call   e80 <printf>
+     aa8:	e8 b3 03 00 00       	call   e60 <printf>
     panic("syntax");
-     aad:	c7 04 24 2e 12 00 00 	movl   $0x122e,(%esp)
+     aad:	c7 04 24 0e 12 00 00 	movl   $0x120e,(%esp)
      ab4:	e8 97 f6 ff ff       	call   150 <panic>
      ab9:	66 90                	xchg   %ax,%ax
      abb:	66 90                	xchg   %ax,%ax
@@ -1957,614 +1957,593 @@
      daf:	cd 40                	int    $0x40
      db1:	c3                   	ret    
 
-00000db2 <thread_create>:
-SYSCALL(thread_create)
+00000db2 <draw>:
+SYSCALL(draw)
      db2:	b8 16 00 00 00       	mov    $0x16,%eax
      db7:	cd 40                	int    $0x40
      db9:	c3                   	ret    
+     dba:	66 90                	xchg   %ax,%ax
+     dbc:	66 90                	xchg   %ax,%ax
+     dbe:	66 90                	xchg   %ax,%ax
 
-00000dba <thread_join>:
-SYSCALL(thread_join)
-     dba:	b8 18 00 00 00       	mov    $0x18,%eax
-     dbf:	cd 40                	int    $0x40
-     dc1:	c3                   	ret    
-
-00000dc2 <thread_exit>:
-SYSCALL(thread_exit)
-     dc2:	b8 17 00 00 00       	mov    $0x17,%eax
-     dc7:	cd 40                	int    $0x40
-     dc9:	c3                   	ret    
-
-00000dca <draw>:
-     dca:	b8 19 00 00 00       	mov    $0x19,%eax
-     dcf:	cd 40                	int    $0x40
-     dd1:	c3                   	ret    
-     dd2:	66 90                	xchg   %ax,%ax
-     dd4:	66 90                	xchg   %ax,%ax
-     dd6:	66 90                	xchg   %ax,%ax
-     dd8:	66 90                	xchg   %ax,%ax
-     dda:	66 90                	xchg   %ax,%ax
-     ddc:	66 90                	xchg   %ax,%ax
-     dde:	66 90                	xchg   %ax,%ax
-
-00000de0 <printint>:
+00000dc0 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
-     de0:	55                   	push   %ebp
-     de1:	89 e5                	mov    %esp,%ebp
-     de3:	57                   	push   %edi
-     de4:	56                   	push   %esi
-     de5:	53                   	push   %ebx
-     de6:	83 ec 3c             	sub    $0x3c,%esp
+     dc0:	55                   	push   %ebp
+     dc1:	89 e5                	mov    %esp,%ebp
+     dc3:	57                   	push   %edi
+     dc4:	56                   	push   %esi
+     dc5:	53                   	push   %ebx
+     dc6:	83 ec 3c             	sub    $0x3c,%esp
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
-     de9:	85 d2                	test   %edx,%edx
+     dc9:	85 d2                	test   %edx,%edx
 {
-     deb:	89 45 c0             	mov    %eax,-0x40(%ebp)
+     dcb:	89 45 c0             	mov    %eax,-0x40(%ebp)
     neg = 1;
     x = -xx;
-     dee:	89 d0                	mov    %edx,%eax
+     dce:	89 d0                	mov    %edx,%eax
   if(sgn && xx < 0){
-     df0:	79 76                	jns    e68 <printint+0x88>
-     df2:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
-     df6:	74 70                	je     e68 <printint+0x88>
+     dd0:	79 76                	jns    e48 <printint+0x88>
+     dd2:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+     dd6:	74 70                	je     e48 <printint+0x88>
     x = -xx;
-     df8:	f7 d8                	neg    %eax
+     dd8:	f7 d8                	neg    %eax
     neg = 1;
-     dfa:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+     dda:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
   } else {
     x = xx;
   }
 
   i = 0;
-     e01:	31 f6                	xor    %esi,%esi
-     e03:	8d 5d d7             	lea    -0x29(%ebp),%ebx
-     e06:	eb 0a                	jmp    e12 <printint+0x32>
-     e08:	90                   	nop
-     e09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     de1:	31 f6                	xor    %esi,%esi
+     de3:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+     de6:	eb 0a                	jmp    df2 <printint+0x32>
+     de8:	90                   	nop
+     de9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   do{
     buf[i++] = digits[x % base];
-     e10:	89 fe                	mov    %edi,%esi
-     e12:	31 d2                	xor    %edx,%edx
-     e14:	8d 7e 01             	lea    0x1(%esi),%edi
-     e17:	f7 f1                	div    %ecx
-     e19:	0f b6 92 c8 12 00 00 	movzbl 0x12c8(%edx),%edx
+     df0:	89 fe                	mov    %edi,%esi
+     df2:	31 d2                	xor    %edx,%edx
+     df4:	8d 7e 01             	lea    0x1(%esi),%edi
+     df7:	f7 f1                	div    %ecx
+     df9:	0f b6 92 a8 12 00 00 	movzbl 0x12a8(%edx),%edx
   }while((x /= base) != 0);
-     e20:	85 c0                	test   %eax,%eax
+     e00:	85 c0                	test   %eax,%eax
     buf[i++] = digits[x % base];
-     e22:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+     e02:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
   }while((x /= base) != 0);
-     e25:	75 e9                	jne    e10 <printint+0x30>
+     e05:	75 e9                	jne    df0 <printint+0x30>
   if(neg)
-     e27:	8b 45 c4             	mov    -0x3c(%ebp),%eax
-     e2a:	85 c0                	test   %eax,%eax
-     e2c:	74 08                	je     e36 <printint+0x56>
+     e07:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+     e0a:	85 c0                	test   %eax,%eax
+     e0c:	74 08                	je     e16 <printint+0x56>
     buf[i++] = '-';
-     e2e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
-     e33:	8d 7e 02             	lea    0x2(%esi),%edi
-     e36:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
-     e3a:	8b 7d c0             	mov    -0x40(%ebp),%edi
-     e3d:	8d 76 00             	lea    0x0(%esi),%esi
-     e40:	0f b6 06             	movzbl (%esi),%eax
+     e0e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+     e13:	8d 7e 02             	lea    0x2(%esi),%edi
+     e16:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+     e1a:	8b 7d c0             	mov    -0x40(%ebp),%edi
+     e1d:	8d 76 00             	lea    0x0(%esi),%esi
+     e20:	0f b6 06             	movzbl (%esi),%eax
   write(fd, &c, 1);
-     e43:	83 ec 04             	sub    $0x4,%esp
-     e46:	83 ee 01             	sub    $0x1,%esi
-     e49:	6a 01                	push   $0x1
-     e4b:	53                   	push   %ebx
-     e4c:	57                   	push   %edi
-     e4d:	88 45 d7             	mov    %al,-0x29(%ebp)
-     e50:	e8 dd fe ff ff       	call   d32 <write>
+     e23:	83 ec 04             	sub    $0x4,%esp
+     e26:	83 ee 01             	sub    $0x1,%esi
+     e29:	6a 01                	push   $0x1
+     e2b:	53                   	push   %ebx
+     e2c:	57                   	push   %edi
+     e2d:	88 45 d7             	mov    %al,-0x29(%ebp)
+     e30:	e8 fd fe ff ff       	call   d32 <write>
 
   while(--i >= 0)
-     e55:	83 c4 10             	add    $0x10,%esp
-     e58:	39 de                	cmp    %ebx,%esi
-     e5a:	75 e4                	jne    e40 <printint+0x60>
+     e35:	83 c4 10             	add    $0x10,%esp
+     e38:	39 de                	cmp    %ebx,%esi
+     e3a:	75 e4                	jne    e20 <printint+0x60>
     putc(fd, buf[i]);
 }
-     e5c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     e5f:	5b                   	pop    %ebx
-     e60:	5e                   	pop    %esi
-     e61:	5f                   	pop    %edi
-     e62:	5d                   	pop    %ebp
-     e63:	c3                   	ret    
-     e64:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     e3c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     e3f:	5b                   	pop    %ebx
+     e40:	5e                   	pop    %esi
+     e41:	5f                   	pop    %edi
+     e42:	5d                   	pop    %ebp
+     e43:	c3                   	ret    
+     e44:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
-     e68:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
-     e6f:	eb 90                	jmp    e01 <printint+0x21>
-     e71:	eb 0d                	jmp    e80 <printf>
-     e73:	90                   	nop
-     e74:	90                   	nop
-     e75:	90                   	nop
-     e76:	90                   	nop
-     e77:	90                   	nop
-     e78:	90                   	nop
-     e79:	90                   	nop
-     e7a:	90                   	nop
-     e7b:	90                   	nop
-     e7c:	90                   	nop
-     e7d:	90                   	nop
-     e7e:	90                   	nop
-     e7f:	90                   	nop
+     e48:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+     e4f:	eb 90                	jmp    de1 <printint+0x21>
+     e51:	eb 0d                	jmp    e60 <printf>
+     e53:	90                   	nop
+     e54:	90                   	nop
+     e55:	90                   	nop
+     e56:	90                   	nop
+     e57:	90                   	nop
+     e58:	90                   	nop
+     e59:	90                   	nop
+     e5a:	90                   	nop
+     e5b:	90                   	nop
+     e5c:	90                   	nop
+     e5d:	90                   	nop
+     e5e:	90                   	nop
+     e5f:	90                   	nop
 
-00000e80 <printf>:
+00000e60 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
-     e80:	55                   	push   %ebp
-     e81:	89 e5                	mov    %esp,%ebp
-     e83:	57                   	push   %edi
-     e84:	56                   	push   %esi
-     e85:	53                   	push   %ebx
-     e86:	83 ec 2c             	sub    $0x2c,%esp
+     e60:	55                   	push   %ebp
+     e61:	89 e5                	mov    %esp,%ebp
+     e63:	57                   	push   %edi
+     e64:	56                   	push   %esi
+     e65:	53                   	push   %ebx
+     e66:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
-     e89:	8b 75 0c             	mov    0xc(%ebp),%esi
-     e8c:	0f b6 1e             	movzbl (%esi),%ebx
-     e8f:	84 db                	test   %bl,%bl
-     e91:	0f 84 b3 00 00 00    	je     f4a <printf+0xca>
+     e69:	8b 75 0c             	mov    0xc(%ebp),%esi
+     e6c:	0f b6 1e             	movzbl (%esi),%ebx
+     e6f:	84 db                	test   %bl,%bl
+     e71:	0f 84 b3 00 00 00    	je     f2a <printf+0xca>
   ap = (uint*)(void*)&fmt + 1;
-     e97:	8d 45 10             	lea    0x10(%ebp),%eax
-     e9a:	83 c6 01             	add    $0x1,%esi
+     e77:	8d 45 10             	lea    0x10(%ebp),%eax
+     e7a:	83 c6 01             	add    $0x1,%esi
   state = 0;
-     e9d:	31 ff                	xor    %edi,%edi
+     e7d:	31 ff                	xor    %edi,%edi
   ap = (uint*)(void*)&fmt + 1;
-     e9f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
-     ea2:	eb 2f                	jmp    ed3 <printf+0x53>
-     ea4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     e7f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+     e82:	eb 2f                	jmp    eb3 <printf+0x53>
+     e84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
-     ea8:	83 f8 25             	cmp    $0x25,%eax
-     eab:	0f 84 a7 00 00 00    	je     f58 <printf+0xd8>
+     e88:	83 f8 25             	cmp    $0x25,%eax
+     e8b:	0f 84 a7 00 00 00    	je     f38 <printf+0xd8>
   write(fd, &c, 1);
-     eb1:	8d 45 e2             	lea    -0x1e(%ebp),%eax
-     eb4:	83 ec 04             	sub    $0x4,%esp
-     eb7:	88 5d e2             	mov    %bl,-0x1e(%ebp)
-     eba:	6a 01                	push   $0x1
-     ebc:	50                   	push   %eax
-     ebd:	ff 75 08             	pushl  0x8(%ebp)
-     ec0:	e8 6d fe ff ff       	call   d32 <write>
-     ec5:	83 c4 10             	add    $0x10,%esp
-     ec8:	83 c6 01             	add    $0x1,%esi
+     e91:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+     e94:	83 ec 04             	sub    $0x4,%esp
+     e97:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+     e9a:	6a 01                	push   $0x1
+     e9c:	50                   	push   %eax
+     e9d:	ff 75 08             	pushl  0x8(%ebp)
+     ea0:	e8 8d fe ff ff       	call   d32 <write>
+     ea5:	83 c4 10             	add    $0x10,%esp
+     ea8:	83 c6 01             	add    $0x1,%esi
   for(i = 0; fmt[i]; i++){
-     ecb:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
-     ecf:	84 db                	test   %bl,%bl
-     ed1:	74 77                	je     f4a <printf+0xca>
+     eab:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+     eaf:	84 db                	test   %bl,%bl
+     eb1:	74 77                	je     f2a <printf+0xca>
     if(state == 0){
-     ed3:	85 ff                	test   %edi,%edi
+     eb3:	85 ff                	test   %edi,%edi
     c = fmt[i] & 0xff;
-     ed5:	0f be cb             	movsbl %bl,%ecx
-     ed8:	0f b6 c3             	movzbl %bl,%eax
+     eb5:	0f be cb             	movsbl %bl,%ecx
+     eb8:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
-     edb:	74 cb                	je     ea8 <printf+0x28>
+     ebb:	74 cb                	je     e88 <printf+0x28>
         state = '%';
       } else {
         putc(fd, c);
       }
     } else if(state == '%'){
-     edd:	83 ff 25             	cmp    $0x25,%edi
-     ee0:	75 e6                	jne    ec8 <printf+0x48>
+     ebd:	83 ff 25             	cmp    $0x25,%edi
+     ec0:	75 e6                	jne    ea8 <printf+0x48>
       if(c == 'd'){
-     ee2:	83 f8 64             	cmp    $0x64,%eax
-     ee5:	0f 84 05 01 00 00    	je     ff0 <printf+0x170>
+     ec2:	83 f8 64             	cmp    $0x64,%eax
+     ec5:	0f 84 05 01 00 00    	je     fd0 <printf+0x170>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
-     eeb:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
-     ef1:	83 f9 70             	cmp    $0x70,%ecx
-     ef4:	74 72                	je     f68 <printf+0xe8>
+     ecb:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+     ed1:	83 f9 70             	cmp    $0x70,%ecx
+     ed4:	74 72                	je     f48 <printf+0xe8>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
-     ef6:	83 f8 73             	cmp    $0x73,%eax
-     ef9:	0f 84 99 00 00 00    	je     f98 <printf+0x118>
+     ed6:	83 f8 73             	cmp    $0x73,%eax
+     ed9:	0f 84 99 00 00 00    	je     f78 <printf+0x118>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
-     eff:	83 f8 63             	cmp    $0x63,%eax
-     f02:	0f 84 08 01 00 00    	je     1010 <printf+0x190>
+     edf:	83 f8 63             	cmp    $0x63,%eax
+     ee2:	0f 84 08 01 00 00    	je     ff0 <printf+0x190>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
-     f08:	83 f8 25             	cmp    $0x25,%eax
-     f0b:	0f 84 ef 00 00 00    	je     1000 <printf+0x180>
+     ee8:	83 f8 25             	cmp    $0x25,%eax
+     eeb:	0f 84 ef 00 00 00    	je     fe0 <printf+0x180>
   write(fd, &c, 1);
-     f11:	8d 45 e7             	lea    -0x19(%ebp),%eax
-     f14:	83 ec 04             	sub    $0x4,%esp
-     f17:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
-     f1b:	6a 01                	push   $0x1
-     f1d:	50                   	push   %eax
-     f1e:	ff 75 08             	pushl  0x8(%ebp)
-     f21:	e8 0c fe ff ff       	call   d32 <write>
-     f26:	83 c4 0c             	add    $0xc,%esp
-     f29:	8d 45 e6             	lea    -0x1a(%ebp),%eax
-     f2c:	88 5d e6             	mov    %bl,-0x1a(%ebp)
-     f2f:	6a 01                	push   $0x1
-     f31:	50                   	push   %eax
-     f32:	ff 75 08             	pushl  0x8(%ebp)
-     f35:	83 c6 01             	add    $0x1,%esi
+     ef1:	8d 45 e7             	lea    -0x19(%ebp),%eax
+     ef4:	83 ec 04             	sub    $0x4,%esp
+     ef7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+     efb:	6a 01                	push   $0x1
+     efd:	50                   	push   %eax
+     efe:	ff 75 08             	pushl  0x8(%ebp)
+     f01:	e8 2c fe ff ff       	call   d32 <write>
+     f06:	83 c4 0c             	add    $0xc,%esp
+     f09:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+     f0c:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+     f0f:	6a 01                	push   $0x1
+     f11:	50                   	push   %eax
+     f12:	ff 75 08             	pushl  0x8(%ebp)
+     f15:	83 c6 01             	add    $0x1,%esi
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
       }
       state = 0;
-     f38:	31 ff                	xor    %edi,%edi
+     f18:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
-     f3a:	e8 f3 fd ff ff       	call   d32 <write>
+     f1a:	e8 13 fe ff ff       	call   d32 <write>
   for(i = 0; fmt[i]; i++){
-     f3f:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+     f1f:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
   write(fd, &c, 1);
-     f43:	83 c4 10             	add    $0x10,%esp
+     f23:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
-     f46:	84 db                	test   %bl,%bl
-     f48:	75 89                	jne    ed3 <printf+0x53>
+     f26:	84 db                	test   %bl,%bl
+     f28:	75 89                	jne    eb3 <printf+0x53>
     }
   }
 }
-     f4a:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     f4d:	5b                   	pop    %ebx
-     f4e:	5e                   	pop    %esi
-     f4f:	5f                   	pop    %edi
-     f50:	5d                   	pop    %ebp
-     f51:	c3                   	ret    
-     f52:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     f2a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     f2d:	5b                   	pop    %ebx
+     f2e:	5e                   	pop    %esi
+     f2f:	5f                   	pop    %edi
+     f30:	5d                   	pop    %ebp
+     f31:	c3                   	ret    
+     f32:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         state = '%';
-     f58:	bf 25 00 00 00       	mov    $0x25,%edi
-     f5d:	e9 66 ff ff ff       	jmp    ec8 <printf+0x48>
-     f62:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     f38:	bf 25 00 00 00       	mov    $0x25,%edi
+     f3d:	e9 66 ff ff ff       	jmp    ea8 <printf+0x48>
+     f42:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
-     f68:	83 ec 0c             	sub    $0xc,%esp
-     f6b:	b9 10 00 00 00       	mov    $0x10,%ecx
-     f70:	6a 00                	push   $0x0
-     f72:	8b 7d d4             	mov    -0x2c(%ebp),%edi
-     f75:	8b 45 08             	mov    0x8(%ebp),%eax
-     f78:	8b 17                	mov    (%edi),%edx
-     f7a:	e8 61 fe ff ff       	call   de0 <printint>
+     f48:	83 ec 0c             	sub    $0xc,%esp
+     f4b:	b9 10 00 00 00       	mov    $0x10,%ecx
+     f50:	6a 00                	push   $0x0
+     f52:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+     f55:	8b 45 08             	mov    0x8(%ebp),%eax
+     f58:	8b 17                	mov    (%edi),%edx
+     f5a:	e8 61 fe ff ff       	call   dc0 <printint>
         ap++;
-     f7f:	89 f8                	mov    %edi,%eax
-     f81:	83 c4 10             	add    $0x10,%esp
+     f5f:	89 f8                	mov    %edi,%eax
+     f61:	83 c4 10             	add    $0x10,%esp
       state = 0;
-     f84:	31 ff                	xor    %edi,%edi
+     f64:	31 ff                	xor    %edi,%edi
         ap++;
-     f86:	83 c0 04             	add    $0x4,%eax
-     f89:	89 45 d4             	mov    %eax,-0x2c(%ebp)
-     f8c:	e9 37 ff ff ff       	jmp    ec8 <printf+0x48>
-     f91:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     f66:	83 c0 04             	add    $0x4,%eax
+     f69:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+     f6c:	e9 37 ff ff ff       	jmp    ea8 <printf+0x48>
+     f71:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
-     f98:	8b 45 d4             	mov    -0x2c(%ebp),%eax
-     f9b:	8b 08                	mov    (%eax),%ecx
+     f78:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+     f7b:	8b 08                	mov    (%eax),%ecx
         ap++;
-     f9d:	83 c0 04             	add    $0x4,%eax
-     fa0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+     f7d:	83 c0 04             	add    $0x4,%eax
+     f80:	89 45 d4             	mov    %eax,-0x2c(%ebp)
         if(s == 0)
-     fa3:	85 c9                	test   %ecx,%ecx
-     fa5:	0f 84 8e 00 00 00    	je     1039 <printf+0x1b9>
+     f83:	85 c9                	test   %ecx,%ecx
+     f85:	0f 84 8e 00 00 00    	je     1019 <printf+0x1b9>
         while(*s != 0){
-     fab:	0f b6 01             	movzbl (%ecx),%eax
+     f8b:	0f b6 01             	movzbl (%ecx),%eax
       state = 0;
-     fae:	31 ff                	xor    %edi,%edi
+     f8e:	31 ff                	xor    %edi,%edi
         s = (char*)*ap;
-     fb0:	89 cb                	mov    %ecx,%ebx
+     f90:	89 cb                	mov    %ecx,%ebx
         while(*s != 0){
-     fb2:	84 c0                	test   %al,%al
-     fb4:	0f 84 0e ff ff ff    	je     ec8 <printf+0x48>
-     fba:	89 75 d0             	mov    %esi,-0x30(%ebp)
-     fbd:	89 de                	mov    %ebx,%esi
-     fbf:	8b 5d 08             	mov    0x8(%ebp),%ebx
-     fc2:	8d 7d e3             	lea    -0x1d(%ebp),%edi
-     fc5:	8d 76 00             	lea    0x0(%esi),%esi
+     f92:	84 c0                	test   %al,%al
+     f94:	0f 84 0e ff ff ff    	je     ea8 <printf+0x48>
+     f9a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+     f9d:	89 de                	mov    %ebx,%esi
+     f9f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     fa2:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+     fa5:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
-     fc8:	83 ec 04             	sub    $0x4,%esp
+     fa8:	83 ec 04             	sub    $0x4,%esp
           s++;
-     fcb:	83 c6 01             	add    $0x1,%esi
-     fce:	88 45 e3             	mov    %al,-0x1d(%ebp)
+     fab:	83 c6 01             	add    $0x1,%esi
+     fae:	88 45 e3             	mov    %al,-0x1d(%ebp)
   write(fd, &c, 1);
-     fd1:	6a 01                	push   $0x1
-     fd3:	57                   	push   %edi
-     fd4:	53                   	push   %ebx
-     fd5:	e8 58 fd ff ff       	call   d32 <write>
+     fb1:	6a 01                	push   $0x1
+     fb3:	57                   	push   %edi
+     fb4:	53                   	push   %ebx
+     fb5:	e8 78 fd ff ff       	call   d32 <write>
         while(*s != 0){
-     fda:	0f b6 06             	movzbl (%esi),%eax
-     fdd:	83 c4 10             	add    $0x10,%esp
-     fe0:	84 c0                	test   %al,%al
-     fe2:	75 e4                	jne    fc8 <printf+0x148>
-     fe4:	8b 75 d0             	mov    -0x30(%ebp),%esi
+     fba:	0f b6 06             	movzbl (%esi),%eax
+     fbd:	83 c4 10             	add    $0x10,%esp
+     fc0:	84 c0                	test   %al,%al
+     fc2:	75 e4                	jne    fa8 <printf+0x148>
+     fc4:	8b 75 d0             	mov    -0x30(%ebp),%esi
       state = 0;
-     fe7:	31 ff                	xor    %edi,%edi
-     fe9:	e9 da fe ff ff       	jmp    ec8 <printf+0x48>
-     fee:	66 90                	xchg   %ax,%ax
+     fc7:	31 ff                	xor    %edi,%edi
+     fc9:	e9 da fe ff ff       	jmp    ea8 <printf+0x48>
+     fce:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 10, 1);
-     ff0:	83 ec 0c             	sub    $0xc,%esp
-     ff3:	b9 0a 00 00 00       	mov    $0xa,%ecx
-     ff8:	6a 01                	push   $0x1
-     ffa:	e9 73 ff ff ff       	jmp    f72 <printf+0xf2>
-     fff:	90                   	nop
+     fd0:	83 ec 0c             	sub    $0xc,%esp
+     fd3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+     fd8:	6a 01                	push   $0x1
+     fda:	e9 73 ff ff ff       	jmp    f52 <printf+0xf2>
+     fdf:	90                   	nop
   write(fd, &c, 1);
-    1000:	83 ec 04             	sub    $0x4,%esp
-    1003:	88 5d e5             	mov    %bl,-0x1b(%ebp)
-    1006:	8d 45 e5             	lea    -0x1b(%ebp),%eax
-    1009:	6a 01                	push   $0x1
-    100b:	e9 21 ff ff ff       	jmp    f31 <printf+0xb1>
+     fe0:	83 ec 04             	sub    $0x4,%esp
+     fe3:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+     fe6:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+     fe9:	6a 01                	push   $0x1
+     feb:	e9 21 ff ff ff       	jmp    f11 <printf+0xb1>
         putc(fd, *ap);
-    1010:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+     ff0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
   write(fd, &c, 1);
-    1013:	83 ec 04             	sub    $0x4,%esp
+     ff3:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
-    1016:	8b 07                	mov    (%edi),%eax
+     ff6:	8b 07                	mov    (%edi),%eax
   write(fd, &c, 1);
-    1018:	6a 01                	push   $0x1
+     ff8:	6a 01                	push   $0x1
         ap++;
-    101a:	83 c7 04             	add    $0x4,%edi
+     ffa:	83 c7 04             	add    $0x4,%edi
         putc(fd, *ap);
-    101d:	88 45 e4             	mov    %al,-0x1c(%ebp)
+     ffd:	88 45 e4             	mov    %al,-0x1c(%ebp)
   write(fd, &c, 1);
-    1020:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-    1023:	50                   	push   %eax
-    1024:	ff 75 08             	pushl  0x8(%ebp)
-    1027:	e8 06 fd ff ff       	call   d32 <write>
+    1000:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+    1003:	50                   	push   %eax
+    1004:	ff 75 08             	pushl  0x8(%ebp)
+    1007:	e8 26 fd ff ff       	call   d32 <write>
         ap++;
-    102c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
-    102f:	83 c4 10             	add    $0x10,%esp
+    100c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+    100f:	83 c4 10             	add    $0x10,%esp
       state = 0;
-    1032:	31 ff                	xor    %edi,%edi
-    1034:	e9 8f fe ff ff       	jmp    ec8 <printf+0x48>
+    1012:	31 ff                	xor    %edi,%edi
+    1014:	e9 8f fe ff ff       	jmp    ea8 <printf+0x48>
           s = "(null)";
-    1039:	bb c0 12 00 00       	mov    $0x12c0,%ebx
+    1019:	bb a0 12 00 00       	mov    $0x12a0,%ebx
         while(*s != 0){
-    103e:	b8 28 00 00 00       	mov    $0x28,%eax
-    1043:	e9 72 ff ff ff       	jmp    fba <printf+0x13a>
-    1048:	66 90                	xchg   %ax,%ax
-    104a:	66 90                	xchg   %ax,%ax
-    104c:	66 90                	xchg   %ax,%ax
-    104e:	66 90                	xchg   %ax,%ax
+    101e:	b8 28 00 00 00       	mov    $0x28,%eax
+    1023:	e9 72 ff ff ff       	jmp    f9a <printf+0x13a>
+    1028:	66 90                	xchg   %ax,%ax
+    102a:	66 90                	xchg   %ax,%ax
+    102c:	66 90                	xchg   %ax,%ax
+    102e:	66 90                	xchg   %ax,%ax
 
-00001050 <free>:
+00001030 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
-    1050:	55                   	push   %ebp
+    1030:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    1051:	a1 04 19 00 00       	mov    0x1904,%eax
+    1031:	a1 e4 18 00 00       	mov    0x18e4,%eax
 {
-    1056:	89 e5                	mov    %esp,%ebp
-    1058:	57                   	push   %edi
-    1059:	56                   	push   %esi
-    105a:	53                   	push   %ebx
-    105b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    1036:	89 e5                	mov    %esp,%ebp
+    1038:	57                   	push   %edi
+    1039:	56                   	push   %esi
+    103a:	53                   	push   %ebx
+    103b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
-    105e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
-    1061:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    103e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+    1041:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    1068:	39 c8                	cmp    %ecx,%eax
-    106a:	8b 10                	mov    (%eax),%edx
-    106c:	73 32                	jae    10a0 <free+0x50>
-    106e:	39 d1                	cmp    %edx,%ecx
-    1070:	72 04                	jb     1076 <free+0x26>
+    1048:	39 c8                	cmp    %ecx,%eax
+    104a:	8b 10                	mov    (%eax),%edx
+    104c:	73 32                	jae    1080 <free+0x50>
+    104e:	39 d1                	cmp    %edx,%ecx
+    1050:	72 04                	jb     1056 <free+0x26>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    1072:	39 d0                	cmp    %edx,%eax
-    1074:	72 32                	jb     10a8 <free+0x58>
+    1052:	39 d0                	cmp    %edx,%eax
+    1054:	72 32                	jb     1088 <free+0x58>
       break;
   if(bp + bp->s.size == p->s.ptr){
-    1076:	8b 73 fc             	mov    -0x4(%ebx),%esi
-    1079:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
-    107c:	39 fa                	cmp    %edi,%edx
-    107e:	74 30                	je     10b0 <free+0x60>
+    1056:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    1059:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+    105c:	39 fa                	cmp    %edi,%edx
+    105e:	74 30                	je     1090 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
-    1080:	89 53 f8             	mov    %edx,-0x8(%ebx)
+    1060:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
-    1083:	8b 50 04             	mov    0x4(%eax),%edx
-    1086:	8d 34 d0             	lea    (%eax,%edx,8),%esi
-    1089:	39 f1                	cmp    %esi,%ecx
-    108b:	74 3a                	je     10c7 <free+0x77>
+    1063:	8b 50 04             	mov    0x4(%eax),%edx
+    1066:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    1069:	39 f1                	cmp    %esi,%ecx
+    106b:	74 3a                	je     10a7 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
-    108d:	89 08                	mov    %ecx,(%eax)
+    106d:	89 08                	mov    %ecx,(%eax)
   freep = p;
-    108f:	a3 04 19 00 00       	mov    %eax,0x1904
+    106f:	a3 e4 18 00 00       	mov    %eax,0x18e4
 }
-    1094:	5b                   	pop    %ebx
-    1095:	5e                   	pop    %esi
-    1096:	5f                   	pop    %edi
-    1097:	5d                   	pop    %ebp
-    1098:	c3                   	ret    
-    1099:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1074:	5b                   	pop    %ebx
+    1075:	5e                   	pop    %esi
+    1076:	5f                   	pop    %edi
+    1077:	5d                   	pop    %ebp
+    1078:	c3                   	ret    
+    1079:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    10a0:	39 d0                	cmp    %edx,%eax
-    10a2:	72 04                	jb     10a8 <free+0x58>
-    10a4:	39 d1                	cmp    %edx,%ecx
-    10a6:	72 ce                	jb     1076 <free+0x26>
-{
-    10a8:	89 d0                	mov    %edx,%eax
-    10aa:	eb bc                	jmp    1068 <free+0x18>
-    10ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    1080:	39 d0                	cmp    %edx,%eax
+    1082:	72 04                	jb     1088 <free+0x58>
+    1084:	39 d1                	cmp    %edx,%ecx
+    1086:	72 ce                	jb     1056 <free+0x26>
+{
+    1088:	89 d0                	mov    %edx,%eax
+    108a:	eb bc                	jmp    1048 <free+0x18>
+    108c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     bp->s.size += p->s.ptr->s.size;
-    10b0:	03 72 04             	add    0x4(%edx),%esi
-    10b3:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    1090:	03 72 04             	add    0x4(%edx),%esi
+    1093:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
-    10b6:	8b 10                	mov    (%eax),%edx
-    10b8:	8b 12                	mov    (%edx),%edx
-    10ba:	89 53 f8             	mov    %edx,-0x8(%ebx)
+    1096:	8b 10                	mov    (%eax),%edx
+    1098:	8b 12                	mov    (%edx),%edx
+    109a:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
-    10bd:	8b 50 04             	mov    0x4(%eax),%edx
-    10c0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
-    10c3:	39 f1                	cmp    %esi,%ecx
-    10c5:	75 c6                	jne    108d <free+0x3d>
+    109d:	8b 50 04             	mov    0x4(%eax),%edx
+    10a0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    10a3:	39 f1                	cmp    %esi,%ecx
+    10a5:	75 c6                	jne    106d <free+0x3d>
     p->s.size += bp->s.size;
-    10c7:	03 53 fc             	add    -0x4(%ebx),%edx
+    10a7:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
-    10ca:	a3 04 19 00 00       	mov    %eax,0x1904
+    10aa:	a3 e4 18 00 00       	mov    %eax,0x18e4
     p->s.size += bp->s.size;
-    10cf:	89 50 04             	mov    %edx,0x4(%eax)
+    10af:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
-    10d2:	8b 53 f8             	mov    -0x8(%ebx),%edx
-    10d5:	89 10                	mov    %edx,(%eax)
+    10b2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+    10b5:	89 10                	mov    %edx,(%eax)
 }
-    10d7:	5b                   	pop    %ebx
-    10d8:	5e                   	pop    %esi
-    10d9:	5f                   	pop    %edi
-    10da:	5d                   	pop    %ebp
-    10db:	c3                   	ret    
-    10dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    10b7:	5b                   	pop    %ebx
+    10b8:	5e                   	pop    %esi
+    10b9:	5f                   	pop    %edi
+    10ba:	5d                   	pop    %ebp
+    10bb:	c3                   	ret    
+    10bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-000010e0 <malloc>:
+000010c0 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
-    10e0:	55                   	push   %ebp
-    10e1:	89 e5                	mov    %esp,%ebp
-    10e3:	57                   	push   %edi
-    10e4:	56                   	push   %esi
-    10e5:	53                   	push   %ebx
-    10e6:	83 ec 0c             	sub    $0xc,%esp
+    10c0:	55                   	push   %ebp
+    10c1:	89 e5                	mov    %esp,%ebp
+    10c3:	57                   	push   %edi
+    10c4:	56                   	push   %esi
+    10c5:	53                   	push   %ebx
+    10c6:	83 ec 0c             	sub    $0xc,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    10e9:	8b 45 08             	mov    0x8(%ebp),%eax
+    10c9:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
-    10ec:	8b 15 04 19 00 00    	mov    0x1904,%edx
+    10cc:	8b 15 e4 18 00 00    	mov    0x18e4,%edx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    10f2:	8d 78 07             	lea    0x7(%eax),%edi
-    10f5:	c1 ef 03             	shr    $0x3,%edi
-    10f8:	83 c7 01             	add    $0x1,%edi
+    10d2:	8d 78 07             	lea    0x7(%eax),%edi
+    10d5:	c1 ef 03             	shr    $0x3,%edi
+    10d8:	83 c7 01             	add    $0x1,%edi
   if((prevp = freep) == 0){
-    10fb:	85 d2                	test   %edx,%edx
-    10fd:	0f 84 9d 00 00 00    	je     11a0 <malloc+0xc0>
-    1103:	8b 02                	mov    (%edx),%eax
-    1105:	8b 48 04             	mov    0x4(%eax),%ecx
+    10db:	85 d2                	test   %edx,%edx
+    10dd:	0f 84 9d 00 00 00    	je     1180 <malloc+0xc0>
+    10e3:	8b 02                	mov    (%edx),%eax
+    10e5:	8b 48 04             	mov    0x4(%eax),%ecx
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
     if(p->s.size >= nunits){
-    1108:	39 cf                	cmp    %ecx,%edi
-    110a:	76 6c                	jbe    1178 <malloc+0x98>
-    110c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
-    1112:	bb 00 10 00 00       	mov    $0x1000,%ebx
-    1117:	0f 43 df             	cmovae %edi,%ebx
+    10e8:	39 cf                	cmp    %ecx,%edi
+    10ea:	76 6c                	jbe    1158 <malloc+0x98>
+    10ec:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+    10f2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+    10f7:	0f 43 df             	cmovae %edi,%ebx
   p = sbrk(nu * sizeof(Header));
-    111a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
-    1121:	eb 0e                	jmp    1131 <malloc+0x51>
-    1123:	90                   	nop
-    1124:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    10fa:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+    1101:	eb 0e                	jmp    1111 <malloc+0x51>
+    1103:	90                   	nop
+    1104:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    1128:	8b 02                	mov    (%edx),%eax
+    1108:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
-    112a:	8b 48 04             	mov    0x4(%eax),%ecx
-    112d:	39 f9                	cmp    %edi,%ecx
-    112f:	73 47                	jae    1178 <malloc+0x98>
+    110a:	8b 48 04             	mov    0x4(%eax),%ecx
+    110d:	39 f9                	cmp    %edi,%ecx
+    110f:	73 47                	jae    1158 <malloc+0x98>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
-    1131:	39 05 04 19 00 00    	cmp    %eax,0x1904
-    1137:	89 c2                	mov    %eax,%edx
-    1139:	75 ed                	jne    1128 <malloc+0x48>
+    1111:	39 05 e4 18 00 00    	cmp    %eax,0x18e4
+    1117:	89 c2                	mov    %eax,%edx
+    1119:	75 ed                	jne    1108 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
-    113b:	83 ec 0c             	sub    $0xc,%esp
-    113e:	56                   	push   %esi
-    113f:	e8 56 fc ff ff       	call   d9a <sbrk>
+    111b:	83 ec 0c             	sub    $0xc,%esp
+    111e:	56                   	push   %esi
+    111f:	e8 76 fc ff ff       	call   d9a <sbrk>
   if(p == (char*)-1)
-    1144:	83 c4 10             	add    $0x10,%esp
-    1147:	83 f8 ff             	cmp    $0xffffffff,%eax
-    114a:	74 1c                	je     1168 <malloc+0x88>
+    1124:	83 c4 10             	add    $0x10,%esp
+    1127:	83 f8 ff             	cmp    $0xffffffff,%eax
+    112a:	74 1c                	je     1148 <malloc+0x88>
   hp->s.size = nu;
-    114c:	89 58 04             	mov    %ebx,0x4(%eax)
+    112c:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
-    114f:	83 ec 0c             	sub    $0xc,%esp
-    1152:	83 c0 08             	add    $0x8,%eax
-    1155:	50                   	push   %eax
-    1156:	e8 f5 fe ff ff       	call   1050 <free>
+    112f:	83 ec 0c             	sub    $0xc,%esp
+    1132:	83 c0 08             	add    $0x8,%eax
+    1135:	50                   	push   %eax
+    1136:	e8 f5 fe ff ff       	call   1030 <free>
   return freep;
-    115b:	8b 15 04 19 00 00    	mov    0x1904,%edx
+    113b:	8b 15 e4 18 00 00    	mov    0x18e4,%edx
       if((p = morecore(nunits)) == 0)
-    1161:	83 c4 10             	add    $0x10,%esp
-    1164:	85 d2                	test   %edx,%edx
-    1166:	75 c0                	jne    1128 <malloc+0x48>
+    1141:	83 c4 10             	add    $0x10,%esp
+    1144:	85 d2                	test   %edx,%edx
+    1146:	75 c0                	jne    1108 <malloc+0x48>
         return 0;
   }
 }
-    1168:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1148:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
-    116b:	31 c0                	xor    %eax,%eax
+    114b:	31 c0                	xor    %eax,%eax
 }
-    116d:	5b                   	pop    %ebx
-    116e:	5e                   	pop    %esi
-    116f:	5f                   	pop    %edi
-    1170:	5d                   	pop    %ebp
-    1171:	c3                   	ret    
-    1172:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    114d:	5b                   	pop    %ebx
+    114e:	5e                   	pop    %esi
+    114f:	5f                   	pop    %edi
+    1150:	5d                   	pop    %ebp
+    1151:	c3                   	ret    
+    1152:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
-    1178:	39 cf                	cmp    %ecx,%edi
-    117a:	74 54                	je     11d0 <malloc+0xf0>
+    1158:	39 cf                	cmp    %ecx,%edi
+    115a:	74 54                	je     11b0 <malloc+0xf0>
         p->s.size -= nunits;
-    117c:	29 f9                	sub    %edi,%ecx
-    117e:	89 48 04             	mov    %ecx,0x4(%eax)
+    115c:	29 f9                	sub    %edi,%ecx
+    115e:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
-    1181:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+    1161:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
-    1184:	89 78 04             	mov    %edi,0x4(%eax)
+    1164:	89 78 04             	mov    %edi,0x4(%eax)
       freep = prevp;
-    1187:	89 15 04 19 00 00    	mov    %edx,0x1904
+    1167:	89 15 e4 18 00 00    	mov    %edx,0x18e4
 }
-    118d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    116d:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
-    1190:	83 c0 08             	add    $0x8,%eax
+    1170:	83 c0 08             	add    $0x8,%eax
 }
-    1193:	5b                   	pop    %ebx
-    1194:	5e                   	pop    %esi
-    1195:	5f                   	pop    %edi
-    1196:	5d                   	pop    %ebp
-    1197:	c3                   	ret    
-    1198:	90                   	nop
-    1199:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1173:	5b                   	pop    %ebx
+    1174:	5e                   	pop    %esi
+    1175:	5f                   	pop    %edi
+    1176:	5d                   	pop    %ebp
+    1177:	c3                   	ret    
+    1178:	90                   	nop
+    1179:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     base.s.ptr = freep = prevp = &base;
-    11a0:	c7 05 04 19 00 00 08 	movl   $0x1908,0x1904
-    11a7:	19 00 00 
-    11aa:	c7 05 08 19 00 00 08 	movl   $0x1908,0x1908
-    11b1:	19 00 00 
+    1180:	c7 05 e4 18 00 00 e8 	movl   $0x18e8,0x18e4
+    1187:	18 00 00 
+    118a:	c7 05 e8 18 00 00 e8 	movl   $0x18e8,0x18e8
+    1191:	18 00 00 
     base.s.size = 0;
-    11b4:	b8 08 19 00 00       	mov    $0x1908,%eax
-    11b9:	c7 05 0c 19 00 00 00 	movl   $0x0,0x190c
-    11c0:	00 00 00 
-    11c3:	e9 44 ff ff ff       	jmp    110c <malloc+0x2c>
-    11c8:	90                   	nop
-    11c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1194:	b8 e8 18 00 00       	mov    $0x18e8,%eax
+    1199:	c7 05 ec 18 00 00 00 	movl   $0x0,0x18ec
+    11a0:	00 00 00 
+    11a3:	e9 44 ff ff ff       	jmp    10ec <malloc+0x2c>
+    11a8:	90                   	nop
+    11a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         prevp->s.ptr = p->s.ptr;
-    11d0:	8b 08                	mov    (%eax),%ecx
-    11d2:	89 0a                	mov    %ecx,(%edx)
-    11d4:	eb b1                	jmp    1187 <malloc+0xa7>
+    11b0:	8b 08                	mov    (%eax),%ecx
+    11b2:	89 0a                	mov    %ecx,(%edx)
+    11b4:	eb b1                	jmp    1167 <malloc+0xa7>
Binary files main/sh.o and xv6-public/sh.o differ
diff -urN main/sh.sym xv6-public/sh.sym
--- main/sh.sym	2022-09-26 21:21:17.004780000 +0530
+++ xv6-public/sh.sym	2022-10-31 22:34:17.410092907 +0530
@@ -1,8 +1,8 @@
 00000000 .text
-000011d8 .rodata
-000012dc .eh_frame
-00001884 .data
-000018a0 .bss
+000011b8 .rodata
+000012bc .eh_frame
+00001864 .data
+00001880 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -12,17 +12,16 @@
 00000000 .debug_loc
 00000000 .debug_ranges
 00000000 sh.c
-000018a0 buf.1088
+00001880 buf.1082
 00000000 ulib.c
 00000000 printf.c
-00000de0 printint
-000012c8 digits.1050
+00000dc0 printint
+000012a8 digits.1044
 00000000 umalloc.c
-00001904 freep
-00001908 base
+000018e4 freep
+000018e8 base
 00000ac0 strcpy
-00000e80 printf
-00000dc2 thread_exit
+00000e60 printf
 00000ce0 memmove
 00000d5a mknod
 00000330 execcmd
@@ -34,9 +33,9 @@
 000005d0 peek
 00000640 parseredirs
 00000460 gettoken
-000010e0 malloc
+000010c0 malloc
 00000da2 sleep
-0000188c whitespace
+0000186c whitespace
 00000310 fork1
 000009a0 nulterminate
 00000d22 pipe
@@ -50,7 +49,7 @@
 00000910 parseblock
 00000d4a exec
 00000d1a wait
-00001884 symbols
+00001864 symbols
 00000d2a read
 000006f0 parseexec
 00000d62 unlink
@@ -58,7 +57,7 @@
 00000d0a fork
 00000d9a sbrk
 00000daa uptime
-00001892 __bss_start
+00001872 __bss_start
 00000b70 memset
 00000000 main
 00000af0 strcmp
@@ -66,18 +65,16 @@
 000003b0 pipecmd
 00000360 redircmd
 00000c50 stat
-00001892 _edata
-00001910 _end
+00001872 _edata
+000018f0 _end
 00000d72 link
 00000d12 exit
 00000ca0 atoi
-00000dca draw
+00000db2 draw
 00000b40 strlen
 00000d52 open
 00000b90 strchr
-00000db2 thread_create
 00000d7a mkdir
 00000d3a close
-00000dba thread_join
 000003f0 listcmd
-00001050 free
+00001030 free
diff -urN main/sleeplock.c xv6-public/sleeplock.c
--- main/sleeplock.c	2022-08-11 19:48:39.000000000 +0530
+++ xv6-public/sleeplock.c	2022-10-30 08:37:24.000000000 +0530
@@ -22,10 +22,13 @@
 void
 acquiresleep(struct sleeplock *lk)
 {
+
   acquire(&lk->lk);
+
   while (lk->locked) {
     sleep(lk, &lk->lk);
   }
+
   lk->locked = 1;
   lk->pid = myproc()->pid;
   release(&lk->lk);
Binary files main/sleeplock.o and xv6-public/sleeplock.o differ
diff -urN main/spinlock.c xv6-public/spinlock.c
--- main/spinlock.c	2022-08-11 19:48:39.000000000 +0530
+++ xv6-public/spinlock.c	2022-10-30 08:36:48.000000000 +0530
@@ -25,6 +25,7 @@
 acquire(struct spinlock *lk)
 {
   pushcli(); // disable interrupts to avoid deadlock.
+
   if(holding(lk))
     panic("acquire");
 
Binary files main/spinlock.o and xv6-public/spinlock.o differ
Binary files main/_stressfs and xv6-public/_stressfs differ
diff -urN main/stressfs.asm xv6-public/stressfs.asm
--- main/stressfs.asm	2022-09-26 21:21:17.120838000 +0530
+++ xv6-public/stressfs.asm	2022-10-31 22:34:17.486130911 +0530
@@ -39,13 +39,13 @@
   2b:	c7 85 de fd ff ff 73 	movl   $0x65727473,-0x222(%ebp)
   32:	74 72 65 
   printf(1, "stressfs starting\n");
-  35:	68 58 08 00 00       	push   $0x858
+  35:	68 38 08 00 00       	push   $0x838
   3a:	6a 01                	push   $0x1
   char path[] = "stressfs0";
   3c:	c7 85 e2 fd ff ff 73 	movl   $0x73667373,-0x21e(%ebp)
   43:	73 66 73 
   printf(1, "stressfs starting\n");
-  46:	e8 b5 04 00 00       	call   500 <printf>
+  46:	e8 95 04 00 00       	call   4e0 <printf>
   memset(data, 'a', sizeof(data));
   4b:	83 c4 0c             	add    $0xc,%esp
   4e:	68 00 02 00 00       	push   $0x200
@@ -67,14 +67,14 @@
   printf(1, "write %d\n", i);
   78:	83 ec 04             	sub    $0x4,%esp
   7b:	53                   	push   %ebx
-  7c:	68 6b 08 00 00       	push   $0x86b
+  7c:	68 4b 08 00 00       	push   $0x84b
 
   path[8] += i;
   fd = open(path, O_CREATE | O_RDWR);
   81:	bb 14 00 00 00       	mov    $0x14,%ebx
   printf(1, "write %d\n", i);
   86:	6a 01                	push   $0x1
-  88:	e8 73 04 00 00       	call   500 <printf>
+  88:	e8 53 04 00 00       	call   4e0 <printf>
   path[8] += i;
   8d:	89 f8                	mov    %edi,%eax
   8f:	00 85 e6 fd ff ff    	add    %al,-0x21a(%ebp)
@@ -108,9 +108,9 @@
   printf(1, "read\n");
   d0:	58                   	pop    %eax
   d1:	5a                   	pop    %edx
-  d2:	68 75 08 00 00       	push   $0x875
+  d2:	68 55 08 00 00       	push   $0x855
   d7:	6a 01                	push   $0x1
-  d9:	e8 22 04 00 00       	call   500 <printf>
+  d9:	e8 02 04 00 00       	call   4e0 <printf>
 
   fd = open(path, O_RDONLY);
   de:	59                   	pop    %ecx
@@ -674,614 +674,593 @@
  42f:	cd 40                	int    $0x40
  431:	c3                   	ret    
 
-00000432 <thread_create>:
-SYSCALL(thread_create)
+00000432 <draw>:
+SYSCALL(draw)
  432:	b8 16 00 00 00       	mov    $0x16,%eax
  437:	cd 40                	int    $0x40
  439:	c3                   	ret    
+ 43a:	66 90                	xchg   %ax,%ax
+ 43c:	66 90                	xchg   %ax,%ax
+ 43e:	66 90                	xchg   %ax,%ax
 
-0000043a <thread_join>:
-SYSCALL(thread_join)
- 43a:	b8 18 00 00 00       	mov    $0x18,%eax
- 43f:	cd 40                	int    $0x40
- 441:	c3                   	ret    
-
-00000442 <thread_exit>:
-SYSCALL(thread_exit)
- 442:	b8 17 00 00 00       	mov    $0x17,%eax
- 447:	cd 40                	int    $0x40
- 449:	c3                   	ret    
-
-0000044a <draw>:
- 44a:	b8 19 00 00 00       	mov    $0x19,%eax
- 44f:	cd 40                	int    $0x40
- 451:	c3                   	ret    
- 452:	66 90                	xchg   %ax,%ax
- 454:	66 90                	xchg   %ax,%ax
- 456:	66 90                	xchg   %ax,%ax
- 458:	66 90                	xchg   %ax,%ax
- 45a:	66 90                	xchg   %ax,%ax
- 45c:	66 90                	xchg   %ax,%ax
- 45e:	66 90                	xchg   %ax,%ax
-
-00000460 <printint>:
+00000440 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 460:	55                   	push   %ebp
- 461:	89 e5                	mov    %esp,%ebp
- 463:	57                   	push   %edi
- 464:	56                   	push   %esi
- 465:	53                   	push   %ebx
- 466:	83 ec 3c             	sub    $0x3c,%esp
+ 440:	55                   	push   %ebp
+ 441:	89 e5                	mov    %esp,%ebp
+ 443:	57                   	push   %edi
+ 444:	56                   	push   %esi
+ 445:	53                   	push   %ebx
+ 446:	83 ec 3c             	sub    $0x3c,%esp
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 469:	85 d2                	test   %edx,%edx
+ 449:	85 d2                	test   %edx,%edx
 {
- 46b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 44b:	89 45 c0             	mov    %eax,-0x40(%ebp)
     neg = 1;
     x = -xx;
- 46e:	89 d0                	mov    %edx,%eax
+ 44e:	89 d0                	mov    %edx,%eax
   if(sgn && xx < 0){
- 470:	79 76                	jns    4e8 <printint+0x88>
- 472:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 476:	74 70                	je     4e8 <printint+0x88>
+ 450:	79 76                	jns    4c8 <printint+0x88>
+ 452:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 456:	74 70                	je     4c8 <printint+0x88>
     x = -xx;
- 478:	f7 d8                	neg    %eax
+ 458:	f7 d8                	neg    %eax
     neg = 1;
- 47a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+ 45a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
   } else {
     x = xx;
   }
 
   i = 0;
- 481:	31 f6                	xor    %esi,%esi
- 483:	8d 5d d7             	lea    -0x29(%ebp),%ebx
- 486:	eb 0a                	jmp    492 <printint+0x32>
- 488:	90                   	nop
- 489:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 461:	31 f6                	xor    %esi,%esi
+ 463:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 466:	eb 0a                	jmp    472 <printint+0x32>
+ 468:	90                   	nop
+ 469:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   do{
     buf[i++] = digits[x % base];
- 490:	89 fe                	mov    %edi,%esi
- 492:	31 d2                	xor    %edx,%edx
- 494:	8d 7e 01             	lea    0x1(%esi),%edi
- 497:	f7 f1                	div    %ecx
- 499:	0f b6 92 84 08 00 00 	movzbl 0x884(%edx),%edx
+ 470:	89 fe                	mov    %edi,%esi
+ 472:	31 d2                	xor    %edx,%edx
+ 474:	8d 7e 01             	lea    0x1(%esi),%edi
+ 477:	f7 f1                	div    %ecx
+ 479:	0f b6 92 64 08 00 00 	movzbl 0x864(%edx),%edx
   }while((x /= base) != 0);
- 4a0:	85 c0                	test   %eax,%eax
+ 480:	85 c0                	test   %eax,%eax
     buf[i++] = digits[x % base];
- 4a2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+ 482:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
   }while((x /= base) != 0);
- 4a5:	75 e9                	jne    490 <printint+0x30>
+ 485:	75 e9                	jne    470 <printint+0x30>
   if(neg)
- 4a7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
- 4aa:	85 c0                	test   %eax,%eax
- 4ac:	74 08                	je     4b6 <printint+0x56>
+ 487:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 48a:	85 c0                	test   %eax,%eax
+ 48c:	74 08                	je     496 <printint+0x56>
     buf[i++] = '-';
- 4ae:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
- 4b3:	8d 7e 02             	lea    0x2(%esi),%edi
- 4b6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
- 4ba:	8b 7d c0             	mov    -0x40(%ebp),%edi
- 4bd:	8d 76 00             	lea    0x0(%esi),%esi
- 4c0:	0f b6 06             	movzbl (%esi),%eax
+ 48e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 493:	8d 7e 02             	lea    0x2(%esi),%edi
+ 496:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 49a:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 49d:	8d 76 00             	lea    0x0(%esi),%esi
+ 4a0:	0f b6 06             	movzbl (%esi),%eax
   write(fd, &c, 1);
- 4c3:	83 ec 04             	sub    $0x4,%esp
- 4c6:	83 ee 01             	sub    $0x1,%esi
- 4c9:	6a 01                	push   $0x1
- 4cb:	53                   	push   %ebx
- 4cc:	57                   	push   %edi
- 4cd:	88 45 d7             	mov    %al,-0x29(%ebp)
- 4d0:	e8 dd fe ff ff       	call   3b2 <write>
+ 4a3:	83 ec 04             	sub    $0x4,%esp
+ 4a6:	83 ee 01             	sub    $0x1,%esi
+ 4a9:	6a 01                	push   $0x1
+ 4ab:	53                   	push   %ebx
+ 4ac:	57                   	push   %edi
+ 4ad:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 4b0:	e8 fd fe ff ff       	call   3b2 <write>
 
   while(--i >= 0)
- 4d5:	83 c4 10             	add    $0x10,%esp
- 4d8:	39 de                	cmp    %ebx,%esi
- 4da:	75 e4                	jne    4c0 <printint+0x60>
+ 4b5:	83 c4 10             	add    $0x10,%esp
+ 4b8:	39 de                	cmp    %ebx,%esi
+ 4ba:	75 e4                	jne    4a0 <printint+0x60>
     putc(fd, buf[i]);
 }
- 4dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4df:	5b                   	pop    %ebx
- 4e0:	5e                   	pop    %esi
- 4e1:	5f                   	pop    %edi
- 4e2:	5d                   	pop    %ebp
- 4e3:	c3                   	ret    
- 4e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4bc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4bf:	5b                   	pop    %ebx
+ 4c0:	5e                   	pop    %esi
+ 4c1:	5f                   	pop    %edi
+ 4c2:	5d                   	pop    %ebp
+ 4c3:	c3                   	ret    
+ 4c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 4e8:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
- 4ef:	eb 90                	jmp    481 <printint+0x21>
- 4f1:	eb 0d                	jmp    500 <printf>
- 4f3:	90                   	nop
- 4f4:	90                   	nop
- 4f5:	90                   	nop
- 4f6:	90                   	nop
- 4f7:	90                   	nop
- 4f8:	90                   	nop
- 4f9:	90                   	nop
- 4fa:	90                   	nop
- 4fb:	90                   	nop
- 4fc:	90                   	nop
- 4fd:	90                   	nop
- 4fe:	90                   	nop
- 4ff:	90                   	nop
+ 4c8:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 4cf:	eb 90                	jmp    461 <printint+0x21>
+ 4d1:	eb 0d                	jmp    4e0 <printf>
+ 4d3:	90                   	nop
+ 4d4:	90                   	nop
+ 4d5:	90                   	nop
+ 4d6:	90                   	nop
+ 4d7:	90                   	nop
+ 4d8:	90                   	nop
+ 4d9:	90                   	nop
+ 4da:	90                   	nop
+ 4db:	90                   	nop
+ 4dc:	90                   	nop
+ 4dd:	90                   	nop
+ 4de:	90                   	nop
+ 4df:	90                   	nop
 
-00000500 <printf>:
+000004e0 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 500:	55                   	push   %ebp
- 501:	89 e5                	mov    %esp,%ebp
- 503:	57                   	push   %edi
- 504:	56                   	push   %esi
- 505:	53                   	push   %ebx
- 506:	83 ec 2c             	sub    $0x2c,%esp
+ 4e0:	55                   	push   %ebp
+ 4e1:	89 e5                	mov    %esp,%ebp
+ 4e3:	57                   	push   %edi
+ 4e4:	56                   	push   %esi
+ 4e5:	53                   	push   %ebx
+ 4e6:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 509:	8b 75 0c             	mov    0xc(%ebp),%esi
- 50c:	0f b6 1e             	movzbl (%esi),%ebx
- 50f:	84 db                	test   %bl,%bl
- 511:	0f 84 b3 00 00 00    	je     5ca <printf+0xca>
+ 4e9:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 4ec:	0f b6 1e             	movzbl (%esi),%ebx
+ 4ef:	84 db                	test   %bl,%bl
+ 4f1:	0f 84 b3 00 00 00    	je     5aa <printf+0xca>
   ap = (uint*)(void*)&fmt + 1;
- 517:	8d 45 10             	lea    0x10(%ebp),%eax
- 51a:	83 c6 01             	add    $0x1,%esi
+ 4f7:	8d 45 10             	lea    0x10(%ebp),%eax
+ 4fa:	83 c6 01             	add    $0x1,%esi
   state = 0;
- 51d:	31 ff                	xor    %edi,%edi
+ 4fd:	31 ff                	xor    %edi,%edi
   ap = (uint*)(void*)&fmt + 1;
- 51f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
- 522:	eb 2f                	jmp    553 <printf+0x53>
- 524:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4ff:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 502:	eb 2f                	jmp    533 <printf+0x53>
+ 504:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
- 528:	83 f8 25             	cmp    $0x25,%eax
- 52b:	0f 84 a7 00 00 00    	je     5d8 <printf+0xd8>
+ 508:	83 f8 25             	cmp    $0x25,%eax
+ 50b:	0f 84 a7 00 00 00    	je     5b8 <printf+0xd8>
   write(fd, &c, 1);
- 531:	8d 45 e2             	lea    -0x1e(%ebp),%eax
- 534:	83 ec 04             	sub    $0x4,%esp
- 537:	88 5d e2             	mov    %bl,-0x1e(%ebp)
- 53a:	6a 01                	push   $0x1
- 53c:	50                   	push   %eax
- 53d:	ff 75 08             	pushl  0x8(%ebp)
- 540:	e8 6d fe ff ff       	call   3b2 <write>
- 545:	83 c4 10             	add    $0x10,%esp
- 548:	83 c6 01             	add    $0x1,%esi
+ 511:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 514:	83 ec 04             	sub    $0x4,%esp
+ 517:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 51a:	6a 01                	push   $0x1
+ 51c:	50                   	push   %eax
+ 51d:	ff 75 08             	pushl  0x8(%ebp)
+ 520:	e8 8d fe ff ff       	call   3b2 <write>
+ 525:	83 c4 10             	add    $0x10,%esp
+ 528:	83 c6 01             	add    $0x1,%esi
   for(i = 0; fmt[i]; i++){
- 54b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
- 54f:	84 db                	test   %bl,%bl
- 551:	74 77                	je     5ca <printf+0xca>
+ 52b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 52f:	84 db                	test   %bl,%bl
+ 531:	74 77                	je     5aa <printf+0xca>
     if(state == 0){
- 553:	85 ff                	test   %edi,%edi
+ 533:	85 ff                	test   %edi,%edi
     c = fmt[i] & 0xff;
- 555:	0f be cb             	movsbl %bl,%ecx
- 558:	0f b6 c3             	movzbl %bl,%eax
+ 535:	0f be cb             	movsbl %bl,%ecx
+ 538:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
- 55b:	74 cb                	je     528 <printf+0x28>
+ 53b:	74 cb                	je     508 <printf+0x28>
         state = '%';
       } else {
         putc(fd, c);
       }
     } else if(state == '%'){
- 55d:	83 ff 25             	cmp    $0x25,%edi
- 560:	75 e6                	jne    548 <printf+0x48>
+ 53d:	83 ff 25             	cmp    $0x25,%edi
+ 540:	75 e6                	jne    528 <printf+0x48>
       if(c == 'd'){
- 562:	83 f8 64             	cmp    $0x64,%eax
- 565:	0f 84 05 01 00 00    	je     670 <printf+0x170>
+ 542:	83 f8 64             	cmp    $0x64,%eax
+ 545:	0f 84 05 01 00 00    	je     650 <printf+0x170>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 56b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 571:	83 f9 70             	cmp    $0x70,%ecx
- 574:	74 72                	je     5e8 <printf+0xe8>
+ 54b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 551:	83 f9 70             	cmp    $0x70,%ecx
+ 554:	74 72                	je     5c8 <printf+0xe8>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 576:	83 f8 73             	cmp    $0x73,%eax
- 579:	0f 84 99 00 00 00    	je     618 <printf+0x118>
+ 556:	83 f8 73             	cmp    $0x73,%eax
+ 559:	0f 84 99 00 00 00    	je     5f8 <printf+0x118>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 57f:	83 f8 63             	cmp    $0x63,%eax
- 582:	0f 84 08 01 00 00    	je     690 <printf+0x190>
+ 55f:	83 f8 63             	cmp    $0x63,%eax
+ 562:	0f 84 08 01 00 00    	je     670 <printf+0x190>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 588:	83 f8 25             	cmp    $0x25,%eax
- 58b:	0f 84 ef 00 00 00    	je     680 <printf+0x180>
+ 568:	83 f8 25             	cmp    $0x25,%eax
+ 56b:	0f 84 ef 00 00 00    	je     660 <printf+0x180>
   write(fd, &c, 1);
- 591:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 594:	83 ec 04             	sub    $0x4,%esp
- 597:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 59b:	6a 01                	push   $0x1
- 59d:	50                   	push   %eax
- 59e:	ff 75 08             	pushl  0x8(%ebp)
- 5a1:	e8 0c fe ff ff       	call   3b2 <write>
- 5a6:	83 c4 0c             	add    $0xc,%esp
- 5a9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
- 5ac:	88 5d e6             	mov    %bl,-0x1a(%ebp)
- 5af:	6a 01                	push   $0x1
- 5b1:	50                   	push   %eax
- 5b2:	ff 75 08             	pushl  0x8(%ebp)
- 5b5:	83 c6 01             	add    $0x1,%esi
+ 571:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 574:	83 ec 04             	sub    $0x4,%esp
+ 577:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 57b:	6a 01                	push   $0x1
+ 57d:	50                   	push   %eax
+ 57e:	ff 75 08             	pushl  0x8(%ebp)
+ 581:	e8 2c fe ff ff       	call   3b2 <write>
+ 586:	83 c4 0c             	add    $0xc,%esp
+ 589:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 58c:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 58f:	6a 01                	push   $0x1
+ 591:	50                   	push   %eax
+ 592:	ff 75 08             	pushl  0x8(%ebp)
+ 595:	83 c6 01             	add    $0x1,%esi
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
       }
       state = 0;
- 5b8:	31 ff                	xor    %edi,%edi
+ 598:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 5ba:	e8 f3 fd ff ff       	call   3b2 <write>
+ 59a:	e8 13 fe ff ff       	call   3b2 <write>
   for(i = 0; fmt[i]; i++){
- 5bf:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 59f:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
   write(fd, &c, 1);
- 5c3:	83 c4 10             	add    $0x10,%esp
+ 5a3:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 5c6:	84 db                	test   %bl,%bl
- 5c8:	75 89                	jne    553 <printf+0x53>
+ 5a6:	84 db                	test   %bl,%bl
+ 5a8:	75 89                	jne    533 <printf+0x53>
     }
   }
 }
- 5ca:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 5cd:	5b                   	pop    %ebx
- 5ce:	5e                   	pop    %esi
- 5cf:	5f                   	pop    %edi
- 5d0:	5d                   	pop    %ebp
- 5d1:	c3                   	ret    
- 5d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 5aa:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 5ad:	5b                   	pop    %ebx
+ 5ae:	5e                   	pop    %esi
+ 5af:	5f                   	pop    %edi
+ 5b0:	5d                   	pop    %ebp
+ 5b1:	c3                   	ret    
+ 5b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         state = '%';
- 5d8:	bf 25 00 00 00       	mov    $0x25,%edi
- 5dd:	e9 66 ff ff ff       	jmp    548 <printf+0x48>
- 5e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 5b8:	bf 25 00 00 00       	mov    $0x25,%edi
+ 5bd:	e9 66 ff ff ff       	jmp    528 <printf+0x48>
+ 5c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 5e8:	83 ec 0c             	sub    $0xc,%esp
- 5eb:	b9 10 00 00 00       	mov    $0x10,%ecx
- 5f0:	6a 00                	push   $0x0
- 5f2:	8b 7d d4             	mov    -0x2c(%ebp),%edi
- 5f5:	8b 45 08             	mov    0x8(%ebp),%eax
- 5f8:	8b 17                	mov    (%edi),%edx
- 5fa:	e8 61 fe ff ff       	call   460 <printint>
+ 5c8:	83 ec 0c             	sub    $0xc,%esp
+ 5cb:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5d0:	6a 00                	push   $0x0
+ 5d2:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 5d5:	8b 45 08             	mov    0x8(%ebp),%eax
+ 5d8:	8b 17                	mov    (%edi),%edx
+ 5da:	e8 61 fe ff ff       	call   440 <printint>
         ap++;
- 5ff:	89 f8                	mov    %edi,%eax
- 601:	83 c4 10             	add    $0x10,%esp
+ 5df:	89 f8                	mov    %edi,%eax
+ 5e1:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 604:	31 ff                	xor    %edi,%edi
+ 5e4:	31 ff                	xor    %edi,%edi
         ap++;
- 606:	83 c0 04             	add    $0x4,%eax
- 609:	89 45 d4             	mov    %eax,-0x2c(%ebp)
- 60c:	e9 37 ff ff ff       	jmp    548 <printf+0x48>
- 611:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5e6:	83 c0 04             	add    $0x4,%eax
+ 5e9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 5ec:	e9 37 ff ff ff       	jmp    528 <printf+0x48>
+ 5f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 618:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 61b:	8b 08                	mov    (%eax),%ecx
+ 5f8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 5fb:	8b 08                	mov    (%eax),%ecx
         ap++;
- 61d:	83 c0 04             	add    $0x4,%eax
- 620:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 5fd:	83 c0 04             	add    $0x4,%eax
+ 600:	89 45 d4             	mov    %eax,-0x2c(%ebp)
         if(s == 0)
- 623:	85 c9                	test   %ecx,%ecx
- 625:	0f 84 8e 00 00 00    	je     6b9 <printf+0x1b9>
+ 603:	85 c9                	test   %ecx,%ecx
+ 605:	0f 84 8e 00 00 00    	je     699 <printf+0x1b9>
         while(*s != 0){
- 62b:	0f b6 01             	movzbl (%ecx),%eax
+ 60b:	0f b6 01             	movzbl (%ecx),%eax
       state = 0;
- 62e:	31 ff                	xor    %edi,%edi
+ 60e:	31 ff                	xor    %edi,%edi
         s = (char*)*ap;
- 630:	89 cb                	mov    %ecx,%ebx
+ 610:	89 cb                	mov    %ecx,%ebx
         while(*s != 0){
- 632:	84 c0                	test   %al,%al
- 634:	0f 84 0e ff ff ff    	je     548 <printf+0x48>
- 63a:	89 75 d0             	mov    %esi,-0x30(%ebp)
- 63d:	89 de                	mov    %ebx,%esi
- 63f:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 642:	8d 7d e3             	lea    -0x1d(%ebp),%edi
- 645:	8d 76 00             	lea    0x0(%esi),%esi
+ 612:	84 c0                	test   %al,%al
+ 614:	0f 84 0e ff ff ff    	je     528 <printf+0x48>
+ 61a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 61d:	89 de                	mov    %ebx,%esi
+ 61f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 622:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 625:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 648:	83 ec 04             	sub    $0x4,%esp
+ 628:	83 ec 04             	sub    $0x4,%esp
           s++;
- 64b:	83 c6 01             	add    $0x1,%esi
- 64e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+ 62b:	83 c6 01             	add    $0x1,%esi
+ 62e:	88 45 e3             	mov    %al,-0x1d(%ebp)
   write(fd, &c, 1);
- 651:	6a 01                	push   $0x1
- 653:	57                   	push   %edi
- 654:	53                   	push   %ebx
- 655:	e8 58 fd ff ff       	call   3b2 <write>
+ 631:	6a 01                	push   $0x1
+ 633:	57                   	push   %edi
+ 634:	53                   	push   %ebx
+ 635:	e8 78 fd ff ff       	call   3b2 <write>
         while(*s != 0){
- 65a:	0f b6 06             	movzbl (%esi),%eax
- 65d:	83 c4 10             	add    $0x10,%esp
- 660:	84 c0                	test   %al,%al
- 662:	75 e4                	jne    648 <printf+0x148>
- 664:	8b 75 d0             	mov    -0x30(%ebp),%esi
+ 63a:	0f b6 06             	movzbl (%esi),%eax
+ 63d:	83 c4 10             	add    $0x10,%esp
+ 640:	84 c0                	test   %al,%al
+ 642:	75 e4                	jne    628 <printf+0x148>
+ 644:	8b 75 d0             	mov    -0x30(%ebp),%esi
       state = 0;
- 667:	31 ff                	xor    %edi,%edi
- 669:	e9 da fe ff ff       	jmp    548 <printf+0x48>
- 66e:	66 90                	xchg   %ax,%ax
+ 647:	31 ff                	xor    %edi,%edi
+ 649:	e9 da fe ff ff       	jmp    528 <printf+0x48>
+ 64e:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 10, 1);
- 670:	83 ec 0c             	sub    $0xc,%esp
- 673:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 678:	6a 01                	push   $0x1
- 67a:	e9 73 ff ff ff       	jmp    5f2 <printf+0xf2>
- 67f:	90                   	nop
+ 650:	83 ec 0c             	sub    $0xc,%esp
+ 653:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 658:	6a 01                	push   $0x1
+ 65a:	e9 73 ff ff ff       	jmp    5d2 <printf+0xf2>
+ 65f:	90                   	nop
   write(fd, &c, 1);
- 680:	83 ec 04             	sub    $0x4,%esp
- 683:	88 5d e5             	mov    %bl,-0x1b(%ebp)
- 686:	8d 45 e5             	lea    -0x1b(%ebp),%eax
- 689:	6a 01                	push   $0x1
- 68b:	e9 21 ff ff ff       	jmp    5b1 <printf+0xb1>
+ 660:	83 ec 04             	sub    $0x4,%esp
+ 663:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 666:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 669:	6a 01                	push   $0x1
+ 66b:	e9 21 ff ff ff       	jmp    591 <printf+0xb1>
         putc(fd, *ap);
- 690:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 670:	8b 7d d4             	mov    -0x2c(%ebp),%edi
   write(fd, &c, 1);
- 693:	83 ec 04             	sub    $0x4,%esp
+ 673:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 696:	8b 07                	mov    (%edi),%eax
+ 676:	8b 07                	mov    (%edi),%eax
   write(fd, &c, 1);
- 698:	6a 01                	push   $0x1
+ 678:	6a 01                	push   $0x1
         ap++;
- 69a:	83 c7 04             	add    $0x4,%edi
+ 67a:	83 c7 04             	add    $0x4,%edi
         putc(fd, *ap);
- 69d:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 67d:	88 45 e4             	mov    %al,-0x1c(%ebp)
   write(fd, &c, 1);
- 6a0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
- 6a3:	50                   	push   %eax
- 6a4:	ff 75 08             	pushl  0x8(%ebp)
- 6a7:	e8 06 fd ff ff       	call   3b2 <write>
+ 680:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 683:	50                   	push   %eax
+ 684:	ff 75 08             	pushl  0x8(%ebp)
+ 687:	e8 26 fd ff ff       	call   3b2 <write>
         ap++;
- 6ac:	89 7d d4             	mov    %edi,-0x2c(%ebp)
- 6af:	83 c4 10             	add    $0x10,%esp
+ 68c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 68f:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 6b2:	31 ff                	xor    %edi,%edi
- 6b4:	e9 8f fe ff ff       	jmp    548 <printf+0x48>
+ 692:	31 ff                	xor    %edi,%edi
+ 694:	e9 8f fe ff ff       	jmp    528 <printf+0x48>
           s = "(null)";
- 6b9:	bb 7b 08 00 00       	mov    $0x87b,%ebx
+ 699:	bb 5b 08 00 00       	mov    $0x85b,%ebx
         while(*s != 0){
- 6be:	b8 28 00 00 00       	mov    $0x28,%eax
- 6c3:	e9 72 ff ff ff       	jmp    63a <printf+0x13a>
- 6c8:	66 90                	xchg   %ax,%ax
- 6ca:	66 90                	xchg   %ax,%ax
- 6cc:	66 90                	xchg   %ax,%ax
- 6ce:	66 90                	xchg   %ax,%ax
+ 69e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 6a3:	e9 72 ff ff ff       	jmp    61a <printf+0x13a>
+ 6a8:	66 90                	xchg   %ax,%ax
+ 6aa:	66 90                	xchg   %ax,%ax
+ 6ac:	66 90                	xchg   %ax,%ax
+ 6ae:	66 90                	xchg   %ax,%ax
 
-000006d0 <free>:
+000006b0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 6d0:	55                   	push   %ebp
+ 6b0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6d1:	a1 34 0b 00 00       	mov    0xb34,%eax
+ 6b1:	a1 14 0b 00 00       	mov    0xb14,%eax
 {
- 6d6:	89 e5                	mov    %esp,%ebp
- 6d8:	57                   	push   %edi
- 6d9:	56                   	push   %esi
- 6da:	53                   	push   %ebx
- 6db:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6b6:	89 e5                	mov    %esp,%ebp
+ 6b8:	57                   	push   %edi
+ 6b9:	56                   	push   %esi
+ 6ba:	53                   	push   %ebx
+ 6bb:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 6de:	8d 4b f8             	lea    -0x8(%ebx),%ecx
- 6e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6be:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 6c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6e8:	39 c8                	cmp    %ecx,%eax
- 6ea:	8b 10                	mov    (%eax),%edx
- 6ec:	73 32                	jae    720 <free+0x50>
- 6ee:	39 d1                	cmp    %edx,%ecx
- 6f0:	72 04                	jb     6f6 <free+0x26>
+ 6c8:	39 c8                	cmp    %ecx,%eax
+ 6ca:	8b 10                	mov    (%eax),%edx
+ 6cc:	73 32                	jae    700 <free+0x50>
+ 6ce:	39 d1                	cmp    %edx,%ecx
+ 6d0:	72 04                	jb     6d6 <free+0x26>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6f2:	39 d0                	cmp    %edx,%eax
- 6f4:	72 32                	jb     728 <free+0x58>
+ 6d2:	39 d0                	cmp    %edx,%eax
+ 6d4:	72 32                	jb     708 <free+0x58>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 6f6:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 6f9:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 6fc:	39 fa                	cmp    %edi,%edx
- 6fe:	74 30                	je     730 <free+0x60>
+ 6d6:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6d9:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6dc:	39 fa                	cmp    %edi,%edx
+ 6de:	74 30                	je     710 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 700:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 6e0:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 703:	8b 50 04             	mov    0x4(%eax),%edx
- 706:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 709:	39 f1                	cmp    %esi,%ecx
- 70b:	74 3a                	je     747 <free+0x77>
+ 6e3:	8b 50 04             	mov    0x4(%eax),%edx
+ 6e6:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6e9:	39 f1                	cmp    %esi,%ecx
+ 6eb:	74 3a                	je     727 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 70d:	89 08                	mov    %ecx,(%eax)
+ 6ed:	89 08                	mov    %ecx,(%eax)
   freep = p;
- 70f:	a3 34 0b 00 00       	mov    %eax,0xb34
+ 6ef:	a3 14 0b 00 00       	mov    %eax,0xb14
 }
- 714:	5b                   	pop    %ebx
- 715:	5e                   	pop    %esi
- 716:	5f                   	pop    %edi
- 717:	5d                   	pop    %ebp
- 718:	c3                   	ret    
- 719:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6f4:	5b                   	pop    %ebx
+ 6f5:	5e                   	pop    %esi
+ 6f6:	5f                   	pop    %edi
+ 6f7:	5d                   	pop    %ebp
+ 6f8:	c3                   	ret    
+ 6f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 720:	39 d0                	cmp    %edx,%eax
- 722:	72 04                	jb     728 <free+0x58>
- 724:	39 d1                	cmp    %edx,%ecx
- 726:	72 ce                	jb     6f6 <free+0x26>
+ 700:	39 d0                	cmp    %edx,%eax
+ 702:	72 04                	jb     708 <free+0x58>
+ 704:	39 d1                	cmp    %edx,%ecx
+ 706:	72 ce                	jb     6d6 <free+0x26>
 {
- 728:	89 d0                	mov    %edx,%eax
- 72a:	eb bc                	jmp    6e8 <free+0x18>
- 72c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 708:	89 d0                	mov    %edx,%eax
+ 70a:	eb bc                	jmp    6c8 <free+0x18>
+ 70c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     bp->s.size += p->s.ptr->s.size;
- 730:	03 72 04             	add    0x4(%edx),%esi
- 733:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 710:	03 72 04             	add    0x4(%edx),%esi
+ 713:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 736:	8b 10                	mov    (%eax),%edx
- 738:	8b 12                	mov    (%edx),%edx
- 73a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 716:	8b 10                	mov    (%eax),%edx
+ 718:	8b 12                	mov    (%edx),%edx
+ 71a:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 73d:	8b 50 04             	mov    0x4(%eax),%edx
- 740:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 743:	39 f1                	cmp    %esi,%ecx
- 745:	75 c6                	jne    70d <free+0x3d>
+ 71d:	8b 50 04             	mov    0x4(%eax),%edx
+ 720:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 723:	39 f1                	cmp    %esi,%ecx
+ 725:	75 c6                	jne    6ed <free+0x3d>
     p->s.size += bp->s.size;
- 747:	03 53 fc             	add    -0x4(%ebx),%edx
+ 727:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 74a:	a3 34 0b 00 00       	mov    %eax,0xb34
+ 72a:	a3 14 0b 00 00       	mov    %eax,0xb14
     p->s.size += bp->s.size;
- 74f:	89 50 04             	mov    %edx,0x4(%eax)
+ 72f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 752:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 755:	89 10                	mov    %edx,(%eax)
+ 732:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 735:	89 10                	mov    %edx,(%eax)
 }
- 757:	5b                   	pop    %ebx
- 758:	5e                   	pop    %esi
- 759:	5f                   	pop    %edi
- 75a:	5d                   	pop    %ebp
- 75b:	c3                   	ret    
- 75c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 737:	5b                   	pop    %ebx
+ 738:	5e                   	pop    %esi
+ 739:	5f                   	pop    %edi
+ 73a:	5d                   	pop    %ebp
+ 73b:	c3                   	ret    
+ 73c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-00000760 <malloc>:
+00000740 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 760:	55                   	push   %ebp
- 761:	89 e5                	mov    %esp,%ebp
- 763:	57                   	push   %edi
- 764:	56                   	push   %esi
- 765:	53                   	push   %ebx
- 766:	83 ec 0c             	sub    $0xc,%esp
+ 740:	55                   	push   %ebp
+ 741:	89 e5                	mov    %esp,%ebp
+ 743:	57                   	push   %edi
+ 744:	56                   	push   %esi
+ 745:	53                   	push   %ebx
+ 746:	83 ec 0c             	sub    $0xc,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 769:	8b 45 08             	mov    0x8(%ebp),%eax
+ 749:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 76c:	8b 15 34 0b 00 00    	mov    0xb34,%edx
+ 74c:	8b 15 14 0b 00 00    	mov    0xb14,%edx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 772:	8d 78 07             	lea    0x7(%eax),%edi
- 775:	c1 ef 03             	shr    $0x3,%edi
- 778:	83 c7 01             	add    $0x1,%edi
+ 752:	8d 78 07             	lea    0x7(%eax),%edi
+ 755:	c1 ef 03             	shr    $0x3,%edi
+ 758:	83 c7 01             	add    $0x1,%edi
   if((prevp = freep) == 0){
- 77b:	85 d2                	test   %edx,%edx
- 77d:	0f 84 9d 00 00 00    	je     820 <malloc+0xc0>
- 783:	8b 02                	mov    (%edx),%eax
- 785:	8b 48 04             	mov    0x4(%eax),%ecx
+ 75b:	85 d2                	test   %edx,%edx
+ 75d:	0f 84 9d 00 00 00    	je     800 <malloc+0xc0>
+ 763:	8b 02                	mov    (%edx),%eax
+ 765:	8b 48 04             	mov    0x4(%eax),%ecx
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
     if(p->s.size >= nunits){
- 788:	39 cf                	cmp    %ecx,%edi
- 78a:	76 6c                	jbe    7f8 <malloc+0x98>
- 78c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
- 792:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 797:	0f 43 df             	cmovae %edi,%ebx
+ 768:	39 cf                	cmp    %ecx,%edi
+ 76a:	76 6c                	jbe    7d8 <malloc+0x98>
+ 76c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 772:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 777:	0f 43 df             	cmovae %edi,%ebx
   p = sbrk(nu * sizeof(Header));
- 79a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
- 7a1:	eb 0e                	jmp    7b1 <malloc+0x51>
- 7a3:	90                   	nop
- 7a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 77a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 781:	eb 0e                	jmp    791 <malloc+0x51>
+ 783:	90                   	nop
+ 784:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 7a8:	8b 02                	mov    (%edx),%eax
+ 788:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 7aa:	8b 48 04             	mov    0x4(%eax),%ecx
- 7ad:	39 f9                	cmp    %edi,%ecx
- 7af:	73 47                	jae    7f8 <malloc+0x98>
+ 78a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 78d:	39 f9                	cmp    %edi,%ecx
+ 78f:	73 47                	jae    7d8 <malloc+0x98>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 7b1:	39 05 34 0b 00 00    	cmp    %eax,0xb34
- 7b7:	89 c2                	mov    %eax,%edx
- 7b9:	75 ed                	jne    7a8 <malloc+0x48>
+ 791:	39 05 14 0b 00 00    	cmp    %eax,0xb14
+ 797:	89 c2                	mov    %eax,%edx
+ 799:	75 ed                	jne    788 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 7bb:	83 ec 0c             	sub    $0xc,%esp
- 7be:	56                   	push   %esi
- 7bf:	e8 56 fc ff ff       	call   41a <sbrk>
+ 79b:	83 ec 0c             	sub    $0xc,%esp
+ 79e:	56                   	push   %esi
+ 79f:	e8 76 fc ff ff       	call   41a <sbrk>
   if(p == (char*)-1)
- 7c4:	83 c4 10             	add    $0x10,%esp
- 7c7:	83 f8 ff             	cmp    $0xffffffff,%eax
- 7ca:	74 1c                	je     7e8 <malloc+0x88>
+ 7a4:	83 c4 10             	add    $0x10,%esp
+ 7a7:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7aa:	74 1c                	je     7c8 <malloc+0x88>
   hp->s.size = nu;
- 7cc:	89 58 04             	mov    %ebx,0x4(%eax)
+ 7ac:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 7cf:	83 ec 0c             	sub    $0xc,%esp
- 7d2:	83 c0 08             	add    $0x8,%eax
- 7d5:	50                   	push   %eax
- 7d6:	e8 f5 fe ff ff       	call   6d0 <free>
+ 7af:	83 ec 0c             	sub    $0xc,%esp
+ 7b2:	83 c0 08             	add    $0x8,%eax
+ 7b5:	50                   	push   %eax
+ 7b6:	e8 f5 fe ff ff       	call   6b0 <free>
   return freep;
- 7db:	8b 15 34 0b 00 00    	mov    0xb34,%edx
+ 7bb:	8b 15 14 0b 00 00    	mov    0xb14,%edx
       if((p = morecore(nunits)) == 0)
- 7e1:	83 c4 10             	add    $0x10,%esp
- 7e4:	85 d2                	test   %edx,%edx
- 7e6:	75 c0                	jne    7a8 <malloc+0x48>
+ 7c1:	83 c4 10             	add    $0x10,%esp
+ 7c4:	85 d2                	test   %edx,%edx
+ 7c6:	75 c0                	jne    788 <malloc+0x48>
         return 0;
   }
 }
- 7e8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7c8:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 7eb:	31 c0                	xor    %eax,%eax
+ 7cb:	31 c0                	xor    %eax,%eax
 }
- 7ed:	5b                   	pop    %ebx
- 7ee:	5e                   	pop    %esi
- 7ef:	5f                   	pop    %edi
- 7f0:	5d                   	pop    %ebp
- 7f1:	c3                   	ret    
- 7f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 7cd:	5b                   	pop    %ebx
+ 7ce:	5e                   	pop    %esi
+ 7cf:	5f                   	pop    %edi
+ 7d0:	5d                   	pop    %ebp
+ 7d1:	c3                   	ret    
+ 7d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 7f8:	39 cf                	cmp    %ecx,%edi
- 7fa:	74 54                	je     850 <malloc+0xf0>
+ 7d8:	39 cf                	cmp    %ecx,%edi
+ 7da:	74 54                	je     830 <malloc+0xf0>
         p->s.size -= nunits;
- 7fc:	29 f9                	sub    %edi,%ecx
- 7fe:	89 48 04             	mov    %ecx,0x4(%eax)
+ 7dc:	29 f9                	sub    %edi,%ecx
+ 7de:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 801:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ 7e1:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 804:	89 78 04             	mov    %edi,0x4(%eax)
+ 7e4:	89 78 04             	mov    %edi,0x4(%eax)
       freep = prevp;
- 807:	89 15 34 0b 00 00    	mov    %edx,0xb34
+ 7e7:	89 15 14 0b 00 00    	mov    %edx,0xb14
 }
- 80d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7ed:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 810:	83 c0 08             	add    $0x8,%eax
+ 7f0:	83 c0 08             	add    $0x8,%eax
 }
- 813:	5b                   	pop    %ebx
- 814:	5e                   	pop    %esi
- 815:	5f                   	pop    %edi
- 816:	5d                   	pop    %ebp
- 817:	c3                   	ret    
- 818:	90                   	nop
- 819:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7f3:	5b                   	pop    %ebx
+ 7f4:	5e                   	pop    %esi
+ 7f5:	5f                   	pop    %edi
+ 7f6:	5d                   	pop    %ebp
+ 7f7:	c3                   	ret    
+ 7f8:	90                   	nop
+ 7f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     base.s.ptr = freep = prevp = &base;
- 820:	c7 05 34 0b 00 00 38 	movl   $0xb38,0xb34
- 827:	0b 00 00 
- 82a:	c7 05 38 0b 00 00 38 	movl   $0xb38,0xb38
- 831:	0b 00 00 
+ 800:	c7 05 14 0b 00 00 18 	movl   $0xb18,0xb14
+ 807:	0b 00 00 
+ 80a:	c7 05 18 0b 00 00 18 	movl   $0xb18,0xb18
+ 811:	0b 00 00 
     base.s.size = 0;
- 834:	b8 38 0b 00 00       	mov    $0xb38,%eax
- 839:	c7 05 3c 0b 00 00 00 	movl   $0x0,0xb3c
- 840:	00 00 00 
- 843:	e9 44 ff ff ff       	jmp    78c <malloc+0x2c>
- 848:	90                   	nop
- 849:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 814:	b8 18 0b 00 00       	mov    $0xb18,%eax
+ 819:	c7 05 1c 0b 00 00 00 	movl   $0x0,0xb1c
+ 820:	00 00 00 
+ 823:	e9 44 ff ff ff       	jmp    76c <malloc+0x2c>
+ 828:	90                   	nop
+ 829:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         prevp->s.ptr = p->s.ptr;
- 850:	8b 08                	mov    (%eax),%ecx
- 852:	89 0a                	mov    %ecx,(%edx)
- 854:	eb b1                	jmp    807 <malloc+0xa7>
+ 830:	8b 08                	mov    (%eax),%ecx
+ 832:	89 0a                	mov    %ecx,(%edx)
+ 834:	eb b1                	jmp    7e7 <malloc+0xa7>
Binary files main/stressfs.o and xv6-public/stressfs.o differ
diff -urN main/stressfs.sym xv6-public/stressfs.sym
--- main/stressfs.sym	2022-09-26 21:21:17.132844000 +0530
+++ xv6-public/stressfs.sym	2022-10-31 22:34:17.494134911 +0530
@@ -1,7 +1,7 @@
 00000000 .text
-00000858 .rodata
-00000898 .eh_frame
-00000b34 .bss
+00000838 .rodata
+00000878 .eh_frame
+00000b14 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,19 +13,18 @@
 00000000 stressfs.c
 00000000 ulib.c
 00000000 printf.c
-00000460 printint
-00000884 digits.1050
+00000440 printint
+00000864 digits.1044
 00000000 umalloc.c
-00000b34 freep
-00000b38 base
+00000b14 freep
+00000b18 base
 00000140 strcpy
-00000500 printf
-00000442 thread_exit
+000004e0 printf
 00000360 memmove
 000003da mknod
 00000250 gets
 00000412 getpid
-00000760 malloc
+00000740 malloc
 00000422 sleep
 000003a2 pipe
 000003b2 write
@@ -39,23 +38,21 @@
 0000038a fork
 0000041a sbrk
 0000042a uptime
-00000b34 __bss_start
+00000b14 __bss_start
 000001f0 memset
 00000000 main
 00000170 strcmp
 0000040a dup
 000002d0 stat
-00000b34 _edata
-00000b40 _end
+00000b14 _edata
+00000b20 _end
 000003f2 link
 00000392 exit
 00000320 atoi
-0000044a draw
+00000432 draw
 000001c0 strlen
 000003d2 open
 00000210 strchr
-00000432 thread_create
 000003fa mkdir
 000003ba close
-0000043a thread_join
-000006d0 free
+000006b0 free
Binary files main/string.o and xv6-public/string.o differ
Binary files main/swtch.o and xv6-public/swtch.o differ
diff -urN main/syscall.c xv6-public/syscall.c
--- main/syscall.c	2022-09-03 13:44:42.000000000 +0530
+++ xv6-public/syscall.c	2022-08-12 06:05:52.000000000 +0530
@@ -103,9 +103,6 @@
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
-extern int sys_thread_create(void);
-extern int sys_thread_join(void);
-extern int sys_thread_exit(void);
 extern int sys_draw(void);
 
 static int (*syscalls[])(void) = {
@@ -130,10 +127,7 @@
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
-[SYS_thread_create]    sys_thread_create,
-[SYS_thread_join]    sys_thread_join,
-[SYS_thread_exit]    sys_thread_exit,
-[SYS_draw]    sys_draw,
+[SYS_draw]  sys_draw,
 };
 
 void
diff -urN main/syscall.h xv6-public/syscall.h
--- main/syscall.h	2022-09-03 13:45:22.000000000 +0530
+++ xv6-public/syscall.h	2022-08-12 06:04:52.000000000 +0530
@@ -20,7 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
-#define SYS_thread_create 22
-#define SYS_thread_exit 23
-#define SYS_thread_join 24
-#define SYS_draw   25
\ No newline at end of file
+#define SYS_draw 22
+
Binary files main/syscall.o and xv6-public/syscall.o differ
Binary files main/sysfile.o and xv6-public/sysfile.o differ
diff -urN main/sysproc.c xv6-public/sysproc.c
--- main/sysproc.c	2022-09-05 15:31:13.000000000 +0530
+++ xv6-public/sysproc.c	2022-08-12 06:06:36.000000000 +0530
@@ -90,43 +90,26 @@
   return xticks;
 }
 
-int sys_thread_create(void){
-  void (*fcn)(void*),*arg,*stack;
-  argptr(0,(void*) &fcn, sizeof(void(*)(void *)));
-  argptr(1, (void*) &arg, sizeof(void*));
-  argptr(2, (void*) &stack, sizeof(void *));
-  return thread_create(fcn,arg,stack);
-}
-
-int sys_thread_join(void){
-  return thread_join();
-}
-
-
-int sys_thread_exit(void){
-  return thread_exit();
-}
-
-int 
-sys_draw(void){
+int
+sys_draw(void)
+{
   void* buf;
   uint size;
-  argptr(0,(void*)&buf,sizeof(buf));
-  argptr(1,(void*)&size,sizeof(size));
-  char figure[] = "\n\
-##           ##  ######\n\
-# #         # #  #    #\n\
-#  #       #  #  #    #\n\
-#   #     #   #  ######\n\
-#    #   #    #       #\n\
-#     # #     #       #\n\
-#      #      #  ######\n\
-\n\
-Members-\n\
-HARSH 200123022\n\
-PRAGYAN 200123080\n\
-SAHIL 200123081\n\n";
-  if(sizeof(figure)>size)return -1;
-  strncpy((char *)buf,figure,size);
-  return sizeof(figure);                
+
+  argptr(0, (void*)&buf, sizeof(buf));
+  argptr(1, (void*)&size, sizeof(size));
+  char text[] = "\n\
+  		 ####    ##   #    # # #\n\
+		#       #  #  #    # # #\n\
+		 ####  #    # ###### # #\n\
+		     # ###### #    # # #\n\
+		#    # #    # #    # # #\n\
+		 ####  #    # #    # # ######\n\n";
+		 
+		 
+  if(sizeof(text)>size)
+    return -1;
+
+  strncpy((char *)buf, text, size);
+  return sizeof(text);
 }
Binary files main/sysproc.o and xv6-public/sysproc.o differ
Binary files main/_thread and xv6-public/_thread differ
diff -urN main/thread.asm xv6-public/thread.asm
--- main/thread.asm	2022-09-26 21:21:17.577066000 +0530
+++ xv6-public/thread.asm	1970-01-01 05:30:00.000000000 +0530
@@ -1,1471 +0,0 @@
-
-_thread:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-    printf(1, "Done s:%x\n", b->name);
-    thread_exit();
-
-    return;
-}
-int main(int argc, char *argv[]) {
-   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-   4:	83 e4 f0             	and    $0xfffffff0,%esp
-
-    //thread_spin_init(&lock);
-    thread_mutex_init(&lock2);
-
-    struct balance b1 = {"b1", 3200};
-   7:	31 d2                	xor    %edx,%edx
-   9:	31 c0                	xor    %eax,%eax
-int main(int argc, char *argv[]) {
-   b:	ff 71 fc             	pushl  -0x4(%ecx)
-   e:	55                   	push   %ebp
-   f:	89 e5                	mov    %esp,%ebp
-  11:	57                   	push   %edi
-  12:	56                   	push   %esi
-  13:	53                   	push   %ebx
-  14:	51                   	push   %ecx
-  15:	83 ec 58             	sub    $0x58,%esp
-                  "1" (newval) :
-                  "cc");
-    return result;
-}
-void thread_mutex_init(struct thread_mutex *lk){
-    lk->lock = 0;
-  18:	c7 05 d8 0d 00 00 00 	movl   $0x0,0xdd8
-  1f:	00 00 00 
-    lk->name = "null";
-  22:	c7 05 dc 0d 00 00 98 	movl   $0x998,0xddc
-  29:	09 00 00 
-    struct balance b1 = {"b1", 3200};
-  2c:	c7 45 a0 62 31 00 00 	movl   $0x3162,-0x60(%ebp)
-  33:	89 54 05 a4          	mov    %edx,-0x5c(%ebp,%eax,1)
-  37:	83 c0 04             	add    $0x4,%eax
-  3a:	83 f8 1c             	cmp    $0x1c,%eax
-  3d:	72 f4                	jb     33 <main+0x33>
-  3f:	c7 45 c0 80 0c 00 00 	movl   $0xc80,-0x40(%ebp)
-    struct balance b2 = {"b2", 2800};
-  46:	c7 45 c4 62 32 00 00 	movl   $0x3262,-0x3c(%ebp)
-  4d:	31 d2                	xor    %edx,%edx
-  4f:	31 c0                	xor    %eax,%eax
-  51:	89 54 05 c8          	mov    %edx,-0x38(%ebp,%eax,1)
-  55:	83 c0 04             	add    $0x4,%eax
-  58:	83 f8 1c             	cmp    $0x1c,%eax
-  5b:	72 f4                	jb     51 <main+0x51>
-
-    void *s1, *s2;
-    int t1, t2, r1, r2;
-
-    s1 = malloc(4096);
-  5d:	83 ec 0c             	sub    $0xc,%esp
-    struct balance b2 = {"b2", 2800};
-  60:	c7 45 e4 f0 0a 00 00 	movl   $0xaf0,-0x1c(%ebp)
-    s1 = malloc(4096);
-  67:	68 00 10 00 00       	push   $0x1000
-  6c:	e8 2f 08 00 00       	call   8a0 <malloc>
-    s2 = malloc(4096);
-  71:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
-    s1 = malloc(4096);
-  78:	89 c3                	mov    %eax,%ebx
-    s2 = malloc(4096);
-  7a:	e8 21 08 00 00       	call   8a0 <malloc>
-  7f:	89 c6                	mov    %eax,%esi
-
-    t1 = thread_create(do_work, (void*)&b1, s1);
-  81:	8d 45 a0             	lea    -0x60(%ebp),%eax
-  84:	83 c4 0c             	add    $0xc,%esp
-  87:	53                   	push   %ebx
-  88:	50                   	push   %eax
-  89:	68 50 01 00 00       	push   $0x150
-  8e:	e8 df 04 00 00       	call   572 <thread_create>
-  93:	89 c3                	mov    %eax,%ebx
-    t2 = thread_create(do_work, (void*)&b2, s2);
-  95:	8d 45 c4             	lea    -0x3c(%ebp),%eax
-  98:	83 c4 0c             	add    $0xc,%esp
-  9b:	56                   	push   %esi
-  9c:	50                   	push   %eax
-  9d:	68 50 01 00 00       	push   $0x150
-  a2:	e8 cb 04 00 00       	call   572 <thread_create>
-  a7:	89 c7                	mov    %eax,%edi
-
-    r1 = thread_join();
-  a9:	e8 cc 04 00 00       	call   57a <thread_join>
-  ae:	89 c6                	mov    %eax,%esi
-    r2 = thread_join();
-  b0:	e8 c5 04 00 00       	call   57a <thread_join>
-
-    printf(1, "Threads finished: (%d):%d, (%d):%d, shared balance:%d\n",
-  b5:	8b 15 c0 0d 00 00    	mov    0xdc0,%edx
-  bb:	83 c4 0c             	add    $0xc,%esp
-  be:	52                   	push   %edx
-  bf:	50                   	push   %eax
-  c0:	57                   	push   %edi
-  c1:	56                   	push   %esi
-  c2:	53                   	push   %ebx
-  c3:	68 c0 09 00 00       	push   $0x9c0
-  c8:	6a 01                	push   $0x1
-  ca:	e8 71 05 00 00       	call   640 <printf>
-    t1, r1, t2, r2, total_balance);
-    exit();
-  cf:	83 c4 20             	add    $0x20,%esp
-  d2:	e8 fb 03 00 00       	call   4d2 <exit>
-  d7:	66 90                	xchg   %ax,%ax
-  d9:	66 90                	xchg   %ax,%ax
-  db:	66 90                	xchg   %ax,%ax
-  dd:	66 90                	xchg   %ax,%ax
-  df:	90                   	nop
-
-000000e0 <thread_mutex_init>:
-void thread_mutex_init(struct thread_mutex *lk){
-  e0:	55                   	push   %ebp
-  e1:	89 e5                	mov    %esp,%ebp
-  e3:	8b 45 08             	mov    0x8(%ebp),%eax
-    lk->lock = 0;
-  e6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
-    lk->name = "null";
-  ec:	c7 40 04 98 09 00 00 	movl   $0x998,0x4(%eax)
-}
-  f3:	5d                   	pop    %ebp
-  f4:	c3                   	ret    
-  f5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-00000100 <thread_mutex_lock>:
-
-void thread_mutex_lock(struct thread_mutex *lk){
- 100:	55                   	push   %ebp
-    asm volatile("lock; xchgl %0, %1" :
- 101:	b8 01 00 00 00       	mov    $0x1,%eax
-void thread_mutex_lock(struct thread_mutex *lk){
- 106:	89 e5                	mov    %esp,%ebp
- 108:	56                   	push   %esi
- 109:	53                   	push   %ebx
- 10a:	8b 5d 08             	mov    0x8(%ebp),%ebx
-    asm volatile("lock; xchgl %0, %1" :
- 10d:	f0 87 03             	lock xchg %eax,(%ebx)
-    while(xchg2(&lk->lock,1)!=0){
- 110:	85 c0                	test   %eax,%eax
- 112:	74 22                	je     136 <thread_mutex_lock+0x36>
-    asm volatile("lock; xchgl %0, %1" :
- 114:	be 01 00 00 00       	mov    $0x1,%esi
- 119:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-        sleep(1);
- 120:	83 ec 0c             	sub    $0xc,%esp
- 123:	6a 01                	push   $0x1
- 125:	e8 38 04 00 00       	call   562 <sleep>
-    asm volatile("lock; xchgl %0, %1" :
- 12a:	89 f0                	mov    %esi,%eax
- 12c:	f0 87 03             	lock xchg %eax,(%ebx)
-    while(xchg2(&lk->lock,1)!=0){
- 12f:	83 c4 10             	add    $0x10,%esp
- 132:	85 c0                	test   %eax,%eax
- 134:	75 ea                	jne    120 <thread_mutex_lock+0x20>
-    }
-
-    __sync_synchronize();
- 136:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
-}
- 13b:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 13e:	5b                   	pop    %ebx
- 13f:	5e                   	pop    %esi
- 140:	5d                   	pop    %ebp
- 141:	c3                   	ret    
- 142:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 149:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-00000150 <do_work>:
-{
- 150:	55                   	push   %ebp
- 151:	89 e5                	mov    %esp,%ebp
- 153:	56                   	push   %esi
- 154:	53                   	push   %ebx
- 155:	8b 5d 08             	mov    0x8(%ebp),%ebx
-    printf(1, "Starting do_work: s:%s\n", b->name);
- 158:	83 ec 04             	sub    $0x4,%esp
- 15b:	53                   	push   %ebx
- 15c:	68 9d 09 00 00       	push   $0x99d
- 161:	6a 01                	push   $0x1
- 163:	e8 d8 04 00 00       	call   640 <printf>
-    for (i = 0; i < b->amount; i++){
- 168:	8b 43 20             	mov    0x20(%ebx),%eax
- 16b:	83 c4 10             	add    $0x10,%esp
- 16e:	85 c0                	test   %eax,%eax
- 170:	7e 4b                	jle    1bd <do_work+0x6d>
- 172:	31 f6                	xor    %esi,%esi
- 174:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-        thread_mutex_lock(&lock2);
- 178:	83 ec 0c             	sub    $0xc,%esp
- 17b:	68 d8 0d 00 00       	push   $0xdd8
- 180:	e8 7b ff ff ff       	call   100 <thread_mutex_lock>
-        old = total_balance;
- 185:	8b 15 c0 0d 00 00    	mov    0xdc0,%edx
- 18b:	83 c4 10             	add    $0x10,%esp
- 18e:	b8 a0 86 01 00       	mov    $0x186a0,%eax
- 193:	90                   	nop
- 194:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    __asm volatile( "nop" ::: );
- 198:	90                   	nop
-    for (i = 0; i < d; i++)
- 199:	83 e8 01             	sub    $0x1,%eax
- 19c:	75 fa                	jne    198 <do_work+0x48>
-        total_balance = old + 1;
- 19e:	8d 42 01             	lea    0x1(%edx),%eax
- 1a1:	a3 c0 0d 00 00       	mov    %eax,0xdc0
-
-void thread_mutex_unlock(struct thread_mutex *lk){
-    __sync_synchronize();
- 1a6:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
-    asm volatile("movl $0, %0" : "+m" (lk->lock) : );
- 1ab:	c7 05 d8 0d 00 00 00 	movl   $0x0,0xdd8
- 1b2:	00 00 00 
-    for (i = 0; i < b->amount; i++){
- 1b5:	83 c6 01             	add    $0x1,%esi
- 1b8:	39 73 20             	cmp    %esi,0x20(%ebx)
- 1bb:	7f bb                	jg     178 <do_work+0x28>
-    printf(1, "Done s:%x\n", b->name);
- 1bd:	83 ec 04             	sub    $0x4,%esp
- 1c0:	53                   	push   %ebx
- 1c1:	68 b5 09 00 00       	push   $0x9b5
- 1c6:	6a 01                	push   $0x1
- 1c8:	e8 73 04 00 00       	call   640 <printf>
-    thread_exit();
- 1cd:	83 c4 10             	add    $0x10,%esp
-}
- 1d0:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 1d3:	5b                   	pop    %ebx
- 1d4:	5e                   	pop    %esi
- 1d5:	5d                   	pop    %ebp
-    thread_exit();
- 1d6:	e9 a7 03 00 00       	jmp    582 <thread_exit>
- 1db:	90                   	nop
- 1dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000001e0 <thread_mutex_unlock>:
-void thread_mutex_unlock(struct thread_mutex *lk){
- 1e0:	55                   	push   %ebp
- 1e1:	89 e5                	mov    %esp,%ebp
- 1e3:	8b 45 08             	mov    0x8(%ebp),%eax
-    __sync_synchronize();
- 1e6:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
-    asm volatile("movl $0, %0" : "+m" (lk->lock) : );
- 1eb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
-}
- 1f1:	5d                   	pop    %ebp
- 1f2:	c3                   	ret    
- 1f3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 1f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-00000200 <thread_spin_init>:
-                  "+m" (*addr), "=a" (result) :
-                  "1" (newval) :
-                  "cc");
-    return result;
-}
-void thread_spin_init(struct thread_spinlock *lk){
- 200:	55                   	push   %ebp
- 201:	89 e5                	mov    %esp,%ebp
- 203:	8b 45 08             	mov    0x8(%ebp),%eax
-    lk->lock = 0;
- 206:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
-    lk->name = "null";
- 20c:	c7 40 04 98 09 00 00 	movl   $0x998,0x4(%eax)
-}
- 213:	5d                   	pop    %ebp
- 214:	c3                   	ret    
- 215:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 219:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-00000220 <thread_spin_lock>:
-
-void thread_spin_lock(struct thread_spinlock *lk){
- 220:	55                   	push   %ebp
-    asm volatile("lock; xchgl %0, %1" :
- 221:	b9 01 00 00 00       	mov    $0x1,%ecx
-void thread_spin_lock(struct thread_spinlock *lk){
- 226:	89 e5                	mov    %esp,%ebp
- 228:	8b 55 08             	mov    0x8(%ebp),%edx
- 22b:	90                   	nop
- 22c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    asm volatile("lock; xchgl %0, %1" :
- 230:	89 c8                	mov    %ecx,%eax
- 232:	f0 87 02             	lock xchg %eax,(%edx)
-    while(xchg(&lk->lock,1)!=0);
- 235:	85 c0                	test   %eax,%eax
- 237:	75 f7                	jne    230 <thread_spin_lock+0x10>
-    __sync_synchronize();
- 239:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
-}
- 23e:	5d                   	pop    %ebp
- 23f:	c3                   	ret    
-
-00000240 <thread_spin_unlock>:
-
-void thread_spin_unlock(struct thread_spinlock *lk){
- 240:	55                   	push   %ebp
- 241:	89 e5                	mov    %esp,%ebp
- 243:	8b 45 08             	mov    0x8(%ebp),%eax
-    __sync_synchronize();
- 246:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
-    asm volatile("movl $0, %0" : "+m" (lk->lock) : );
- 24b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
-}
- 251:	5d                   	pop    %ebp
- 252:	c3                   	ret    
- 253:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 259:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-00000260 <delay>:
-volatile unsigned int delay (unsigned int d){
- 260:	55                   	push   %ebp
- 261:	89 e5                	mov    %esp,%ebp
- 263:	8b 45 08             	mov    0x8(%ebp),%eax
-    for (i = 0; i < d; i++)
- 266:	85 c0                	test   %eax,%eax
- 268:	74 0e                	je     278 <delay+0x18>
- 26a:	31 d2                	xor    %edx,%edx
- 26c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    __asm volatile( "nop" ::: );
- 270:	90                   	nop
-    for (i = 0; i < d; i++)
- 271:	83 c2 01             	add    $0x1,%edx
- 274:	39 d0                	cmp    %edx,%eax
- 276:	75 f8                	jne    270 <delay+0x10>
-}
- 278:	5d                   	pop    %ebp
- 279:	c3                   	ret    
- 27a:	66 90                	xchg   %ax,%ax
- 27c:	66 90                	xchg   %ax,%ax
- 27e:	66 90                	xchg   %ax,%ax
-
-00000280 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
- 280:	55                   	push   %ebp
- 281:	89 e5                	mov    %esp,%ebp
- 283:	53                   	push   %ebx
- 284:	8b 45 08             	mov    0x8(%ebp),%eax
- 287:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
- 28a:	89 c2                	mov    %eax,%edx
- 28c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 290:	83 c1 01             	add    $0x1,%ecx
- 293:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
- 297:	83 c2 01             	add    $0x1,%edx
- 29a:	84 db                	test   %bl,%bl
- 29c:	88 5a ff             	mov    %bl,-0x1(%edx)
- 29f:	75 ef                	jne    290 <strcpy+0x10>
-    ;
-  return os;
-}
- 2a1:	5b                   	pop    %ebx
- 2a2:	5d                   	pop    %ebp
- 2a3:	c3                   	ret    
- 2a4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 2aa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
-
-000002b0 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
- 2b0:	55                   	push   %ebp
- 2b1:	89 e5                	mov    %esp,%ebp
- 2b3:	53                   	push   %ebx
- 2b4:	8b 55 08             	mov    0x8(%ebp),%edx
- 2b7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-  while(*p && *p == *q)
- 2ba:	0f b6 02             	movzbl (%edx),%eax
- 2bd:	0f b6 19             	movzbl (%ecx),%ebx
- 2c0:	84 c0                	test   %al,%al
- 2c2:	75 1c                	jne    2e0 <strcmp+0x30>
- 2c4:	eb 2a                	jmp    2f0 <strcmp+0x40>
- 2c6:	8d 76 00             	lea    0x0(%esi),%esi
- 2c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-    p++, q++;
- 2d0:	83 c2 01             	add    $0x1,%edx
-  while(*p && *p == *q)
- 2d3:	0f b6 02             	movzbl (%edx),%eax
-    p++, q++;
- 2d6:	83 c1 01             	add    $0x1,%ecx
- 2d9:	0f b6 19             	movzbl (%ecx),%ebx
-  while(*p && *p == *q)
- 2dc:	84 c0                	test   %al,%al
- 2de:	74 10                	je     2f0 <strcmp+0x40>
- 2e0:	38 d8                	cmp    %bl,%al
- 2e2:	74 ec                	je     2d0 <strcmp+0x20>
-  return (uchar)*p - (uchar)*q;
- 2e4:	29 d8                	sub    %ebx,%eax
-}
- 2e6:	5b                   	pop    %ebx
- 2e7:	5d                   	pop    %ebp
- 2e8:	c3                   	ret    
- 2e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 2f0:	31 c0                	xor    %eax,%eax
-  return (uchar)*p - (uchar)*q;
- 2f2:	29 d8                	sub    %ebx,%eax
-}
- 2f4:	5b                   	pop    %ebx
- 2f5:	5d                   	pop    %ebp
- 2f6:	c3                   	ret    
- 2f7:	89 f6                	mov    %esi,%esi
- 2f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-00000300 <strlen>:
-
-uint
-strlen(const char *s)
-{
- 300:	55                   	push   %ebp
- 301:	89 e5                	mov    %esp,%ebp
- 303:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  int n;
-
-  for(n = 0; s[n]; n++)
- 306:	80 39 00             	cmpb   $0x0,(%ecx)
- 309:	74 15                	je     320 <strlen+0x20>
- 30b:	31 d2                	xor    %edx,%edx
- 30d:	8d 76 00             	lea    0x0(%esi),%esi
- 310:	83 c2 01             	add    $0x1,%edx
- 313:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
- 317:	89 d0                	mov    %edx,%eax
- 319:	75 f5                	jne    310 <strlen+0x10>
-    ;
-  return n;
-}
- 31b:	5d                   	pop    %ebp
- 31c:	c3                   	ret    
- 31d:	8d 76 00             	lea    0x0(%esi),%esi
-  for(n = 0; s[n]; n++)
- 320:	31 c0                	xor    %eax,%eax
-}
- 322:	5d                   	pop    %ebp
- 323:	c3                   	ret    
- 324:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 32a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
-
-00000330 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 330:	55                   	push   %ebp
- 331:	89 e5                	mov    %esp,%ebp
- 333:	57                   	push   %edi
- 334:	8b 55 08             	mov    0x8(%ebp),%edx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
- 337:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 33a:	8b 45 0c             	mov    0xc(%ebp),%eax
- 33d:	89 d7                	mov    %edx,%edi
- 33f:	fc                   	cld    
- 340:	f3 aa                	rep stos %al,%es:(%edi)
-  stosb(dst, c, n);
-  return dst;
-}
- 342:	89 d0                	mov    %edx,%eax
- 344:	5f                   	pop    %edi
- 345:	5d                   	pop    %ebp
- 346:	c3                   	ret    
- 347:	89 f6                	mov    %esi,%esi
- 349:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-00000350 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 350:	55                   	push   %ebp
- 351:	89 e5                	mov    %esp,%ebp
- 353:	53                   	push   %ebx
- 354:	8b 45 08             	mov    0x8(%ebp),%eax
- 357:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-  for(; *s; s++)
- 35a:	0f b6 10             	movzbl (%eax),%edx
- 35d:	84 d2                	test   %dl,%dl
- 35f:	74 1d                	je     37e <strchr+0x2e>
-    if(*s == c)
- 361:	38 d3                	cmp    %dl,%bl
- 363:	89 d9                	mov    %ebx,%ecx
- 365:	75 0d                	jne    374 <strchr+0x24>
- 367:	eb 17                	jmp    380 <strchr+0x30>
- 369:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 370:	38 ca                	cmp    %cl,%dl
- 372:	74 0c                	je     380 <strchr+0x30>
-  for(; *s; s++)
- 374:	83 c0 01             	add    $0x1,%eax
- 377:	0f b6 10             	movzbl (%eax),%edx
- 37a:	84 d2                	test   %dl,%dl
- 37c:	75 f2                	jne    370 <strchr+0x20>
-      return (char*)s;
-  return 0;
- 37e:	31 c0                	xor    %eax,%eax
-}
- 380:	5b                   	pop    %ebx
- 381:	5d                   	pop    %ebp
- 382:	c3                   	ret    
- 383:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 389:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-00000390 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 390:	55                   	push   %ebp
- 391:	89 e5                	mov    %esp,%ebp
- 393:	57                   	push   %edi
- 394:	56                   	push   %esi
- 395:	53                   	push   %ebx
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 396:	31 f6                	xor    %esi,%esi
- 398:	89 f3                	mov    %esi,%ebx
-{
- 39a:	83 ec 1c             	sub    $0x1c,%esp
- 39d:	8b 7d 08             	mov    0x8(%ebp),%edi
-  for(i=0; i+1 < max; ){
- 3a0:	eb 2f                	jmp    3d1 <gets+0x41>
- 3a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    cc = read(0, &c, 1);
- 3a8:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 3ab:	83 ec 04             	sub    $0x4,%esp
- 3ae:	6a 01                	push   $0x1
- 3b0:	50                   	push   %eax
- 3b1:	6a 00                	push   $0x0
- 3b3:	e8 32 01 00 00       	call   4ea <read>
-    if(cc < 1)
- 3b8:	83 c4 10             	add    $0x10,%esp
- 3bb:	85 c0                	test   %eax,%eax
- 3bd:	7e 1c                	jle    3db <gets+0x4b>
-      break;
-    buf[i++] = c;
- 3bf:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
- 3c3:	83 c7 01             	add    $0x1,%edi
- 3c6:	88 47 ff             	mov    %al,-0x1(%edi)
-    if(c == '\n' || c == '\r')
- 3c9:	3c 0a                	cmp    $0xa,%al
- 3cb:	74 23                	je     3f0 <gets+0x60>
- 3cd:	3c 0d                	cmp    $0xd,%al
- 3cf:	74 1f                	je     3f0 <gets+0x60>
-  for(i=0; i+1 < max; ){
- 3d1:	83 c3 01             	add    $0x1,%ebx
- 3d4:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 3d7:	89 fe                	mov    %edi,%esi
- 3d9:	7c cd                	jl     3a8 <gets+0x18>
- 3db:	89 f3                	mov    %esi,%ebx
-      break;
-  }
-  buf[i] = '\0';
-  return buf;
-}
- 3dd:	8b 45 08             	mov    0x8(%ebp),%eax
-  buf[i] = '\0';
- 3e0:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 3e3:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 3e6:	5b                   	pop    %ebx
- 3e7:	5e                   	pop    %esi
- 3e8:	5f                   	pop    %edi
- 3e9:	5d                   	pop    %ebp
- 3ea:	c3                   	ret    
- 3eb:	90                   	nop
- 3ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 3f0:	8b 75 08             	mov    0x8(%ebp),%esi
- 3f3:	8b 45 08             	mov    0x8(%ebp),%eax
- 3f6:	01 de                	add    %ebx,%esi
- 3f8:	89 f3                	mov    %esi,%ebx
-  buf[i] = '\0';
- 3fa:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 3fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 400:	5b                   	pop    %ebx
- 401:	5e                   	pop    %esi
- 402:	5f                   	pop    %edi
- 403:	5d                   	pop    %ebp
- 404:	c3                   	ret    
- 405:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 409:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-00000410 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
- 410:	55                   	push   %ebp
- 411:	89 e5                	mov    %esp,%ebp
- 413:	56                   	push   %esi
- 414:	53                   	push   %ebx
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 415:	83 ec 08             	sub    $0x8,%esp
- 418:	6a 00                	push   $0x0
- 41a:	ff 75 08             	pushl  0x8(%ebp)
- 41d:	e8 f0 00 00 00       	call   512 <open>
-  if(fd < 0)
- 422:	83 c4 10             	add    $0x10,%esp
- 425:	85 c0                	test   %eax,%eax
- 427:	78 27                	js     450 <stat+0x40>
-    return -1;
-  r = fstat(fd, st);
- 429:	83 ec 08             	sub    $0x8,%esp
- 42c:	ff 75 0c             	pushl  0xc(%ebp)
- 42f:	89 c3                	mov    %eax,%ebx
- 431:	50                   	push   %eax
- 432:	e8 f3 00 00 00       	call   52a <fstat>
-  close(fd);
- 437:	89 1c 24             	mov    %ebx,(%esp)
-  r = fstat(fd, st);
- 43a:	89 c6                	mov    %eax,%esi
-  close(fd);
- 43c:	e8 b9 00 00 00       	call   4fa <close>
-  return r;
- 441:	83 c4 10             	add    $0x10,%esp
-}
- 444:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 447:	89 f0                	mov    %esi,%eax
- 449:	5b                   	pop    %ebx
- 44a:	5e                   	pop    %esi
- 44b:	5d                   	pop    %ebp
- 44c:	c3                   	ret    
- 44d:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
- 450:	be ff ff ff ff       	mov    $0xffffffff,%esi
- 455:	eb ed                	jmp    444 <stat+0x34>
- 457:	89 f6                	mov    %esi,%esi
- 459:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-00000460 <atoi>:
-
-int
-atoi(const char *s)
-{
- 460:	55                   	push   %ebp
- 461:	89 e5                	mov    %esp,%ebp
- 463:	53                   	push   %ebx
- 464:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 467:	0f be 11             	movsbl (%ecx),%edx
- 46a:	8d 42 d0             	lea    -0x30(%edx),%eax
- 46d:	3c 09                	cmp    $0x9,%al
-  n = 0;
- 46f:	b8 00 00 00 00       	mov    $0x0,%eax
-  while('0' <= *s && *s <= '9')
- 474:	77 1f                	ja     495 <atoi+0x35>
- 476:	8d 76 00             	lea    0x0(%esi),%esi
- 479:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-    n = n*10 + *s++ - '0';
- 480:	8d 04 80             	lea    (%eax,%eax,4),%eax
- 483:	83 c1 01             	add    $0x1,%ecx
- 486:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
-  while('0' <= *s && *s <= '9')
- 48a:	0f be 11             	movsbl (%ecx),%edx
- 48d:	8d 5a d0             	lea    -0x30(%edx),%ebx
- 490:	80 fb 09             	cmp    $0x9,%bl
- 493:	76 eb                	jbe    480 <atoi+0x20>
-  return n;
-}
- 495:	5b                   	pop    %ebx
- 496:	5d                   	pop    %ebp
- 497:	c3                   	ret    
- 498:	90                   	nop
- 499:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-000004a0 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
- 4a0:	55                   	push   %ebp
- 4a1:	89 e5                	mov    %esp,%ebp
- 4a3:	56                   	push   %esi
- 4a4:	53                   	push   %ebx
- 4a5:	8b 5d 10             	mov    0x10(%ebp),%ebx
- 4a8:	8b 45 08             	mov    0x8(%ebp),%eax
- 4ab:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 4ae:	85 db                	test   %ebx,%ebx
- 4b0:	7e 14                	jle    4c6 <memmove+0x26>
- 4b2:	31 d2                	xor    %edx,%edx
- 4b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    *dst++ = *src++;
- 4b8:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
- 4bc:	88 0c 10             	mov    %cl,(%eax,%edx,1)
- 4bf:	83 c2 01             	add    $0x1,%edx
-  while(n-- > 0)
- 4c2:	39 d3                	cmp    %edx,%ebx
- 4c4:	75 f2                	jne    4b8 <memmove+0x18>
-  return vdst;
-}
- 4c6:	5b                   	pop    %ebx
- 4c7:	5e                   	pop    %esi
- 4c8:	5d                   	pop    %ebp
- 4c9:	c3                   	ret    
-
-000004ca <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 4ca:	b8 01 00 00 00       	mov    $0x1,%eax
- 4cf:	cd 40                	int    $0x40
- 4d1:	c3                   	ret    
-
-000004d2 <exit>:
-SYSCALL(exit)
- 4d2:	b8 02 00 00 00       	mov    $0x2,%eax
- 4d7:	cd 40                	int    $0x40
- 4d9:	c3                   	ret    
-
-000004da <wait>:
-SYSCALL(wait)
- 4da:	b8 03 00 00 00       	mov    $0x3,%eax
- 4df:	cd 40                	int    $0x40
- 4e1:	c3                   	ret    
-
-000004e2 <pipe>:
-SYSCALL(pipe)
- 4e2:	b8 04 00 00 00       	mov    $0x4,%eax
- 4e7:	cd 40                	int    $0x40
- 4e9:	c3                   	ret    
-
-000004ea <read>:
-SYSCALL(read)
- 4ea:	b8 05 00 00 00       	mov    $0x5,%eax
- 4ef:	cd 40                	int    $0x40
- 4f1:	c3                   	ret    
-
-000004f2 <write>:
-SYSCALL(write)
- 4f2:	b8 10 00 00 00       	mov    $0x10,%eax
- 4f7:	cd 40                	int    $0x40
- 4f9:	c3                   	ret    
-
-000004fa <close>:
-SYSCALL(close)
- 4fa:	b8 15 00 00 00       	mov    $0x15,%eax
- 4ff:	cd 40                	int    $0x40
- 501:	c3                   	ret    
-
-00000502 <kill>:
-SYSCALL(kill)
- 502:	b8 06 00 00 00       	mov    $0x6,%eax
- 507:	cd 40                	int    $0x40
- 509:	c3                   	ret    
-
-0000050a <exec>:
-SYSCALL(exec)
- 50a:	b8 07 00 00 00       	mov    $0x7,%eax
- 50f:	cd 40                	int    $0x40
- 511:	c3                   	ret    
-
-00000512 <open>:
-SYSCALL(open)
- 512:	b8 0f 00 00 00       	mov    $0xf,%eax
- 517:	cd 40                	int    $0x40
- 519:	c3                   	ret    
-
-0000051a <mknod>:
-SYSCALL(mknod)
- 51a:	b8 11 00 00 00       	mov    $0x11,%eax
- 51f:	cd 40                	int    $0x40
- 521:	c3                   	ret    
-
-00000522 <unlink>:
-SYSCALL(unlink)
- 522:	b8 12 00 00 00       	mov    $0x12,%eax
- 527:	cd 40                	int    $0x40
- 529:	c3                   	ret    
-
-0000052a <fstat>:
-SYSCALL(fstat)
- 52a:	b8 08 00 00 00       	mov    $0x8,%eax
- 52f:	cd 40                	int    $0x40
- 531:	c3                   	ret    
-
-00000532 <link>:
-SYSCALL(link)
- 532:	b8 13 00 00 00       	mov    $0x13,%eax
- 537:	cd 40                	int    $0x40
- 539:	c3                   	ret    
-
-0000053a <mkdir>:
-SYSCALL(mkdir)
- 53a:	b8 14 00 00 00       	mov    $0x14,%eax
- 53f:	cd 40                	int    $0x40
- 541:	c3                   	ret    
-
-00000542 <chdir>:
-SYSCALL(chdir)
- 542:	b8 09 00 00 00       	mov    $0x9,%eax
- 547:	cd 40                	int    $0x40
- 549:	c3                   	ret    
-
-0000054a <dup>:
-SYSCALL(dup)
- 54a:	b8 0a 00 00 00       	mov    $0xa,%eax
- 54f:	cd 40                	int    $0x40
- 551:	c3                   	ret    
-
-00000552 <getpid>:
-SYSCALL(getpid)
- 552:	b8 0b 00 00 00       	mov    $0xb,%eax
- 557:	cd 40                	int    $0x40
- 559:	c3                   	ret    
-
-0000055a <sbrk>:
-SYSCALL(sbrk)
- 55a:	b8 0c 00 00 00       	mov    $0xc,%eax
- 55f:	cd 40                	int    $0x40
- 561:	c3                   	ret    
-
-00000562 <sleep>:
-SYSCALL(sleep)
- 562:	b8 0d 00 00 00       	mov    $0xd,%eax
- 567:	cd 40                	int    $0x40
- 569:	c3                   	ret    
-
-0000056a <uptime>:
-SYSCALL(uptime)
- 56a:	b8 0e 00 00 00       	mov    $0xe,%eax
- 56f:	cd 40                	int    $0x40
- 571:	c3                   	ret    
-
-00000572 <thread_create>:
-SYSCALL(thread_create)
- 572:	b8 16 00 00 00       	mov    $0x16,%eax
- 577:	cd 40                	int    $0x40
- 579:	c3                   	ret    
-
-0000057a <thread_join>:
-SYSCALL(thread_join)
- 57a:	b8 18 00 00 00       	mov    $0x18,%eax
- 57f:	cd 40                	int    $0x40
- 581:	c3                   	ret    
-
-00000582 <thread_exit>:
-SYSCALL(thread_exit)
- 582:	b8 17 00 00 00       	mov    $0x17,%eax
- 587:	cd 40                	int    $0x40
- 589:	c3                   	ret    
-
-0000058a <draw>:
- 58a:	b8 19 00 00 00       	mov    $0x19,%eax
- 58f:	cd 40                	int    $0x40
- 591:	c3                   	ret    
- 592:	66 90                	xchg   %ax,%ax
- 594:	66 90                	xchg   %ax,%ax
- 596:	66 90                	xchg   %ax,%ax
- 598:	66 90                	xchg   %ax,%ax
- 59a:	66 90                	xchg   %ax,%ax
- 59c:	66 90                	xchg   %ax,%ax
- 59e:	66 90                	xchg   %ax,%ax
-
-000005a0 <printint>:
-  write(fd, &c, 1);
-}
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 5a0:	55                   	push   %ebp
- 5a1:	89 e5                	mov    %esp,%ebp
- 5a3:	57                   	push   %edi
- 5a4:	56                   	push   %esi
- 5a5:	53                   	push   %ebx
- 5a6:	83 ec 3c             	sub    $0x3c,%esp
-  char buf[16];
-  int i, neg;
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
- 5a9:	85 d2                	test   %edx,%edx
-{
- 5ab:	89 45 c0             	mov    %eax,-0x40(%ebp)
-    neg = 1;
-    x = -xx;
- 5ae:	89 d0                	mov    %edx,%eax
-  if(sgn && xx < 0){
- 5b0:	79 76                	jns    628 <printint+0x88>
- 5b2:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 5b6:	74 70                	je     628 <printint+0x88>
-    x = -xx;
- 5b8:	f7 d8                	neg    %eax
-    neg = 1;
- 5ba:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
-  } else {
-    x = xx;
-  }
-
-  i = 0;
- 5c1:	31 f6                	xor    %esi,%esi
- 5c3:	8d 5d d7             	lea    -0x29(%ebp),%ebx
- 5c6:	eb 0a                	jmp    5d2 <printint+0x32>
- 5c8:	90                   	nop
- 5c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  do{
-    buf[i++] = digits[x % base];
- 5d0:	89 fe                	mov    %edi,%esi
- 5d2:	31 d2                	xor    %edx,%edx
- 5d4:	8d 7e 01             	lea    0x1(%esi),%edi
- 5d7:	f7 f1                	div    %ecx
- 5d9:	0f b6 92 00 0a 00 00 	movzbl 0xa00(%edx),%edx
-  }while((x /= base) != 0);
- 5e0:	85 c0                	test   %eax,%eax
-    buf[i++] = digits[x % base];
- 5e2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
-  }while((x /= base) != 0);
- 5e5:	75 e9                	jne    5d0 <printint+0x30>
-  if(neg)
- 5e7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
- 5ea:	85 c0                	test   %eax,%eax
- 5ec:	74 08                	je     5f6 <printint+0x56>
-    buf[i++] = '-';
- 5ee:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
- 5f3:	8d 7e 02             	lea    0x2(%esi),%edi
- 5f6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
- 5fa:	8b 7d c0             	mov    -0x40(%ebp),%edi
- 5fd:	8d 76 00             	lea    0x0(%esi),%esi
- 600:	0f b6 06             	movzbl (%esi),%eax
-  write(fd, &c, 1);
- 603:	83 ec 04             	sub    $0x4,%esp
- 606:	83 ee 01             	sub    $0x1,%esi
- 609:	6a 01                	push   $0x1
- 60b:	53                   	push   %ebx
- 60c:	57                   	push   %edi
- 60d:	88 45 d7             	mov    %al,-0x29(%ebp)
- 610:	e8 dd fe ff ff       	call   4f2 <write>
-
-  while(--i >= 0)
- 615:	83 c4 10             	add    $0x10,%esp
- 618:	39 de                	cmp    %ebx,%esi
- 61a:	75 e4                	jne    600 <printint+0x60>
-    putc(fd, buf[i]);
-}
- 61c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 61f:	5b                   	pop    %ebx
- 620:	5e                   	pop    %esi
- 621:	5f                   	pop    %edi
- 622:	5d                   	pop    %ebp
- 623:	c3                   	ret    
- 624:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  neg = 0;
- 628:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
- 62f:	eb 90                	jmp    5c1 <printint+0x21>
- 631:	eb 0d                	jmp    640 <printf>
- 633:	90                   	nop
- 634:	90                   	nop
- 635:	90                   	nop
- 636:	90                   	nop
- 637:	90                   	nop
- 638:	90                   	nop
- 639:	90                   	nop
- 63a:	90                   	nop
- 63b:	90                   	nop
- 63c:	90                   	nop
- 63d:	90                   	nop
- 63e:	90                   	nop
- 63f:	90                   	nop
-
-00000640 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, const char *fmt, ...)
-{
- 640:	55                   	push   %ebp
- 641:	89 e5                	mov    %esp,%ebp
- 643:	57                   	push   %edi
- 644:	56                   	push   %esi
- 645:	53                   	push   %ebx
- 646:	83 ec 2c             	sub    $0x2c,%esp
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 649:	8b 75 0c             	mov    0xc(%ebp),%esi
- 64c:	0f b6 1e             	movzbl (%esi),%ebx
- 64f:	84 db                	test   %bl,%bl
- 651:	0f 84 b3 00 00 00    	je     70a <printf+0xca>
-  ap = (uint*)(void*)&fmt + 1;
- 657:	8d 45 10             	lea    0x10(%ebp),%eax
- 65a:	83 c6 01             	add    $0x1,%esi
-  state = 0;
- 65d:	31 ff                	xor    %edi,%edi
-  ap = (uint*)(void*)&fmt + 1;
- 65f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
- 662:	eb 2f                	jmp    693 <printf+0x53>
- 664:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
- 668:	83 f8 25             	cmp    $0x25,%eax
- 66b:	0f 84 a7 00 00 00    	je     718 <printf+0xd8>
-  write(fd, &c, 1);
- 671:	8d 45 e2             	lea    -0x1e(%ebp),%eax
- 674:	83 ec 04             	sub    $0x4,%esp
- 677:	88 5d e2             	mov    %bl,-0x1e(%ebp)
- 67a:	6a 01                	push   $0x1
- 67c:	50                   	push   %eax
- 67d:	ff 75 08             	pushl  0x8(%ebp)
- 680:	e8 6d fe ff ff       	call   4f2 <write>
- 685:	83 c4 10             	add    $0x10,%esp
- 688:	83 c6 01             	add    $0x1,%esi
-  for(i = 0; fmt[i]; i++){
- 68b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
- 68f:	84 db                	test   %bl,%bl
- 691:	74 77                	je     70a <printf+0xca>
-    if(state == 0){
- 693:	85 ff                	test   %edi,%edi
-    c = fmt[i] & 0xff;
- 695:	0f be cb             	movsbl %bl,%ecx
- 698:	0f b6 c3             	movzbl %bl,%eax
-    if(state == 0){
- 69b:	74 cb                	je     668 <printf+0x28>
-        state = '%';
-      } else {
-        putc(fd, c);
-      }
-    } else if(state == '%'){
- 69d:	83 ff 25             	cmp    $0x25,%edi
- 6a0:	75 e6                	jne    688 <printf+0x48>
-      if(c == 'd'){
- 6a2:	83 f8 64             	cmp    $0x64,%eax
- 6a5:	0f 84 05 01 00 00    	je     7b0 <printf+0x170>
-        printint(fd, *ap, 10, 1);
-        ap++;
-      } else if(c == 'x' || c == 'p'){
- 6ab:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 6b1:	83 f9 70             	cmp    $0x70,%ecx
- 6b4:	74 72                	je     728 <printf+0xe8>
-        printint(fd, *ap, 16, 0);
-        ap++;
-      } else if(c == 's'){
- 6b6:	83 f8 73             	cmp    $0x73,%eax
- 6b9:	0f 84 99 00 00 00    	je     758 <printf+0x118>
-          s = "(null)";
-        while(*s != 0){
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
- 6bf:	83 f8 63             	cmp    $0x63,%eax
- 6c2:	0f 84 08 01 00 00    	je     7d0 <printf+0x190>
-        putc(fd, *ap);
-        ap++;
-      } else if(c == '%'){
- 6c8:	83 f8 25             	cmp    $0x25,%eax
- 6cb:	0f 84 ef 00 00 00    	je     7c0 <printf+0x180>
-  write(fd, &c, 1);
- 6d1:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 6d4:	83 ec 04             	sub    $0x4,%esp
- 6d7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 6db:	6a 01                	push   $0x1
- 6dd:	50                   	push   %eax
- 6de:	ff 75 08             	pushl  0x8(%ebp)
- 6e1:	e8 0c fe ff ff       	call   4f2 <write>
- 6e6:	83 c4 0c             	add    $0xc,%esp
- 6e9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
- 6ec:	88 5d e6             	mov    %bl,-0x1a(%ebp)
- 6ef:	6a 01                	push   $0x1
- 6f1:	50                   	push   %eax
- 6f2:	ff 75 08             	pushl  0x8(%ebp)
- 6f5:	83 c6 01             	add    $0x1,%esi
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
-        putc(fd, c);
-      }
-      state = 0;
- 6f8:	31 ff                	xor    %edi,%edi
-  write(fd, &c, 1);
- 6fa:	e8 f3 fd ff ff       	call   4f2 <write>
-  for(i = 0; fmt[i]; i++){
- 6ff:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
-  write(fd, &c, 1);
- 703:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; fmt[i]; i++){
- 706:	84 db                	test   %bl,%bl
- 708:	75 89                	jne    693 <printf+0x53>
-    }
-  }
-}
- 70a:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 70d:	5b                   	pop    %ebx
- 70e:	5e                   	pop    %esi
- 70f:	5f                   	pop    %edi
- 710:	5d                   	pop    %ebp
- 711:	c3                   	ret    
- 712:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-        state = '%';
- 718:	bf 25 00 00 00       	mov    $0x25,%edi
- 71d:	e9 66 ff ff ff       	jmp    688 <printf+0x48>
- 722:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-        printint(fd, *ap, 16, 0);
- 728:	83 ec 0c             	sub    $0xc,%esp
- 72b:	b9 10 00 00 00       	mov    $0x10,%ecx
- 730:	6a 00                	push   $0x0
- 732:	8b 7d d4             	mov    -0x2c(%ebp),%edi
- 735:	8b 45 08             	mov    0x8(%ebp),%eax
- 738:	8b 17                	mov    (%edi),%edx
- 73a:	e8 61 fe ff ff       	call   5a0 <printint>
-        ap++;
- 73f:	89 f8                	mov    %edi,%eax
- 741:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 744:	31 ff                	xor    %edi,%edi
-        ap++;
- 746:	83 c0 04             	add    $0x4,%eax
- 749:	89 45 d4             	mov    %eax,-0x2c(%ebp)
- 74c:	e9 37 ff ff ff       	jmp    688 <printf+0x48>
- 751:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-        s = (char*)*ap;
- 758:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 75b:	8b 08                	mov    (%eax),%ecx
-        ap++;
- 75d:	83 c0 04             	add    $0x4,%eax
- 760:	89 45 d4             	mov    %eax,-0x2c(%ebp)
-        if(s == 0)
- 763:	85 c9                	test   %ecx,%ecx
- 765:	0f 84 8e 00 00 00    	je     7f9 <printf+0x1b9>
-        while(*s != 0){
- 76b:	0f b6 01             	movzbl (%ecx),%eax
-      state = 0;
- 76e:	31 ff                	xor    %edi,%edi
-        s = (char*)*ap;
- 770:	89 cb                	mov    %ecx,%ebx
-        while(*s != 0){
- 772:	84 c0                	test   %al,%al
- 774:	0f 84 0e ff ff ff    	je     688 <printf+0x48>
- 77a:	89 75 d0             	mov    %esi,-0x30(%ebp)
- 77d:	89 de                	mov    %ebx,%esi
- 77f:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 782:	8d 7d e3             	lea    -0x1d(%ebp),%edi
- 785:	8d 76 00             	lea    0x0(%esi),%esi
-  write(fd, &c, 1);
- 788:	83 ec 04             	sub    $0x4,%esp
-          s++;
- 78b:	83 c6 01             	add    $0x1,%esi
- 78e:	88 45 e3             	mov    %al,-0x1d(%ebp)
-  write(fd, &c, 1);
- 791:	6a 01                	push   $0x1
- 793:	57                   	push   %edi
- 794:	53                   	push   %ebx
- 795:	e8 58 fd ff ff       	call   4f2 <write>
-        while(*s != 0){
- 79a:	0f b6 06             	movzbl (%esi),%eax
- 79d:	83 c4 10             	add    $0x10,%esp
- 7a0:	84 c0                	test   %al,%al
- 7a2:	75 e4                	jne    788 <printf+0x148>
- 7a4:	8b 75 d0             	mov    -0x30(%ebp),%esi
-      state = 0;
- 7a7:	31 ff                	xor    %edi,%edi
- 7a9:	e9 da fe ff ff       	jmp    688 <printf+0x48>
- 7ae:	66 90                	xchg   %ax,%ax
-        printint(fd, *ap, 10, 1);
- 7b0:	83 ec 0c             	sub    $0xc,%esp
- 7b3:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 7b8:	6a 01                	push   $0x1
- 7ba:	e9 73 ff ff ff       	jmp    732 <printf+0xf2>
- 7bf:	90                   	nop
-  write(fd, &c, 1);
- 7c0:	83 ec 04             	sub    $0x4,%esp
- 7c3:	88 5d e5             	mov    %bl,-0x1b(%ebp)
- 7c6:	8d 45 e5             	lea    -0x1b(%ebp),%eax
- 7c9:	6a 01                	push   $0x1
- 7cb:	e9 21 ff ff ff       	jmp    6f1 <printf+0xb1>
-        putc(fd, *ap);
- 7d0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
-  write(fd, &c, 1);
- 7d3:	83 ec 04             	sub    $0x4,%esp
-        putc(fd, *ap);
- 7d6:	8b 07                	mov    (%edi),%eax
-  write(fd, &c, 1);
- 7d8:	6a 01                	push   $0x1
-        ap++;
- 7da:	83 c7 04             	add    $0x4,%edi
-        putc(fd, *ap);
- 7dd:	88 45 e4             	mov    %al,-0x1c(%ebp)
-  write(fd, &c, 1);
- 7e0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
- 7e3:	50                   	push   %eax
- 7e4:	ff 75 08             	pushl  0x8(%ebp)
- 7e7:	e8 06 fd ff ff       	call   4f2 <write>
-        ap++;
- 7ec:	89 7d d4             	mov    %edi,-0x2c(%ebp)
- 7ef:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 7f2:	31 ff                	xor    %edi,%edi
- 7f4:	e9 8f fe ff ff       	jmp    688 <printf+0x48>
-          s = "(null)";
- 7f9:	bb f8 09 00 00       	mov    $0x9f8,%ebx
-        while(*s != 0){
- 7fe:	b8 28 00 00 00       	mov    $0x28,%eax
- 803:	e9 72 ff ff ff       	jmp    77a <printf+0x13a>
- 808:	66 90                	xchg   %ax,%ax
- 80a:	66 90                	xchg   %ax,%ax
- 80c:	66 90                	xchg   %ax,%ax
- 80e:	66 90                	xchg   %ax,%ax
-
-00000810 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 810:	55                   	push   %ebp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 811:	a1 c4 0d 00 00       	mov    0xdc4,%eax
-{
- 816:	89 e5                	mov    %esp,%ebp
- 818:	57                   	push   %edi
- 819:	56                   	push   %esi
- 81a:	53                   	push   %ebx
- 81b:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  bp = (Header*)ap - 1;
- 81e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
- 821:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 828:	39 c8                	cmp    %ecx,%eax
- 82a:	8b 10                	mov    (%eax),%edx
- 82c:	73 32                	jae    860 <free+0x50>
- 82e:	39 d1                	cmp    %edx,%ecx
- 830:	72 04                	jb     836 <free+0x26>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 832:	39 d0                	cmp    %edx,%eax
- 834:	72 32                	jb     868 <free+0x58>
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 836:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 839:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 83c:	39 fa                	cmp    %edi,%edx
- 83e:	74 30                	je     870 <free+0x60>
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
-  } else
-    bp->s.ptr = p->s.ptr;
- 840:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 843:	8b 50 04             	mov    0x4(%eax),%edx
- 846:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 849:	39 f1                	cmp    %esi,%ecx
- 84b:	74 3a                	je     887 <free+0x77>
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
-  } else
-    p->s.ptr = bp;
- 84d:	89 08                	mov    %ecx,(%eax)
-  freep = p;
- 84f:	a3 c4 0d 00 00       	mov    %eax,0xdc4
-}
- 854:	5b                   	pop    %ebx
- 855:	5e                   	pop    %esi
- 856:	5f                   	pop    %edi
- 857:	5d                   	pop    %ebp
- 858:	c3                   	ret    
- 859:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 860:	39 d0                	cmp    %edx,%eax
- 862:	72 04                	jb     868 <free+0x58>
- 864:	39 d1                	cmp    %edx,%ecx
- 866:	72 ce                	jb     836 <free+0x26>
-{
- 868:	89 d0                	mov    %edx,%eax
- 86a:	eb bc                	jmp    828 <free+0x18>
- 86c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    bp->s.size += p->s.ptr->s.size;
- 870:	03 72 04             	add    0x4(%edx),%esi
- 873:	89 73 fc             	mov    %esi,-0x4(%ebx)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 876:	8b 10                	mov    (%eax),%edx
- 878:	8b 12                	mov    (%edx),%edx
- 87a:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 87d:	8b 50 04             	mov    0x4(%eax),%edx
- 880:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 883:	39 f1                	cmp    %esi,%ecx
- 885:	75 c6                	jne    84d <free+0x3d>
-    p->s.size += bp->s.size;
- 887:	03 53 fc             	add    -0x4(%ebx),%edx
-  freep = p;
- 88a:	a3 c4 0d 00 00       	mov    %eax,0xdc4
-    p->s.size += bp->s.size;
- 88f:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 892:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 895:	89 10                	mov    %edx,(%eax)
-}
- 897:	5b                   	pop    %ebx
- 898:	5e                   	pop    %esi
- 899:	5f                   	pop    %edi
- 89a:	5d                   	pop    %ebp
- 89b:	c3                   	ret    
- 89c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000008a0 <malloc>:
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
- 8a0:	55                   	push   %ebp
- 8a1:	89 e5                	mov    %esp,%ebp
- 8a3:	57                   	push   %edi
- 8a4:	56                   	push   %esi
- 8a5:	53                   	push   %ebx
- 8a6:	83 ec 0c             	sub    $0xc,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 8a9:	8b 45 08             	mov    0x8(%ebp),%eax
-  if((prevp = freep) == 0){
- 8ac:	8b 15 c4 0d 00 00    	mov    0xdc4,%edx
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 8b2:	8d 78 07             	lea    0x7(%eax),%edi
- 8b5:	c1 ef 03             	shr    $0x3,%edi
- 8b8:	83 c7 01             	add    $0x1,%edi
-  if((prevp = freep) == 0){
- 8bb:	85 d2                	test   %edx,%edx
- 8bd:	0f 84 9d 00 00 00    	je     960 <malloc+0xc0>
- 8c3:	8b 02                	mov    (%edx),%eax
- 8c5:	8b 48 04             	mov    0x4(%eax),%ecx
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    if(p->s.size >= nunits){
- 8c8:	39 cf                	cmp    %ecx,%edi
- 8ca:	76 6c                	jbe    938 <malloc+0x98>
- 8cc:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
- 8d2:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 8d7:	0f 43 df             	cmovae %edi,%ebx
-  p = sbrk(nu * sizeof(Header));
- 8da:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
- 8e1:	eb 0e                	jmp    8f1 <malloc+0x51>
- 8e3:	90                   	nop
- 8e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 8e8:	8b 02                	mov    (%edx),%eax
-    if(p->s.size >= nunits){
- 8ea:	8b 48 04             	mov    0x4(%eax),%ecx
- 8ed:	39 f9                	cmp    %edi,%ecx
- 8ef:	73 47                	jae    938 <malloc+0x98>
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
- 8f1:	39 05 c4 0d 00 00    	cmp    %eax,0xdc4
- 8f7:	89 c2                	mov    %eax,%edx
- 8f9:	75 ed                	jne    8e8 <malloc+0x48>
-  p = sbrk(nu * sizeof(Header));
- 8fb:	83 ec 0c             	sub    $0xc,%esp
- 8fe:	56                   	push   %esi
- 8ff:	e8 56 fc ff ff       	call   55a <sbrk>
-  if(p == (char*)-1)
- 904:	83 c4 10             	add    $0x10,%esp
- 907:	83 f8 ff             	cmp    $0xffffffff,%eax
- 90a:	74 1c                	je     928 <malloc+0x88>
-  hp->s.size = nu;
- 90c:	89 58 04             	mov    %ebx,0x4(%eax)
-  free((void*)(hp + 1));
- 90f:	83 ec 0c             	sub    $0xc,%esp
- 912:	83 c0 08             	add    $0x8,%eax
- 915:	50                   	push   %eax
- 916:	e8 f5 fe ff ff       	call   810 <free>
-  return freep;
- 91b:	8b 15 c4 0d 00 00    	mov    0xdc4,%edx
-      if((p = morecore(nunits)) == 0)
- 921:	83 c4 10             	add    $0x10,%esp
- 924:	85 d2                	test   %edx,%edx
- 926:	75 c0                	jne    8e8 <malloc+0x48>
-        return 0;
-  }
-}
- 928:	8d 65 f4             	lea    -0xc(%ebp),%esp
-        return 0;
- 92b:	31 c0                	xor    %eax,%eax
-}
- 92d:	5b                   	pop    %ebx
- 92e:	5e                   	pop    %esi
- 92f:	5f                   	pop    %edi
- 930:	5d                   	pop    %ebp
- 931:	c3                   	ret    
- 932:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-      if(p->s.size == nunits)
- 938:	39 cf                	cmp    %ecx,%edi
- 93a:	74 54                	je     990 <malloc+0xf0>
-        p->s.size -= nunits;
- 93c:	29 f9                	sub    %edi,%ecx
- 93e:	89 48 04             	mov    %ecx,0x4(%eax)
-        p += p->s.size;
- 941:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
-        p->s.size = nunits;
- 944:	89 78 04             	mov    %edi,0x4(%eax)
-      freep = prevp;
- 947:	89 15 c4 0d 00 00    	mov    %edx,0xdc4
-}
- 94d:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return (void*)(p + 1);
- 950:	83 c0 08             	add    $0x8,%eax
-}
- 953:	5b                   	pop    %ebx
- 954:	5e                   	pop    %esi
- 955:	5f                   	pop    %edi
- 956:	5d                   	pop    %ebp
- 957:	c3                   	ret    
- 958:	90                   	nop
- 959:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    base.s.ptr = freep = prevp = &base;
- 960:	c7 05 c4 0d 00 00 c8 	movl   $0xdc8,0xdc4
- 967:	0d 00 00 
- 96a:	c7 05 c8 0d 00 00 c8 	movl   $0xdc8,0xdc8
- 971:	0d 00 00 
-    base.s.size = 0;
- 974:	b8 c8 0d 00 00       	mov    $0xdc8,%eax
- 979:	c7 05 cc 0d 00 00 00 	movl   $0x0,0xdcc
- 980:	00 00 00 
- 983:	e9 44 ff ff ff       	jmp    8cc <malloc+0x2c>
- 988:	90                   	nop
- 989:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-        prevp->s.ptr = p->s.ptr;
- 990:	8b 08                	mov    (%eax),%ecx
- 992:	89 0a                	mov    %ecx,(%edx)
- 994:	eb b1                	jmp    947 <malloc+0xa7>
diff -urN main/thread.c xv6-public/thread.c
--- main/thread.c	2022-09-05 22:05:51.000000000 +0530
+++ xv6-public/thread.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,64 +0,0 @@
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-#include "mutex.h"
-#include "our_spinlock.h"
-
-struct balance{
-    char name[32];
-    int amount;
-};
-volatile int total_balance = 0;
-volatile unsigned int delay (unsigned int d){
-    unsigned int i;
-    for (i = 0; i < d; i++)
-    {
-    __asm volatile( "nop" ::: );
-    }
-    return i;
-}
-void do_work(void *arg)
-{
-    int i;
-    int old;
-    struct balance *b = (struct balance*) arg;
-    printf(1, "Starting do_work: s:%s\n", b->name);
-    for (i = 0; i < b->amount; i++){
-        //thread_spin_lock(&lock);
-        thread_mutex_lock(&lock2);
-        old = total_balance;
-        delay(100000);
-        total_balance = old + 1;
-        thread_mutex_unlock(&lock2);
-        //thread_spin_unlock(&lock);
-    }
-
-    printf(1, "Done s:%x\n", b->name);
-    thread_exit();
-
-    return;
-}
-int main(int argc, char *argv[]) {
-
-    //thread_spin_init(&lock);
-    thread_mutex_init(&lock2);
-
-    struct balance b1 = {"b1", 3200};
-    struct balance b2 = {"b2", 2800};
-
-    void *s1, *s2;
-    int t1, t2, r1, r2;
-
-    s1 = malloc(4096);
-    s2 = malloc(4096);
-
-    t1 = thread_create(do_work, (void*)&b1, s1);
-    t2 = thread_create(do_work, (void*)&b2, s2);
-
-    r1 = thread_join();
-    r2 = thread_join();
-
-    printf(1, "Threads finished: (%d):%d, (%d):%d, shared balance:%d\n",
-    t1, r1, t2, r2, total_balance);
-    exit();
-}
diff -urN main/thread.d xv6-public/thread.d
--- main/thread.d	2022-09-26 21:21:17.525040000 +0530
+++ xv6-public/thread.d	1970-01-01 05:30:00.000000000 +0530
@@ -1,2 +0,0 @@
-thread.o: thread.c /usr/include/stdc-predef.h types.h stat.h user.h \
- mutex.h our_spinlock.h
Binary files main/thread.o and xv6-public/thread.o differ
diff -urN main/thread.sym xv6-public/thread.sym
--- main/thread.sym	2022-09-26 21:21:17.585070000 +0530
+++ xv6-public/thread.sym	1970-01-01 05:30:00.000000000 +0530
@@ -1,72 +0,0 @@
-00000000 .text
-00000998 .rodata
-00000a14 .eh_frame
-00000dc0 .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 .debug_ranges
-00000000 thread.c
-00000000 ulib.c
-00000000 printf.c
-000005a0 printint
-00000a00 digits.1050
-00000000 umalloc.c
-00000dc4 freep
-00000dc8 base
-000001e0 thread_mutex_unlock
-00000280 strcpy
-00000640 printf
-00000582 thread_exit
-000004a0 memmove
-0000051a mknod
-00000dd0 lock
-00000390 gets
-00000552 getpid
-000000e0 thread_mutex_init
-000008a0 malloc
-00000562 sleep
-00000200 thread_spin_init
-00000240 thread_spin_unlock
-00000dd8 lock2
-000004e2 pipe
-000004f2 write
-00000220 thread_spin_lock
-0000052a fstat
-00000502 kill
-00000542 chdir
-0000050a exec
-000004da wait
-000004ea read
-00000522 unlink
-000004ca fork
-0000055a sbrk
-0000056a uptime
-00000dc0 __bss_start
-00000150 do_work
-00000330 memset
-00000000 main
-00000dc0 total_balance
-000002b0 strcmp
-0000054a dup
-00000260 delay
-00000410 stat
-00000dc0 _edata
-00000de0 _end
-00000532 link
-000004d2 exit
-00000460 atoi
-0000058a draw
-00000300 strlen
-00000512 open
-00000350 strchr
-00000572 thread_create
-00000100 thread_mutex_lock
-0000053a mkdir
-000004fa close
-0000057a thread_join
-00000810 free
Binary files main/trapasm.o and xv6-public/trapasm.o differ
diff -urN main/trap.c xv6-public/trap.c
--- main/trap.c	2022-08-11 19:48:39.000000000 +0530
+++ xv6-public/trap.c	2022-10-30 16:05:12.000000000 +0530
@@ -14,6 +14,31 @@
 struct spinlock tickslock;
 uint ticks;
 
+struct spinlock swap_in_lock;
+
+
+void handlePageFault(){
+  struct proc *p=myproc();
+  int addr=rcr2();
+  acquire(&swap_in_lock);
+  sleep(p,&swap_in_lock);
+  pde_t *pde = &(p->pgdir)[PDX(addr)];
+  pte_t *pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
+
+  if((pgtab[PTX(addr)])&0x080){
+    p->addr = addr;
+    rpush2(p);
+    if(!swap_in_process_exists){
+      swap_in_process_exists=1;
+      create_kernel_process("swap_in_process", &swap_in_process_function);
+    }
+  }
+  else {
+    exit();
+  }
+}
+
+
 void
 tvinit(void)
 {
@@ -77,7 +102,9 @@
             cpuid(), tf->cs, tf->eip);
     lapiceoi();
     break;
-
+  case T_PGFLT:
+    handlePageFault();
+  break;
   //PAGEBREAK: 13
   default:
     if(myproc() == 0 || (tf->cs&3) == 0){
@@ -102,11 +129,15 @@
 
   // Force process to give up CPU on clock tick.
   // If interrupts were on while locks held, would need to check nlock.
-  if(myproc() && myproc()->state == RUNNING &&
-     tf->trapno == T_IRQ0+IRQ_TIMER)
-    yield();
+  // if(myproc() && myproc()->state == RUNNING &&
+  //    tf->trapno == T_IRQ0+IRQ_TIMER)
+  //   yield();
 
   // Check if the process has been killed since we yielded
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
     exit();
 }
+
+
+
+
Binary files main/trap.o and xv6-public/trap.o differ
Binary files main/uart.o and xv6-public/uart.o differ
Binary files main/ulib.o and xv6-public/ulib.o differ
Binary files main/umalloc.o and xv6-public/umalloc.o differ
diff -urN main/user.h xv6-public/user.h
--- main/user.h	2022-09-03 13:43:06.000000000 +0530
+++ xv6-public/user.h	2022-10-30 08:38:54.000000000 +0530
@@ -23,10 +23,7 @@
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
-int draw(void*,uint);
-int thread_create(void (*)(void*),void*,void*);
-int thread_join(void);
-int thread_exit(void);
+int draw(void*, uint);
 
 // ulib.c
 int stat(const char*, struct stat*);
@@ -41,3 +38,4 @@
 void* malloc(uint);
 void free(void*);
 int atoi(const char*);
+int randomrange(int,int);
Binary files main/_usertests and xv6-public/_usertests differ
diff -urN main/usertests.asm xv6-public/usertests.asm
--- main/usertests.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/usertests.asm	2022-10-31 22:34:18.022398940 +0530
@@ -0,0 +1,6634 @@
+
+_usertests:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  return randstate;
+}
+
+int
+main(int argc, char *argv[])
+{
+       0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+       4:	83 e4 f0             	and    $0xfffffff0,%esp
+       7:	ff 71 fc             	pushl  -0x4(%ecx)
+       a:	55                   	push   %ebp
+       b:	89 e5                	mov    %esp,%ebp
+       d:	51                   	push   %ecx
+       e:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "usertests starting\n");
+      11:	68 16 4d 00 00       	push   $0x4d16
+      16:	6a 01                	push   $0x1
+      18:	e8 b3 39 00 00       	call   39d0 <printf>
+
+  if(open("usertests.ran", 0) >= 0){
+      1d:	59                   	pop    %ecx
+      1e:	58                   	pop    %eax
+      1f:	6a 00                	push   $0x0
+      21:	68 2a 4d 00 00       	push   $0x4d2a
+      26:	e8 97 38 00 00       	call   38c2 <open>
+      2b:	83 c4 10             	add    $0x10,%esp
+      2e:	85 c0                	test   %eax,%eax
+      30:	78 13                	js     45 <main+0x45>
+    printf(1, "already ran user tests -- rebuild fs.img\n");
+      32:	52                   	push   %edx
+      33:	52                   	push   %edx
+      34:	68 64 54 00 00       	push   $0x5464
+      39:	6a 01                	push   $0x1
+      3b:	e8 90 39 00 00       	call   39d0 <printf>
+    exit();
+      40:	e8 3d 38 00 00       	call   3882 <exit>
+  }
+  close(open("usertests.ran", O_CREATE));
+      45:	50                   	push   %eax
+      46:	50                   	push   %eax
+      47:	68 00 02 00 00       	push   $0x200
+      4c:	68 2a 4d 00 00       	push   $0x4d2a
+      51:	e8 6c 38 00 00       	call   38c2 <open>
+      56:	89 04 24             	mov    %eax,(%esp)
+      59:	e8 4c 38 00 00       	call   38aa <close>
+
+  argptest();
+      5e:	e8 3d 35 00 00       	call   35a0 <argptest>
+  createdelete();
+      63:	e8 a8 11 00 00       	call   1210 <createdelete>
+  linkunlink();
+      68:	e8 63 1a 00 00       	call   1ad0 <linkunlink>
+  concreate();
+      6d:	e8 5e 17 00 00       	call   17d0 <concreate>
+  fourfiles();
+      72:	e8 99 0f 00 00       	call   1010 <fourfiles>
+  sharedfd();
+      77:	e8 d4 0d 00 00       	call   e50 <sharedfd>
+
+  bigargtest();
+      7c:	e8 df 31 00 00       	call   3260 <bigargtest>
+  bigwrite();
+      81:	e8 6a 23 00 00       	call   23f0 <bigwrite>
+  bigargtest();
+      86:	e8 d5 31 00 00       	call   3260 <bigargtest>
+  bsstest();
+      8b:	e8 50 31 00 00       	call   31e0 <bsstest>
+  sbrktest();
+      90:	e8 9b 2c 00 00       	call   2d30 <sbrktest>
+  validatetest();
+      95:	e8 96 30 00 00       	call   3130 <validatetest>
+
+  opentest();
+      9a:	e8 51 03 00 00       	call   3f0 <opentest>
+  writetest();
+      9f:	e8 dc 03 00 00       	call   480 <writetest>
+  writetest1();
+      a4:	e8 b7 05 00 00       	call   660 <writetest1>
+  createtest();
+      a9:	e8 82 07 00 00       	call   830 <createtest>
+
+  openiputtest();
+      ae:	e8 3d 02 00 00       	call   2f0 <openiputtest>
+  exitiputtest();
+      b3:	e8 48 01 00 00       	call   200 <exitiputtest>
+  iputtest();
+      b8:	e8 63 00 00 00       	call   120 <iputtest>
+
+  mem();
+      bd:	e8 be 0c 00 00       	call   d80 <mem>
+  pipe1();
+      c2:	e8 49 09 00 00       	call   a10 <pipe1>
+  preempt();
+      c7:	e8 e4 0a 00 00       	call   bb0 <preempt>
+  exitwait();
+      cc:	e8 1f 0c 00 00       	call   cf0 <exitwait>
+
+  rmdot();
+      d1:	e8 0a 27 00 00       	call   27e0 <rmdot>
+  fourteen();
+      d6:	e8 c5 25 00 00       	call   26a0 <fourteen>
+  bigfile();
+      db:	e8 f0 23 00 00       	call   24d0 <bigfile>
+  subdir();
+      e0:	e8 2b 1c 00 00       	call   1d10 <subdir>
+  linktest();
+      e5:	e8 d6 14 00 00       	call   15c0 <linktest>
+  unlinkread();
+      ea:	e8 41 13 00 00       	call   1430 <unlinkread>
+  dirfile();
+      ef:	e8 6c 28 00 00       	call   2960 <dirfile>
+  iref();
+      f4:	e8 67 2a 00 00       	call   2b60 <iref>
+  forktest();
+      f9:	e8 82 2b 00 00       	call   2c80 <forktest>
+  bigdir(); // slow
+      fe:	e8 dd 1a 00 00       	call   1be0 <bigdir>
+
+  uio();
+     103:	e8 28 34 00 00       	call   3530 <uio>
+
+  exectest();
+     108:	e8 b3 08 00 00       	call   9c0 <exectest>
+
+  exit();
+     10d:	e8 70 37 00 00       	call   3882 <exit>
+     112:	66 90                	xchg   %ax,%ax
+     114:	66 90                	xchg   %ax,%ax
+     116:	66 90                	xchg   %ax,%ax
+     118:	66 90                	xchg   %ax,%ax
+     11a:	66 90                	xchg   %ax,%ax
+     11c:	66 90                	xchg   %ax,%ax
+     11e:	66 90                	xchg   %ax,%ax
+
+00000120 <iputtest>:
+{
+     120:	55                   	push   %ebp
+     121:	89 e5                	mov    %esp,%ebp
+     123:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "iput test\n");
+     126:	68 bc 3d 00 00       	push   $0x3dbc
+     12b:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     131:	e8 9a 38 00 00       	call   39d0 <printf>
+  if(mkdir("iputdir") < 0){
+     136:	c7 04 24 4f 3d 00 00 	movl   $0x3d4f,(%esp)
+     13d:	e8 a8 37 00 00       	call   38ea <mkdir>
+     142:	83 c4 10             	add    $0x10,%esp
+     145:	85 c0                	test   %eax,%eax
+     147:	78 58                	js     1a1 <iputtest+0x81>
+  if(chdir("iputdir") < 0){
+     149:	83 ec 0c             	sub    $0xc,%esp
+     14c:	68 4f 3d 00 00       	push   $0x3d4f
+     151:	e8 9c 37 00 00       	call   38f2 <chdir>
+     156:	83 c4 10             	add    $0x10,%esp
+     159:	85 c0                	test   %eax,%eax
+     15b:	0f 88 85 00 00 00    	js     1e6 <iputtest+0xc6>
+  if(unlink("../iputdir") < 0){
+     161:	83 ec 0c             	sub    $0xc,%esp
+     164:	68 4c 3d 00 00       	push   $0x3d4c
+     169:	e8 64 37 00 00       	call   38d2 <unlink>
+     16e:	83 c4 10             	add    $0x10,%esp
+     171:	85 c0                	test   %eax,%eax
+     173:	78 5a                	js     1cf <iputtest+0xaf>
+  if(chdir("/") < 0){
+     175:	83 ec 0c             	sub    $0xc,%esp
+     178:	68 71 3d 00 00       	push   $0x3d71
+     17d:	e8 70 37 00 00       	call   38f2 <chdir>
+     182:	83 c4 10             	add    $0x10,%esp
+     185:	85 c0                	test   %eax,%eax
+     187:	78 2f                	js     1b8 <iputtest+0x98>
+  printf(stdout, "iput test ok\n");
+     189:	83 ec 08             	sub    $0x8,%esp
+     18c:	68 f4 3d 00 00       	push   $0x3df4
+     191:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     197:	e8 34 38 00 00       	call   39d0 <printf>
+}
+     19c:	83 c4 10             	add    $0x10,%esp
+     19f:	c9                   	leave  
+     1a0:	c3                   	ret    
+    printf(stdout, "mkdir failed\n");
+     1a1:	50                   	push   %eax
+     1a2:	50                   	push   %eax
+     1a3:	68 28 3d 00 00       	push   $0x3d28
+     1a8:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     1ae:	e8 1d 38 00 00       	call   39d0 <printf>
+    exit();
+     1b3:	e8 ca 36 00 00       	call   3882 <exit>
+    printf(stdout, "chdir / failed\n");
+     1b8:	50                   	push   %eax
+     1b9:	50                   	push   %eax
+     1ba:	68 73 3d 00 00       	push   $0x3d73
+     1bf:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     1c5:	e8 06 38 00 00       	call   39d0 <printf>
+    exit();
+     1ca:	e8 b3 36 00 00       	call   3882 <exit>
+    printf(stdout, "unlink ../iputdir failed\n");
+     1cf:	52                   	push   %edx
+     1d0:	52                   	push   %edx
+     1d1:	68 57 3d 00 00       	push   $0x3d57
+     1d6:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     1dc:	e8 ef 37 00 00       	call   39d0 <printf>
+    exit();
+     1e1:	e8 9c 36 00 00       	call   3882 <exit>
+    printf(stdout, "chdir iputdir failed\n");
+     1e6:	51                   	push   %ecx
+     1e7:	51                   	push   %ecx
+     1e8:	68 36 3d 00 00       	push   $0x3d36
+     1ed:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     1f3:	e8 d8 37 00 00       	call   39d0 <printf>
+    exit();
+     1f8:	e8 85 36 00 00       	call   3882 <exit>
+     1fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000200 <exitiputtest>:
+{
+     200:	55                   	push   %ebp
+     201:	89 e5                	mov    %esp,%ebp
+     203:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "exitiput test\n");
+     206:	68 83 3d 00 00       	push   $0x3d83
+     20b:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     211:	e8 ba 37 00 00       	call   39d0 <printf>
+  pid = fork();
+     216:	e8 5f 36 00 00       	call   387a <fork>
+  if(pid < 0){
+     21b:	83 c4 10             	add    $0x10,%esp
+     21e:	85 c0                	test   %eax,%eax
+     220:	0f 88 82 00 00 00    	js     2a8 <exitiputtest+0xa8>
+  if(pid == 0){
+     226:	75 48                	jne    270 <exitiputtest+0x70>
+    if(mkdir("iputdir") < 0){
+     228:	83 ec 0c             	sub    $0xc,%esp
+     22b:	68 4f 3d 00 00       	push   $0x3d4f
+     230:	e8 b5 36 00 00       	call   38ea <mkdir>
+     235:	83 c4 10             	add    $0x10,%esp
+     238:	85 c0                	test   %eax,%eax
+     23a:	0f 88 96 00 00 00    	js     2d6 <exitiputtest+0xd6>
+    if(chdir("iputdir") < 0){
+     240:	83 ec 0c             	sub    $0xc,%esp
+     243:	68 4f 3d 00 00       	push   $0x3d4f
+     248:	e8 a5 36 00 00       	call   38f2 <chdir>
+     24d:	83 c4 10             	add    $0x10,%esp
+     250:	85 c0                	test   %eax,%eax
+     252:	78 6b                	js     2bf <exitiputtest+0xbf>
+    if(unlink("../iputdir") < 0){
+     254:	83 ec 0c             	sub    $0xc,%esp
+     257:	68 4c 3d 00 00       	push   $0x3d4c
+     25c:	e8 71 36 00 00       	call   38d2 <unlink>
+     261:	83 c4 10             	add    $0x10,%esp
+     264:	85 c0                	test   %eax,%eax
+     266:	78 28                	js     290 <exitiputtest+0x90>
+    exit();
+     268:	e8 15 36 00 00       	call   3882 <exit>
+     26d:	8d 76 00             	lea    0x0(%esi),%esi
+  wait();
+     270:	e8 15 36 00 00       	call   388a <wait>
+  printf(stdout, "exitiput test ok\n");
+     275:	83 ec 08             	sub    $0x8,%esp
+     278:	68 a6 3d 00 00       	push   $0x3da6
+     27d:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     283:	e8 48 37 00 00       	call   39d0 <printf>
+}
+     288:	83 c4 10             	add    $0x10,%esp
+     28b:	c9                   	leave  
+     28c:	c3                   	ret    
+     28d:	8d 76 00             	lea    0x0(%esi),%esi
+      printf(stdout, "unlink ../iputdir failed\n");
+     290:	83 ec 08             	sub    $0x8,%esp
+     293:	68 57 3d 00 00       	push   $0x3d57
+     298:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     29e:	e8 2d 37 00 00       	call   39d0 <printf>
+      exit();
+     2a3:	e8 da 35 00 00       	call   3882 <exit>
+    printf(stdout, "fork failed\n");
+     2a8:	51                   	push   %ecx
+     2a9:	51                   	push   %ecx
+     2aa:	68 69 4c 00 00       	push   $0x4c69
+     2af:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     2b5:	e8 16 37 00 00       	call   39d0 <printf>
+    exit();
+     2ba:	e8 c3 35 00 00       	call   3882 <exit>
+      printf(stdout, "child chdir failed\n");
+     2bf:	50                   	push   %eax
+     2c0:	50                   	push   %eax
+     2c1:	68 92 3d 00 00       	push   $0x3d92
+     2c6:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     2cc:	e8 ff 36 00 00       	call   39d0 <printf>
+      exit();
+     2d1:	e8 ac 35 00 00       	call   3882 <exit>
+      printf(stdout, "mkdir failed\n");
+     2d6:	52                   	push   %edx
+     2d7:	52                   	push   %edx
+     2d8:	68 28 3d 00 00       	push   $0x3d28
+     2dd:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     2e3:	e8 e8 36 00 00       	call   39d0 <printf>
+      exit();
+     2e8:	e8 95 35 00 00       	call   3882 <exit>
+     2ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+000002f0 <openiputtest>:
+{
+     2f0:	55                   	push   %ebp
+     2f1:	89 e5                	mov    %esp,%ebp
+     2f3:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "openiput test\n");
+     2f6:	68 b8 3d 00 00       	push   $0x3db8
+     2fb:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     301:	e8 ca 36 00 00       	call   39d0 <printf>
+  if(mkdir("oidir") < 0){
+     306:	c7 04 24 c7 3d 00 00 	movl   $0x3dc7,(%esp)
+     30d:	e8 d8 35 00 00       	call   38ea <mkdir>
+     312:	83 c4 10             	add    $0x10,%esp
+     315:	85 c0                	test   %eax,%eax
+     317:	0f 88 88 00 00 00    	js     3a5 <openiputtest+0xb5>
+  pid = fork();
+     31d:	e8 58 35 00 00       	call   387a <fork>
+  if(pid < 0){
+     322:	85 c0                	test   %eax,%eax
+     324:	0f 88 92 00 00 00    	js     3bc <openiputtest+0xcc>
+  if(pid == 0){
+     32a:	75 34                	jne    360 <openiputtest+0x70>
+    int fd = open("oidir", O_RDWR);
+     32c:	83 ec 08             	sub    $0x8,%esp
+     32f:	6a 02                	push   $0x2
+     331:	68 c7 3d 00 00       	push   $0x3dc7
+     336:	e8 87 35 00 00       	call   38c2 <open>
+    if(fd >= 0){
+     33b:	83 c4 10             	add    $0x10,%esp
+     33e:	85 c0                	test   %eax,%eax
+     340:	78 5e                	js     3a0 <openiputtest+0xb0>
+      printf(stdout, "open directory for write succeeded\n");
+     342:	83 ec 08             	sub    $0x8,%esp
+     345:	68 4c 4d 00 00       	push   $0x4d4c
+     34a:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     350:	e8 7b 36 00 00       	call   39d0 <printf>
+      exit();
+     355:	e8 28 35 00 00       	call   3882 <exit>
+     35a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  sleep(1);
+     360:	83 ec 0c             	sub    $0xc,%esp
+     363:	6a 01                	push   $0x1
+     365:	e8 a8 35 00 00       	call   3912 <sleep>
+  if(unlink("oidir") != 0){
+     36a:	c7 04 24 c7 3d 00 00 	movl   $0x3dc7,(%esp)
+     371:	e8 5c 35 00 00       	call   38d2 <unlink>
+     376:	83 c4 10             	add    $0x10,%esp
+     379:	85 c0                	test   %eax,%eax
+     37b:	75 56                	jne    3d3 <openiputtest+0xe3>
+  wait();
+     37d:	e8 08 35 00 00       	call   388a <wait>
+  printf(stdout, "openiput test ok\n");
+     382:	83 ec 08             	sub    $0x8,%esp
+     385:	68 f0 3d 00 00       	push   $0x3df0
+     38a:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     390:	e8 3b 36 00 00       	call   39d0 <printf>
+     395:	83 c4 10             	add    $0x10,%esp
+}
+     398:	c9                   	leave  
+     399:	c3                   	ret    
+     39a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    exit();
+     3a0:	e8 dd 34 00 00       	call   3882 <exit>
+    printf(stdout, "mkdir oidir failed\n");
+     3a5:	51                   	push   %ecx
+     3a6:	51                   	push   %ecx
+     3a7:	68 cd 3d 00 00       	push   $0x3dcd
+     3ac:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     3b2:	e8 19 36 00 00       	call   39d0 <printf>
+    exit();
+     3b7:	e8 c6 34 00 00       	call   3882 <exit>
+    printf(stdout, "fork failed\n");
+     3bc:	52                   	push   %edx
+     3bd:	52                   	push   %edx
+     3be:	68 69 4c 00 00       	push   $0x4c69
+     3c3:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     3c9:	e8 02 36 00 00       	call   39d0 <printf>
+    exit();
+     3ce:	e8 af 34 00 00       	call   3882 <exit>
+    printf(stdout, "unlink failed\n");
+     3d3:	50                   	push   %eax
+     3d4:	50                   	push   %eax
+     3d5:	68 e1 3d 00 00       	push   $0x3de1
+     3da:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     3e0:	e8 eb 35 00 00       	call   39d0 <printf>
+    exit();
+     3e5:	e8 98 34 00 00       	call   3882 <exit>
+     3ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000003f0 <opentest>:
+{
+     3f0:	55                   	push   %ebp
+     3f1:	89 e5                	mov    %esp,%ebp
+     3f3:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "open test\n");
+     3f6:	68 02 3e 00 00       	push   $0x3e02
+     3fb:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     401:	e8 ca 35 00 00       	call   39d0 <printf>
+  fd = open("echo", 0);
+     406:	58                   	pop    %eax
+     407:	5a                   	pop    %edx
+     408:	6a 00                	push   $0x0
+     40a:	68 0d 3e 00 00       	push   $0x3e0d
+     40f:	e8 ae 34 00 00       	call   38c2 <open>
+  if(fd < 0){
+     414:	83 c4 10             	add    $0x10,%esp
+     417:	85 c0                	test   %eax,%eax
+     419:	78 36                	js     451 <opentest+0x61>
+  close(fd);
+     41b:	83 ec 0c             	sub    $0xc,%esp
+     41e:	50                   	push   %eax
+     41f:	e8 86 34 00 00       	call   38aa <close>
+  fd = open("doesnotexist", 0);
+     424:	5a                   	pop    %edx
+     425:	59                   	pop    %ecx
+     426:	6a 00                	push   $0x0
+     428:	68 25 3e 00 00       	push   $0x3e25
+     42d:	e8 90 34 00 00       	call   38c2 <open>
+  if(fd >= 0){
+     432:	83 c4 10             	add    $0x10,%esp
+     435:	85 c0                	test   %eax,%eax
+     437:	79 2f                	jns    468 <opentest+0x78>
+  printf(stdout, "open test ok\n");
+     439:	83 ec 08             	sub    $0x8,%esp
+     43c:	68 50 3e 00 00       	push   $0x3e50
+     441:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     447:	e8 84 35 00 00       	call   39d0 <printf>
+}
+     44c:	83 c4 10             	add    $0x10,%esp
+     44f:	c9                   	leave  
+     450:	c3                   	ret    
+    printf(stdout, "open echo failed!\n");
+     451:	50                   	push   %eax
+     452:	50                   	push   %eax
+     453:	68 12 3e 00 00       	push   $0x3e12
+     458:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     45e:	e8 6d 35 00 00       	call   39d0 <printf>
+    exit();
+     463:	e8 1a 34 00 00       	call   3882 <exit>
+    printf(stdout, "open doesnotexist succeeded!\n");
+     468:	50                   	push   %eax
+     469:	50                   	push   %eax
+     46a:	68 32 3e 00 00       	push   $0x3e32
+     46f:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     475:	e8 56 35 00 00       	call   39d0 <printf>
+    exit();
+     47a:	e8 03 34 00 00       	call   3882 <exit>
+     47f:	90                   	nop
+
+00000480 <writetest>:
+{
+     480:	55                   	push   %ebp
+     481:	89 e5                	mov    %esp,%ebp
+     483:	56                   	push   %esi
+     484:	53                   	push   %ebx
+  printf(stdout, "small file test\n");
+     485:	83 ec 08             	sub    $0x8,%esp
+     488:	68 5e 3e 00 00       	push   $0x3e5e
+     48d:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     493:	e8 38 35 00 00       	call   39d0 <printf>
+  fd = open("small", O_CREATE|O_RDWR);
+     498:	58                   	pop    %eax
+     499:	5a                   	pop    %edx
+     49a:	68 02 02 00 00       	push   $0x202
+     49f:	68 6f 3e 00 00       	push   $0x3e6f
+     4a4:	e8 19 34 00 00       	call   38c2 <open>
+  if(fd >= 0){
+     4a9:	83 c4 10             	add    $0x10,%esp
+     4ac:	85 c0                	test   %eax,%eax
+     4ae:	0f 88 88 01 00 00    	js     63c <writetest+0x1bc>
+    printf(stdout, "creat small succeeded; ok\n");
+     4b4:	83 ec 08             	sub    $0x8,%esp
+     4b7:	89 c6                	mov    %eax,%esi
+  for(i = 0; i < 100; i++){
+     4b9:	31 db                	xor    %ebx,%ebx
+    printf(stdout, "creat small succeeded; ok\n");
+     4bb:	68 75 3e 00 00       	push   $0x3e75
+     4c0:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     4c6:	e8 05 35 00 00       	call   39d0 <printf>
+     4cb:	83 c4 10             	add    $0x10,%esp
+     4ce:	66 90                	xchg   %ax,%ax
+    if(write(fd, "aaaaaaaaaa", 10) != 10){
+     4d0:	83 ec 04             	sub    $0x4,%esp
+     4d3:	6a 0a                	push   $0xa
+     4d5:	68 ac 3e 00 00       	push   $0x3eac
+     4da:	56                   	push   %esi
+     4db:	e8 c2 33 00 00       	call   38a2 <write>
+     4e0:	83 c4 10             	add    $0x10,%esp
+     4e3:	83 f8 0a             	cmp    $0xa,%eax
+     4e6:	0f 85 d9 00 00 00    	jne    5c5 <writetest+0x145>
+    if(write(fd, "bbbbbbbbbb", 10) != 10){
+     4ec:	83 ec 04             	sub    $0x4,%esp
+     4ef:	6a 0a                	push   $0xa
+     4f1:	68 b7 3e 00 00       	push   $0x3eb7
+     4f6:	56                   	push   %esi
+     4f7:	e8 a6 33 00 00       	call   38a2 <write>
+     4fc:	83 c4 10             	add    $0x10,%esp
+     4ff:	83 f8 0a             	cmp    $0xa,%eax
+     502:	0f 85 d6 00 00 00    	jne    5de <writetest+0x15e>
+  for(i = 0; i < 100; i++){
+     508:	83 c3 01             	add    $0x1,%ebx
+     50b:	83 fb 64             	cmp    $0x64,%ebx
+     50e:	75 c0                	jne    4d0 <writetest+0x50>
+  printf(stdout, "writes ok\n");
+     510:	83 ec 08             	sub    $0x8,%esp
+     513:	68 c2 3e 00 00       	push   $0x3ec2
+     518:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     51e:	e8 ad 34 00 00       	call   39d0 <printf>
+  close(fd);
+     523:	89 34 24             	mov    %esi,(%esp)
+     526:	e8 7f 33 00 00       	call   38aa <close>
+  fd = open("small", O_RDONLY);
+     52b:	5b                   	pop    %ebx
+     52c:	5e                   	pop    %esi
+     52d:	6a 00                	push   $0x0
+     52f:	68 6f 3e 00 00       	push   $0x3e6f
+     534:	e8 89 33 00 00       	call   38c2 <open>
+  if(fd >= 0){
+     539:	83 c4 10             	add    $0x10,%esp
+     53c:	85 c0                	test   %eax,%eax
+  fd = open("small", O_RDONLY);
+     53e:	89 c3                	mov    %eax,%ebx
+  if(fd >= 0){
+     540:	0f 88 b1 00 00 00    	js     5f7 <writetest+0x177>
+    printf(stdout, "open small succeeded ok\n");
+     546:	83 ec 08             	sub    $0x8,%esp
+     549:	68 cd 3e 00 00       	push   $0x3ecd
+     54e:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     554:	e8 77 34 00 00       	call   39d0 <printf>
+  i = read(fd, buf, 2000);
+     559:	83 c4 0c             	add    $0xc,%esp
+     55c:	68 d0 07 00 00       	push   $0x7d0
+     561:	68 80 85 00 00       	push   $0x8580
+     566:	53                   	push   %ebx
+     567:	e8 2e 33 00 00       	call   389a <read>
+  if(i == 2000){
+     56c:	83 c4 10             	add    $0x10,%esp
+     56f:	3d d0 07 00 00       	cmp    $0x7d0,%eax
+     574:	0f 85 94 00 00 00    	jne    60e <writetest+0x18e>
+    printf(stdout, "read succeeded ok\n");
+     57a:	83 ec 08             	sub    $0x8,%esp
+     57d:	68 01 3f 00 00       	push   $0x3f01
+     582:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     588:	e8 43 34 00 00       	call   39d0 <printf>
+  close(fd);
+     58d:	89 1c 24             	mov    %ebx,(%esp)
+     590:	e8 15 33 00 00       	call   38aa <close>
+  if(unlink("small") < 0){
+     595:	c7 04 24 6f 3e 00 00 	movl   $0x3e6f,(%esp)
+     59c:	e8 31 33 00 00       	call   38d2 <unlink>
+     5a1:	83 c4 10             	add    $0x10,%esp
+     5a4:	85 c0                	test   %eax,%eax
+     5a6:	78 7d                	js     625 <writetest+0x1a5>
+  printf(stdout, "small file test ok\n");
+     5a8:	83 ec 08             	sub    $0x8,%esp
+     5ab:	68 29 3f 00 00       	push   $0x3f29
+     5b0:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     5b6:	e8 15 34 00 00       	call   39d0 <printf>
+}
+     5bb:	83 c4 10             	add    $0x10,%esp
+     5be:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     5c1:	5b                   	pop    %ebx
+     5c2:	5e                   	pop    %esi
+     5c3:	5d                   	pop    %ebp
+     5c4:	c3                   	ret    
+      printf(stdout, "error: write aa %d new file failed\n", i);
+     5c5:	83 ec 04             	sub    $0x4,%esp
+     5c8:	53                   	push   %ebx
+     5c9:	68 70 4d 00 00       	push   $0x4d70
+     5ce:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     5d4:	e8 f7 33 00 00       	call   39d0 <printf>
+      exit();
+     5d9:	e8 a4 32 00 00       	call   3882 <exit>
+      printf(stdout, "error: write bb %d new file failed\n", i);
+     5de:	83 ec 04             	sub    $0x4,%esp
+     5e1:	53                   	push   %ebx
+     5e2:	68 94 4d 00 00       	push   $0x4d94
+     5e7:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     5ed:	e8 de 33 00 00       	call   39d0 <printf>
+      exit();
+     5f2:	e8 8b 32 00 00       	call   3882 <exit>
+    printf(stdout, "error: open small failed!\n");
+     5f7:	51                   	push   %ecx
+     5f8:	51                   	push   %ecx
+     5f9:	68 e6 3e 00 00       	push   $0x3ee6
+     5fe:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     604:	e8 c7 33 00 00       	call   39d0 <printf>
+    exit();
+     609:	e8 74 32 00 00       	call   3882 <exit>
+    printf(stdout, "read failed\n");
+     60e:	52                   	push   %edx
+     60f:	52                   	push   %edx
+     610:	68 2d 42 00 00       	push   $0x422d
+     615:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     61b:	e8 b0 33 00 00       	call   39d0 <printf>
+    exit();
+     620:	e8 5d 32 00 00       	call   3882 <exit>
+    printf(stdout, "unlink small failed\n");
+     625:	50                   	push   %eax
+     626:	50                   	push   %eax
+     627:	68 14 3f 00 00       	push   $0x3f14
+     62c:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     632:	e8 99 33 00 00       	call   39d0 <printf>
+    exit();
+     637:	e8 46 32 00 00       	call   3882 <exit>
+    printf(stdout, "error: creat small failed!\n");
+     63c:	50                   	push   %eax
+     63d:	50                   	push   %eax
+     63e:	68 90 3e 00 00       	push   $0x3e90
+     643:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     649:	e8 82 33 00 00       	call   39d0 <printf>
+    exit();
+     64e:	e8 2f 32 00 00       	call   3882 <exit>
+     653:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     659:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000660 <writetest1>:
+{
+     660:	55                   	push   %ebp
+     661:	89 e5                	mov    %esp,%ebp
+     663:	56                   	push   %esi
+     664:	53                   	push   %ebx
+  printf(stdout, "big files test\n");
+     665:	83 ec 08             	sub    $0x8,%esp
+     668:	68 3d 3f 00 00       	push   $0x3f3d
+     66d:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     673:	e8 58 33 00 00       	call   39d0 <printf>
+  fd = open("big", O_CREATE|O_RDWR);
+     678:	58                   	pop    %eax
+     679:	5a                   	pop    %edx
+     67a:	68 02 02 00 00       	push   $0x202
+     67f:	68 b7 3f 00 00       	push   $0x3fb7
+     684:	e8 39 32 00 00       	call   38c2 <open>
+  if(fd < 0){
+     689:	83 c4 10             	add    $0x10,%esp
+     68c:	85 c0                	test   %eax,%eax
+     68e:	0f 88 61 01 00 00    	js     7f5 <writetest1+0x195>
+     694:	89 c6                	mov    %eax,%esi
+  for(i = 0; i < MAXFILE; i++){
+     696:	31 db                	xor    %ebx,%ebx
+     698:	90                   	nop
+     699:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(write(fd, buf, 512) != 512){
+     6a0:	83 ec 04             	sub    $0x4,%esp
+    ((int*)buf)[0] = i;
+     6a3:	89 1d 80 85 00 00    	mov    %ebx,0x8580
+    if(write(fd, buf, 512) != 512){
+     6a9:	68 00 02 00 00       	push   $0x200
+     6ae:	68 80 85 00 00       	push   $0x8580
+     6b3:	56                   	push   %esi
+     6b4:	e8 e9 31 00 00       	call   38a2 <write>
+     6b9:	83 c4 10             	add    $0x10,%esp
+     6bc:	3d 00 02 00 00       	cmp    $0x200,%eax
+     6c1:	0f 85 b3 00 00 00    	jne    77a <writetest1+0x11a>
+  for(i = 0; i < MAXFILE; i++){
+     6c7:	83 c3 01             	add    $0x1,%ebx
+     6ca:	81 fb 8c 00 00 00    	cmp    $0x8c,%ebx
+     6d0:	75 ce                	jne    6a0 <writetest1+0x40>
+  close(fd);
+     6d2:	83 ec 0c             	sub    $0xc,%esp
+     6d5:	56                   	push   %esi
+     6d6:	e8 cf 31 00 00       	call   38aa <close>
+  fd = open("big", O_RDONLY);
+     6db:	5b                   	pop    %ebx
+     6dc:	5e                   	pop    %esi
+     6dd:	6a 00                	push   $0x0
+     6df:	68 b7 3f 00 00       	push   $0x3fb7
+     6e4:	e8 d9 31 00 00       	call   38c2 <open>
+  if(fd < 0){
+     6e9:	83 c4 10             	add    $0x10,%esp
+     6ec:	85 c0                	test   %eax,%eax
+  fd = open("big", O_RDONLY);
+     6ee:	89 c6                	mov    %eax,%esi
+  if(fd < 0){
+     6f0:	0f 88 e8 00 00 00    	js     7de <writetest1+0x17e>
+  n = 0;
+     6f6:	31 db                	xor    %ebx,%ebx
+     6f8:	eb 1d                	jmp    717 <writetest1+0xb7>
+     6fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    } else if(i != 512){
+     700:	3d 00 02 00 00       	cmp    $0x200,%eax
+     705:	0f 85 9f 00 00 00    	jne    7aa <writetest1+0x14a>
+    if(((int*)buf)[0] != n){
+     70b:	a1 80 85 00 00       	mov    0x8580,%eax
+     710:	39 d8                	cmp    %ebx,%eax
+     712:	75 7f                	jne    793 <writetest1+0x133>
+    n++;
+     714:	83 c3 01             	add    $0x1,%ebx
+    i = read(fd, buf, 512);
+     717:	83 ec 04             	sub    $0x4,%esp
+     71a:	68 00 02 00 00       	push   $0x200
+     71f:	68 80 85 00 00       	push   $0x8580
+     724:	56                   	push   %esi
+     725:	e8 70 31 00 00       	call   389a <read>
+    if(i == 0){
+     72a:	83 c4 10             	add    $0x10,%esp
+     72d:	85 c0                	test   %eax,%eax
+     72f:	75 cf                	jne    700 <writetest1+0xa0>
+      if(n == MAXFILE - 1){
+     731:	81 fb 8b 00 00 00    	cmp    $0x8b,%ebx
+     737:	0f 84 86 00 00 00    	je     7c3 <writetest1+0x163>
+  close(fd);
+     73d:	83 ec 0c             	sub    $0xc,%esp
+     740:	56                   	push   %esi
+     741:	e8 64 31 00 00       	call   38aa <close>
+  if(unlink("big") < 0){
+     746:	c7 04 24 b7 3f 00 00 	movl   $0x3fb7,(%esp)
+     74d:	e8 80 31 00 00       	call   38d2 <unlink>
+     752:	83 c4 10             	add    $0x10,%esp
+     755:	85 c0                	test   %eax,%eax
+     757:	0f 88 af 00 00 00    	js     80c <writetest1+0x1ac>
+  printf(stdout, "big files ok\n");
+     75d:	83 ec 08             	sub    $0x8,%esp
+     760:	68 de 3f 00 00       	push   $0x3fde
+     765:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     76b:	e8 60 32 00 00       	call   39d0 <printf>
+}
+     770:	83 c4 10             	add    $0x10,%esp
+     773:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     776:	5b                   	pop    %ebx
+     777:	5e                   	pop    %esi
+     778:	5d                   	pop    %ebp
+     779:	c3                   	ret    
+      printf(stdout, "error: write big file failed\n", i);
+     77a:	83 ec 04             	sub    $0x4,%esp
+     77d:	53                   	push   %ebx
+     77e:	68 67 3f 00 00       	push   $0x3f67
+     783:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     789:	e8 42 32 00 00       	call   39d0 <printf>
+      exit();
+     78e:	e8 ef 30 00 00       	call   3882 <exit>
+      printf(stdout, "read content of block %d is %d\n",
+     793:	50                   	push   %eax
+     794:	53                   	push   %ebx
+     795:	68 b8 4d 00 00       	push   $0x4db8
+     79a:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     7a0:	e8 2b 32 00 00       	call   39d0 <printf>
+      exit();
+     7a5:	e8 d8 30 00 00       	call   3882 <exit>
+      printf(stdout, "read failed %d\n", i);
+     7aa:	83 ec 04             	sub    $0x4,%esp
+     7ad:	50                   	push   %eax
+     7ae:	68 bb 3f 00 00       	push   $0x3fbb
+     7b3:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     7b9:	e8 12 32 00 00       	call   39d0 <printf>
+      exit();
+     7be:	e8 bf 30 00 00       	call   3882 <exit>
+        printf(stdout, "read only %d blocks from big", n);
+     7c3:	52                   	push   %edx
+     7c4:	68 8b 00 00 00       	push   $0x8b
+     7c9:	68 9e 3f 00 00       	push   $0x3f9e
+     7ce:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     7d4:	e8 f7 31 00 00       	call   39d0 <printf>
+        exit();
+     7d9:	e8 a4 30 00 00       	call   3882 <exit>
+    printf(stdout, "error: open big failed!\n");
+     7de:	51                   	push   %ecx
+     7df:	51                   	push   %ecx
+     7e0:	68 85 3f 00 00       	push   $0x3f85
+     7e5:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     7eb:	e8 e0 31 00 00       	call   39d0 <printf>
+    exit();
+     7f0:	e8 8d 30 00 00       	call   3882 <exit>
+    printf(stdout, "error: creat big failed!\n");
+     7f5:	50                   	push   %eax
+     7f6:	50                   	push   %eax
+     7f7:	68 4d 3f 00 00       	push   $0x3f4d
+     7fc:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     802:	e8 c9 31 00 00       	call   39d0 <printf>
+    exit();
+     807:	e8 76 30 00 00       	call   3882 <exit>
+    printf(stdout, "unlink big failed\n");
+     80c:	50                   	push   %eax
+     80d:	50                   	push   %eax
+     80e:	68 cb 3f 00 00       	push   $0x3fcb
+     813:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     819:	e8 b2 31 00 00       	call   39d0 <printf>
+    exit();
+     81e:	e8 5f 30 00 00       	call   3882 <exit>
+     823:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     829:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000830 <createtest>:
+{
+     830:	55                   	push   %ebp
+     831:	89 e5                	mov    %esp,%ebp
+     833:	53                   	push   %ebx
+  name[2] = '\0';
+     834:	bb 30 00 00 00       	mov    $0x30,%ebx
+{
+     839:	83 ec 0c             	sub    $0xc,%esp
+  printf(stdout, "many creates, followed by unlink test\n");
+     83c:	68 d8 4d 00 00       	push   $0x4dd8
+     841:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     847:	e8 84 31 00 00       	call   39d0 <printf>
+  name[0] = 'a';
+     84c:	c6 05 80 a5 00 00 61 	movb   $0x61,0xa580
+  name[2] = '\0';
+     853:	c6 05 82 a5 00 00 00 	movb   $0x0,0xa582
+     85a:	83 c4 10             	add    $0x10,%esp
+     85d:	8d 76 00             	lea    0x0(%esi),%esi
+    fd = open(name, O_CREATE|O_RDWR);
+     860:	83 ec 08             	sub    $0x8,%esp
+    name[1] = '0' + i;
+     863:	88 1d 81 a5 00 00    	mov    %bl,0xa581
+     869:	83 c3 01             	add    $0x1,%ebx
+    fd = open(name, O_CREATE|O_RDWR);
+     86c:	68 02 02 00 00       	push   $0x202
+     871:	68 80 a5 00 00       	push   $0xa580
+     876:	e8 47 30 00 00       	call   38c2 <open>
+    close(fd);
+     87b:	89 04 24             	mov    %eax,(%esp)
+     87e:	e8 27 30 00 00       	call   38aa <close>
+  for(i = 0; i < 52; i++){
+     883:	83 c4 10             	add    $0x10,%esp
+     886:	80 fb 64             	cmp    $0x64,%bl
+     889:	75 d5                	jne    860 <createtest+0x30>
+  name[0] = 'a';
+     88b:	c6 05 80 a5 00 00 61 	movb   $0x61,0xa580
+  name[2] = '\0';
+     892:	c6 05 82 a5 00 00 00 	movb   $0x0,0xa582
+     899:	bb 30 00 00 00       	mov    $0x30,%ebx
+     89e:	66 90                	xchg   %ax,%ax
+    unlink(name);
+     8a0:	83 ec 0c             	sub    $0xc,%esp
+    name[1] = '0' + i;
+     8a3:	88 1d 81 a5 00 00    	mov    %bl,0xa581
+     8a9:	83 c3 01             	add    $0x1,%ebx
+    unlink(name);
+     8ac:	68 80 a5 00 00       	push   $0xa580
+     8b1:	e8 1c 30 00 00       	call   38d2 <unlink>
+  for(i = 0; i < 52; i++){
+     8b6:	83 c4 10             	add    $0x10,%esp
+     8b9:	80 fb 64             	cmp    $0x64,%bl
+     8bc:	75 e2                	jne    8a0 <createtest+0x70>
+  printf(stdout, "many creates, followed by unlink; ok\n");
+     8be:	83 ec 08             	sub    $0x8,%esp
+     8c1:	68 00 4e 00 00       	push   $0x4e00
+     8c6:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     8cc:	e8 ff 30 00 00       	call   39d0 <printf>
+}
+     8d1:	83 c4 10             	add    $0x10,%esp
+     8d4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     8d7:	c9                   	leave  
+     8d8:	c3                   	ret    
+     8d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000008e0 <dirtest>:
+{
+     8e0:	55                   	push   %ebp
+     8e1:	89 e5                	mov    %esp,%ebp
+     8e3:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "mkdir test\n");
+     8e6:	68 ec 3f 00 00       	push   $0x3fec
+     8eb:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     8f1:	e8 da 30 00 00       	call   39d0 <printf>
+  if(mkdir("dir0") < 0){
+     8f6:	c7 04 24 f8 3f 00 00 	movl   $0x3ff8,(%esp)
+     8fd:	e8 e8 2f 00 00       	call   38ea <mkdir>
+     902:	83 c4 10             	add    $0x10,%esp
+     905:	85 c0                	test   %eax,%eax
+     907:	78 58                	js     961 <dirtest+0x81>
+  if(chdir("dir0") < 0){
+     909:	83 ec 0c             	sub    $0xc,%esp
+     90c:	68 f8 3f 00 00       	push   $0x3ff8
+     911:	e8 dc 2f 00 00       	call   38f2 <chdir>
+     916:	83 c4 10             	add    $0x10,%esp
+     919:	85 c0                	test   %eax,%eax
+     91b:	0f 88 85 00 00 00    	js     9a6 <dirtest+0xc6>
+  if(chdir("..") < 0){
+     921:	83 ec 0c             	sub    $0xc,%esp
+     924:	68 9d 45 00 00       	push   $0x459d
+     929:	e8 c4 2f 00 00       	call   38f2 <chdir>
+     92e:	83 c4 10             	add    $0x10,%esp
+     931:	85 c0                	test   %eax,%eax
+     933:	78 5a                	js     98f <dirtest+0xaf>
+  if(unlink("dir0") < 0){
+     935:	83 ec 0c             	sub    $0xc,%esp
+     938:	68 f8 3f 00 00       	push   $0x3ff8
+     93d:	e8 90 2f 00 00       	call   38d2 <unlink>
+     942:	83 c4 10             	add    $0x10,%esp
+     945:	85 c0                	test   %eax,%eax
+     947:	78 2f                	js     978 <dirtest+0x98>
+  printf(stdout, "mkdir test ok\n");
+     949:	83 ec 08             	sub    $0x8,%esp
+     94c:	68 35 40 00 00       	push   $0x4035
+     951:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     957:	e8 74 30 00 00       	call   39d0 <printf>
+}
+     95c:	83 c4 10             	add    $0x10,%esp
+     95f:	c9                   	leave  
+     960:	c3                   	ret    
+    printf(stdout, "mkdir failed\n");
+     961:	50                   	push   %eax
+     962:	50                   	push   %eax
+     963:	68 28 3d 00 00       	push   $0x3d28
+     968:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     96e:	e8 5d 30 00 00       	call   39d0 <printf>
+    exit();
+     973:	e8 0a 2f 00 00       	call   3882 <exit>
+    printf(stdout, "unlink dir0 failed\n");
+     978:	50                   	push   %eax
+     979:	50                   	push   %eax
+     97a:	68 21 40 00 00       	push   $0x4021
+     97f:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     985:	e8 46 30 00 00       	call   39d0 <printf>
+    exit();
+     98a:	e8 f3 2e 00 00       	call   3882 <exit>
+    printf(stdout, "chdir .. failed\n");
+     98f:	52                   	push   %edx
+     990:	52                   	push   %edx
+     991:	68 10 40 00 00       	push   $0x4010
+     996:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     99c:	e8 2f 30 00 00       	call   39d0 <printf>
+    exit();
+     9a1:	e8 dc 2e 00 00       	call   3882 <exit>
+    printf(stdout, "chdir dir0 failed\n");
+     9a6:	51                   	push   %ecx
+     9a7:	51                   	push   %ecx
+     9a8:	68 fd 3f 00 00       	push   $0x3ffd
+     9ad:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     9b3:	e8 18 30 00 00       	call   39d0 <printf>
+    exit();
+     9b8:	e8 c5 2e 00 00       	call   3882 <exit>
+     9bd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000009c0 <exectest>:
+{
+     9c0:	55                   	push   %ebp
+     9c1:	89 e5                	mov    %esp,%ebp
+     9c3:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "exec test\n");
+     9c6:	68 44 40 00 00       	push   $0x4044
+     9cb:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     9d1:	e8 fa 2f 00 00       	call   39d0 <printf>
+  if(exec("echo", echoargv) < 0){
+     9d6:	5a                   	pop    %edx
+     9d7:	59                   	pop    %ecx
+     9d8:	68 ac 5d 00 00       	push   $0x5dac
+     9dd:	68 0d 3e 00 00       	push   $0x3e0d
+     9e2:	e8 d3 2e 00 00       	call   38ba <exec>
+     9e7:	83 c4 10             	add    $0x10,%esp
+     9ea:	85 c0                	test   %eax,%eax
+     9ec:	78 02                	js     9f0 <exectest+0x30>
+}
+     9ee:	c9                   	leave  
+     9ef:	c3                   	ret    
+    printf(stdout, "exec echo failed\n");
+     9f0:	50                   	push   %eax
+     9f1:	50                   	push   %eax
+     9f2:	68 4f 40 00 00       	push   $0x404f
+     9f7:	ff 35 a8 5d 00 00    	pushl  0x5da8
+     9fd:	e8 ce 2f 00 00       	call   39d0 <printf>
+    exit();
+     a02:	e8 7b 2e 00 00       	call   3882 <exit>
+     a07:	89 f6                	mov    %esi,%esi
+     a09:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000a10 <pipe1>:
+{
+     a10:	55                   	push   %ebp
+     a11:	89 e5                	mov    %esp,%ebp
+     a13:	57                   	push   %edi
+     a14:	56                   	push   %esi
+     a15:	53                   	push   %ebx
+  if(pipe(fds) != 0){
+     a16:	8d 45 e0             	lea    -0x20(%ebp),%eax
+{
+     a19:	83 ec 38             	sub    $0x38,%esp
+  if(pipe(fds) != 0){
+     a1c:	50                   	push   %eax
+     a1d:	e8 70 2e 00 00       	call   3892 <pipe>
+     a22:	83 c4 10             	add    $0x10,%esp
+     a25:	85 c0                	test   %eax,%eax
+     a27:	0f 85 3e 01 00 00    	jne    b6b <pipe1+0x15b>
+     a2d:	89 c3                	mov    %eax,%ebx
+  pid = fork();
+     a2f:	e8 46 2e 00 00       	call   387a <fork>
+  if(pid == 0){
+     a34:	83 f8 00             	cmp    $0x0,%eax
+     a37:	0f 84 84 00 00 00    	je     ac1 <pipe1+0xb1>
+  } else if(pid > 0){
+     a3d:	0f 8e 3b 01 00 00    	jle    b7e <pipe1+0x16e>
+    close(fds[1]);
+     a43:	83 ec 0c             	sub    $0xc,%esp
+     a46:	ff 75 e4             	pushl  -0x1c(%ebp)
+    cc = 1;
+     a49:	bf 01 00 00 00       	mov    $0x1,%edi
+    close(fds[1]);
+     a4e:	e8 57 2e 00 00       	call   38aa <close>
+    while((n = read(fds[0], buf, cc)) > 0){
+     a53:	83 c4 10             	add    $0x10,%esp
+    total = 0;
+     a56:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
+    while((n = read(fds[0], buf, cc)) > 0){
+     a5d:	83 ec 04             	sub    $0x4,%esp
+     a60:	57                   	push   %edi
+     a61:	68 80 85 00 00       	push   $0x8580
+     a66:	ff 75 e0             	pushl  -0x20(%ebp)
+     a69:	e8 2c 2e 00 00       	call   389a <read>
+     a6e:	83 c4 10             	add    $0x10,%esp
+     a71:	85 c0                	test   %eax,%eax
+     a73:	0f 8e ab 00 00 00    	jle    b24 <pipe1+0x114>
+        if((buf[i] & 0xff) != (seq++ & 0xff)){
+     a79:	89 d9                	mov    %ebx,%ecx
+     a7b:	8d 34 18             	lea    (%eax,%ebx,1),%esi
+     a7e:	f7 d9                	neg    %ecx
+     a80:	38 9c 0b 80 85 00 00 	cmp    %bl,0x8580(%ebx,%ecx,1)
+     a87:	8d 53 01             	lea    0x1(%ebx),%edx
+     a8a:	75 1b                	jne    aa7 <pipe1+0x97>
+      for(i = 0; i < n; i++){
+     a8c:	39 f2                	cmp    %esi,%edx
+     a8e:	89 d3                	mov    %edx,%ebx
+     a90:	75 ee                	jne    a80 <pipe1+0x70>
+      cc = cc * 2;
+     a92:	01 ff                	add    %edi,%edi
+      total += n;
+     a94:	01 45 d4             	add    %eax,-0x2c(%ebp)
+     a97:	b8 00 20 00 00       	mov    $0x2000,%eax
+     a9c:	81 ff 00 20 00 00    	cmp    $0x2000,%edi
+     aa2:	0f 4f f8             	cmovg  %eax,%edi
+     aa5:	eb b6                	jmp    a5d <pipe1+0x4d>
+          printf(1, "pipe1 oops 2\n");
+     aa7:	83 ec 08             	sub    $0x8,%esp
+     aaa:	68 7e 40 00 00       	push   $0x407e
+     aaf:	6a 01                	push   $0x1
+     ab1:	e8 1a 2f 00 00       	call   39d0 <printf>
+          return;
+     ab6:	83 c4 10             	add    $0x10,%esp
+}
+     ab9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     abc:	5b                   	pop    %ebx
+     abd:	5e                   	pop    %esi
+     abe:	5f                   	pop    %edi
+     abf:	5d                   	pop    %ebp
+     ac0:	c3                   	ret    
+    close(fds[0]);
+     ac1:	83 ec 0c             	sub    $0xc,%esp
+     ac4:	ff 75 e0             	pushl  -0x20(%ebp)
+     ac7:	31 db                	xor    %ebx,%ebx
+     ac9:	be 09 04 00 00       	mov    $0x409,%esi
+     ace:	e8 d7 2d 00 00       	call   38aa <close>
+     ad3:	83 c4 10             	add    $0x10,%esp
+     ad6:	89 d8                	mov    %ebx,%eax
+     ad8:	89 f2                	mov    %esi,%edx
+     ada:	f7 d8                	neg    %eax
+     adc:	29 da                	sub    %ebx,%edx
+     ade:	66 90                	xchg   %ax,%ax
+        buf[i] = seq++;
+     ae0:	88 84 03 80 85 00 00 	mov    %al,0x8580(%ebx,%eax,1)
+     ae7:	83 c0 01             	add    $0x1,%eax
+      for(i = 0; i < 1033; i++)
+     aea:	39 d0                	cmp    %edx,%eax
+     aec:	75 f2                	jne    ae0 <pipe1+0xd0>
+      if(write(fds[1], buf, 1033) != 1033){
+     aee:	83 ec 04             	sub    $0x4,%esp
+     af1:	68 09 04 00 00       	push   $0x409
+     af6:	68 80 85 00 00       	push   $0x8580
+     afb:	ff 75 e4             	pushl  -0x1c(%ebp)
+     afe:	e8 9f 2d 00 00       	call   38a2 <write>
+     b03:	83 c4 10             	add    $0x10,%esp
+     b06:	3d 09 04 00 00       	cmp    $0x409,%eax
+     b0b:	0f 85 80 00 00 00    	jne    b91 <pipe1+0x181>
+     b11:	81 eb 09 04 00 00    	sub    $0x409,%ebx
+    for(n = 0; n < 5; n++){
+     b17:	81 fb d3 eb ff ff    	cmp    $0xffffebd3,%ebx
+     b1d:	75 b7                	jne    ad6 <pipe1+0xc6>
+    exit();
+     b1f:	e8 5e 2d 00 00       	call   3882 <exit>
+    if(total != 5 * 1033){
+     b24:	81 7d d4 2d 14 00 00 	cmpl   $0x142d,-0x2c(%ebp)
+     b2b:	75 29                	jne    b56 <pipe1+0x146>
+    close(fds[0]);
+     b2d:	83 ec 0c             	sub    $0xc,%esp
+     b30:	ff 75 e0             	pushl  -0x20(%ebp)
+     b33:	e8 72 2d 00 00       	call   38aa <close>
+    wait();
+     b38:	e8 4d 2d 00 00       	call   388a <wait>
+  printf(1, "pipe1 ok\n");
+     b3d:	5a                   	pop    %edx
+     b3e:	59                   	pop    %ecx
+     b3f:	68 a3 40 00 00       	push   $0x40a3
+     b44:	6a 01                	push   $0x1
+     b46:	e8 85 2e 00 00       	call   39d0 <printf>
+     b4b:	83 c4 10             	add    $0x10,%esp
+}
+     b4e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     b51:	5b                   	pop    %ebx
+     b52:	5e                   	pop    %esi
+     b53:	5f                   	pop    %edi
+     b54:	5d                   	pop    %ebp
+     b55:	c3                   	ret    
+      printf(1, "pipe1 oops 3 total %d\n", total);
+     b56:	53                   	push   %ebx
+     b57:	ff 75 d4             	pushl  -0x2c(%ebp)
+     b5a:	68 8c 40 00 00       	push   $0x408c
+     b5f:	6a 01                	push   $0x1
+     b61:	e8 6a 2e 00 00       	call   39d0 <printf>
+      exit();
+     b66:	e8 17 2d 00 00       	call   3882 <exit>
+    printf(1, "pipe() failed\n");
+     b6b:	57                   	push   %edi
+     b6c:	57                   	push   %edi
+     b6d:	68 61 40 00 00       	push   $0x4061
+     b72:	6a 01                	push   $0x1
+     b74:	e8 57 2e 00 00       	call   39d0 <printf>
+    exit();
+     b79:	e8 04 2d 00 00       	call   3882 <exit>
+    printf(1, "fork() failed\n");
+     b7e:	50                   	push   %eax
+     b7f:	50                   	push   %eax
+     b80:	68 ad 40 00 00       	push   $0x40ad
+     b85:	6a 01                	push   $0x1
+     b87:	e8 44 2e 00 00       	call   39d0 <printf>
+    exit();
+     b8c:	e8 f1 2c 00 00       	call   3882 <exit>
+        printf(1, "pipe1 oops 1\n");
+     b91:	56                   	push   %esi
+     b92:	56                   	push   %esi
+     b93:	68 70 40 00 00       	push   $0x4070
+     b98:	6a 01                	push   $0x1
+     b9a:	e8 31 2e 00 00       	call   39d0 <printf>
+        exit();
+     b9f:	e8 de 2c 00 00       	call   3882 <exit>
+     ba4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     baa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000bb0 <preempt>:
+{
+     bb0:	55                   	push   %ebp
+     bb1:	89 e5                	mov    %esp,%ebp
+     bb3:	57                   	push   %edi
+     bb4:	56                   	push   %esi
+     bb5:	53                   	push   %ebx
+     bb6:	83 ec 24             	sub    $0x24,%esp
+  printf(1, "preempt: ");
+     bb9:	68 bc 40 00 00       	push   $0x40bc
+     bbe:	6a 01                	push   $0x1
+     bc0:	e8 0b 2e 00 00       	call   39d0 <printf>
+  pid1 = fork();
+     bc5:	e8 b0 2c 00 00       	call   387a <fork>
+  if(pid1 == 0)
+     bca:	83 c4 10             	add    $0x10,%esp
+     bcd:	85 c0                	test   %eax,%eax
+     bcf:	75 02                	jne    bd3 <preempt+0x23>
+     bd1:	eb fe                	jmp    bd1 <preempt+0x21>
+     bd3:	89 c7                	mov    %eax,%edi
+  pid2 = fork();
+     bd5:	e8 a0 2c 00 00       	call   387a <fork>
+  if(pid2 == 0)
+     bda:	85 c0                	test   %eax,%eax
+  pid2 = fork();
+     bdc:	89 c6                	mov    %eax,%esi
+  if(pid2 == 0)
+     bde:	75 02                	jne    be2 <preempt+0x32>
+     be0:	eb fe                	jmp    be0 <preempt+0x30>
+  pipe(pfds);
+     be2:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     be5:	83 ec 0c             	sub    $0xc,%esp
+     be8:	50                   	push   %eax
+     be9:	e8 a4 2c 00 00       	call   3892 <pipe>
+  pid3 = fork();
+     bee:	e8 87 2c 00 00       	call   387a <fork>
+  if(pid3 == 0){
+     bf3:	83 c4 10             	add    $0x10,%esp
+     bf6:	85 c0                	test   %eax,%eax
+  pid3 = fork();
+     bf8:	89 c3                	mov    %eax,%ebx
+  if(pid3 == 0){
+     bfa:	75 46                	jne    c42 <preempt+0x92>
+    close(pfds[0]);
+     bfc:	83 ec 0c             	sub    $0xc,%esp
+     bff:	ff 75 e0             	pushl  -0x20(%ebp)
+     c02:	e8 a3 2c 00 00       	call   38aa <close>
+    if(write(pfds[1], "x", 1) != 1)
+     c07:	83 c4 0c             	add    $0xc,%esp
+     c0a:	6a 01                	push   $0x1
+     c0c:	68 81 46 00 00       	push   $0x4681
+     c11:	ff 75 e4             	pushl  -0x1c(%ebp)
+     c14:	e8 89 2c 00 00       	call   38a2 <write>
+     c19:	83 c4 10             	add    $0x10,%esp
+     c1c:	83 e8 01             	sub    $0x1,%eax
+     c1f:	74 11                	je     c32 <preempt+0x82>
+      printf(1, "preempt write error");
+     c21:	50                   	push   %eax
+     c22:	50                   	push   %eax
+     c23:	68 c6 40 00 00       	push   $0x40c6
+     c28:	6a 01                	push   $0x1
+     c2a:	e8 a1 2d 00 00       	call   39d0 <printf>
+     c2f:	83 c4 10             	add    $0x10,%esp
+    close(pfds[1]);
+     c32:	83 ec 0c             	sub    $0xc,%esp
+     c35:	ff 75 e4             	pushl  -0x1c(%ebp)
+     c38:	e8 6d 2c 00 00       	call   38aa <close>
+     c3d:	83 c4 10             	add    $0x10,%esp
+     c40:	eb fe                	jmp    c40 <preempt+0x90>
+  close(pfds[1]);
+     c42:	83 ec 0c             	sub    $0xc,%esp
+     c45:	ff 75 e4             	pushl  -0x1c(%ebp)
+     c48:	e8 5d 2c 00 00       	call   38aa <close>
+  if(read(pfds[0], buf, sizeof(buf)) != 1){
+     c4d:	83 c4 0c             	add    $0xc,%esp
+     c50:	68 00 20 00 00       	push   $0x2000
+     c55:	68 80 85 00 00       	push   $0x8580
+     c5a:	ff 75 e0             	pushl  -0x20(%ebp)
+     c5d:	e8 38 2c 00 00       	call   389a <read>
+     c62:	83 c4 10             	add    $0x10,%esp
+     c65:	83 e8 01             	sub    $0x1,%eax
+     c68:	74 19                	je     c83 <preempt+0xd3>
+    printf(1, "preempt read error");
+     c6a:	50                   	push   %eax
+     c6b:	50                   	push   %eax
+     c6c:	68 da 40 00 00       	push   $0x40da
+     c71:	6a 01                	push   $0x1
+     c73:	e8 58 2d 00 00       	call   39d0 <printf>
+    return;
+     c78:	83 c4 10             	add    $0x10,%esp
+}
+     c7b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     c7e:	5b                   	pop    %ebx
+     c7f:	5e                   	pop    %esi
+     c80:	5f                   	pop    %edi
+     c81:	5d                   	pop    %ebp
+     c82:	c3                   	ret    
+  close(pfds[0]);
+     c83:	83 ec 0c             	sub    $0xc,%esp
+     c86:	ff 75 e0             	pushl  -0x20(%ebp)
+     c89:	e8 1c 2c 00 00       	call   38aa <close>
+  printf(1, "kill... ");
+     c8e:	58                   	pop    %eax
+     c8f:	5a                   	pop    %edx
+     c90:	68 ed 40 00 00       	push   $0x40ed
+     c95:	6a 01                	push   $0x1
+     c97:	e8 34 2d 00 00       	call   39d0 <printf>
+  kill(pid1);
+     c9c:	89 3c 24             	mov    %edi,(%esp)
+     c9f:	e8 0e 2c 00 00       	call   38b2 <kill>
+  kill(pid2);
+     ca4:	89 34 24             	mov    %esi,(%esp)
+     ca7:	e8 06 2c 00 00       	call   38b2 <kill>
+  kill(pid3);
+     cac:	89 1c 24             	mov    %ebx,(%esp)
+     caf:	e8 fe 2b 00 00       	call   38b2 <kill>
+  printf(1, "wait... ");
+     cb4:	59                   	pop    %ecx
+     cb5:	5b                   	pop    %ebx
+     cb6:	68 f6 40 00 00       	push   $0x40f6
+     cbb:	6a 01                	push   $0x1
+     cbd:	e8 0e 2d 00 00       	call   39d0 <printf>
+  wait();
+     cc2:	e8 c3 2b 00 00       	call   388a <wait>
+  wait();
+     cc7:	e8 be 2b 00 00       	call   388a <wait>
+  wait();
+     ccc:	e8 b9 2b 00 00       	call   388a <wait>
+  printf(1, "preempt ok\n");
+     cd1:	5e                   	pop    %esi
+     cd2:	5f                   	pop    %edi
+     cd3:	68 ff 40 00 00       	push   $0x40ff
+     cd8:	6a 01                	push   $0x1
+     cda:	e8 f1 2c 00 00       	call   39d0 <printf>
+     cdf:	83 c4 10             	add    $0x10,%esp
+     ce2:	eb 97                	jmp    c7b <preempt+0xcb>
+     ce4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     cea:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000cf0 <exitwait>:
+{
+     cf0:	55                   	push   %ebp
+     cf1:	89 e5                	mov    %esp,%ebp
+     cf3:	56                   	push   %esi
+     cf4:	be 64 00 00 00       	mov    $0x64,%esi
+     cf9:	53                   	push   %ebx
+     cfa:	eb 14                	jmp    d10 <exitwait+0x20>
+     cfc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(pid){
+     d00:	74 6f                	je     d71 <exitwait+0x81>
+      if(wait() != pid){
+     d02:	e8 83 2b 00 00       	call   388a <wait>
+     d07:	39 d8                	cmp    %ebx,%eax
+     d09:	75 2d                	jne    d38 <exitwait+0x48>
+  for(i = 0; i < 100; i++){
+     d0b:	83 ee 01             	sub    $0x1,%esi
+     d0e:	74 48                	je     d58 <exitwait+0x68>
+    pid = fork();
+     d10:	e8 65 2b 00 00       	call   387a <fork>
+    if(pid < 0){
+     d15:	85 c0                	test   %eax,%eax
+    pid = fork();
+     d17:	89 c3                	mov    %eax,%ebx
+    if(pid < 0){
+     d19:	79 e5                	jns    d00 <exitwait+0x10>
+      printf(1, "fork failed\n");
+     d1b:	83 ec 08             	sub    $0x8,%esp
+     d1e:	68 69 4c 00 00       	push   $0x4c69
+     d23:	6a 01                	push   $0x1
+     d25:	e8 a6 2c 00 00       	call   39d0 <printf>
+      return;
+     d2a:	83 c4 10             	add    $0x10,%esp
+}
+     d2d:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     d30:	5b                   	pop    %ebx
+     d31:	5e                   	pop    %esi
+     d32:	5d                   	pop    %ebp
+     d33:	c3                   	ret    
+     d34:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        printf(1, "wait wrong pid\n");
+     d38:	83 ec 08             	sub    $0x8,%esp
+     d3b:	68 0b 41 00 00       	push   $0x410b
+     d40:	6a 01                	push   $0x1
+     d42:	e8 89 2c 00 00       	call   39d0 <printf>
+        return;
+     d47:	83 c4 10             	add    $0x10,%esp
+}
+     d4a:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     d4d:	5b                   	pop    %ebx
+     d4e:	5e                   	pop    %esi
+     d4f:	5d                   	pop    %ebp
+     d50:	c3                   	ret    
+     d51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  printf(1, "exitwait ok\n");
+     d58:	83 ec 08             	sub    $0x8,%esp
+     d5b:	68 1b 41 00 00       	push   $0x411b
+     d60:	6a 01                	push   $0x1
+     d62:	e8 69 2c 00 00       	call   39d0 <printf>
+     d67:	83 c4 10             	add    $0x10,%esp
+}
+     d6a:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     d6d:	5b                   	pop    %ebx
+     d6e:	5e                   	pop    %esi
+     d6f:	5d                   	pop    %ebp
+     d70:	c3                   	ret    
+      exit();
+     d71:	e8 0c 2b 00 00       	call   3882 <exit>
+     d76:	8d 76 00             	lea    0x0(%esi),%esi
+     d79:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000d80 <mem>:
+{
+     d80:	55                   	push   %ebp
+     d81:	89 e5                	mov    %esp,%ebp
+     d83:	57                   	push   %edi
+     d84:	56                   	push   %esi
+     d85:	53                   	push   %ebx
+     d86:	31 db                	xor    %ebx,%ebx
+     d88:	83 ec 14             	sub    $0x14,%esp
+  printf(1, "mem test\n");
+     d8b:	68 28 41 00 00       	push   $0x4128
+     d90:	6a 01                	push   $0x1
+     d92:	e8 39 2c 00 00       	call   39d0 <printf>
+  ppid = getpid();
+     d97:	e8 66 2b 00 00       	call   3902 <getpid>
+     d9c:	89 c6                	mov    %eax,%esi
+  if((pid = fork()) == 0){
+     d9e:	e8 d7 2a 00 00       	call   387a <fork>
+     da3:	83 c4 10             	add    $0x10,%esp
+     da6:	85 c0                	test   %eax,%eax
+     da8:	74 0a                	je     db4 <mem+0x34>
+     daa:	e9 89 00 00 00       	jmp    e38 <mem+0xb8>
+     daf:	90                   	nop
+      *(char**)m2 = m1;
+     db0:	89 18                	mov    %ebx,(%eax)
+     db2:	89 c3                	mov    %eax,%ebx
+    while((m2 = malloc(10001)) != 0){
+     db4:	83 ec 0c             	sub    $0xc,%esp
+     db7:	68 11 27 00 00       	push   $0x2711
+     dbc:	e8 6f 2e 00 00       	call   3c30 <malloc>
+     dc1:	83 c4 10             	add    $0x10,%esp
+     dc4:	85 c0                	test   %eax,%eax
+     dc6:	75 e8                	jne    db0 <mem+0x30>
+    while(m1){
+     dc8:	85 db                	test   %ebx,%ebx
+     dca:	74 18                	je     de4 <mem+0x64>
+     dcc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      m2 = *(char**)m1;
+     dd0:	8b 3b                	mov    (%ebx),%edi
+      free(m1);
+     dd2:	83 ec 0c             	sub    $0xc,%esp
+     dd5:	53                   	push   %ebx
+     dd6:	89 fb                	mov    %edi,%ebx
+     dd8:	e8 c3 2d 00 00       	call   3ba0 <free>
+    while(m1){
+     ddd:	83 c4 10             	add    $0x10,%esp
+     de0:	85 db                	test   %ebx,%ebx
+     de2:	75 ec                	jne    dd0 <mem+0x50>
+    m1 = malloc(1024*20);
+     de4:	83 ec 0c             	sub    $0xc,%esp
+     de7:	68 00 50 00 00       	push   $0x5000
+     dec:	e8 3f 2e 00 00       	call   3c30 <malloc>
+    if(m1 == 0){
+     df1:	83 c4 10             	add    $0x10,%esp
+     df4:	85 c0                	test   %eax,%eax
+     df6:	74 20                	je     e18 <mem+0x98>
+    free(m1);
+     df8:	83 ec 0c             	sub    $0xc,%esp
+     dfb:	50                   	push   %eax
+     dfc:	e8 9f 2d 00 00       	call   3ba0 <free>
+    printf(1, "mem ok\n");
+     e01:	58                   	pop    %eax
+     e02:	5a                   	pop    %edx
+     e03:	68 4c 41 00 00       	push   $0x414c
+     e08:	6a 01                	push   $0x1
+     e0a:	e8 c1 2b 00 00       	call   39d0 <printf>
+    exit();
+     e0f:	e8 6e 2a 00 00       	call   3882 <exit>
+     e14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      printf(1, "couldn't allocate mem?!!\n");
+     e18:	83 ec 08             	sub    $0x8,%esp
+     e1b:	68 32 41 00 00       	push   $0x4132
+     e20:	6a 01                	push   $0x1
+     e22:	e8 a9 2b 00 00       	call   39d0 <printf>
+      kill(ppid);
+     e27:	89 34 24             	mov    %esi,(%esp)
+     e2a:	e8 83 2a 00 00       	call   38b2 <kill>
+      exit();
+     e2f:	e8 4e 2a 00 00       	call   3882 <exit>
+     e34:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+}
+     e38:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     e3b:	5b                   	pop    %ebx
+     e3c:	5e                   	pop    %esi
+     e3d:	5f                   	pop    %edi
+     e3e:	5d                   	pop    %ebp
+    wait();
+     e3f:	e9 46 2a 00 00       	jmp    388a <wait>
+     e44:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     e4a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000e50 <sharedfd>:
+{
+     e50:	55                   	push   %ebp
+     e51:	89 e5                	mov    %esp,%ebp
+     e53:	57                   	push   %edi
+     e54:	56                   	push   %esi
+     e55:	53                   	push   %ebx
+     e56:	83 ec 34             	sub    $0x34,%esp
+  printf(1, "sharedfd test\n");
+     e59:	68 54 41 00 00       	push   $0x4154
+     e5e:	6a 01                	push   $0x1
+     e60:	e8 6b 2b 00 00       	call   39d0 <printf>
+  unlink("sharedfd");
+     e65:	c7 04 24 63 41 00 00 	movl   $0x4163,(%esp)
+     e6c:	e8 61 2a 00 00       	call   38d2 <unlink>
+  fd = open("sharedfd", O_CREATE|O_RDWR);
+     e71:	59                   	pop    %ecx
+     e72:	5b                   	pop    %ebx
+     e73:	68 02 02 00 00       	push   $0x202
+     e78:	68 63 41 00 00       	push   $0x4163
+     e7d:	e8 40 2a 00 00       	call   38c2 <open>
+  if(fd < 0){
+     e82:	83 c4 10             	add    $0x10,%esp
+     e85:	85 c0                	test   %eax,%eax
+     e87:	0f 88 33 01 00 00    	js     fc0 <sharedfd+0x170>
+     e8d:	89 c6                	mov    %eax,%esi
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+     e8f:	bb e8 03 00 00       	mov    $0x3e8,%ebx
+  pid = fork();
+     e94:	e8 e1 29 00 00       	call   387a <fork>
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+     e99:	83 f8 01             	cmp    $0x1,%eax
+  pid = fork();
+     e9c:	89 c7                	mov    %eax,%edi
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+     e9e:	19 c0                	sbb    %eax,%eax
+     ea0:	83 ec 04             	sub    $0x4,%esp
+     ea3:	83 e0 f3             	and    $0xfffffff3,%eax
+     ea6:	6a 0a                	push   $0xa
+     ea8:	83 c0 70             	add    $0x70,%eax
+     eab:	50                   	push   %eax
+     eac:	8d 45 de             	lea    -0x22(%ebp),%eax
+     eaf:	50                   	push   %eax
+     eb0:	e8 2b 28 00 00       	call   36e0 <memset>
+     eb5:	83 c4 10             	add    $0x10,%esp
+     eb8:	eb 0b                	jmp    ec5 <sharedfd+0x75>
+     eba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(i = 0; i < 1000; i++){
+     ec0:	83 eb 01             	sub    $0x1,%ebx
+     ec3:	74 29                	je     eee <sharedfd+0x9e>
+    if(write(fd, buf, sizeof(buf)) != sizeof(buf)){
+     ec5:	8d 45 de             	lea    -0x22(%ebp),%eax
+     ec8:	83 ec 04             	sub    $0x4,%esp
+     ecb:	6a 0a                	push   $0xa
+     ecd:	50                   	push   %eax
+     ece:	56                   	push   %esi
+     ecf:	e8 ce 29 00 00       	call   38a2 <write>
+     ed4:	83 c4 10             	add    $0x10,%esp
+     ed7:	83 f8 0a             	cmp    $0xa,%eax
+     eda:	74 e4                	je     ec0 <sharedfd+0x70>
+      printf(1, "fstests: write sharedfd failed\n");
+     edc:	83 ec 08             	sub    $0x8,%esp
+     edf:	68 54 4e 00 00       	push   $0x4e54
+     ee4:	6a 01                	push   $0x1
+     ee6:	e8 e5 2a 00 00       	call   39d0 <printf>
+      break;
+     eeb:	83 c4 10             	add    $0x10,%esp
+  if(pid == 0)
+     eee:	85 ff                	test   %edi,%edi
+     ef0:	0f 84 fe 00 00 00    	je     ff4 <sharedfd+0x1a4>
+    wait();
+     ef6:	e8 8f 29 00 00       	call   388a <wait>
+  close(fd);
+     efb:	83 ec 0c             	sub    $0xc,%esp
+  nc = np = 0;
+     efe:	31 db                	xor    %ebx,%ebx
+     f00:	31 ff                	xor    %edi,%edi
+  close(fd);
+     f02:	56                   	push   %esi
+     f03:	8d 75 e8             	lea    -0x18(%ebp),%esi
+     f06:	e8 9f 29 00 00       	call   38aa <close>
+  fd = open("sharedfd", 0);
+     f0b:	58                   	pop    %eax
+     f0c:	5a                   	pop    %edx
+     f0d:	6a 00                	push   $0x0
+     f0f:	68 63 41 00 00       	push   $0x4163
+     f14:	e8 a9 29 00 00       	call   38c2 <open>
+  if(fd < 0){
+     f19:	83 c4 10             	add    $0x10,%esp
+     f1c:	85 c0                	test   %eax,%eax
+  fd = open("sharedfd", 0);
+     f1e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+  if(fd < 0){
+     f21:	0f 88 b3 00 00 00    	js     fda <sharedfd+0x18a>
+     f27:	89 f8                	mov    %edi,%eax
+     f29:	89 df                	mov    %ebx,%edi
+     f2b:	89 c3                	mov    %eax,%ebx
+     f2d:	8d 76 00             	lea    0x0(%esi),%esi
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+     f30:	8d 45 de             	lea    -0x22(%ebp),%eax
+     f33:	83 ec 04             	sub    $0x4,%esp
+     f36:	6a 0a                	push   $0xa
+     f38:	50                   	push   %eax
+     f39:	ff 75 d4             	pushl  -0x2c(%ebp)
+     f3c:	e8 59 29 00 00       	call   389a <read>
+     f41:	83 c4 10             	add    $0x10,%esp
+     f44:	85 c0                	test   %eax,%eax
+     f46:	7e 28                	jle    f70 <sharedfd+0x120>
+     f48:	8d 45 de             	lea    -0x22(%ebp),%eax
+     f4b:	eb 15                	jmp    f62 <sharedfd+0x112>
+     f4d:	8d 76 00             	lea    0x0(%esi),%esi
+        np++;
+     f50:	80 fa 70             	cmp    $0x70,%dl
+     f53:	0f 94 c2             	sete   %dl
+     f56:	0f b6 d2             	movzbl %dl,%edx
+     f59:	01 d7                	add    %edx,%edi
+     f5b:	83 c0 01             	add    $0x1,%eax
+    for(i = 0; i < sizeof(buf); i++){
+     f5e:	39 f0                	cmp    %esi,%eax
+     f60:	74 ce                	je     f30 <sharedfd+0xe0>
+      if(buf[i] == 'c')
+     f62:	0f b6 10             	movzbl (%eax),%edx
+     f65:	80 fa 63             	cmp    $0x63,%dl
+     f68:	75 e6                	jne    f50 <sharedfd+0x100>
+        nc++;
+     f6a:	83 c3 01             	add    $0x1,%ebx
+     f6d:	eb ec                	jmp    f5b <sharedfd+0x10b>
+     f6f:	90                   	nop
+  close(fd);
+     f70:	83 ec 0c             	sub    $0xc,%esp
+     f73:	89 d8                	mov    %ebx,%eax
+     f75:	ff 75 d4             	pushl  -0x2c(%ebp)
+     f78:	89 fb                	mov    %edi,%ebx
+     f7a:	89 c7                	mov    %eax,%edi
+     f7c:	e8 29 29 00 00       	call   38aa <close>
+  unlink("sharedfd");
+     f81:	c7 04 24 63 41 00 00 	movl   $0x4163,(%esp)
+     f88:	e8 45 29 00 00       	call   38d2 <unlink>
+  if(nc == 10000 && np == 10000){
+     f8d:	83 c4 10             	add    $0x10,%esp
+     f90:	81 ff 10 27 00 00    	cmp    $0x2710,%edi
+     f96:	75 61                	jne    ff9 <sharedfd+0x1a9>
+     f98:	81 fb 10 27 00 00    	cmp    $0x2710,%ebx
+     f9e:	75 59                	jne    ff9 <sharedfd+0x1a9>
+    printf(1, "sharedfd ok\n");
+     fa0:	83 ec 08             	sub    $0x8,%esp
+     fa3:	68 6c 41 00 00       	push   $0x416c
+     fa8:	6a 01                	push   $0x1
+     faa:	e8 21 2a 00 00       	call   39d0 <printf>
+     faf:	83 c4 10             	add    $0x10,%esp
+}
+     fb2:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     fb5:	5b                   	pop    %ebx
+     fb6:	5e                   	pop    %esi
+     fb7:	5f                   	pop    %edi
+     fb8:	5d                   	pop    %ebp
+     fb9:	c3                   	ret    
+     fba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    printf(1, "fstests: cannot open sharedfd for writing");
+     fc0:	83 ec 08             	sub    $0x8,%esp
+     fc3:	68 28 4e 00 00       	push   $0x4e28
+     fc8:	6a 01                	push   $0x1
+     fca:	e8 01 2a 00 00       	call   39d0 <printf>
+    return;
+     fcf:	83 c4 10             	add    $0x10,%esp
+}
+     fd2:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     fd5:	5b                   	pop    %ebx
+     fd6:	5e                   	pop    %esi
+     fd7:	5f                   	pop    %edi
+     fd8:	5d                   	pop    %ebp
+     fd9:	c3                   	ret    
+    printf(1, "fstests: cannot open sharedfd for reading\n");
+     fda:	83 ec 08             	sub    $0x8,%esp
+     fdd:	68 74 4e 00 00       	push   $0x4e74
+     fe2:	6a 01                	push   $0x1
+     fe4:	e8 e7 29 00 00       	call   39d0 <printf>
+    return;
+     fe9:	83 c4 10             	add    $0x10,%esp
+}
+     fec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     fef:	5b                   	pop    %ebx
+     ff0:	5e                   	pop    %esi
+     ff1:	5f                   	pop    %edi
+     ff2:	5d                   	pop    %ebp
+     ff3:	c3                   	ret    
+    exit();
+     ff4:	e8 89 28 00 00       	call   3882 <exit>
+    printf(1, "sharedfd oops %d %d\n", nc, np);
+     ff9:	53                   	push   %ebx
+     ffa:	57                   	push   %edi
+     ffb:	68 79 41 00 00       	push   $0x4179
+    1000:	6a 01                	push   $0x1
+    1002:	e8 c9 29 00 00       	call   39d0 <printf>
+    exit();
+    1007:	e8 76 28 00 00       	call   3882 <exit>
+    100c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00001010 <fourfiles>:
+{
+    1010:	55                   	push   %ebp
+    1011:	89 e5                	mov    %esp,%ebp
+    1013:	57                   	push   %edi
+    1014:	56                   	push   %esi
+    1015:	53                   	push   %ebx
+  printf(1, "fourfiles test\n");
+    1016:	be 8e 41 00 00       	mov    $0x418e,%esi
+  for(pi = 0; pi < 4; pi++){
+    101b:	31 db                	xor    %ebx,%ebx
+{
+    101d:	83 ec 34             	sub    $0x34,%esp
+  char *names[] = { "f0", "f1", "f2", "f3" };
+    1020:	c7 45 d8 8e 41 00 00 	movl   $0x418e,-0x28(%ebp)
+    1027:	c7 45 dc d7 42 00 00 	movl   $0x42d7,-0x24(%ebp)
+  printf(1, "fourfiles test\n");
+    102e:	68 94 41 00 00       	push   $0x4194
+    1033:	6a 01                	push   $0x1
+  char *names[] = { "f0", "f1", "f2", "f3" };
+    1035:	c7 45 e0 db 42 00 00 	movl   $0x42db,-0x20(%ebp)
+    103c:	c7 45 e4 91 41 00 00 	movl   $0x4191,-0x1c(%ebp)
+  printf(1, "fourfiles test\n");
+    1043:	e8 88 29 00 00       	call   39d0 <printf>
+    1048:	83 c4 10             	add    $0x10,%esp
+    unlink(fname);
+    104b:	83 ec 0c             	sub    $0xc,%esp
+    104e:	56                   	push   %esi
+    104f:	e8 7e 28 00 00       	call   38d2 <unlink>
+    pid = fork();
+    1054:	e8 21 28 00 00       	call   387a <fork>
+    if(pid < 0){
+    1059:	83 c4 10             	add    $0x10,%esp
+    105c:	85 c0                	test   %eax,%eax
+    105e:	0f 88 68 01 00 00    	js     11cc <fourfiles+0x1bc>
+    if(pid == 0){
+    1064:	0f 84 df 00 00 00    	je     1149 <fourfiles+0x139>
+  for(pi = 0; pi < 4; pi++){
+    106a:	83 c3 01             	add    $0x1,%ebx
+    106d:	83 fb 04             	cmp    $0x4,%ebx
+    1070:	74 06                	je     1078 <fourfiles+0x68>
+    1072:	8b 74 9d d8          	mov    -0x28(%ebp,%ebx,4),%esi
+    1076:	eb d3                	jmp    104b <fourfiles+0x3b>
+    wait();
+    1078:	e8 0d 28 00 00       	call   388a <wait>
+  for(i = 0; i < 2; i++){
+    107d:	31 ff                	xor    %edi,%edi
+    wait();
+    107f:	e8 06 28 00 00       	call   388a <wait>
+    1084:	e8 01 28 00 00       	call   388a <wait>
+    1089:	e8 fc 27 00 00       	call   388a <wait>
+    108e:	c7 45 d0 8e 41 00 00 	movl   $0x418e,-0x30(%ebp)
+    fd = open(fname, 0);
+    1095:	83 ec 08             	sub    $0x8,%esp
+    total = 0;
+    1098:	31 db                	xor    %ebx,%ebx
+    fd = open(fname, 0);
+    109a:	6a 00                	push   $0x0
+    109c:	ff 75 d0             	pushl  -0x30(%ebp)
+    109f:	e8 1e 28 00 00       	call   38c2 <open>
+    while((n = read(fd, buf, sizeof(buf))) > 0){
+    10a4:	83 c4 10             	add    $0x10,%esp
+    fd = open(fname, 0);
+    10a7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    10aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    while((n = read(fd, buf, sizeof(buf))) > 0){
+    10b0:	83 ec 04             	sub    $0x4,%esp
+    10b3:	68 00 20 00 00       	push   $0x2000
+    10b8:	68 80 85 00 00       	push   $0x8580
+    10bd:	ff 75 d4             	pushl  -0x2c(%ebp)
+    10c0:	e8 d5 27 00 00       	call   389a <read>
+    10c5:	83 c4 10             	add    $0x10,%esp
+    10c8:	85 c0                	test   %eax,%eax
+    10ca:	7e 26                	jle    10f2 <fourfiles+0xe2>
+      for(j = 0; j < n; j++){
+    10cc:	31 d2                	xor    %edx,%edx
+    10ce:	66 90                	xchg   %ax,%ax
+        if(buf[j] != '0'+i){
+    10d0:	0f be b2 80 85 00 00 	movsbl 0x8580(%edx),%esi
+    10d7:	83 ff 01             	cmp    $0x1,%edi
+    10da:	19 c9                	sbb    %ecx,%ecx
+    10dc:	83 c1 31             	add    $0x31,%ecx
+    10df:	39 ce                	cmp    %ecx,%esi
+    10e1:	0f 85 be 00 00 00    	jne    11a5 <fourfiles+0x195>
+      for(j = 0; j < n; j++){
+    10e7:	83 c2 01             	add    $0x1,%edx
+    10ea:	39 d0                	cmp    %edx,%eax
+    10ec:	75 e2                	jne    10d0 <fourfiles+0xc0>
+      total += n;
+    10ee:	01 c3                	add    %eax,%ebx
+    10f0:	eb be                	jmp    10b0 <fourfiles+0xa0>
+    close(fd);
+    10f2:	83 ec 0c             	sub    $0xc,%esp
+    10f5:	ff 75 d4             	pushl  -0x2c(%ebp)
+    10f8:	e8 ad 27 00 00       	call   38aa <close>
+    if(total != 12*500){
+    10fd:	83 c4 10             	add    $0x10,%esp
+    1100:	81 fb 70 17 00 00    	cmp    $0x1770,%ebx
+    1106:	0f 85 d3 00 00 00    	jne    11df <fourfiles+0x1cf>
+    unlink(fname);
+    110c:	83 ec 0c             	sub    $0xc,%esp
+    110f:	ff 75 d0             	pushl  -0x30(%ebp)
+    1112:	e8 bb 27 00 00       	call   38d2 <unlink>
+  for(i = 0; i < 2; i++){
+    1117:	83 c4 10             	add    $0x10,%esp
+    111a:	83 ff 01             	cmp    $0x1,%edi
+    111d:	75 1a                	jne    1139 <fourfiles+0x129>
+  printf(1, "fourfiles ok\n");
+    111f:	83 ec 08             	sub    $0x8,%esp
+    1122:	68 d2 41 00 00       	push   $0x41d2
+    1127:	6a 01                	push   $0x1
+    1129:	e8 a2 28 00 00       	call   39d0 <printf>
+}
+    112e:	83 c4 10             	add    $0x10,%esp
+    1131:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1134:	5b                   	pop    %ebx
+    1135:	5e                   	pop    %esi
+    1136:	5f                   	pop    %edi
+    1137:	5d                   	pop    %ebp
+    1138:	c3                   	ret    
+    1139:	8b 45 dc             	mov    -0x24(%ebp),%eax
+    113c:	bf 01 00 00 00       	mov    $0x1,%edi
+    1141:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    1144:	e9 4c ff ff ff       	jmp    1095 <fourfiles+0x85>
+      fd = open(fname, O_CREATE | O_RDWR);
+    1149:	83 ec 08             	sub    $0x8,%esp
+    114c:	68 02 02 00 00       	push   $0x202
+    1151:	56                   	push   %esi
+    1152:	e8 6b 27 00 00       	call   38c2 <open>
+      if(fd < 0){
+    1157:	83 c4 10             	add    $0x10,%esp
+    115a:	85 c0                	test   %eax,%eax
+      fd = open(fname, O_CREATE | O_RDWR);
+    115c:	89 c6                	mov    %eax,%esi
+      if(fd < 0){
+    115e:	78 59                	js     11b9 <fourfiles+0x1a9>
+      memset(buf, '0'+pi, 512);
+    1160:	83 ec 04             	sub    $0x4,%esp
+    1163:	83 c3 30             	add    $0x30,%ebx
+    1166:	68 00 02 00 00       	push   $0x200
+    116b:	53                   	push   %ebx
+    116c:	bb 0c 00 00 00       	mov    $0xc,%ebx
+    1171:	68 80 85 00 00       	push   $0x8580
+    1176:	e8 65 25 00 00       	call   36e0 <memset>
+    117b:	83 c4 10             	add    $0x10,%esp
+        if((n = write(fd, buf, 500)) != 500){
+    117e:	83 ec 04             	sub    $0x4,%esp
+    1181:	68 f4 01 00 00       	push   $0x1f4
+    1186:	68 80 85 00 00       	push   $0x8580
+    118b:	56                   	push   %esi
+    118c:	e8 11 27 00 00       	call   38a2 <write>
+    1191:	83 c4 10             	add    $0x10,%esp
+    1194:	3d f4 01 00 00       	cmp    $0x1f4,%eax
+    1199:	75 57                	jne    11f2 <fourfiles+0x1e2>
+      for(i = 0; i < 12; i++){
+    119b:	83 eb 01             	sub    $0x1,%ebx
+    119e:	75 de                	jne    117e <fourfiles+0x16e>
+      exit();
+    11a0:	e8 dd 26 00 00       	call   3882 <exit>
+          printf(1, "wrong char\n");
+    11a5:	83 ec 08             	sub    $0x8,%esp
+    11a8:	68 b5 41 00 00       	push   $0x41b5
+    11ad:	6a 01                	push   $0x1
+    11af:	e8 1c 28 00 00       	call   39d0 <printf>
+          exit();
+    11b4:	e8 c9 26 00 00       	call   3882 <exit>
+        printf(1, "create failed\n");
+    11b9:	51                   	push   %ecx
+    11ba:	51                   	push   %ecx
+    11bb:	68 2f 44 00 00       	push   $0x442f
+    11c0:	6a 01                	push   $0x1
+    11c2:	e8 09 28 00 00       	call   39d0 <printf>
+        exit();
+    11c7:	e8 b6 26 00 00       	call   3882 <exit>
+      printf(1, "fork failed\n");
+    11cc:	53                   	push   %ebx
+    11cd:	53                   	push   %ebx
+    11ce:	68 69 4c 00 00       	push   $0x4c69
+    11d3:	6a 01                	push   $0x1
+    11d5:	e8 f6 27 00 00       	call   39d0 <printf>
+      exit();
+    11da:	e8 a3 26 00 00       	call   3882 <exit>
+      printf(1, "wrong length %d\n", total);
+    11df:	50                   	push   %eax
+    11e0:	53                   	push   %ebx
+    11e1:	68 c1 41 00 00       	push   $0x41c1
+    11e6:	6a 01                	push   $0x1
+    11e8:	e8 e3 27 00 00       	call   39d0 <printf>
+      exit();
+    11ed:	e8 90 26 00 00       	call   3882 <exit>
+          printf(1, "write failed %d\n", n);
+    11f2:	52                   	push   %edx
+    11f3:	50                   	push   %eax
+    11f4:	68 a4 41 00 00       	push   $0x41a4
+    11f9:	6a 01                	push   $0x1
+    11fb:	e8 d0 27 00 00       	call   39d0 <printf>
+          exit();
+    1200:	e8 7d 26 00 00       	call   3882 <exit>
+    1205:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    1209:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00001210 <createdelete>:
+{
+    1210:	55                   	push   %ebp
+    1211:	89 e5                	mov    %esp,%ebp
+    1213:	57                   	push   %edi
+    1214:	56                   	push   %esi
+    1215:	53                   	push   %ebx
+  for(pi = 0; pi < 4; pi++){
+    1216:	31 db                	xor    %ebx,%ebx
+{
+    1218:	83 ec 44             	sub    $0x44,%esp
+  printf(1, "createdelete test\n");
+    121b:	68 e0 41 00 00       	push   $0x41e0
+    1220:	6a 01                	push   $0x1
+    1222:	e8 a9 27 00 00       	call   39d0 <printf>
+    1227:	83 c4 10             	add    $0x10,%esp
+    pid = fork();
+    122a:	e8 4b 26 00 00       	call   387a <fork>
+    if(pid < 0){
+    122f:	85 c0                	test   %eax,%eax
+    1231:	0f 88 be 01 00 00    	js     13f5 <createdelete+0x1e5>
+    if(pid == 0){
+    1237:	0f 84 0b 01 00 00    	je     1348 <createdelete+0x138>
+  for(pi = 0; pi < 4; pi++){
+    123d:	83 c3 01             	add    $0x1,%ebx
+    1240:	83 fb 04             	cmp    $0x4,%ebx
+    1243:	75 e5                	jne    122a <createdelete+0x1a>
+    1245:	8d 7d c8             	lea    -0x38(%ebp),%edi
+  name[0] = name[1] = name[2] = 0;
+    1248:	be ff ff ff ff       	mov    $0xffffffff,%esi
+    wait();
+    124d:	e8 38 26 00 00       	call   388a <wait>
+    1252:	e8 33 26 00 00       	call   388a <wait>
+    1257:	e8 2e 26 00 00       	call   388a <wait>
+    125c:	e8 29 26 00 00       	call   388a <wait>
+  name[0] = name[1] = name[2] = 0;
+    1261:	c6 45 ca 00          	movb   $0x0,-0x36(%ebp)
+    1265:	8d 76 00             	lea    0x0(%esi),%esi
+    1268:	8d 46 31             	lea    0x31(%esi),%eax
+    126b:	88 45 c7             	mov    %al,-0x39(%ebp)
+    126e:	8d 46 01             	lea    0x1(%esi),%eax
+    1271:	83 f8 09             	cmp    $0x9,%eax
+    1274:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    1277:	0f 9f c3             	setg   %bl
+    127a:	85 c0                	test   %eax,%eax
+    127c:	0f 94 c0             	sete   %al
+    127f:	09 c3                	or     %eax,%ebx
+    1281:	88 5d c6             	mov    %bl,-0x3a(%ebp)
+      name[2] = '\0';
+    1284:	bb 70 00 00 00       	mov    $0x70,%ebx
+      name[1] = '0' + i;
+    1289:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
+      fd = open(name, 0);
+    128d:	83 ec 08             	sub    $0x8,%esp
+      name[0] = 'p' + pi;
+    1290:	88 5d c8             	mov    %bl,-0x38(%ebp)
+      fd = open(name, 0);
+    1293:	6a 00                	push   $0x0
+    1295:	57                   	push   %edi
+      name[1] = '0' + i;
+    1296:	88 45 c9             	mov    %al,-0x37(%ebp)
+      fd = open(name, 0);
+    1299:	e8 24 26 00 00       	call   38c2 <open>
+      if((i == 0 || i >= N/2) && fd < 0){
+    129e:	83 c4 10             	add    $0x10,%esp
+    12a1:	80 7d c6 00          	cmpb   $0x0,-0x3a(%ebp)
+    12a5:	0f 84 85 00 00 00    	je     1330 <createdelete+0x120>
+    12ab:	85 c0                	test   %eax,%eax
+    12ad:	0f 88 1a 01 00 00    	js     13cd <createdelete+0x1bd>
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    12b3:	83 fe 08             	cmp    $0x8,%esi
+    12b6:	0f 86 54 01 00 00    	jbe    1410 <createdelete+0x200>
+        close(fd);
+    12bc:	83 ec 0c             	sub    $0xc,%esp
+    12bf:	50                   	push   %eax
+    12c0:	e8 e5 25 00 00       	call   38aa <close>
+    12c5:	83 c4 10             	add    $0x10,%esp
+    12c8:	83 c3 01             	add    $0x1,%ebx
+    for(pi = 0; pi < 4; pi++){
+    12cb:	80 fb 74             	cmp    $0x74,%bl
+    12ce:	75 b9                	jne    1289 <createdelete+0x79>
+    12d0:	8b 75 c0             	mov    -0x40(%ebp),%esi
+  for(i = 0; i < N; i++){
+    12d3:	83 fe 13             	cmp    $0x13,%esi
+    12d6:	75 90                	jne    1268 <createdelete+0x58>
+    12d8:	be 70 00 00 00       	mov    $0x70,%esi
+    12dd:	8d 76 00             	lea    0x0(%esi),%esi
+    12e0:	8d 46 c0             	lea    -0x40(%esi),%eax
+  name[0] = name[1] = name[2] = 0;
+    12e3:	bb 04 00 00 00       	mov    $0x4,%ebx
+    12e8:	88 45 c7             	mov    %al,-0x39(%ebp)
+      name[0] = 'p' + i;
+    12eb:	89 f0                	mov    %esi,%eax
+      unlink(name);
+    12ed:	83 ec 0c             	sub    $0xc,%esp
+      name[0] = 'p' + i;
+    12f0:	88 45 c8             	mov    %al,-0x38(%ebp)
+      name[1] = '0' + i;
+    12f3:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
+      unlink(name);
+    12f7:	57                   	push   %edi
+      name[1] = '0' + i;
+    12f8:	88 45 c9             	mov    %al,-0x37(%ebp)
+      unlink(name);
+    12fb:	e8 d2 25 00 00       	call   38d2 <unlink>
+    for(pi = 0; pi < 4; pi++){
+    1300:	83 c4 10             	add    $0x10,%esp
+    1303:	83 eb 01             	sub    $0x1,%ebx
+    1306:	75 e3                	jne    12eb <createdelete+0xdb>
+    1308:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; i < N; i++){
+    130b:	89 f0                	mov    %esi,%eax
+    130d:	3c 84                	cmp    $0x84,%al
+    130f:	75 cf                	jne    12e0 <createdelete+0xd0>
+  printf(1, "createdelete ok\n");
+    1311:	83 ec 08             	sub    $0x8,%esp
+    1314:	68 f3 41 00 00       	push   $0x41f3
+    1319:	6a 01                	push   $0x1
+    131b:	e8 b0 26 00 00       	call   39d0 <printf>
+}
+    1320:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1323:	5b                   	pop    %ebx
+    1324:	5e                   	pop    %esi
+    1325:	5f                   	pop    %edi
+    1326:	5d                   	pop    %ebp
+    1327:	c3                   	ret    
+    1328:	90                   	nop
+    1329:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    1330:	83 fe 08             	cmp    $0x8,%esi
+    1333:	0f 86 cf 00 00 00    	jbe    1408 <createdelete+0x1f8>
+      if(fd >= 0)
+    1339:	85 c0                	test   %eax,%eax
+    133b:	78 8b                	js     12c8 <createdelete+0xb8>
+    133d:	e9 7a ff ff ff       	jmp    12bc <createdelete+0xac>
+    1342:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      name[0] = 'p' + pi;
+    1348:	83 c3 70             	add    $0x70,%ebx
+      name[2] = '\0';
+    134b:	c6 45 ca 00          	movb   $0x0,-0x36(%ebp)
+    134f:	8d 7d c8             	lea    -0x38(%ebp),%edi
+      name[0] = 'p' + pi;
+    1352:	88 5d c8             	mov    %bl,-0x38(%ebp)
+      name[2] = '\0';
+    1355:	31 db                	xor    %ebx,%ebx
+    1357:	eb 0f                	jmp    1368 <createdelete+0x158>
+    1359:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      for(i = 0; i < N; i++){
+    1360:	83 fb 13             	cmp    $0x13,%ebx
+    1363:	74 63                	je     13c8 <createdelete+0x1b8>
+    1365:	83 c3 01             	add    $0x1,%ebx
+        fd = open(name, O_CREATE | O_RDWR);
+    1368:	83 ec 08             	sub    $0x8,%esp
+        name[1] = '0' + i;
+    136b:	8d 43 30             	lea    0x30(%ebx),%eax
+        fd = open(name, O_CREATE | O_RDWR);
+    136e:	68 02 02 00 00       	push   $0x202
+    1373:	57                   	push   %edi
+        name[1] = '0' + i;
+    1374:	88 45 c9             	mov    %al,-0x37(%ebp)
+        fd = open(name, O_CREATE | O_RDWR);
+    1377:	e8 46 25 00 00       	call   38c2 <open>
+        if(fd < 0){
+    137c:	83 c4 10             	add    $0x10,%esp
+    137f:	85 c0                	test   %eax,%eax
+    1381:	78 5f                	js     13e2 <createdelete+0x1d2>
+        close(fd);
+    1383:	83 ec 0c             	sub    $0xc,%esp
+    1386:	50                   	push   %eax
+    1387:	e8 1e 25 00 00       	call   38aa <close>
+        if(i > 0 && (i % 2 ) == 0){
+    138c:	83 c4 10             	add    $0x10,%esp
+    138f:	85 db                	test   %ebx,%ebx
+    1391:	74 d2                	je     1365 <createdelete+0x155>
+    1393:	f6 c3 01             	test   $0x1,%bl
+    1396:	75 c8                	jne    1360 <createdelete+0x150>
+          if(unlink(name) < 0){
+    1398:	83 ec 0c             	sub    $0xc,%esp
+          name[1] = '0' + (i / 2);
+    139b:	89 d8                	mov    %ebx,%eax
+    139d:	d1 f8                	sar    %eax
+          if(unlink(name) < 0){
+    139f:	57                   	push   %edi
+          name[1] = '0' + (i / 2);
+    13a0:	83 c0 30             	add    $0x30,%eax
+    13a3:	88 45 c9             	mov    %al,-0x37(%ebp)
+          if(unlink(name) < 0){
+    13a6:	e8 27 25 00 00       	call   38d2 <unlink>
+    13ab:	83 c4 10             	add    $0x10,%esp
+    13ae:	85 c0                	test   %eax,%eax
+    13b0:	79 ae                	jns    1360 <createdelete+0x150>
+            printf(1, "unlink failed\n");
+    13b2:	52                   	push   %edx
+    13b3:	52                   	push   %edx
+    13b4:	68 e1 3d 00 00       	push   $0x3de1
+    13b9:	6a 01                	push   $0x1
+    13bb:	e8 10 26 00 00       	call   39d0 <printf>
+            exit();
+    13c0:	e8 bd 24 00 00       	call   3882 <exit>
+    13c5:	8d 76 00             	lea    0x0(%esi),%esi
+      exit();
+    13c8:	e8 b5 24 00 00       	call   3882 <exit>
+        printf(1, "oops createdelete %s didn't exist\n", name);
+    13cd:	83 ec 04             	sub    $0x4,%esp
+    13d0:	57                   	push   %edi
+    13d1:	68 a0 4e 00 00       	push   $0x4ea0
+    13d6:	6a 01                	push   $0x1
+    13d8:	e8 f3 25 00 00       	call   39d0 <printf>
+        exit();
+    13dd:	e8 a0 24 00 00       	call   3882 <exit>
+          printf(1, "create failed\n");
+    13e2:	51                   	push   %ecx
+    13e3:	51                   	push   %ecx
+    13e4:	68 2f 44 00 00       	push   $0x442f
+    13e9:	6a 01                	push   $0x1
+    13eb:	e8 e0 25 00 00       	call   39d0 <printf>
+          exit();
+    13f0:	e8 8d 24 00 00       	call   3882 <exit>
+      printf(1, "fork failed\n");
+    13f5:	53                   	push   %ebx
+    13f6:	53                   	push   %ebx
+    13f7:	68 69 4c 00 00       	push   $0x4c69
+    13fc:	6a 01                	push   $0x1
+    13fe:	e8 cd 25 00 00       	call   39d0 <printf>
+      exit();
+    1403:	e8 7a 24 00 00       	call   3882 <exit>
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    1408:	85 c0                	test   %eax,%eax
+    140a:	0f 88 b8 fe ff ff    	js     12c8 <createdelete+0xb8>
+        printf(1, "oops createdelete %s did exist\n", name);
+    1410:	50                   	push   %eax
+    1411:	57                   	push   %edi
+    1412:	68 c4 4e 00 00       	push   $0x4ec4
+    1417:	6a 01                	push   $0x1
+    1419:	e8 b2 25 00 00       	call   39d0 <printf>
+        exit();
+    141e:	e8 5f 24 00 00       	call   3882 <exit>
+    1423:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    1429:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00001430 <unlinkread>:
+{
+    1430:	55                   	push   %ebp
+    1431:	89 e5                	mov    %esp,%ebp
+    1433:	56                   	push   %esi
+    1434:	53                   	push   %ebx
+  printf(1, "unlinkread test\n");
+    1435:	83 ec 08             	sub    $0x8,%esp
+    1438:	68 04 42 00 00       	push   $0x4204
+    143d:	6a 01                	push   $0x1
+    143f:	e8 8c 25 00 00       	call   39d0 <printf>
+  fd = open("unlinkread", O_CREATE | O_RDWR);
+    1444:	5b                   	pop    %ebx
+    1445:	5e                   	pop    %esi
+    1446:	68 02 02 00 00       	push   $0x202
+    144b:	68 15 42 00 00       	push   $0x4215
+    1450:	e8 6d 24 00 00       	call   38c2 <open>
+  if(fd < 0){
+    1455:	83 c4 10             	add    $0x10,%esp
+    1458:	85 c0                	test   %eax,%eax
+    145a:	0f 88 e6 00 00 00    	js     1546 <unlinkread+0x116>
+  write(fd, "hello", 5);
+    1460:	83 ec 04             	sub    $0x4,%esp
+    1463:	89 c3                	mov    %eax,%ebx
+    1465:	6a 05                	push   $0x5
+    1467:	68 3a 42 00 00       	push   $0x423a
+    146c:	50                   	push   %eax
+    146d:	e8 30 24 00 00       	call   38a2 <write>
+  close(fd);
+    1472:	89 1c 24             	mov    %ebx,(%esp)
+    1475:	e8 30 24 00 00       	call   38aa <close>
+  fd = open("unlinkread", O_RDWR);
+    147a:	58                   	pop    %eax
+    147b:	5a                   	pop    %edx
+    147c:	6a 02                	push   $0x2
+    147e:	68 15 42 00 00       	push   $0x4215
+    1483:	e8 3a 24 00 00       	call   38c2 <open>
+  if(fd < 0){
+    1488:	83 c4 10             	add    $0x10,%esp
+    148b:	85 c0                	test   %eax,%eax
+  fd = open("unlinkread", O_RDWR);
+    148d:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    148f:	0f 88 10 01 00 00    	js     15a5 <unlinkread+0x175>
+  if(unlink("unlinkread") != 0){
+    1495:	83 ec 0c             	sub    $0xc,%esp
+    1498:	68 15 42 00 00       	push   $0x4215
+    149d:	e8 30 24 00 00       	call   38d2 <unlink>
+    14a2:	83 c4 10             	add    $0x10,%esp
+    14a5:	85 c0                	test   %eax,%eax
+    14a7:	0f 85 e5 00 00 00    	jne    1592 <unlinkread+0x162>
+  fd1 = open("unlinkread", O_CREATE | O_RDWR);
+    14ad:	83 ec 08             	sub    $0x8,%esp
+    14b0:	68 02 02 00 00       	push   $0x202
+    14b5:	68 15 42 00 00       	push   $0x4215
+    14ba:	e8 03 24 00 00       	call   38c2 <open>
+  write(fd1, "yyy", 3);
+    14bf:	83 c4 0c             	add    $0xc,%esp
+  fd1 = open("unlinkread", O_CREATE | O_RDWR);
+    14c2:	89 c6                	mov    %eax,%esi
+  write(fd1, "yyy", 3);
+    14c4:	6a 03                	push   $0x3
+    14c6:	68 72 42 00 00       	push   $0x4272
+    14cb:	50                   	push   %eax
+    14cc:	e8 d1 23 00 00       	call   38a2 <write>
+  close(fd1);
+    14d1:	89 34 24             	mov    %esi,(%esp)
+    14d4:	e8 d1 23 00 00       	call   38aa <close>
+  if(read(fd, buf, sizeof(buf)) != 5){
+    14d9:	83 c4 0c             	add    $0xc,%esp
+    14dc:	68 00 20 00 00       	push   $0x2000
+    14e1:	68 80 85 00 00       	push   $0x8580
+    14e6:	53                   	push   %ebx
+    14e7:	e8 ae 23 00 00       	call   389a <read>
+    14ec:	83 c4 10             	add    $0x10,%esp
+    14ef:	83 f8 05             	cmp    $0x5,%eax
+    14f2:	0f 85 87 00 00 00    	jne    157f <unlinkread+0x14f>
+  if(buf[0] != 'h'){
+    14f8:	80 3d 80 85 00 00 68 	cmpb   $0x68,0x8580
+    14ff:	75 6b                	jne    156c <unlinkread+0x13c>
+  if(write(fd, buf, 10) != 10){
+    1501:	83 ec 04             	sub    $0x4,%esp
+    1504:	6a 0a                	push   $0xa
+    1506:	68 80 85 00 00       	push   $0x8580
+    150b:	53                   	push   %ebx
+    150c:	e8 91 23 00 00       	call   38a2 <write>
+    1511:	83 c4 10             	add    $0x10,%esp
+    1514:	83 f8 0a             	cmp    $0xa,%eax
+    1517:	75 40                	jne    1559 <unlinkread+0x129>
+  close(fd);
+    1519:	83 ec 0c             	sub    $0xc,%esp
+    151c:	53                   	push   %ebx
+    151d:	e8 88 23 00 00       	call   38aa <close>
+  unlink("unlinkread");
+    1522:	c7 04 24 15 42 00 00 	movl   $0x4215,(%esp)
+    1529:	e8 a4 23 00 00       	call   38d2 <unlink>
+  printf(1, "unlinkread ok\n");
+    152e:	58                   	pop    %eax
+    152f:	5a                   	pop    %edx
+    1530:	68 bd 42 00 00       	push   $0x42bd
+    1535:	6a 01                	push   $0x1
+    1537:	e8 94 24 00 00       	call   39d0 <printf>
+}
+    153c:	83 c4 10             	add    $0x10,%esp
+    153f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    1542:	5b                   	pop    %ebx
+    1543:	5e                   	pop    %esi
+    1544:	5d                   	pop    %ebp
+    1545:	c3                   	ret    
+    printf(1, "create unlinkread failed\n");
+    1546:	51                   	push   %ecx
+    1547:	51                   	push   %ecx
+    1548:	68 20 42 00 00       	push   $0x4220
+    154d:	6a 01                	push   $0x1
+    154f:	e8 7c 24 00 00       	call   39d0 <printf>
+    exit();
+    1554:	e8 29 23 00 00       	call   3882 <exit>
+    printf(1, "unlinkread write failed\n");
+    1559:	51                   	push   %ecx
+    155a:	51                   	push   %ecx
+    155b:	68 a4 42 00 00       	push   $0x42a4
+    1560:	6a 01                	push   $0x1
+    1562:	e8 69 24 00 00       	call   39d0 <printf>
+    exit();
+    1567:	e8 16 23 00 00       	call   3882 <exit>
+    printf(1, "unlinkread wrong data\n");
+    156c:	53                   	push   %ebx
+    156d:	53                   	push   %ebx
+    156e:	68 8d 42 00 00       	push   $0x428d
+    1573:	6a 01                	push   $0x1
+    1575:	e8 56 24 00 00       	call   39d0 <printf>
+    exit();
+    157a:	e8 03 23 00 00       	call   3882 <exit>
+    printf(1, "unlinkread read failed");
+    157f:	56                   	push   %esi
+    1580:	56                   	push   %esi
+    1581:	68 76 42 00 00       	push   $0x4276
+    1586:	6a 01                	push   $0x1
+    1588:	e8 43 24 00 00       	call   39d0 <printf>
+    exit();
+    158d:	e8 f0 22 00 00       	call   3882 <exit>
+    printf(1, "unlink unlinkread failed\n");
+    1592:	50                   	push   %eax
+    1593:	50                   	push   %eax
+    1594:	68 58 42 00 00       	push   $0x4258
+    1599:	6a 01                	push   $0x1
+    159b:	e8 30 24 00 00       	call   39d0 <printf>
+    exit();
+    15a0:	e8 dd 22 00 00       	call   3882 <exit>
+    printf(1, "open unlinkread failed\n");
+    15a5:	50                   	push   %eax
+    15a6:	50                   	push   %eax
+    15a7:	68 40 42 00 00       	push   $0x4240
+    15ac:	6a 01                	push   $0x1
+    15ae:	e8 1d 24 00 00       	call   39d0 <printf>
+    exit();
+    15b3:	e8 ca 22 00 00       	call   3882 <exit>
+    15b8:	90                   	nop
+    15b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000015c0 <linktest>:
+{
+    15c0:	55                   	push   %ebp
+    15c1:	89 e5                	mov    %esp,%ebp
+    15c3:	53                   	push   %ebx
+    15c4:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "linktest\n");
+    15c7:	68 cc 42 00 00       	push   $0x42cc
+    15cc:	6a 01                	push   $0x1
+    15ce:	e8 fd 23 00 00       	call   39d0 <printf>
+  unlink("lf1");
+    15d3:	c7 04 24 d6 42 00 00 	movl   $0x42d6,(%esp)
+    15da:	e8 f3 22 00 00       	call   38d2 <unlink>
+  unlink("lf2");
+    15df:	c7 04 24 da 42 00 00 	movl   $0x42da,(%esp)
+    15e6:	e8 e7 22 00 00       	call   38d2 <unlink>
+  fd = open("lf1", O_CREATE|O_RDWR);
+    15eb:	58                   	pop    %eax
+    15ec:	5a                   	pop    %edx
+    15ed:	68 02 02 00 00       	push   $0x202
+    15f2:	68 d6 42 00 00       	push   $0x42d6
+    15f7:	e8 c6 22 00 00       	call   38c2 <open>
+  if(fd < 0){
+    15fc:	83 c4 10             	add    $0x10,%esp
+    15ff:	85 c0                	test   %eax,%eax
+    1601:	0f 88 1e 01 00 00    	js     1725 <linktest+0x165>
+  if(write(fd, "hello", 5) != 5){
+    1607:	83 ec 04             	sub    $0x4,%esp
+    160a:	89 c3                	mov    %eax,%ebx
+    160c:	6a 05                	push   $0x5
+    160e:	68 3a 42 00 00       	push   $0x423a
+    1613:	50                   	push   %eax
+    1614:	e8 89 22 00 00       	call   38a2 <write>
+    1619:	83 c4 10             	add    $0x10,%esp
+    161c:	83 f8 05             	cmp    $0x5,%eax
+    161f:	0f 85 98 01 00 00    	jne    17bd <linktest+0x1fd>
+  close(fd);
+    1625:	83 ec 0c             	sub    $0xc,%esp
+    1628:	53                   	push   %ebx
+    1629:	e8 7c 22 00 00       	call   38aa <close>
+  if(link("lf1", "lf2") < 0){
+    162e:	5b                   	pop    %ebx
+    162f:	58                   	pop    %eax
+    1630:	68 da 42 00 00       	push   $0x42da
+    1635:	68 d6 42 00 00       	push   $0x42d6
+    163a:	e8 a3 22 00 00       	call   38e2 <link>
+    163f:	83 c4 10             	add    $0x10,%esp
+    1642:	85 c0                	test   %eax,%eax
+    1644:	0f 88 60 01 00 00    	js     17aa <linktest+0x1ea>
+  unlink("lf1");
+    164a:	83 ec 0c             	sub    $0xc,%esp
+    164d:	68 d6 42 00 00       	push   $0x42d6
+    1652:	e8 7b 22 00 00       	call   38d2 <unlink>
+  if(open("lf1", 0) >= 0){
+    1657:	58                   	pop    %eax
+    1658:	5a                   	pop    %edx
+    1659:	6a 00                	push   $0x0
+    165b:	68 d6 42 00 00       	push   $0x42d6
+    1660:	e8 5d 22 00 00       	call   38c2 <open>
+    1665:	83 c4 10             	add    $0x10,%esp
+    1668:	85 c0                	test   %eax,%eax
+    166a:	0f 89 27 01 00 00    	jns    1797 <linktest+0x1d7>
+  fd = open("lf2", 0);
+    1670:	83 ec 08             	sub    $0x8,%esp
+    1673:	6a 00                	push   $0x0
+    1675:	68 da 42 00 00       	push   $0x42da
+    167a:	e8 43 22 00 00       	call   38c2 <open>
+  if(fd < 0){
+    167f:	83 c4 10             	add    $0x10,%esp
+    1682:	85 c0                	test   %eax,%eax
+  fd = open("lf2", 0);
+    1684:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1686:	0f 88 f8 00 00 00    	js     1784 <linktest+0x1c4>
+  if(read(fd, buf, sizeof(buf)) != 5){
+    168c:	83 ec 04             	sub    $0x4,%esp
+    168f:	68 00 20 00 00       	push   $0x2000
+    1694:	68 80 85 00 00       	push   $0x8580
+    1699:	50                   	push   %eax
+    169a:	e8 fb 21 00 00       	call   389a <read>
+    169f:	83 c4 10             	add    $0x10,%esp
+    16a2:	83 f8 05             	cmp    $0x5,%eax
+    16a5:	0f 85 c6 00 00 00    	jne    1771 <linktest+0x1b1>
+  close(fd);
+    16ab:	83 ec 0c             	sub    $0xc,%esp
+    16ae:	53                   	push   %ebx
+    16af:	e8 f6 21 00 00       	call   38aa <close>
+  if(link("lf2", "lf2") >= 0){
+    16b4:	58                   	pop    %eax
+    16b5:	5a                   	pop    %edx
+    16b6:	68 da 42 00 00       	push   $0x42da
+    16bb:	68 da 42 00 00       	push   $0x42da
+    16c0:	e8 1d 22 00 00       	call   38e2 <link>
+    16c5:	83 c4 10             	add    $0x10,%esp
+    16c8:	85 c0                	test   %eax,%eax
+    16ca:	0f 89 8e 00 00 00    	jns    175e <linktest+0x19e>
+  unlink("lf2");
+    16d0:	83 ec 0c             	sub    $0xc,%esp
+    16d3:	68 da 42 00 00       	push   $0x42da
+    16d8:	e8 f5 21 00 00       	call   38d2 <unlink>
+  if(link("lf2", "lf1") >= 0){
+    16dd:	59                   	pop    %ecx
+    16de:	5b                   	pop    %ebx
+    16df:	68 d6 42 00 00       	push   $0x42d6
+    16e4:	68 da 42 00 00       	push   $0x42da
+    16e9:	e8 f4 21 00 00       	call   38e2 <link>
+    16ee:	83 c4 10             	add    $0x10,%esp
+    16f1:	85 c0                	test   %eax,%eax
+    16f3:	79 56                	jns    174b <linktest+0x18b>
+  if(link(".", "lf1") >= 0){
+    16f5:	83 ec 08             	sub    $0x8,%esp
+    16f8:	68 d6 42 00 00       	push   $0x42d6
+    16fd:	68 9e 45 00 00       	push   $0x459e
+    1702:	e8 db 21 00 00       	call   38e2 <link>
+    1707:	83 c4 10             	add    $0x10,%esp
+    170a:	85 c0                	test   %eax,%eax
+    170c:	79 2a                	jns    1738 <linktest+0x178>
+  printf(1, "linktest ok\n");
+    170e:	83 ec 08             	sub    $0x8,%esp
+    1711:	68 74 43 00 00       	push   $0x4374
+    1716:	6a 01                	push   $0x1
+    1718:	e8 b3 22 00 00       	call   39d0 <printf>
+}
+    171d:	83 c4 10             	add    $0x10,%esp
+    1720:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    1723:	c9                   	leave  
+    1724:	c3                   	ret    
+    printf(1, "create lf1 failed\n");
+    1725:	50                   	push   %eax
+    1726:	50                   	push   %eax
+    1727:	68 de 42 00 00       	push   $0x42de
+    172c:	6a 01                	push   $0x1
+    172e:	e8 9d 22 00 00       	call   39d0 <printf>
+    exit();
+    1733:	e8 4a 21 00 00       	call   3882 <exit>
+    printf(1, "link . lf1 succeeded! oops\n");
+    1738:	50                   	push   %eax
+    1739:	50                   	push   %eax
+    173a:	68 58 43 00 00       	push   $0x4358
+    173f:	6a 01                	push   $0x1
+    1741:	e8 8a 22 00 00       	call   39d0 <printf>
+    exit();
+    1746:	e8 37 21 00 00       	call   3882 <exit>
+    printf(1, "link non-existant succeeded! oops\n");
+    174b:	52                   	push   %edx
+    174c:	52                   	push   %edx
+    174d:	68 0c 4f 00 00       	push   $0x4f0c
+    1752:	6a 01                	push   $0x1
+    1754:	e8 77 22 00 00       	call   39d0 <printf>
+    exit();
+    1759:	e8 24 21 00 00       	call   3882 <exit>
+    printf(1, "link lf2 lf2 succeeded! oops\n");
+    175e:	50                   	push   %eax
+    175f:	50                   	push   %eax
+    1760:	68 3a 43 00 00       	push   $0x433a
+    1765:	6a 01                	push   $0x1
+    1767:	e8 64 22 00 00       	call   39d0 <printf>
+    exit();
+    176c:	e8 11 21 00 00       	call   3882 <exit>
+    printf(1, "read lf2 failed\n");
+    1771:	51                   	push   %ecx
+    1772:	51                   	push   %ecx
+    1773:	68 29 43 00 00       	push   $0x4329
+    1778:	6a 01                	push   $0x1
+    177a:	e8 51 22 00 00       	call   39d0 <printf>
+    exit();
+    177f:	e8 fe 20 00 00       	call   3882 <exit>
+    printf(1, "open lf2 failed\n");
+    1784:	53                   	push   %ebx
+    1785:	53                   	push   %ebx
+    1786:	68 18 43 00 00       	push   $0x4318
+    178b:	6a 01                	push   $0x1
+    178d:	e8 3e 22 00 00       	call   39d0 <printf>
+    exit();
+    1792:	e8 eb 20 00 00       	call   3882 <exit>
+    printf(1, "unlinked lf1 but it is still there!\n");
+    1797:	50                   	push   %eax
+    1798:	50                   	push   %eax
+    1799:	68 e4 4e 00 00       	push   $0x4ee4
+    179e:	6a 01                	push   $0x1
+    17a0:	e8 2b 22 00 00       	call   39d0 <printf>
+    exit();
+    17a5:	e8 d8 20 00 00       	call   3882 <exit>
+    printf(1, "link lf1 lf2 failed\n");
+    17aa:	51                   	push   %ecx
+    17ab:	51                   	push   %ecx
+    17ac:	68 03 43 00 00       	push   $0x4303
+    17b1:	6a 01                	push   $0x1
+    17b3:	e8 18 22 00 00       	call   39d0 <printf>
+    exit();
+    17b8:	e8 c5 20 00 00       	call   3882 <exit>
+    printf(1, "write lf1 failed\n");
+    17bd:	50                   	push   %eax
+    17be:	50                   	push   %eax
+    17bf:	68 f1 42 00 00       	push   $0x42f1
+    17c4:	6a 01                	push   $0x1
+    17c6:	e8 05 22 00 00       	call   39d0 <printf>
+    exit();
+    17cb:	e8 b2 20 00 00       	call   3882 <exit>
+
+000017d0 <concreate>:
+{
+    17d0:	55                   	push   %ebp
+    17d1:	89 e5                	mov    %esp,%ebp
+    17d3:	57                   	push   %edi
+    17d4:	56                   	push   %esi
+    17d5:	53                   	push   %ebx
+  for(i = 0; i < 40; i++){
+    17d6:	31 f6                	xor    %esi,%esi
+    17d8:	8d 5d ad             	lea    -0x53(%ebp),%ebx
+    if(pid && (i % 3) == 1){
+    17db:	bf ab aa aa aa       	mov    $0xaaaaaaab,%edi
+{
+    17e0:	83 ec 64             	sub    $0x64,%esp
+  printf(1, "concreate test\n");
+    17e3:	68 81 43 00 00       	push   $0x4381
+    17e8:	6a 01                	push   $0x1
+    17ea:	e8 e1 21 00 00       	call   39d0 <printf>
+  file[0] = 'C';
+    17ef:	c6 45 ad 43          	movb   $0x43,-0x53(%ebp)
+  file[2] = '\0';
+    17f3:	c6 45 af 00          	movb   $0x0,-0x51(%ebp)
+    17f7:	83 c4 10             	add    $0x10,%esp
+    17fa:	eb 4c                	jmp    1848 <concreate+0x78>
+    17fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(pid && (i % 3) == 1){
+    1800:	89 f0                	mov    %esi,%eax
+    1802:	89 f1                	mov    %esi,%ecx
+    1804:	f7 e7                	mul    %edi
+    1806:	d1 ea                	shr    %edx
+    1808:	8d 04 52             	lea    (%edx,%edx,2),%eax
+    180b:	29 c1                	sub    %eax,%ecx
+    180d:	83 f9 01             	cmp    $0x1,%ecx
+    1810:	0f 84 ba 00 00 00    	je     18d0 <concreate+0x100>
+      fd = open(file, O_CREATE | O_RDWR);
+    1816:	83 ec 08             	sub    $0x8,%esp
+    1819:	68 02 02 00 00       	push   $0x202
+    181e:	53                   	push   %ebx
+    181f:	e8 9e 20 00 00       	call   38c2 <open>
+      if(fd < 0){
+    1824:	83 c4 10             	add    $0x10,%esp
+    1827:	85 c0                	test   %eax,%eax
+    1829:	78 67                	js     1892 <concreate+0xc2>
+      close(fd);
+    182b:	83 ec 0c             	sub    $0xc,%esp
+  for(i = 0; i < 40; i++){
+    182e:	83 c6 01             	add    $0x1,%esi
+      close(fd);
+    1831:	50                   	push   %eax
+    1832:	e8 73 20 00 00       	call   38aa <close>
+    1837:	83 c4 10             	add    $0x10,%esp
+      wait();
+    183a:	e8 4b 20 00 00       	call   388a <wait>
+  for(i = 0; i < 40; i++){
+    183f:	83 fe 28             	cmp    $0x28,%esi
+    1842:	0f 84 aa 00 00 00    	je     18f2 <concreate+0x122>
+    unlink(file);
+    1848:	83 ec 0c             	sub    $0xc,%esp
+    file[1] = '0' + i;
+    184b:	8d 46 30             	lea    0x30(%esi),%eax
+    unlink(file);
+    184e:	53                   	push   %ebx
+    file[1] = '0' + i;
+    184f:	88 45 ae             	mov    %al,-0x52(%ebp)
+    unlink(file);
+    1852:	e8 7b 20 00 00       	call   38d2 <unlink>
+    pid = fork();
+    1857:	e8 1e 20 00 00       	call   387a <fork>
+    if(pid && (i % 3) == 1){
+    185c:	83 c4 10             	add    $0x10,%esp
+    185f:	85 c0                	test   %eax,%eax
+    1861:	75 9d                	jne    1800 <concreate+0x30>
+    } else if(pid == 0 && (i % 5) == 1){
+    1863:	89 f0                	mov    %esi,%eax
+    1865:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
+    186a:	f7 e2                	mul    %edx
+    186c:	c1 ea 02             	shr    $0x2,%edx
+    186f:	8d 04 92             	lea    (%edx,%edx,4),%eax
+    1872:	29 c6                	sub    %eax,%esi
+    1874:	83 fe 01             	cmp    $0x1,%esi
+    1877:	74 37                	je     18b0 <concreate+0xe0>
+      fd = open(file, O_CREATE | O_RDWR);
+    1879:	83 ec 08             	sub    $0x8,%esp
+    187c:	68 02 02 00 00       	push   $0x202
+    1881:	53                   	push   %ebx
+    1882:	e8 3b 20 00 00       	call   38c2 <open>
+      if(fd < 0){
+    1887:	83 c4 10             	add    $0x10,%esp
+    188a:	85 c0                	test   %eax,%eax
+    188c:	0f 89 28 02 00 00    	jns    1aba <concreate+0x2ea>
+        printf(1, "concreate create %s failed\n", file);
+    1892:	83 ec 04             	sub    $0x4,%esp
+    1895:	53                   	push   %ebx
+    1896:	68 94 43 00 00       	push   $0x4394
+    189b:	6a 01                	push   $0x1
+    189d:	e8 2e 21 00 00       	call   39d0 <printf>
+        exit();
+    18a2:	e8 db 1f 00 00       	call   3882 <exit>
+    18a7:	89 f6                	mov    %esi,%esi
+    18a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+      link("C0", file);
+    18b0:	83 ec 08             	sub    $0x8,%esp
+    18b3:	53                   	push   %ebx
+    18b4:	68 91 43 00 00       	push   $0x4391
+    18b9:	e8 24 20 00 00       	call   38e2 <link>
+    18be:	83 c4 10             	add    $0x10,%esp
+      exit();
+    18c1:	e8 bc 1f 00 00       	call   3882 <exit>
+    18c6:	8d 76 00             	lea    0x0(%esi),%esi
+    18c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+      link("C0", file);
+    18d0:	83 ec 08             	sub    $0x8,%esp
+  for(i = 0; i < 40; i++){
+    18d3:	83 c6 01             	add    $0x1,%esi
+      link("C0", file);
+    18d6:	53                   	push   %ebx
+    18d7:	68 91 43 00 00       	push   $0x4391
+    18dc:	e8 01 20 00 00       	call   38e2 <link>
+    18e1:	83 c4 10             	add    $0x10,%esp
+      wait();
+    18e4:	e8 a1 1f 00 00       	call   388a <wait>
+  for(i = 0; i < 40; i++){
+    18e9:	83 fe 28             	cmp    $0x28,%esi
+    18ec:	0f 85 56 ff ff ff    	jne    1848 <concreate+0x78>
+  memset(fa, 0, sizeof(fa));
+    18f2:	8d 45 c0             	lea    -0x40(%ebp),%eax
+    18f5:	83 ec 04             	sub    $0x4,%esp
+    18f8:	6a 28                	push   $0x28
+    18fa:	6a 00                	push   $0x0
+    18fc:	50                   	push   %eax
+    18fd:	e8 de 1d 00 00       	call   36e0 <memset>
+  fd = open(".", 0);
+    1902:	5f                   	pop    %edi
+    1903:	58                   	pop    %eax
+    1904:	6a 00                	push   $0x0
+    1906:	68 9e 45 00 00       	push   $0x459e
+    190b:	8d 7d b0             	lea    -0x50(%ebp),%edi
+    190e:	e8 af 1f 00 00       	call   38c2 <open>
+  while(read(fd, &de, sizeof(de)) > 0){
+    1913:	83 c4 10             	add    $0x10,%esp
+  fd = open(".", 0);
+    1916:	89 c6                	mov    %eax,%esi
+  n = 0;
+    1918:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
+    191f:	90                   	nop
+  while(read(fd, &de, sizeof(de)) > 0){
+    1920:	83 ec 04             	sub    $0x4,%esp
+    1923:	6a 10                	push   $0x10
+    1925:	57                   	push   %edi
+    1926:	56                   	push   %esi
+    1927:	e8 6e 1f 00 00       	call   389a <read>
+    192c:	83 c4 10             	add    $0x10,%esp
+    192f:	85 c0                	test   %eax,%eax
+    1931:	7e 3d                	jle    1970 <concreate+0x1a0>
+    if(de.inum == 0)
+    1933:	66 83 7d b0 00       	cmpw   $0x0,-0x50(%ebp)
+    1938:	74 e6                	je     1920 <concreate+0x150>
+    if(de.name[0] == 'C' && de.name[2] == '\0'){
+    193a:	80 7d b2 43          	cmpb   $0x43,-0x4e(%ebp)
+    193e:	75 e0                	jne    1920 <concreate+0x150>
+    1940:	80 7d b4 00          	cmpb   $0x0,-0x4c(%ebp)
+    1944:	75 da                	jne    1920 <concreate+0x150>
+      i = de.name[1] - '0';
+    1946:	0f be 45 b3          	movsbl -0x4d(%ebp),%eax
+    194a:	83 e8 30             	sub    $0x30,%eax
+      if(i < 0 || i >= sizeof(fa)){
+    194d:	83 f8 27             	cmp    $0x27,%eax
+    1950:	0f 87 4e 01 00 00    	ja     1aa4 <concreate+0x2d4>
+      if(fa[i]){
+    1956:	80 7c 05 c0 00       	cmpb   $0x0,-0x40(%ebp,%eax,1)
+    195b:	0f 85 2d 01 00 00    	jne    1a8e <concreate+0x2be>
+      fa[i] = 1;
+    1961:	c6 44 05 c0 01       	movb   $0x1,-0x40(%ebp,%eax,1)
+      n++;
+    1966:	83 45 a4 01          	addl   $0x1,-0x5c(%ebp)
+    196a:	eb b4                	jmp    1920 <concreate+0x150>
+    196c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  close(fd);
+    1970:	83 ec 0c             	sub    $0xc,%esp
+    1973:	56                   	push   %esi
+    1974:	e8 31 1f 00 00       	call   38aa <close>
+  if(n != 40){
+    1979:	83 c4 10             	add    $0x10,%esp
+    197c:	83 7d a4 28          	cmpl   $0x28,-0x5c(%ebp)
+    1980:	0f 85 f5 00 00 00    	jne    1a7b <concreate+0x2ab>
+  for(i = 0; i < 40; i++){
+    1986:	31 f6                	xor    %esi,%esi
+    1988:	eb 48                	jmp    19d2 <concreate+0x202>
+    198a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+       ((i % 3) == 1 && pid != 0)){
+    1990:	85 ff                	test   %edi,%edi
+    1992:	74 05                	je     1999 <concreate+0x1c9>
+    1994:	83 fa 01             	cmp    $0x1,%edx
+    1997:	74 64                	je     19fd <concreate+0x22d>
+      unlink(file);
+    1999:	83 ec 0c             	sub    $0xc,%esp
+    199c:	53                   	push   %ebx
+    199d:	e8 30 1f 00 00       	call   38d2 <unlink>
+      unlink(file);
+    19a2:	89 1c 24             	mov    %ebx,(%esp)
+    19a5:	e8 28 1f 00 00       	call   38d2 <unlink>
+      unlink(file);
+    19aa:	89 1c 24             	mov    %ebx,(%esp)
+    19ad:	e8 20 1f 00 00       	call   38d2 <unlink>
+      unlink(file);
+    19b2:	89 1c 24             	mov    %ebx,(%esp)
+    19b5:	e8 18 1f 00 00       	call   38d2 <unlink>
+    19ba:	83 c4 10             	add    $0x10,%esp
+    if(pid == 0)
+    19bd:	85 ff                	test   %edi,%edi
+    19bf:	0f 84 fc fe ff ff    	je     18c1 <concreate+0xf1>
+  for(i = 0; i < 40; i++){
+    19c5:	83 c6 01             	add    $0x1,%esi
+      wait();
+    19c8:	e8 bd 1e 00 00       	call   388a <wait>
+  for(i = 0; i < 40; i++){
+    19cd:	83 fe 28             	cmp    $0x28,%esi
+    19d0:	74 7e                	je     1a50 <concreate+0x280>
+    file[1] = '0' + i;
+    19d2:	8d 46 30             	lea    0x30(%esi),%eax
+    19d5:	88 45 ae             	mov    %al,-0x52(%ebp)
+    pid = fork();
+    19d8:	e8 9d 1e 00 00       	call   387a <fork>
+    if(pid < 0){
+    19dd:	85 c0                	test   %eax,%eax
+    pid = fork();
+    19df:	89 c7                	mov    %eax,%edi
+    if(pid < 0){
+    19e1:	0f 88 80 00 00 00    	js     1a67 <concreate+0x297>
+    if(((i % 3) == 0 && pid == 0) ||
+    19e7:	b8 ab aa aa aa       	mov    $0xaaaaaaab,%eax
+    19ec:	f7 e6                	mul    %esi
+    19ee:	d1 ea                	shr    %edx
+    19f0:	8d 04 52             	lea    (%edx,%edx,2),%eax
+    19f3:	89 f2                	mov    %esi,%edx
+    19f5:	29 c2                	sub    %eax,%edx
+    19f7:	89 d0                	mov    %edx,%eax
+    19f9:	09 f8                	or     %edi,%eax
+    19fb:	75 93                	jne    1990 <concreate+0x1c0>
+      close(open(file, 0));
+    19fd:	83 ec 08             	sub    $0x8,%esp
+    1a00:	6a 00                	push   $0x0
+    1a02:	53                   	push   %ebx
+    1a03:	e8 ba 1e 00 00       	call   38c2 <open>
+    1a08:	89 04 24             	mov    %eax,(%esp)
+    1a0b:	e8 9a 1e 00 00       	call   38aa <close>
+      close(open(file, 0));
+    1a10:	58                   	pop    %eax
+    1a11:	5a                   	pop    %edx
+    1a12:	6a 00                	push   $0x0
+    1a14:	53                   	push   %ebx
+    1a15:	e8 a8 1e 00 00       	call   38c2 <open>
+    1a1a:	89 04 24             	mov    %eax,(%esp)
+    1a1d:	e8 88 1e 00 00       	call   38aa <close>
+      close(open(file, 0));
+    1a22:	59                   	pop    %ecx
+    1a23:	58                   	pop    %eax
+    1a24:	6a 00                	push   $0x0
+    1a26:	53                   	push   %ebx
+    1a27:	e8 96 1e 00 00       	call   38c2 <open>
+    1a2c:	89 04 24             	mov    %eax,(%esp)
+    1a2f:	e8 76 1e 00 00       	call   38aa <close>
+      close(open(file, 0));
+    1a34:	58                   	pop    %eax
+    1a35:	5a                   	pop    %edx
+    1a36:	6a 00                	push   $0x0
+    1a38:	53                   	push   %ebx
+    1a39:	e8 84 1e 00 00       	call   38c2 <open>
+    1a3e:	89 04 24             	mov    %eax,(%esp)
+    1a41:	e8 64 1e 00 00       	call   38aa <close>
+    1a46:	83 c4 10             	add    $0x10,%esp
+    1a49:	e9 6f ff ff ff       	jmp    19bd <concreate+0x1ed>
+    1a4e:	66 90                	xchg   %ax,%ax
+  printf(1, "concreate ok\n");
+    1a50:	83 ec 08             	sub    $0x8,%esp
+    1a53:	68 e6 43 00 00       	push   $0x43e6
+    1a58:	6a 01                	push   $0x1
+    1a5a:	e8 71 1f 00 00       	call   39d0 <printf>
+}
+    1a5f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1a62:	5b                   	pop    %ebx
+    1a63:	5e                   	pop    %esi
+    1a64:	5f                   	pop    %edi
+    1a65:	5d                   	pop    %ebp
+    1a66:	c3                   	ret    
+      printf(1, "fork failed\n");
+    1a67:	83 ec 08             	sub    $0x8,%esp
+    1a6a:	68 69 4c 00 00       	push   $0x4c69
+    1a6f:	6a 01                	push   $0x1
+    1a71:	e8 5a 1f 00 00       	call   39d0 <printf>
+      exit();
+    1a76:	e8 07 1e 00 00       	call   3882 <exit>
+    printf(1, "concreate not enough files in directory listing\n");
+    1a7b:	51                   	push   %ecx
+    1a7c:	51                   	push   %ecx
+    1a7d:	68 30 4f 00 00       	push   $0x4f30
+    1a82:	6a 01                	push   $0x1
+    1a84:	e8 47 1f 00 00       	call   39d0 <printf>
+    exit();
+    1a89:	e8 f4 1d 00 00       	call   3882 <exit>
+        printf(1, "concreate duplicate file %s\n", de.name);
+    1a8e:	8d 45 b2             	lea    -0x4e(%ebp),%eax
+    1a91:	53                   	push   %ebx
+    1a92:	50                   	push   %eax
+    1a93:	68 c9 43 00 00       	push   $0x43c9
+    1a98:	6a 01                	push   $0x1
+    1a9a:	e8 31 1f 00 00       	call   39d0 <printf>
+        exit();
+    1a9f:	e8 de 1d 00 00       	call   3882 <exit>
+        printf(1, "concreate weird file %s\n", de.name);
+    1aa4:	8d 45 b2             	lea    -0x4e(%ebp),%eax
+    1aa7:	56                   	push   %esi
+    1aa8:	50                   	push   %eax
+    1aa9:	68 b0 43 00 00       	push   $0x43b0
+    1aae:	6a 01                	push   $0x1
+    1ab0:	e8 1b 1f 00 00       	call   39d0 <printf>
+        exit();
+    1ab5:	e8 c8 1d 00 00       	call   3882 <exit>
+      close(fd);
+    1aba:	83 ec 0c             	sub    $0xc,%esp
+    1abd:	50                   	push   %eax
+    1abe:	e8 e7 1d 00 00       	call   38aa <close>
+    1ac3:	83 c4 10             	add    $0x10,%esp
+    1ac6:	e9 f6 fd ff ff       	jmp    18c1 <concreate+0xf1>
+    1acb:	90                   	nop
+    1acc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00001ad0 <linkunlink>:
+{
+    1ad0:	55                   	push   %ebp
+    1ad1:	89 e5                	mov    %esp,%ebp
+    1ad3:	57                   	push   %edi
+    1ad4:	56                   	push   %esi
+    1ad5:	53                   	push   %ebx
+    1ad6:	83 ec 24             	sub    $0x24,%esp
+  printf(1, "linkunlink test\n");
+    1ad9:	68 f4 43 00 00       	push   $0x43f4
+    1ade:	6a 01                	push   $0x1
+    1ae0:	e8 eb 1e 00 00       	call   39d0 <printf>
+  unlink("x");
+    1ae5:	c7 04 24 81 46 00 00 	movl   $0x4681,(%esp)
+    1aec:	e8 e1 1d 00 00       	call   38d2 <unlink>
+  pid = fork();
+    1af1:	e8 84 1d 00 00       	call   387a <fork>
+  if(pid < 0){
+    1af6:	83 c4 10             	add    $0x10,%esp
+    1af9:	85 c0                	test   %eax,%eax
+  pid = fork();
+    1afb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  if(pid < 0){
+    1afe:	0f 88 b6 00 00 00    	js     1bba <linkunlink+0xea>
+  unsigned int x = (pid ? 1 : 97);
+    1b04:	83 7d e4 01          	cmpl   $0x1,-0x1c(%ebp)
+    1b08:	bb 64 00 00 00       	mov    $0x64,%ebx
+    if((x % 3) == 0){
+    1b0d:	be ab aa aa aa       	mov    $0xaaaaaaab,%esi
+  unsigned int x = (pid ? 1 : 97);
+    1b12:	19 ff                	sbb    %edi,%edi
+    1b14:	83 e7 60             	and    $0x60,%edi
+    1b17:	83 c7 01             	add    $0x1,%edi
+    1b1a:	eb 1e                	jmp    1b3a <linkunlink+0x6a>
+    1b1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    } else if((x % 3) == 1){
+    1b20:	83 fa 01             	cmp    $0x1,%edx
+    1b23:	74 7b                	je     1ba0 <linkunlink+0xd0>
+      unlink("x");
+    1b25:	83 ec 0c             	sub    $0xc,%esp
+    1b28:	68 81 46 00 00       	push   $0x4681
+    1b2d:	e8 a0 1d 00 00       	call   38d2 <unlink>
+    1b32:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < 100; i++){
+    1b35:	83 eb 01             	sub    $0x1,%ebx
+    1b38:	74 3d                	je     1b77 <linkunlink+0xa7>
+    x = x * 1103515245 + 12345;
+    1b3a:	69 cf 6d 4e c6 41    	imul   $0x41c64e6d,%edi,%ecx
+    1b40:	8d b9 39 30 00 00    	lea    0x3039(%ecx),%edi
+    if((x % 3) == 0){
+    1b46:	89 f8                	mov    %edi,%eax
+    1b48:	f7 e6                	mul    %esi
+    1b4a:	d1 ea                	shr    %edx
+    1b4c:	8d 04 52             	lea    (%edx,%edx,2),%eax
+    1b4f:	89 fa                	mov    %edi,%edx
+    1b51:	29 c2                	sub    %eax,%edx
+    1b53:	75 cb                	jne    1b20 <linkunlink+0x50>
+      close(open("x", O_RDWR | O_CREATE));
+    1b55:	83 ec 08             	sub    $0x8,%esp
+    1b58:	68 02 02 00 00       	push   $0x202
+    1b5d:	68 81 46 00 00       	push   $0x4681
+    1b62:	e8 5b 1d 00 00       	call   38c2 <open>
+    1b67:	89 04 24             	mov    %eax,(%esp)
+    1b6a:	e8 3b 1d 00 00       	call   38aa <close>
+    1b6f:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < 100; i++){
+    1b72:	83 eb 01             	sub    $0x1,%ebx
+    1b75:	75 c3                	jne    1b3a <linkunlink+0x6a>
+  if(pid)
+    1b77:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+    1b7a:	85 c0                	test   %eax,%eax
+    1b7c:	74 4f                	je     1bcd <linkunlink+0xfd>
+    wait();
+    1b7e:	e8 07 1d 00 00       	call   388a <wait>
+  printf(1, "linkunlink ok\n");
+    1b83:	83 ec 08             	sub    $0x8,%esp
+    1b86:	68 09 44 00 00       	push   $0x4409
+    1b8b:	6a 01                	push   $0x1
+    1b8d:	e8 3e 1e 00 00       	call   39d0 <printf>
+}
+    1b92:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1b95:	5b                   	pop    %ebx
+    1b96:	5e                   	pop    %esi
+    1b97:	5f                   	pop    %edi
+    1b98:	5d                   	pop    %ebp
+    1b99:	c3                   	ret    
+    1b9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      link("cat", "x");
+    1ba0:	83 ec 08             	sub    $0x8,%esp
+    1ba3:	68 81 46 00 00       	push   $0x4681
+    1ba8:	68 05 44 00 00       	push   $0x4405
+    1bad:	e8 30 1d 00 00       	call   38e2 <link>
+    1bb2:	83 c4 10             	add    $0x10,%esp
+    1bb5:	e9 7b ff ff ff       	jmp    1b35 <linkunlink+0x65>
+    printf(1, "fork failed\n");
+    1bba:	52                   	push   %edx
+    1bbb:	52                   	push   %edx
+    1bbc:	68 69 4c 00 00       	push   $0x4c69
+    1bc1:	6a 01                	push   $0x1
+    1bc3:	e8 08 1e 00 00       	call   39d0 <printf>
+    exit();
+    1bc8:	e8 b5 1c 00 00       	call   3882 <exit>
+    exit();
+    1bcd:	e8 b0 1c 00 00       	call   3882 <exit>
+    1bd2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1bd9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00001be0 <bigdir>:
+{
+    1be0:	55                   	push   %ebp
+    1be1:	89 e5                	mov    %esp,%ebp
+    1be3:	57                   	push   %edi
+    1be4:	56                   	push   %esi
+    1be5:	53                   	push   %ebx
+    1be6:	83 ec 24             	sub    $0x24,%esp
+  printf(1, "bigdir test\n");
+    1be9:	68 18 44 00 00       	push   $0x4418
+    1bee:	6a 01                	push   $0x1
+    1bf0:	e8 db 1d 00 00       	call   39d0 <printf>
+  unlink("bd");
+    1bf5:	c7 04 24 25 44 00 00 	movl   $0x4425,(%esp)
+    1bfc:	e8 d1 1c 00 00       	call   38d2 <unlink>
+  fd = open("bd", O_CREATE);
+    1c01:	5a                   	pop    %edx
+    1c02:	59                   	pop    %ecx
+    1c03:	68 00 02 00 00       	push   $0x200
+    1c08:	68 25 44 00 00       	push   $0x4425
+    1c0d:	e8 b0 1c 00 00       	call   38c2 <open>
+  if(fd < 0){
+    1c12:	83 c4 10             	add    $0x10,%esp
+    1c15:	85 c0                	test   %eax,%eax
+    1c17:	0f 88 de 00 00 00    	js     1cfb <bigdir+0x11b>
+  close(fd);
+    1c1d:	83 ec 0c             	sub    $0xc,%esp
+    1c20:	8d 7d de             	lea    -0x22(%ebp),%edi
+  for(i = 0; i < 500; i++){
+    1c23:	31 f6                	xor    %esi,%esi
+  close(fd);
+    1c25:	50                   	push   %eax
+    1c26:	e8 7f 1c 00 00       	call   38aa <close>
+    1c2b:	83 c4 10             	add    $0x10,%esp
+    1c2e:	66 90                	xchg   %ax,%ax
+    name[1] = '0' + (i / 64);
+    1c30:	89 f0                	mov    %esi,%eax
+    if(link("bd", name) != 0){
+    1c32:	83 ec 08             	sub    $0x8,%esp
+    name[0] = 'x';
+    1c35:	c6 45 de 78          	movb   $0x78,-0x22(%ebp)
+    name[1] = '0' + (i / 64);
+    1c39:	c1 f8 06             	sar    $0x6,%eax
+    if(link("bd", name) != 0){
+    1c3c:	57                   	push   %edi
+    1c3d:	68 25 44 00 00       	push   $0x4425
+    name[1] = '0' + (i / 64);
+    1c42:	83 c0 30             	add    $0x30,%eax
+    name[3] = '\0';
+    1c45:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
+    name[1] = '0' + (i / 64);
+    1c49:	88 45 df             	mov    %al,-0x21(%ebp)
+    name[2] = '0' + (i % 64);
+    1c4c:	89 f0                	mov    %esi,%eax
+    1c4e:	83 e0 3f             	and    $0x3f,%eax
+    1c51:	83 c0 30             	add    $0x30,%eax
+    1c54:	88 45 e0             	mov    %al,-0x20(%ebp)
+    if(link("bd", name) != 0){
+    1c57:	e8 86 1c 00 00       	call   38e2 <link>
+    1c5c:	83 c4 10             	add    $0x10,%esp
+    1c5f:	85 c0                	test   %eax,%eax
+    1c61:	89 c3                	mov    %eax,%ebx
+    1c63:	75 6e                	jne    1cd3 <bigdir+0xf3>
+  for(i = 0; i < 500; i++){
+    1c65:	83 c6 01             	add    $0x1,%esi
+    1c68:	81 fe f4 01 00 00    	cmp    $0x1f4,%esi
+    1c6e:	75 c0                	jne    1c30 <bigdir+0x50>
+  unlink("bd");
+    1c70:	83 ec 0c             	sub    $0xc,%esp
+    1c73:	68 25 44 00 00       	push   $0x4425
+    1c78:	e8 55 1c 00 00       	call   38d2 <unlink>
+    1c7d:	83 c4 10             	add    $0x10,%esp
+    name[1] = '0' + (i / 64);
+    1c80:	89 d8                	mov    %ebx,%eax
+    if(unlink(name) != 0){
+    1c82:	83 ec 0c             	sub    $0xc,%esp
+    name[0] = 'x';
+    1c85:	c6 45 de 78          	movb   $0x78,-0x22(%ebp)
+    name[1] = '0' + (i / 64);
+    1c89:	c1 f8 06             	sar    $0x6,%eax
+    if(unlink(name) != 0){
+    1c8c:	57                   	push   %edi
+    name[3] = '\0';
+    1c8d:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
+    name[1] = '0' + (i / 64);
+    1c91:	83 c0 30             	add    $0x30,%eax
+    1c94:	88 45 df             	mov    %al,-0x21(%ebp)
+    name[2] = '0' + (i % 64);
+    1c97:	89 d8                	mov    %ebx,%eax
+    1c99:	83 e0 3f             	and    $0x3f,%eax
+    1c9c:	83 c0 30             	add    $0x30,%eax
+    1c9f:	88 45 e0             	mov    %al,-0x20(%ebp)
+    if(unlink(name) != 0){
+    1ca2:	e8 2b 1c 00 00       	call   38d2 <unlink>
+    1ca7:	83 c4 10             	add    $0x10,%esp
+    1caa:	85 c0                	test   %eax,%eax
+    1cac:	75 39                	jne    1ce7 <bigdir+0x107>
+  for(i = 0; i < 500; i++){
+    1cae:	83 c3 01             	add    $0x1,%ebx
+    1cb1:	81 fb f4 01 00 00    	cmp    $0x1f4,%ebx
+    1cb7:	75 c7                	jne    1c80 <bigdir+0xa0>
+  printf(1, "bigdir ok\n");
+    1cb9:	83 ec 08             	sub    $0x8,%esp
+    1cbc:	68 67 44 00 00       	push   $0x4467
+    1cc1:	6a 01                	push   $0x1
+    1cc3:	e8 08 1d 00 00       	call   39d0 <printf>
+}
+    1cc8:	83 c4 10             	add    $0x10,%esp
+    1ccb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1cce:	5b                   	pop    %ebx
+    1ccf:	5e                   	pop    %esi
+    1cd0:	5f                   	pop    %edi
+    1cd1:	5d                   	pop    %ebp
+    1cd2:	c3                   	ret    
+      printf(1, "bigdir link failed\n");
+    1cd3:	83 ec 08             	sub    $0x8,%esp
+    1cd6:	68 3e 44 00 00       	push   $0x443e
+    1cdb:	6a 01                	push   $0x1
+    1cdd:	e8 ee 1c 00 00       	call   39d0 <printf>
+      exit();
+    1ce2:	e8 9b 1b 00 00       	call   3882 <exit>
+      printf(1, "bigdir unlink failed");
+    1ce7:	83 ec 08             	sub    $0x8,%esp
+    1cea:	68 52 44 00 00       	push   $0x4452
+    1cef:	6a 01                	push   $0x1
+    1cf1:	e8 da 1c 00 00       	call   39d0 <printf>
+      exit();
+    1cf6:	e8 87 1b 00 00       	call   3882 <exit>
+    printf(1, "bigdir create failed\n");
+    1cfb:	50                   	push   %eax
+    1cfc:	50                   	push   %eax
+    1cfd:	68 28 44 00 00       	push   $0x4428
+    1d02:	6a 01                	push   $0x1
+    1d04:	e8 c7 1c 00 00       	call   39d0 <printf>
+    exit();
+    1d09:	e8 74 1b 00 00       	call   3882 <exit>
+    1d0e:	66 90                	xchg   %ax,%ax
+
+00001d10 <subdir>:
+{
+    1d10:	55                   	push   %ebp
+    1d11:	89 e5                	mov    %esp,%ebp
+    1d13:	53                   	push   %ebx
+    1d14:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "subdir test\n");
+    1d17:	68 72 44 00 00       	push   $0x4472
+    1d1c:	6a 01                	push   $0x1
+    1d1e:	e8 ad 1c 00 00       	call   39d0 <printf>
+  unlink("ff");
+    1d23:	c7 04 24 fb 44 00 00 	movl   $0x44fb,(%esp)
+    1d2a:	e8 a3 1b 00 00       	call   38d2 <unlink>
+  if(mkdir("dd") != 0){
+    1d2f:	c7 04 24 98 45 00 00 	movl   $0x4598,(%esp)
+    1d36:	e8 af 1b 00 00       	call   38ea <mkdir>
+    1d3b:	83 c4 10             	add    $0x10,%esp
+    1d3e:	85 c0                	test   %eax,%eax
+    1d40:	0f 85 b3 05 00 00    	jne    22f9 <subdir+0x5e9>
+  fd = open("dd/ff", O_CREATE | O_RDWR);
+    1d46:	83 ec 08             	sub    $0x8,%esp
+    1d49:	68 02 02 00 00       	push   $0x202
+    1d4e:	68 d1 44 00 00       	push   $0x44d1
+    1d53:	e8 6a 1b 00 00       	call   38c2 <open>
+  if(fd < 0){
+    1d58:	83 c4 10             	add    $0x10,%esp
+    1d5b:	85 c0                	test   %eax,%eax
+  fd = open("dd/ff", O_CREATE | O_RDWR);
+    1d5d:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1d5f:	0f 88 81 05 00 00    	js     22e6 <subdir+0x5d6>
+  write(fd, "ff", 2);
+    1d65:	83 ec 04             	sub    $0x4,%esp
+    1d68:	6a 02                	push   $0x2
+    1d6a:	68 fb 44 00 00       	push   $0x44fb
+    1d6f:	50                   	push   %eax
+    1d70:	e8 2d 1b 00 00       	call   38a2 <write>
+  close(fd);
+    1d75:	89 1c 24             	mov    %ebx,(%esp)
+    1d78:	e8 2d 1b 00 00       	call   38aa <close>
+  if(unlink("dd") >= 0){
+    1d7d:	c7 04 24 98 45 00 00 	movl   $0x4598,(%esp)
+    1d84:	e8 49 1b 00 00       	call   38d2 <unlink>
+    1d89:	83 c4 10             	add    $0x10,%esp
+    1d8c:	85 c0                	test   %eax,%eax
+    1d8e:	0f 89 3f 05 00 00    	jns    22d3 <subdir+0x5c3>
+  if(mkdir("/dd/dd") != 0){
+    1d94:	83 ec 0c             	sub    $0xc,%esp
+    1d97:	68 ac 44 00 00       	push   $0x44ac
+    1d9c:	e8 49 1b 00 00       	call   38ea <mkdir>
+    1da1:	83 c4 10             	add    $0x10,%esp
+    1da4:	85 c0                	test   %eax,%eax
+    1da6:	0f 85 14 05 00 00    	jne    22c0 <subdir+0x5b0>
+  fd = open("dd/dd/ff", O_CREATE | O_RDWR);
+    1dac:	83 ec 08             	sub    $0x8,%esp
+    1daf:	68 02 02 00 00       	push   $0x202
+    1db4:	68 ce 44 00 00       	push   $0x44ce
+    1db9:	e8 04 1b 00 00       	call   38c2 <open>
+  if(fd < 0){
+    1dbe:	83 c4 10             	add    $0x10,%esp
+    1dc1:	85 c0                	test   %eax,%eax
+  fd = open("dd/dd/ff", O_CREATE | O_RDWR);
+    1dc3:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1dc5:	0f 88 24 04 00 00    	js     21ef <subdir+0x4df>
+  write(fd, "FF", 2);
+    1dcb:	83 ec 04             	sub    $0x4,%esp
+    1dce:	6a 02                	push   $0x2
+    1dd0:	68 ef 44 00 00       	push   $0x44ef
+    1dd5:	50                   	push   %eax
+    1dd6:	e8 c7 1a 00 00       	call   38a2 <write>
+  close(fd);
+    1ddb:	89 1c 24             	mov    %ebx,(%esp)
+    1dde:	e8 c7 1a 00 00       	call   38aa <close>
+  fd = open("dd/dd/../ff", 0);
+    1de3:	58                   	pop    %eax
+    1de4:	5a                   	pop    %edx
+    1de5:	6a 00                	push   $0x0
+    1de7:	68 f2 44 00 00       	push   $0x44f2
+    1dec:	e8 d1 1a 00 00       	call   38c2 <open>
+  if(fd < 0){
+    1df1:	83 c4 10             	add    $0x10,%esp
+    1df4:	85 c0                	test   %eax,%eax
+  fd = open("dd/dd/../ff", 0);
+    1df6:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1df8:	0f 88 de 03 00 00    	js     21dc <subdir+0x4cc>
+  cc = read(fd, buf, sizeof(buf));
+    1dfe:	83 ec 04             	sub    $0x4,%esp
+    1e01:	68 00 20 00 00       	push   $0x2000
+    1e06:	68 80 85 00 00       	push   $0x8580
+    1e0b:	50                   	push   %eax
+    1e0c:	e8 89 1a 00 00       	call   389a <read>
+  if(cc != 2 || buf[0] != 'f'){
+    1e11:	83 c4 10             	add    $0x10,%esp
+    1e14:	83 f8 02             	cmp    $0x2,%eax
+    1e17:	0f 85 3a 03 00 00    	jne    2157 <subdir+0x447>
+    1e1d:	80 3d 80 85 00 00 66 	cmpb   $0x66,0x8580
+    1e24:	0f 85 2d 03 00 00    	jne    2157 <subdir+0x447>
+  close(fd);
+    1e2a:	83 ec 0c             	sub    $0xc,%esp
+    1e2d:	53                   	push   %ebx
+    1e2e:	e8 77 1a 00 00       	call   38aa <close>
+  if(link("dd/dd/ff", "dd/dd/ffff") != 0){
+    1e33:	5b                   	pop    %ebx
+    1e34:	58                   	pop    %eax
+    1e35:	68 32 45 00 00       	push   $0x4532
+    1e3a:	68 ce 44 00 00       	push   $0x44ce
+    1e3f:	e8 9e 1a 00 00       	call   38e2 <link>
+    1e44:	83 c4 10             	add    $0x10,%esp
+    1e47:	85 c0                	test   %eax,%eax
+    1e49:	0f 85 c6 03 00 00    	jne    2215 <subdir+0x505>
+  if(unlink("dd/dd/ff") != 0){
+    1e4f:	83 ec 0c             	sub    $0xc,%esp
+    1e52:	68 ce 44 00 00       	push   $0x44ce
+    1e57:	e8 76 1a 00 00       	call   38d2 <unlink>
+    1e5c:	83 c4 10             	add    $0x10,%esp
+    1e5f:	85 c0                	test   %eax,%eax
+    1e61:	0f 85 16 03 00 00    	jne    217d <subdir+0x46d>
+  if(open("dd/dd/ff", O_RDONLY) >= 0){
+    1e67:	83 ec 08             	sub    $0x8,%esp
+    1e6a:	6a 00                	push   $0x0
+    1e6c:	68 ce 44 00 00       	push   $0x44ce
+    1e71:	e8 4c 1a 00 00       	call   38c2 <open>
+    1e76:	83 c4 10             	add    $0x10,%esp
+    1e79:	85 c0                	test   %eax,%eax
+    1e7b:	0f 89 2c 04 00 00    	jns    22ad <subdir+0x59d>
+  if(chdir("dd") != 0){
+    1e81:	83 ec 0c             	sub    $0xc,%esp
+    1e84:	68 98 45 00 00       	push   $0x4598
+    1e89:	e8 64 1a 00 00       	call   38f2 <chdir>
+    1e8e:	83 c4 10             	add    $0x10,%esp
+    1e91:	85 c0                	test   %eax,%eax
+    1e93:	0f 85 01 04 00 00    	jne    229a <subdir+0x58a>
+  if(chdir("dd/../../dd") != 0){
+    1e99:	83 ec 0c             	sub    $0xc,%esp
+    1e9c:	68 66 45 00 00       	push   $0x4566
+    1ea1:	e8 4c 1a 00 00       	call   38f2 <chdir>
+    1ea6:	83 c4 10             	add    $0x10,%esp
+    1ea9:	85 c0                	test   %eax,%eax
+    1eab:	0f 85 b9 02 00 00    	jne    216a <subdir+0x45a>
+  if(chdir("dd/../../../dd") != 0){
+    1eb1:	83 ec 0c             	sub    $0xc,%esp
+    1eb4:	68 8c 45 00 00       	push   $0x458c
+    1eb9:	e8 34 1a 00 00       	call   38f2 <chdir>
+    1ebe:	83 c4 10             	add    $0x10,%esp
+    1ec1:	85 c0                	test   %eax,%eax
+    1ec3:	0f 85 a1 02 00 00    	jne    216a <subdir+0x45a>
+  if(chdir("./..") != 0){
+    1ec9:	83 ec 0c             	sub    $0xc,%esp
+    1ecc:	68 9b 45 00 00       	push   $0x459b
+    1ed1:	e8 1c 1a 00 00       	call   38f2 <chdir>
+    1ed6:	83 c4 10             	add    $0x10,%esp
+    1ed9:	85 c0                	test   %eax,%eax
+    1edb:	0f 85 21 03 00 00    	jne    2202 <subdir+0x4f2>
+  fd = open("dd/dd/ffff", 0);
+    1ee1:	83 ec 08             	sub    $0x8,%esp
+    1ee4:	6a 00                	push   $0x0
+    1ee6:	68 32 45 00 00       	push   $0x4532
+    1eeb:	e8 d2 19 00 00       	call   38c2 <open>
+  if(fd < 0){
+    1ef0:	83 c4 10             	add    $0x10,%esp
+    1ef3:	85 c0                	test   %eax,%eax
+  fd = open("dd/dd/ffff", 0);
+    1ef5:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1ef7:	0f 88 e0 04 00 00    	js     23dd <subdir+0x6cd>
+  if(read(fd, buf, sizeof(buf)) != 2){
+    1efd:	83 ec 04             	sub    $0x4,%esp
+    1f00:	68 00 20 00 00       	push   $0x2000
+    1f05:	68 80 85 00 00       	push   $0x8580
+    1f0a:	50                   	push   %eax
+    1f0b:	e8 8a 19 00 00       	call   389a <read>
+    1f10:	83 c4 10             	add    $0x10,%esp
+    1f13:	83 f8 02             	cmp    $0x2,%eax
+    1f16:	0f 85 ae 04 00 00    	jne    23ca <subdir+0x6ba>
+  close(fd);
+    1f1c:	83 ec 0c             	sub    $0xc,%esp
+    1f1f:	53                   	push   %ebx
+    1f20:	e8 85 19 00 00       	call   38aa <close>
+  if(open("dd/dd/ff", O_RDONLY) >= 0){
+    1f25:	59                   	pop    %ecx
+    1f26:	5b                   	pop    %ebx
+    1f27:	6a 00                	push   $0x0
+    1f29:	68 ce 44 00 00       	push   $0x44ce
+    1f2e:	e8 8f 19 00 00       	call   38c2 <open>
+    1f33:	83 c4 10             	add    $0x10,%esp
+    1f36:	85 c0                	test   %eax,%eax
+    1f38:	0f 89 65 02 00 00    	jns    21a3 <subdir+0x493>
+  if(open("dd/ff/ff", O_CREATE|O_RDWR) >= 0){
+    1f3e:	83 ec 08             	sub    $0x8,%esp
+    1f41:	68 02 02 00 00       	push   $0x202
+    1f46:	68 e6 45 00 00       	push   $0x45e6
+    1f4b:	e8 72 19 00 00       	call   38c2 <open>
+    1f50:	83 c4 10             	add    $0x10,%esp
+    1f53:	85 c0                	test   %eax,%eax
+    1f55:	0f 89 35 02 00 00    	jns    2190 <subdir+0x480>
+  if(open("dd/xx/ff", O_CREATE|O_RDWR) >= 0){
+    1f5b:	83 ec 08             	sub    $0x8,%esp
+    1f5e:	68 02 02 00 00       	push   $0x202
+    1f63:	68 0b 46 00 00       	push   $0x460b
+    1f68:	e8 55 19 00 00       	call   38c2 <open>
+    1f6d:	83 c4 10             	add    $0x10,%esp
+    1f70:	85 c0                	test   %eax,%eax
+    1f72:	0f 89 0f 03 00 00    	jns    2287 <subdir+0x577>
+  if(open("dd", O_CREATE) >= 0){
+    1f78:	83 ec 08             	sub    $0x8,%esp
+    1f7b:	68 00 02 00 00       	push   $0x200
+    1f80:	68 98 45 00 00       	push   $0x4598
+    1f85:	e8 38 19 00 00       	call   38c2 <open>
+    1f8a:	83 c4 10             	add    $0x10,%esp
+    1f8d:	85 c0                	test   %eax,%eax
+    1f8f:	0f 89 df 02 00 00    	jns    2274 <subdir+0x564>
+  if(open("dd", O_RDWR) >= 0){
+    1f95:	83 ec 08             	sub    $0x8,%esp
+    1f98:	6a 02                	push   $0x2
+    1f9a:	68 98 45 00 00       	push   $0x4598
+    1f9f:	e8 1e 19 00 00       	call   38c2 <open>
+    1fa4:	83 c4 10             	add    $0x10,%esp
+    1fa7:	85 c0                	test   %eax,%eax
+    1fa9:	0f 89 b2 02 00 00    	jns    2261 <subdir+0x551>
+  if(open("dd", O_WRONLY) >= 0){
+    1faf:	83 ec 08             	sub    $0x8,%esp
+    1fb2:	6a 01                	push   $0x1
+    1fb4:	68 98 45 00 00       	push   $0x4598
+    1fb9:	e8 04 19 00 00       	call   38c2 <open>
+    1fbe:	83 c4 10             	add    $0x10,%esp
+    1fc1:	85 c0                	test   %eax,%eax
+    1fc3:	0f 89 85 02 00 00    	jns    224e <subdir+0x53e>
+  if(link("dd/ff/ff", "dd/dd/xx") == 0){
+    1fc9:	83 ec 08             	sub    $0x8,%esp
+    1fcc:	68 7a 46 00 00       	push   $0x467a
+    1fd1:	68 e6 45 00 00       	push   $0x45e6
+    1fd6:	e8 07 19 00 00       	call   38e2 <link>
+    1fdb:	83 c4 10             	add    $0x10,%esp
+    1fde:	85 c0                	test   %eax,%eax
+    1fe0:	0f 84 55 02 00 00    	je     223b <subdir+0x52b>
+  if(link("dd/xx/ff", "dd/dd/xx") == 0){
+    1fe6:	83 ec 08             	sub    $0x8,%esp
+    1fe9:	68 7a 46 00 00       	push   $0x467a
+    1fee:	68 0b 46 00 00       	push   $0x460b
+    1ff3:	e8 ea 18 00 00       	call   38e2 <link>
+    1ff8:	83 c4 10             	add    $0x10,%esp
+    1ffb:	85 c0                	test   %eax,%eax
+    1ffd:	0f 84 25 02 00 00    	je     2228 <subdir+0x518>
+  if(link("dd/ff", "dd/dd/ffff") == 0){
+    2003:	83 ec 08             	sub    $0x8,%esp
+    2006:	68 32 45 00 00       	push   $0x4532
+    200b:	68 d1 44 00 00       	push   $0x44d1
+    2010:	e8 cd 18 00 00       	call   38e2 <link>
+    2015:	83 c4 10             	add    $0x10,%esp
+    2018:	85 c0                	test   %eax,%eax
+    201a:	0f 84 a9 01 00 00    	je     21c9 <subdir+0x4b9>
+  if(mkdir("dd/ff/ff") == 0){
+    2020:	83 ec 0c             	sub    $0xc,%esp
+    2023:	68 e6 45 00 00       	push   $0x45e6
+    2028:	e8 bd 18 00 00       	call   38ea <mkdir>
+    202d:	83 c4 10             	add    $0x10,%esp
+    2030:	85 c0                	test   %eax,%eax
+    2032:	0f 84 7e 01 00 00    	je     21b6 <subdir+0x4a6>
+  if(mkdir("dd/xx/ff") == 0){
+    2038:	83 ec 0c             	sub    $0xc,%esp
+    203b:	68 0b 46 00 00       	push   $0x460b
+    2040:	e8 a5 18 00 00       	call   38ea <mkdir>
+    2045:	83 c4 10             	add    $0x10,%esp
+    2048:	85 c0                	test   %eax,%eax
+    204a:	0f 84 67 03 00 00    	je     23b7 <subdir+0x6a7>
+  if(mkdir("dd/dd/ffff") == 0){
+    2050:	83 ec 0c             	sub    $0xc,%esp
+    2053:	68 32 45 00 00       	push   $0x4532
+    2058:	e8 8d 18 00 00       	call   38ea <mkdir>
+    205d:	83 c4 10             	add    $0x10,%esp
+    2060:	85 c0                	test   %eax,%eax
+    2062:	0f 84 3c 03 00 00    	je     23a4 <subdir+0x694>
+  if(unlink("dd/xx/ff") == 0){
+    2068:	83 ec 0c             	sub    $0xc,%esp
+    206b:	68 0b 46 00 00       	push   $0x460b
+    2070:	e8 5d 18 00 00       	call   38d2 <unlink>
+    2075:	83 c4 10             	add    $0x10,%esp
+    2078:	85 c0                	test   %eax,%eax
+    207a:	0f 84 11 03 00 00    	je     2391 <subdir+0x681>
+  if(unlink("dd/ff/ff") == 0){
+    2080:	83 ec 0c             	sub    $0xc,%esp
+    2083:	68 e6 45 00 00       	push   $0x45e6
+    2088:	e8 45 18 00 00       	call   38d2 <unlink>
+    208d:	83 c4 10             	add    $0x10,%esp
+    2090:	85 c0                	test   %eax,%eax
+    2092:	0f 84 e6 02 00 00    	je     237e <subdir+0x66e>
+  if(chdir("dd/ff") == 0){
+    2098:	83 ec 0c             	sub    $0xc,%esp
+    209b:	68 d1 44 00 00       	push   $0x44d1
+    20a0:	e8 4d 18 00 00       	call   38f2 <chdir>
+    20a5:	83 c4 10             	add    $0x10,%esp
+    20a8:	85 c0                	test   %eax,%eax
+    20aa:	0f 84 bb 02 00 00    	je     236b <subdir+0x65b>
+  if(chdir("dd/xx") == 0){
+    20b0:	83 ec 0c             	sub    $0xc,%esp
+    20b3:	68 7d 46 00 00       	push   $0x467d
+    20b8:	e8 35 18 00 00       	call   38f2 <chdir>
+    20bd:	83 c4 10             	add    $0x10,%esp
+    20c0:	85 c0                	test   %eax,%eax
+    20c2:	0f 84 90 02 00 00    	je     2358 <subdir+0x648>
+  if(unlink("dd/dd/ffff") != 0){
+    20c8:	83 ec 0c             	sub    $0xc,%esp
+    20cb:	68 32 45 00 00       	push   $0x4532
+    20d0:	e8 fd 17 00 00       	call   38d2 <unlink>
+    20d5:	83 c4 10             	add    $0x10,%esp
+    20d8:	85 c0                	test   %eax,%eax
+    20da:	0f 85 9d 00 00 00    	jne    217d <subdir+0x46d>
+  if(unlink("dd/ff") != 0){
+    20e0:	83 ec 0c             	sub    $0xc,%esp
+    20e3:	68 d1 44 00 00       	push   $0x44d1
+    20e8:	e8 e5 17 00 00       	call   38d2 <unlink>
+    20ed:	83 c4 10             	add    $0x10,%esp
+    20f0:	85 c0                	test   %eax,%eax
+    20f2:	0f 85 4d 02 00 00    	jne    2345 <subdir+0x635>
+  if(unlink("dd") == 0){
+    20f8:	83 ec 0c             	sub    $0xc,%esp
+    20fb:	68 98 45 00 00       	push   $0x4598
+    2100:	e8 cd 17 00 00       	call   38d2 <unlink>
+    2105:	83 c4 10             	add    $0x10,%esp
+    2108:	85 c0                	test   %eax,%eax
+    210a:	0f 84 22 02 00 00    	je     2332 <subdir+0x622>
+  if(unlink("dd/dd") < 0){
+    2110:	83 ec 0c             	sub    $0xc,%esp
+    2113:	68 ad 44 00 00       	push   $0x44ad
+    2118:	e8 b5 17 00 00       	call   38d2 <unlink>
+    211d:	83 c4 10             	add    $0x10,%esp
+    2120:	85 c0                	test   %eax,%eax
+    2122:	0f 88 f7 01 00 00    	js     231f <subdir+0x60f>
+  if(unlink("dd") < 0){
+    2128:	83 ec 0c             	sub    $0xc,%esp
+    212b:	68 98 45 00 00       	push   $0x4598
+    2130:	e8 9d 17 00 00       	call   38d2 <unlink>
+    2135:	83 c4 10             	add    $0x10,%esp
+    2138:	85 c0                	test   %eax,%eax
+    213a:	0f 88 cc 01 00 00    	js     230c <subdir+0x5fc>
+  printf(1, "subdir ok\n");
+    2140:	83 ec 08             	sub    $0x8,%esp
+    2143:	68 7a 47 00 00       	push   $0x477a
+    2148:	6a 01                	push   $0x1
+    214a:	e8 81 18 00 00       	call   39d0 <printf>
+}
+    214f:	83 c4 10             	add    $0x10,%esp
+    2152:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2155:	c9                   	leave  
+    2156:	c3                   	ret    
+    printf(1, "dd/dd/../ff wrong content\n");
+    2157:	50                   	push   %eax
+    2158:	50                   	push   %eax
+    2159:	68 17 45 00 00       	push   $0x4517
+    215e:	6a 01                	push   $0x1
+    2160:	e8 6b 18 00 00       	call   39d0 <printf>
+    exit();
+    2165:	e8 18 17 00 00       	call   3882 <exit>
+    printf(1, "chdir dd/../../dd failed\n");
+    216a:	50                   	push   %eax
+    216b:	50                   	push   %eax
+    216c:	68 72 45 00 00       	push   $0x4572
+    2171:	6a 01                	push   $0x1
+    2173:	e8 58 18 00 00       	call   39d0 <printf>
+    exit();
+    2178:	e8 05 17 00 00       	call   3882 <exit>
+    printf(1, "unlink dd/dd/ff failed\n");
+    217d:	52                   	push   %edx
+    217e:	52                   	push   %edx
+    217f:	68 3d 45 00 00       	push   $0x453d
+    2184:	6a 01                	push   $0x1
+    2186:	e8 45 18 00 00       	call   39d0 <printf>
+    exit();
+    218b:	e8 f2 16 00 00       	call   3882 <exit>
+    printf(1, "create dd/ff/ff succeeded!\n");
+    2190:	50                   	push   %eax
+    2191:	50                   	push   %eax
+    2192:	68 ef 45 00 00       	push   $0x45ef
+    2197:	6a 01                	push   $0x1
+    2199:	e8 32 18 00 00       	call   39d0 <printf>
+    exit();
+    219e:	e8 df 16 00 00       	call   3882 <exit>
+    printf(1, "open (unlinked) dd/dd/ff succeeded!\n");
+    21a3:	52                   	push   %edx
+    21a4:	52                   	push   %edx
+    21a5:	68 d4 4f 00 00       	push   $0x4fd4
+    21aa:	6a 01                	push   $0x1
+    21ac:	e8 1f 18 00 00       	call   39d0 <printf>
+    exit();
+    21b1:	e8 cc 16 00 00       	call   3882 <exit>
+    printf(1, "mkdir dd/ff/ff succeeded!\n");
+    21b6:	52                   	push   %edx
+    21b7:	52                   	push   %edx
+    21b8:	68 83 46 00 00       	push   $0x4683
+    21bd:	6a 01                	push   $0x1
+    21bf:	e8 0c 18 00 00       	call   39d0 <printf>
+    exit();
+    21c4:	e8 b9 16 00 00       	call   3882 <exit>
+    printf(1, "link dd/ff dd/dd/ffff succeeded!\n");
+    21c9:	51                   	push   %ecx
+    21ca:	51                   	push   %ecx
+    21cb:	68 44 50 00 00       	push   $0x5044
+    21d0:	6a 01                	push   $0x1
+    21d2:	e8 f9 17 00 00       	call   39d0 <printf>
+    exit();
+    21d7:	e8 a6 16 00 00       	call   3882 <exit>
+    printf(1, "open dd/dd/../ff failed\n");
+    21dc:	50                   	push   %eax
+    21dd:	50                   	push   %eax
+    21de:	68 fe 44 00 00       	push   $0x44fe
+    21e3:	6a 01                	push   $0x1
+    21e5:	e8 e6 17 00 00       	call   39d0 <printf>
+    exit();
+    21ea:	e8 93 16 00 00       	call   3882 <exit>
+    printf(1, "create dd/dd/ff failed\n");
+    21ef:	51                   	push   %ecx
+    21f0:	51                   	push   %ecx
+    21f1:	68 d7 44 00 00       	push   $0x44d7
+    21f6:	6a 01                	push   $0x1
+    21f8:	e8 d3 17 00 00       	call   39d0 <printf>
+    exit();
+    21fd:	e8 80 16 00 00       	call   3882 <exit>
+    printf(1, "chdir ./.. failed\n");
+    2202:	50                   	push   %eax
+    2203:	50                   	push   %eax
+    2204:	68 a0 45 00 00       	push   $0x45a0
+    2209:	6a 01                	push   $0x1
+    220b:	e8 c0 17 00 00       	call   39d0 <printf>
+    exit();
+    2210:	e8 6d 16 00 00       	call   3882 <exit>
+    printf(1, "link dd/dd/ff dd/dd/ffff failed\n");
+    2215:	51                   	push   %ecx
+    2216:	51                   	push   %ecx
+    2217:	68 8c 4f 00 00       	push   $0x4f8c
+    221c:	6a 01                	push   $0x1
+    221e:	e8 ad 17 00 00       	call   39d0 <printf>
+    exit();
+    2223:	e8 5a 16 00 00       	call   3882 <exit>
+    printf(1, "link dd/xx/ff dd/dd/xx succeeded!\n");
+    2228:	53                   	push   %ebx
+    2229:	53                   	push   %ebx
+    222a:	68 20 50 00 00       	push   $0x5020
+    222f:	6a 01                	push   $0x1
+    2231:	e8 9a 17 00 00       	call   39d0 <printf>
+    exit();
+    2236:	e8 47 16 00 00       	call   3882 <exit>
+    printf(1, "link dd/ff/ff dd/dd/xx succeeded!\n");
+    223b:	50                   	push   %eax
+    223c:	50                   	push   %eax
+    223d:	68 fc 4f 00 00       	push   $0x4ffc
+    2242:	6a 01                	push   $0x1
+    2244:	e8 87 17 00 00       	call   39d0 <printf>
+    exit();
+    2249:	e8 34 16 00 00       	call   3882 <exit>
+    printf(1, "open dd wronly succeeded!\n");
+    224e:	50                   	push   %eax
+    224f:	50                   	push   %eax
+    2250:	68 5f 46 00 00       	push   $0x465f
+    2255:	6a 01                	push   $0x1
+    2257:	e8 74 17 00 00       	call   39d0 <printf>
+    exit();
+    225c:	e8 21 16 00 00       	call   3882 <exit>
+    printf(1, "open dd rdwr succeeded!\n");
+    2261:	50                   	push   %eax
+    2262:	50                   	push   %eax
+    2263:	68 46 46 00 00       	push   $0x4646
+    2268:	6a 01                	push   $0x1
+    226a:	e8 61 17 00 00       	call   39d0 <printf>
+    exit();
+    226f:	e8 0e 16 00 00       	call   3882 <exit>
+    printf(1, "create dd succeeded!\n");
+    2274:	50                   	push   %eax
+    2275:	50                   	push   %eax
+    2276:	68 30 46 00 00       	push   $0x4630
+    227b:	6a 01                	push   $0x1
+    227d:	e8 4e 17 00 00       	call   39d0 <printf>
+    exit();
+    2282:	e8 fb 15 00 00       	call   3882 <exit>
+    printf(1, "create dd/xx/ff succeeded!\n");
+    2287:	50                   	push   %eax
+    2288:	50                   	push   %eax
+    2289:	68 14 46 00 00       	push   $0x4614
+    228e:	6a 01                	push   $0x1
+    2290:	e8 3b 17 00 00       	call   39d0 <printf>
+    exit();
+    2295:	e8 e8 15 00 00       	call   3882 <exit>
+    printf(1, "chdir dd failed\n");
+    229a:	50                   	push   %eax
+    229b:	50                   	push   %eax
+    229c:	68 55 45 00 00       	push   $0x4555
+    22a1:	6a 01                	push   $0x1
+    22a3:	e8 28 17 00 00       	call   39d0 <printf>
+    exit();
+    22a8:	e8 d5 15 00 00       	call   3882 <exit>
+    printf(1, "open (unlinked) dd/dd/ff succeeded\n");
+    22ad:	50                   	push   %eax
+    22ae:	50                   	push   %eax
+    22af:	68 b0 4f 00 00       	push   $0x4fb0
+    22b4:	6a 01                	push   $0x1
+    22b6:	e8 15 17 00 00       	call   39d0 <printf>
+    exit();
+    22bb:	e8 c2 15 00 00       	call   3882 <exit>
+    printf(1, "subdir mkdir dd/dd failed\n");
+    22c0:	53                   	push   %ebx
+    22c1:	53                   	push   %ebx
+    22c2:	68 b3 44 00 00       	push   $0x44b3
+    22c7:	6a 01                	push   $0x1
+    22c9:	e8 02 17 00 00       	call   39d0 <printf>
+    exit();
+    22ce:	e8 af 15 00 00       	call   3882 <exit>
+    printf(1, "unlink dd (non-empty dir) succeeded!\n");
+    22d3:	50                   	push   %eax
+    22d4:	50                   	push   %eax
+    22d5:	68 64 4f 00 00       	push   $0x4f64
+    22da:	6a 01                	push   $0x1
+    22dc:	e8 ef 16 00 00       	call   39d0 <printf>
+    exit();
+    22e1:	e8 9c 15 00 00       	call   3882 <exit>
+    printf(1, "create dd/ff failed\n");
+    22e6:	50                   	push   %eax
+    22e7:	50                   	push   %eax
+    22e8:	68 97 44 00 00       	push   $0x4497
+    22ed:	6a 01                	push   $0x1
+    22ef:	e8 dc 16 00 00       	call   39d0 <printf>
+    exit();
+    22f4:	e8 89 15 00 00       	call   3882 <exit>
+    printf(1, "subdir mkdir dd failed\n");
+    22f9:	50                   	push   %eax
+    22fa:	50                   	push   %eax
+    22fb:	68 7f 44 00 00       	push   $0x447f
+    2300:	6a 01                	push   $0x1
+    2302:	e8 c9 16 00 00       	call   39d0 <printf>
+    exit();
+    2307:	e8 76 15 00 00       	call   3882 <exit>
+    printf(1, "unlink dd failed\n");
+    230c:	50                   	push   %eax
+    230d:	50                   	push   %eax
+    230e:	68 68 47 00 00       	push   $0x4768
+    2313:	6a 01                	push   $0x1
+    2315:	e8 b6 16 00 00       	call   39d0 <printf>
+    exit();
+    231a:	e8 63 15 00 00       	call   3882 <exit>
+    printf(1, "unlink dd/dd failed\n");
+    231f:	52                   	push   %edx
+    2320:	52                   	push   %edx
+    2321:	68 53 47 00 00       	push   $0x4753
+    2326:	6a 01                	push   $0x1
+    2328:	e8 a3 16 00 00       	call   39d0 <printf>
+    exit();
+    232d:	e8 50 15 00 00       	call   3882 <exit>
+    printf(1, "unlink non-empty dd succeeded!\n");
+    2332:	51                   	push   %ecx
+    2333:	51                   	push   %ecx
+    2334:	68 68 50 00 00       	push   $0x5068
+    2339:	6a 01                	push   $0x1
+    233b:	e8 90 16 00 00       	call   39d0 <printf>
+    exit();
+    2340:	e8 3d 15 00 00       	call   3882 <exit>
+    printf(1, "unlink dd/ff failed\n");
+    2345:	53                   	push   %ebx
+    2346:	53                   	push   %ebx
+    2347:	68 3e 47 00 00       	push   $0x473e
+    234c:	6a 01                	push   $0x1
+    234e:	e8 7d 16 00 00       	call   39d0 <printf>
+    exit();
+    2353:	e8 2a 15 00 00       	call   3882 <exit>
+    printf(1, "chdir dd/xx succeeded!\n");
+    2358:	50                   	push   %eax
+    2359:	50                   	push   %eax
+    235a:	68 26 47 00 00       	push   $0x4726
+    235f:	6a 01                	push   $0x1
+    2361:	e8 6a 16 00 00       	call   39d0 <printf>
+    exit();
+    2366:	e8 17 15 00 00       	call   3882 <exit>
+    printf(1, "chdir dd/ff succeeded!\n");
+    236b:	50                   	push   %eax
+    236c:	50                   	push   %eax
+    236d:	68 0e 47 00 00       	push   $0x470e
+    2372:	6a 01                	push   $0x1
+    2374:	e8 57 16 00 00       	call   39d0 <printf>
+    exit();
+    2379:	e8 04 15 00 00       	call   3882 <exit>
+    printf(1, "unlink dd/ff/ff succeeded!\n");
+    237e:	50                   	push   %eax
+    237f:	50                   	push   %eax
+    2380:	68 f2 46 00 00       	push   $0x46f2
+    2385:	6a 01                	push   $0x1
+    2387:	e8 44 16 00 00       	call   39d0 <printf>
+    exit();
+    238c:	e8 f1 14 00 00       	call   3882 <exit>
+    printf(1, "unlink dd/xx/ff succeeded!\n");
+    2391:	50                   	push   %eax
+    2392:	50                   	push   %eax
+    2393:	68 d6 46 00 00       	push   $0x46d6
+    2398:	6a 01                	push   $0x1
+    239a:	e8 31 16 00 00       	call   39d0 <printf>
+    exit();
+    239f:	e8 de 14 00 00       	call   3882 <exit>
+    printf(1, "mkdir dd/dd/ffff succeeded!\n");
+    23a4:	50                   	push   %eax
+    23a5:	50                   	push   %eax
+    23a6:	68 b9 46 00 00       	push   $0x46b9
+    23ab:	6a 01                	push   $0x1
+    23ad:	e8 1e 16 00 00       	call   39d0 <printf>
+    exit();
+    23b2:	e8 cb 14 00 00       	call   3882 <exit>
+    printf(1, "mkdir dd/xx/ff succeeded!\n");
+    23b7:	50                   	push   %eax
+    23b8:	50                   	push   %eax
+    23b9:	68 9e 46 00 00       	push   $0x469e
+    23be:	6a 01                	push   $0x1
+    23c0:	e8 0b 16 00 00       	call   39d0 <printf>
+    exit();
+    23c5:	e8 b8 14 00 00       	call   3882 <exit>
+    printf(1, "read dd/dd/ffff wrong len\n");
+    23ca:	50                   	push   %eax
+    23cb:	50                   	push   %eax
+    23cc:	68 cb 45 00 00       	push   $0x45cb
+    23d1:	6a 01                	push   $0x1
+    23d3:	e8 f8 15 00 00       	call   39d0 <printf>
+    exit();
+    23d8:	e8 a5 14 00 00       	call   3882 <exit>
+    printf(1, "open dd/dd/ffff failed\n");
+    23dd:	50                   	push   %eax
+    23de:	50                   	push   %eax
+    23df:	68 b3 45 00 00       	push   $0x45b3
+    23e4:	6a 01                	push   $0x1
+    23e6:	e8 e5 15 00 00       	call   39d0 <printf>
+    exit();
+    23eb:	e8 92 14 00 00       	call   3882 <exit>
+
+000023f0 <bigwrite>:
+{
+    23f0:	55                   	push   %ebp
+    23f1:	89 e5                	mov    %esp,%ebp
+    23f3:	56                   	push   %esi
+    23f4:	53                   	push   %ebx
+  for(sz = 499; sz < 12*512; sz += 471){
+    23f5:	bb f3 01 00 00       	mov    $0x1f3,%ebx
+  printf(1, "bigwrite test\n");
+    23fa:	83 ec 08             	sub    $0x8,%esp
+    23fd:	68 85 47 00 00       	push   $0x4785
+    2402:	6a 01                	push   $0x1
+    2404:	e8 c7 15 00 00       	call   39d0 <printf>
+  unlink("bigwrite");
+    2409:	c7 04 24 94 47 00 00 	movl   $0x4794,(%esp)
+    2410:	e8 bd 14 00 00       	call   38d2 <unlink>
+    2415:	83 c4 10             	add    $0x10,%esp
+    2418:	90                   	nop
+    2419:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    fd = open("bigwrite", O_CREATE | O_RDWR);
+    2420:	83 ec 08             	sub    $0x8,%esp
+    2423:	68 02 02 00 00       	push   $0x202
+    2428:	68 94 47 00 00       	push   $0x4794
+    242d:	e8 90 14 00 00       	call   38c2 <open>
+    if(fd < 0){
+    2432:	83 c4 10             	add    $0x10,%esp
+    2435:	85 c0                	test   %eax,%eax
+    fd = open("bigwrite", O_CREATE | O_RDWR);
+    2437:	89 c6                	mov    %eax,%esi
+    if(fd < 0){
+    2439:	78 7e                	js     24b9 <bigwrite+0xc9>
+      int cc = write(fd, buf, sz);
+    243b:	83 ec 04             	sub    $0x4,%esp
+    243e:	53                   	push   %ebx
+    243f:	68 80 85 00 00       	push   $0x8580
+    2444:	50                   	push   %eax
+    2445:	e8 58 14 00 00       	call   38a2 <write>
+      if(cc != sz){
+    244a:	83 c4 10             	add    $0x10,%esp
+    244d:	39 d8                	cmp    %ebx,%eax
+    244f:	75 55                	jne    24a6 <bigwrite+0xb6>
+      int cc = write(fd, buf, sz);
+    2451:	83 ec 04             	sub    $0x4,%esp
+    2454:	53                   	push   %ebx
+    2455:	68 80 85 00 00       	push   $0x8580
+    245a:	56                   	push   %esi
+    245b:	e8 42 14 00 00       	call   38a2 <write>
+      if(cc != sz){
+    2460:	83 c4 10             	add    $0x10,%esp
+    2463:	39 d8                	cmp    %ebx,%eax
+    2465:	75 3f                	jne    24a6 <bigwrite+0xb6>
+    close(fd);
+    2467:	83 ec 0c             	sub    $0xc,%esp
+  for(sz = 499; sz < 12*512; sz += 471){
+    246a:	81 c3 d7 01 00 00    	add    $0x1d7,%ebx
+    close(fd);
+    2470:	56                   	push   %esi
+    2471:	e8 34 14 00 00       	call   38aa <close>
+    unlink("bigwrite");
+    2476:	c7 04 24 94 47 00 00 	movl   $0x4794,(%esp)
+    247d:	e8 50 14 00 00       	call   38d2 <unlink>
+  for(sz = 499; sz < 12*512; sz += 471){
+    2482:	83 c4 10             	add    $0x10,%esp
+    2485:	81 fb 07 18 00 00    	cmp    $0x1807,%ebx
+    248b:	75 93                	jne    2420 <bigwrite+0x30>
+  printf(1, "bigwrite ok\n");
+    248d:	83 ec 08             	sub    $0x8,%esp
+    2490:	68 c7 47 00 00       	push   $0x47c7
+    2495:	6a 01                	push   $0x1
+    2497:	e8 34 15 00 00       	call   39d0 <printf>
+}
+    249c:	83 c4 10             	add    $0x10,%esp
+    249f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    24a2:	5b                   	pop    %ebx
+    24a3:	5e                   	pop    %esi
+    24a4:	5d                   	pop    %ebp
+    24a5:	c3                   	ret    
+        printf(1, "write(%d) ret %d\n", sz, cc);
+    24a6:	50                   	push   %eax
+    24a7:	53                   	push   %ebx
+    24a8:	68 b5 47 00 00       	push   $0x47b5
+    24ad:	6a 01                	push   $0x1
+    24af:	e8 1c 15 00 00       	call   39d0 <printf>
+        exit();
+    24b4:	e8 c9 13 00 00       	call   3882 <exit>
+      printf(1, "cannot create bigwrite\n");
+    24b9:	83 ec 08             	sub    $0x8,%esp
+    24bc:	68 9d 47 00 00       	push   $0x479d
+    24c1:	6a 01                	push   $0x1
+    24c3:	e8 08 15 00 00       	call   39d0 <printf>
+      exit();
+    24c8:	e8 b5 13 00 00       	call   3882 <exit>
+    24cd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000024d0 <bigfile>:
+{
+    24d0:	55                   	push   %ebp
+    24d1:	89 e5                	mov    %esp,%ebp
+    24d3:	57                   	push   %edi
+    24d4:	56                   	push   %esi
+    24d5:	53                   	push   %ebx
+    24d6:	83 ec 14             	sub    $0x14,%esp
+  printf(1, "bigfile test\n");
+    24d9:	68 d4 47 00 00       	push   $0x47d4
+    24de:	6a 01                	push   $0x1
+    24e0:	e8 eb 14 00 00       	call   39d0 <printf>
+  unlink("bigfile");
+    24e5:	c7 04 24 f0 47 00 00 	movl   $0x47f0,(%esp)
+    24ec:	e8 e1 13 00 00       	call   38d2 <unlink>
+  fd = open("bigfile", O_CREATE | O_RDWR);
+    24f1:	58                   	pop    %eax
+    24f2:	5a                   	pop    %edx
+    24f3:	68 02 02 00 00       	push   $0x202
+    24f8:	68 f0 47 00 00       	push   $0x47f0
+    24fd:	e8 c0 13 00 00       	call   38c2 <open>
+  if(fd < 0){
+    2502:	83 c4 10             	add    $0x10,%esp
+    2505:	85 c0                	test   %eax,%eax
+    2507:	0f 88 5e 01 00 00    	js     266b <bigfile+0x19b>
+    250d:	89 c6                	mov    %eax,%esi
+  for(i = 0; i < 20; i++){
+    250f:	31 db                	xor    %ebx,%ebx
+    2511:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    memset(buf, i, 600);
+    2518:	83 ec 04             	sub    $0x4,%esp
+    251b:	68 58 02 00 00       	push   $0x258
+    2520:	53                   	push   %ebx
+    2521:	68 80 85 00 00       	push   $0x8580
+    2526:	e8 b5 11 00 00       	call   36e0 <memset>
+    if(write(fd, buf, 600) != 600){
+    252b:	83 c4 0c             	add    $0xc,%esp
+    252e:	68 58 02 00 00       	push   $0x258
+    2533:	68 80 85 00 00       	push   $0x8580
+    2538:	56                   	push   %esi
+    2539:	e8 64 13 00 00       	call   38a2 <write>
+    253e:	83 c4 10             	add    $0x10,%esp
+    2541:	3d 58 02 00 00       	cmp    $0x258,%eax
+    2546:	0f 85 f8 00 00 00    	jne    2644 <bigfile+0x174>
+  for(i = 0; i < 20; i++){
+    254c:	83 c3 01             	add    $0x1,%ebx
+    254f:	83 fb 14             	cmp    $0x14,%ebx
+    2552:	75 c4                	jne    2518 <bigfile+0x48>
+  close(fd);
+    2554:	83 ec 0c             	sub    $0xc,%esp
+    2557:	56                   	push   %esi
+    2558:	e8 4d 13 00 00       	call   38aa <close>
+  fd = open("bigfile", 0);
+    255d:	5e                   	pop    %esi
+    255e:	5f                   	pop    %edi
+    255f:	6a 00                	push   $0x0
+    2561:	68 f0 47 00 00       	push   $0x47f0
+    2566:	e8 57 13 00 00       	call   38c2 <open>
+  if(fd < 0){
+    256b:	83 c4 10             	add    $0x10,%esp
+    256e:	85 c0                	test   %eax,%eax
+  fd = open("bigfile", 0);
+    2570:	89 c6                	mov    %eax,%esi
+  if(fd < 0){
+    2572:	0f 88 e0 00 00 00    	js     2658 <bigfile+0x188>
+  total = 0;
+    2578:	31 db                	xor    %ebx,%ebx
+  for(i = 0; ; i++){
+    257a:	31 ff                	xor    %edi,%edi
+    257c:	eb 30                	jmp    25ae <bigfile+0xde>
+    257e:	66 90                	xchg   %ax,%ax
+    if(cc != 300){
+    2580:	3d 2c 01 00 00       	cmp    $0x12c,%eax
+    2585:	0f 85 91 00 00 00    	jne    261c <bigfile+0x14c>
+    if(buf[0] != i/2 || buf[299] != i/2){
+    258b:	0f be 05 80 85 00 00 	movsbl 0x8580,%eax
+    2592:	89 fa                	mov    %edi,%edx
+    2594:	d1 fa                	sar    %edx
+    2596:	39 d0                	cmp    %edx,%eax
+    2598:	75 6e                	jne    2608 <bigfile+0x138>
+    259a:	0f be 15 ab 86 00 00 	movsbl 0x86ab,%edx
+    25a1:	39 d0                	cmp    %edx,%eax
+    25a3:	75 63                	jne    2608 <bigfile+0x138>
+    total += cc;
+    25a5:	81 c3 2c 01 00 00    	add    $0x12c,%ebx
+  for(i = 0; ; i++){
+    25ab:	83 c7 01             	add    $0x1,%edi
+    cc = read(fd, buf, 300);
+    25ae:	83 ec 04             	sub    $0x4,%esp
+    25b1:	68 2c 01 00 00       	push   $0x12c
+    25b6:	68 80 85 00 00       	push   $0x8580
+    25bb:	56                   	push   %esi
+    25bc:	e8 d9 12 00 00       	call   389a <read>
+    if(cc < 0){
+    25c1:	83 c4 10             	add    $0x10,%esp
+    25c4:	85 c0                	test   %eax,%eax
+    25c6:	78 68                	js     2630 <bigfile+0x160>
+    if(cc == 0)
+    25c8:	75 b6                	jne    2580 <bigfile+0xb0>
+  close(fd);
+    25ca:	83 ec 0c             	sub    $0xc,%esp
+    25cd:	56                   	push   %esi
+    25ce:	e8 d7 12 00 00       	call   38aa <close>
+  if(total != 20*600){
+    25d3:	83 c4 10             	add    $0x10,%esp
+    25d6:	81 fb e0 2e 00 00    	cmp    $0x2ee0,%ebx
+    25dc:	0f 85 9c 00 00 00    	jne    267e <bigfile+0x1ae>
+  unlink("bigfile");
+    25e2:	83 ec 0c             	sub    $0xc,%esp
+    25e5:	68 f0 47 00 00       	push   $0x47f0
+    25ea:	e8 e3 12 00 00       	call   38d2 <unlink>
+  printf(1, "bigfile test ok\n");
+    25ef:	58                   	pop    %eax
+    25f0:	5a                   	pop    %edx
+    25f1:	68 7f 48 00 00       	push   $0x487f
+    25f6:	6a 01                	push   $0x1
+    25f8:	e8 d3 13 00 00       	call   39d0 <printf>
+}
+    25fd:	83 c4 10             	add    $0x10,%esp
+    2600:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    2603:	5b                   	pop    %ebx
+    2604:	5e                   	pop    %esi
+    2605:	5f                   	pop    %edi
+    2606:	5d                   	pop    %ebp
+    2607:	c3                   	ret    
+      printf(1, "read bigfile wrong data\n");
+    2608:	83 ec 08             	sub    $0x8,%esp
+    260b:	68 4c 48 00 00       	push   $0x484c
+    2610:	6a 01                	push   $0x1
+    2612:	e8 b9 13 00 00       	call   39d0 <printf>
+      exit();
+    2617:	e8 66 12 00 00       	call   3882 <exit>
+      printf(1, "short read bigfile\n");
+    261c:	83 ec 08             	sub    $0x8,%esp
+    261f:	68 38 48 00 00       	push   $0x4838
+    2624:	6a 01                	push   $0x1
+    2626:	e8 a5 13 00 00       	call   39d0 <printf>
+      exit();
+    262b:	e8 52 12 00 00       	call   3882 <exit>
+      printf(1, "read bigfile failed\n");
+    2630:	83 ec 08             	sub    $0x8,%esp
+    2633:	68 23 48 00 00       	push   $0x4823
+    2638:	6a 01                	push   $0x1
+    263a:	e8 91 13 00 00       	call   39d0 <printf>
+      exit();
+    263f:	e8 3e 12 00 00       	call   3882 <exit>
+      printf(1, "write bigfile failed\n");
+    2644:	83 ec 08             	sub    $0x8,%esp
+    2647:	68 f8 47 00 00       	push   $0x47f8
+    264c:	6a 01                	push   $0x1
+    264e:	e8 7d 13 00 00       	call   39d0 <printf>
+      exit();
+    2653:	e8 2a 12 00 00       	call   3882 <exit>
+    printf(1, "cannot open bigfile\n");
+    2658:	53                   	push   %ebx
+    2659:	53                   	push   %ebx
+    265a:	68 0e 48 00 00       	push   $0x480e
+    265f:	6a 01                	push   $0x1
+    2661:	e8 6a 13 00 00       	call   39d0 <printf>
+    exit();
+    2666:	e8 17 12 00 00       	call   3882 <exit>
+    printf(1, "cannot create bigfile");
+    266b:	50                   	push   %eax
+    266c:	50                   	push   %eax
+    266d:	68 e2 47 00 00       	push   $0x47e2
+    2672:	6a 01                	push   $0x1
+    2674:	e8 57 13 00 00       	call   39d0 <printf>
+    exit();
+    2679:	e8 04 12 00 00       	call   3882 <exit>
+    printf(1, "read bigfile wrong total\n");
+    267e:	51                   	push   %ecx
+    267f:	51                   	push   %ecx
+    2680:	68 65 48 00 00       	push   $0x4865
+    2685:	6a 01                	push   $0x1
+    2687:	e8 44 13 00 00       	call   39d0 <printf>
+    exit();
+    268c:	e8 f1 11 00 00       	call   3882 <exit>
+    2691:	eb 0d                	jmp    26a0 <fourteen>
+    2693:	90                   	nop
+    2694:	90                   	nop
+    2695:	90                   	nop
+    2696:	90                   	nop
+    2697:	90                   	nop
+    2698:	90                   	nop
+    2699:	90                   	nop
+    269a:	90                   	nop
+    269b:	90                   	nop
+    269c:	90                   	nop
+    269d:	90                   	nop
+    269e:	90                   	nop
+    269f:	90                   	nop
+
+000026a0 <fourteen>:
+{
+    26a0:	55                   	push   %ebp
+    26a1:	89 e5                	mov    %esp,%ebp
+    26a3:	83 ec 10             	sub    $0x10,%esp
+  printf(1, "fourteen test\n");
+    26a6:	68 90 48 00 00       	push   $0x4890
+    26ab:	6a 01                	push   $0x1
+    26ad:	e8 1e 13 00 00       	call   39d0 <printf>
+  if(mkdir("12345678901234") != 0){
+    26b2:	c7 04 24 cb 48 00 00 	movl   $0x48cb,(%esp)
+    26b9:	e8 2c 12 00 00       	call   38ea <mkdir>
+    26be:	83 c4 10             	add    $0x10,%esp
+    26c1:	85 c0                	test   %eax,%eax
+    26c3:	0f 85 97 00 00 00    	jne    2760 <fourteen+0xc0>
+  if(mkdir("12345678901234/123456789012345") != 0){
+    26c9:	83 ec 0c             	sub    $0xc,%esp
+    26cc:	68 88 50 00 00       	push   $0x5088
+    26d1:	e8 14 12 00 00       	call   38ea <mkdir>
+    26d6:	83 c4 10             	add    $0x10,%esp
+    26d9:	85 c0                	test   %eax,%eax
+    26db:	0f 85 de 00 00 00    	jne    27bf <fourteen+0x11f>
+  fd = open("123456789012345/123456789012345/123456789012345", O_CREATE);
+    26e1:	83 ec 08             	sub    $0x8,%esp
+    26e4:	68 00 02 00 00       	push   $0x200
+    26e9:	68 d8 50 00 00       	push   $0x50d8
+    26ee:	e8 cf 11 00 00       	call   38c2 <open>
+  if(fd < 0){
+    26f3:	83 c4 10             	add    $0x10,%esp
+    26f6:	85 c0                	test   %eax,%eax
+    26f8:	0f 88 ae 00 00 00    	js     27ac <fourteen+0x10c>
+  close(fd);
+    26fe:	83 ec 0c             	sub    $0xc,%esp
+    2701:	50                   	push   %eax
+    2702:	e8 a3 11 00 00       	call   38aa <close>
+  fd = open("12345678901234/12345678901234/12345678901234", 0);
+    2707:	58                   	pop    %eax
+    2708:	5a                   	pop    %edx
+    2709:	6a 00                	push   $0x0
+    270b:	68 48 51 00 00       	push   $0x5148
+    2710:	e8 ad 11 00 00       	call   38c2 <open>
+  if(fd < 0){
+    2715:	83 c4 10             	add    $0x10,%esp
+    2718:	85 c0                	test   %eax,%eax
+    271a:	78 7d                	js     2799 <fourteen+0xf9>
+  close(fd);
+    271c:	83 ec 0c             	sub    $0xc,%esp
+    271f:	50                   	push   %eax
+    2720:	e8 85 11 00 00       	call   38aa <close>
+  if(mkdir("12345678901234/12345678901234") == 0){
+    2725:	c7 04 24 bc 48 00 00 	movl   $0x48bc,(%esp)
+    272c:	e8 b9 11 00 00       	call   38ea <mkdir>
+    2731:	83 c4 10             	add    $0x10,%esp
+    2734:	85 c0                	test   %eax,%eax
+    2736:	74 4e                	je     2786 <fourteen+0xe6>
+  if(mkdir("123456789012345/12345678901234") == 0){
+    2738:	83 ec 0c             	sub    $0xc,%esp
+    273b:	68 e4 51 00 00       	push   $0x51e4
+    2740:	e8 a5 11 00 00       	call   38ea <mkdir>
+    2745:	83 c4 10             	add    $0x10,%esp
+    2748:	85 c0                	test   %eax,%eax
+    274a:	74 27                	je     2773 <fourteen+0xd3>
+  printf(1, "fourteen ok\n");
+    274c:	83 ec 08             	sub    $0x8,%esp
+    274f:	68 da 48 00 00       	push   $0x48da
+    2754:	6a 01                	push   $0x1
+    2756:	e8 75 12 00 00       	call   39d0 <printf>
+}
+    275b:	83 c4 10             	add    $0x10,%esp
+    275e:	c9                   	leave  
+    275f:	c3                   	ret    
+    printf(1, "mkdir 12345678901234 failed\n");
+    2760:	50                   	push   %eax
+    2761:	50                   	push   %eax
+    2762:	68 9f 48 00 00       	push   $0x489f
+    2767:	6a 01                	push   $0x1
+    2769:	e8 62 12 00 00       	call   39d0 <printf>
+    exit();
+    276e:	e8 0f 11 00 00       	call   3882 <exit>
+    printf(1, "mkdir 12345678901234/123456789012345 succeeded!\n");
+    2773:	50                   	push   %eax
+    2774:	50                   	push   %eax
+    2775:	68 04 52 00 00       	push   $0x5204
+    277a:	6a 01                	push   $0x1
+    277c:	e8 4f 12 00 00       	call   39d0 <printf>
+    exit();
+    2781:	e8 fc 10 00 00       	call   3882 <exit>
+    printf(1, "mkdir 12345678901234/12345678901234 succeeded!\n");
+    2786:	52                   	push   %edx
+    2787:	52                   	push   %edx
+    2788:	68 b4 51 00 00       	push   $0x51b4
+    278d:	6a 01                	push   $0x1
+    278f:	e8 3c 12 00 00       	call   39d0 <printf>
+    exit();
+    2794:	e8 e9 10 00 00       	call   3882 <exit>
+    printf(1, "open 12345678901234/12345678901234/12345678901234 failed\n");
+    2799:	51                   	push   %ecx
+    279a:	51                   	push   %ecx
+    279b:	68 78 51 00 00       	push   $0x5178
+    27a0:	6a 01                	push   $0x1
+    27a2:	e8 29 12 00 00       	call   39d0 <printf>
+    exit();
+    27a7:	e8 d6 10 00 00       	call   3882 <exit>
+    printf(1, "create 123456789012345/123456789012345/123456789012345 failed\n");
+    27ac:	51                   	push   %ecx
+    27ad:	51                   	push   %ecx
+    27ae:	68 08 51 00 00       	push   $0x5108
+    27b3:	6a 01                	push   $0x1
+    27b5:	e8 16 12 00 00       	call   39d0 <printf>
+    exit();
+    27ba:	e8 c3 10 00 00       	call   3882 <exit>
+    printf(1, "mkdir 12345678901234/123456789012345 failed\n");
+    27bf:	50                   	push   %eax
+    27c0:	50                   	push   %eax
+    27c1:	68 a8 50 00 00       	push   $0x50a8
+    27c6:	6a 01                	push   $0x1
+    27c8:	e8 03 12 00 00       	call   39d0 <printf>
+    exit();
+    27cd:	e8 b0 10 00 00       	call   3882 <exit>
+    27d2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    27d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000027e0 <rmdot>:
+{
+    27e0:	55                   	push   %ebp
+    27e1:	89 e5                	mov    %esp,%ebp
+    27e3:	83 ec 10             	sub    $0x10,%esp
+  printf(1, "rmdot test\n");
+    27e6:	68 e7 48 00 00       	push   $0x48e7
+    27eb:	6a 01                	push   $0x1
+    27ed:	e8 de 11 00 00       	call   39d0 <printf>
+  if(mkdir("dots") != 0){
+    27f2:	c7 04 24 f3 48 00 00 	movl   $0x48f3,(%esp)
+    27f9:	e8 ec 10 00 00       	call   38ea <mkdir>
+    27fe:	83 c4 10             	add    $0x10,%esp
+    2801:	85 c0                	test   %eax,%eax
+    2803:	0f 85 b0 00 00 00    	jne    28b9 <rmdot+0xd9>
+  if(chdir("dots") != 0){
+    2809:	83 ec 0c             	sub    $0xc,%esp
+    280c:	68 f3 48 00 00       	push   $0x48f3
+    2811:	e8 dc 10 00 00       	call   38f2 <chdir>
+    2816:	83 c4 10             	add    $0x10,%esp
+    2819:	85 c0                	test   %eax,%eax
+    281b:	0f 85 1d 01 00 00    	jne    293e <rmdot+0x15e>
+  if(unlink(".") == 0){
+    2821:	83 ec 0c             	sub    $0xc,%esp
+    2824:	68 9e 45 00 00       	push   $0x459e
+    2829:	e8 a4 10 00 00       	call   38d2 <unlink>
+    282e:	83 c4 10             	add    $0x10,%esp
+    2831:	85 c0                	test   %eax,%eax
+    2833:	0f 84 f2 00 00 00    	je     292b <rmdot+0x14b>
+  if(unlink("..") == 0){
+    2839:	83 ec 0c             	sub    $0xc,%esp
+    283c:	68 9d 45 00 00       	push   $0x459d
+    2841:	e8 8c 10 00 00       	call   38d2 <unlink>
+    2846:	83 c4 10             	add    $0x10,%esp
+    2849:	85 c0                	test   %eax,%eax
+    284b:	0f 84 c7 00 00 00    	je     2918 <rmdot+0x138>
+  if(chdir("/") != 0){
+    2851:	83 ec 0c             	sub    $0xc,%esp
+    2854:	68 71 3d 00 00       	push   $0x3d71
+    2859:	e8 94 10 00 00       	call   38f2 <chdir>
+    285e:	83 c4 10             	add    $0x10,%esp
+    2861:	85 c0                	test   %eax,%eax
+    2863:	0f 85 9c 00 00 00    	jne    2905 <rmdot+0x125>
+  if(unlink("dots/.") == 0){
+    2869:	83 ec 0c             	sub    $0xc,%esp
+    286c:	68 3b 49 00 00       	push   $0x493b
+    2871:	e8 5c 10 00 00       	call   38d2 <unlink>
+    2876:	83 c4 10             	add    $0x10,%esp
+    2879:	85 c0                	test   %eax,%eax
+    287b:	74 75                	je     28f2 <rmdot+0x112>
+  if(unlink("dots/..") == 0){
+    287d:	83 ec 0c             	sub    $0xc,%esp
+    2880:	68 59 49 00 00       	push   $0x4959
+    2885:	e8 48 10 00 00       	call   38d2 <unlink>
+    288a:	83 c4 10             	add    $0x10,%esp
+    288d:	85 c0                	test   %eax,%eax
+    288f:	74 4e                	je     28df <rmdot+0xff>
+  if(unlink("dots") != 0){
+    2891:	83 ec 0c             	sub    $0xc,%esp
+    2894:	68 f3 48 00 00       	push   $0x48f3
+    2899:	e8 34 10 00 00       	call   38d2 <unlink>
+    289e:	83 c4 10             	add    $0x10,%esp
+    28a1:	85 c0                	test   %eax,%eax
+    28a3:	75 27                	jne    28cc <rmdot+0xec>
+  printf(1, "rmdot ok\n");
+    28a5:	83 ec 08             	sub    $0x8,%esp
+    28a8:	68 8e 49 00 00       	push   $0x498e
+    28ad:	6a 01                	push   $0x1
+    28af:	e8 1c 11 00 00       	call   39d0 <printf>
+}
+    28b4:	83 c4 10             	add    $0x10,%esp
+    28b7:	c9                   	leave  
+    28b8:	c3                   	ret    
+    printf(1, "mkdir dots failed\n");
+    28b9:	50                   	push   %eax
+    28ba:	50                   	push   %eax
+    28bb:	68 f8 48 00 00       	push   $0x48f8
+    28c0:	6a 01                	push   $0x1
+    28c2:	e8 09 11 00 00       	call   39d0 <printf>
+    exit();
+    28c7:	e8 b6 0f 00 00       	call   3882 <exit>
+    printf(1, "unlink dots failed!\n");
+    28cc:	50                   	push   %eax
+    28cd:	50                   	push   %eax
+    28ce:	68 79 49 00 00       	push   $0x4979
+    28d3:	6a 01                	push   $0x1
+    28d5:	e8 f6 10 00 00       	call   39d0 <printf>
+    exit();
+    28da:	e8 a3 0f 00 00       	call   3882 <exit>
+    printf(1, "unlink dots/.. worked!\n");
+    28df:	52                   	push   %edx
+    28e0:	52                   	push   %edx
+    28e1:	68 61 49 00 00       	push   $0x4961
+    28e6:	6a 01                	push   $0x1
+    28e8:	e8 e3 10 00 00       	call   39d0 <printf>
+    exit();
+    28ed:	e8 90 0f 00 00       	call   3882 <exit>
+    printf(1, "unlink dots/. worked!\n");
+    28f2:	51                   	push   %ecx
+    28f3:	51                   	push   %ecx
+    28f4:	68 42 49 00 00       	push   $0x4942
+    28f9:	6a 01                	push   $0x1
+    28fb:	e8 d0 10 00 00       	call   39d0 <printf>
+    exit();
+    2900:	e8 7d 0f 00 00       	call   3882 <exit>
+    printf(1, "chdir / failed\n");
+    2905:	50                   	push   %eax
+    2906:	50                   	push   %eax
+    2907:	68 73 3d 00 00       	push   $0x3d73
+    290c:	6a 01                	push   $0x1
+    290e:	e8 bd 10 00 00       	call   39d0 <printf>
+    exit();
+    2913:	e8 6a 0f 00 00       	call   3882 <exit>
+    printf(1, "rm .. worked!\n");
+    2918:	50                   	push   %eax
+    2919:	50                   	push   %eax
+    291a:	68 2c 49 00 00       	push   $0x492c
+    291f:	6a 01                	push   $0x1
+    2921:	e8 aa 10 00 00       	call   39d0 <printf>
+    exit();
+    2926:	e8 57 0f 00 00       	call   3882 <exit>
+    printf(1, "rm . worked!\n");
+    292b:	50                   	push   %eax
+    292c:	50                   	push   %eax
+    292d:	68 1e 49 00 00       	push   $0x491e
+    2932:	6a 01                	push   $0x1
+    2934:	e8 97 10 00 00       	call   39d0 <printf>
+    exit();
+    2939:	e8 44 0f 00 00       	call   3882 <exit>
+    printf(1, "chdir dots failed\n");
+    293e:	50                   	push   %eax
+    293f:	50                   	push   %eax
+    2940:	68 0b 49 00 00       	push   $0x490b
+    2945:	6a 01                	push   $0x1
+    2947:	e8 84 10 00 00       	call   39d0 <printf>
+    exit();
+    294c:	e8 31 0f 00 00       	call   3882 <exit>
+    2951:	eb 0d                	jmp    2960 <dirfile>
+    2953:	90                   	nop
+    2954:	90                   	nop
+    2955:	90                   	nop
+    2956:	90                   	nop
+    2957:	90                   	nop
+    2958:	90                   	nop
+    2959:	90                   	nop
+    295a:	90                   	nop
+    295b:	90                   	nop
+    295c:	90                   	nop
+    295d:	90                   	nop
+    295e:	90                   	nop
+    295f:	90                   	nop
+
+00002960 <dirfile>:
+{
+    2960:	55                   	push   %ebp
+    2961:	89 e5                	mov    %esp,%ebp
+    2963:	53                   	push   %ebx
+    2964:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "dir vs file\n");
+    2967:	68 98 49 00 00       	push   $0x4998
+    296c:	6a 01                	push   $0x1
+    296e:	e8 5d 10 00 00       	call   39d0 <printf>
+  fd = open("dirfile", O_CREATE);
+    2973:	59                   	pop    %ecx
+    2974:	5b                   	pop    %ebx
+    2975:	68 00 02 00 00       	push   $0x200
+    297a:	68 a5 49 00 00       	push   $0x49a5
+    297f:	e8 3e 0f 00 00       	call   38c2 <open>
+  if(fd < 0){
+    2984:	83 c4 10             	add    $0x10,%esp
+    2987:	85 c0                	test   %eax,%eax
+    2989:	0f 88 43 01 00 00    	js     2ad2 <dirfile+0x172>
+  close(fd);
+    298f:	83 ec 0c             	sub    $0xc,%esp
+    2992:	50                   	push   %eax
+    2993:	e8 12 0f 00 00       	call   38aa <close>
+  if(chdir("dirfile") == 0){
+    2998:	c7 04 24 a5 49 00 00 	movl   $0x49a5,(%esp)
+    299f:	e8 4e 0f 00 00       	call   38f2 <chdir>
+    29a4:	83 c4 10             	add    $0x10,%esp
+    29a7:	85 c0                	test   %eax,%eax
+    29a9:	0f 84 10 01 00 00    	je     2abf <dirfile+0x15f>
+  fd = open("dirfile/xx", 0);
+    29af:	83 ec 08             	sub    $0x8,%esp
+    29b2:	6a 00                	push   $0x0
+    29b4:	68 de 49 00 00       	push   $0x49de
+    29b9:	e8 04 0f 00 00       	call   38c2 <open>
+  if(fd >= 0){
+    29be:	83 c4 10             	add    $0x10,%esp
+    29c1:	85 c0                	test   %eax,%eax
+    29c3:	0f 89 e3 00 00 00    	jns    2aac <dirfile+0x14c>
+  fd = open("dirfile/xx", O_CREATE);
+    29c9:	83 ec 08             	sub    $0x8,%esp
+    29cc:	68 00 02 00 00       	push   $0x200
+    29d1:	68 de 49 00 00       	push   $0x49de
+    29d6:	e8 e7 0e 00 00       	call   38c2 <open>
+  if(fd >= 0){
+    29db:	83 c4 10             	add    $0x10,%esp
+    29de:	85 c0                	test   %eax,%eax
+    29e0:	0f 89 c6 00 00 00    	jns    2aac <dirfile+0x14c>
+  if(mkdir("dirfile/xx") == 0){
+    29e6:	83 ec 0c             	sub    $0xc,%esp
+    29e9:	68 de 49 00 00       	push   $0x49de
+    29ee:	e8 f7 0e 00 00       	call   38ea <mkdir>
+    29f3:	83 c4 10             	add    $0x10,%esp
+    29f6:	85 c0                	test   %eax,%eax
+    29f8:	0f 84 46 01 00 00    	je     2b44 <dirfile+0x1e4>
+  if(unlink("dirfile/xx") == 0){
+    29fe:	83 ec 0c             	sub    $0xc,%esp
+    2a01:	68 de 49 00 00       	push   $0x49de
+    2a06:	e8 c7 0e 00 00       	call   38d2 <unlink>
+    2a0b:	83 c4 10             	add    $0x10,%esp
+    2a0e:	85 c0                	test   %eax,%eax
+    2a10:	0f 84 1b 01 00 00    	je     2b31 <dirfile+0x1d1>
+  if(link("README", "dirfile/xx") == 0){
+    2a16:	83 ec 08             	sub    $0x8,%esp
+    2a19:	68 de 49 00 00       	push   $0x49de
+    2a1e:	68 42 4a 00 00       	push   $0x4a42
+    2a23:	e8 ba 0e 00 00       	call   38e2 <link>
+    2a28:	83 c4 10             	add    $0x10,%esp
+    2a2b:	85 c0                	test   %eax,%eax
+    2a2d:	0f 84 eb 00 00 00    	je     2b1e <dirfile+0x1be>
+  if(unlink("dirfile") != 0){
+    2a33:	83 ec 0c             	sub    $0xc,%esp
+    2a36:	68 a5 49 00 00       	push   $0x49a5
+    2a3b:	e8 92 0e 00 00       	call   38d2 <unlink>
+    2a40:	83 c4 10             	add    $0x10,%esp
+    2a43:	85 c0                	test   %eax,%eax
+    2a45:	0f 85 c0 00 00 00    	jne    2b0b <dirfile+0x1ab>
+  fd = open(".", O_RDWR);
+    2a4b:	83 ec 08             	sub    $0x8,%esp
+    2a4e:	6a 02                	push   $0x2
+    2a50:	68 9e 45 00 00       	push   $0x459e
+    2a55:	e8 68 0e 00 00       	call   38c2 <open>
+  if(fd >= 0){
+    2a5a:	83 c4 10             	add    $0x10,%esp
+    2a5d:	85 c0                	test   %eax,%eax
+    2a5f:	0f 89 93 00 00 00    	jns    2af8 <dirfile+0x198>
+  fd = open(".", 0);
+    2a65:	83 ec 08             	sub    $0x8,%esp
+    2a68:	6a 00                	push   $0x0
+    2a6a:	68 9e 45 00 00       	push   $0x459e
+    2a6f:	e8 4e 0e 00 00       	call   38c2 <open>
+  if(write(fd, "x", 1) > 0){
+    2a74:	83 c4 0c             	add    $0xc,%esp
+  fd = open(".", 0);
+    2a77:	89 c3                	mov    %eax,%ebx
+  if(write(fd, "x", 1) > 0){
+    2a79:	6a 01                	push   $0x1
+    2a7b:	68 81 46 00 00       	push   $0x4681
+    2a80:	50                   	push   %eax
+    2a81:	e8 1c 0e 00 00       	call   38a2 <write>
+    2a86:	83 c4 10             	add    $0x10,%esp
+    2a89:	85 c0                	test   %eax,%eax
+    2a8b:	7f 58                	jg     2ae5 <dirfile+0x185>
+  close(fd);
+    2a8d:	83 ec 0c             	sub    $0xc,%esp
+    2a90:	53                   	push   %ebx
+    2a91:	e8 14 0e 00 00       	call   38aa <close>
+  printf(1, "dir vs file OK\n");
+    2a96:	58                   	pop    %eax
+    2a97:	5a                   	pop    %edx
+    2a98:	68 75 4a 00 00       	push   $0x4a75
+    2a9d:	6a 01                	push   $0x1
+    2a9f:	e8 2c 0f 00 00       	call   39d0 <printf>
+}
+    2aa4:	83 c4 10             	add    $0x10,%esp
+    2aa7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2aaa:	c9                   	leave  
+    2aab:	c3                   	ret    
+    printf(1, "create dirfile/xx succeeded!\n");
+    2aac:	50                   	push   %eax
+    2aad:	50                   	push   %eax
+    2aae:	68 e9 49 00 00       	push   $0x49e9
+    2ab3:	6a 01                	push   $0x1
+    2ab5:	e8 16 0f 00 00       	call   39d0 <printf>
+    exit();
+    2aba:	e8 c3 0d 00 00       	call   3882 <exit>
+    printf(1, "chdir dirfile succeeded!\n");
+    2abf:	50                   	push   %eax
+    2ac0:	50                   	push   %eax
+    2ac1:	68 c4 49 00 00       	push   $0x49c4
+    2ac6:	6a 01                	push   $0x1
+    2ac8:	e8 03 0f 00 00       	call   39d0 <printf>
+    exit();
+    2acd:	e8 b0 0d 00 00       	call   3882 <exit>
+    printf(1, "create dirfile failed\n");
+    2ad2:	52                   	push   %edx
+    2ad3:	52                   	push   %edx
+    2ad4:	68 ad 49 00 00       	push   $0x49ad
+    2ad9:	6a 01                	push   $0x1
+    2adb:	e8 f0 0e 00 00       	call   39d0 <printf>
+    exit();
+    2ae0:	e8 9d 0d 00 00       	call   3882 <exit>
+    printf(1, "write . succeeded!\n");
+    2ae5:	51                   	push   %ecx
+    2ae6:	51                   	push   %ecx
+    2ae7:	68 61 4a 00 00       	push   $0x4a61
+    2aec:	6a 01                	push   $0x1
+    2aee:	e8 dd 0e 00 00       	call   39d0 <printf>
+    exit();
+    2af3:	e8 8a 0d 00 00       	call   3882 <exit>
+    printf(1, "open . for writing succeeded!\n");
+    2af8:	53                   	push   %ebx
+    2af9:	53                   	push   %ebx
+    2afa:	68 58 52 00 00       	push   $0x5258
+    2aff:	6a 01                	push   $0x1
+    2b01:	e8 ca 0e 00 00       	call   39d0 <printf>
+    exit();
+    2b06:	e8 77 0d 00 00       	call   3882 <exit>
+    printf(1, "unlink dirfile failed!\n");
+    2b0b:	50                   	push   %eax
+    2b0c:	50                   	push   %eax
+    2b0d:	68 49 4a 00 00       	push   $0x4a49
+    2b12:	6a 01                	push   $0x1
+    2b14:	e8 b7 0e 00 00       	call   39d0 <printf>
+    exit();
+    2b19:	e8 64 0d 00 00       	call   3882 <exit>
+    printf(1, "link to dirfile/xx succeeded!\n");
+    2b1e:	50                   	push   %eax
+    2b1f:	50                   	push   %eax
+    2b20:	68 38 52 00 00       	push   $0x5238
+    2b25:	6a 01                	push   $0x1
+    2b27:	e8 a4 0e 00 00       	call   39d0 <printf>
+    exit();
+    2b2c:	e8 51 0d 00 00       	call   3882 <exit>
+    printf(1, "unlink dirfile/xx succeeded!\n");
+    2b31:	50                   	push   %eax
+    2b32:	50                   	push   %eax
+    2b33:	68 24 4a 00 00       	push   $0x4a24
+    2b38:	6a 01                	push   $0x1
+    2b3a:	e8 91 0e 00 00       	call   39d0 <printf>
+    exit();
+    2b3f:	e8 3e 0d 00 00       	call   3882 <exit>
+    printf(1, "mkdir dirfile/xx succeeded!\n");
+    2b44:	50                   	push   %eax
+    2b45:	50                   	push   %eax
+    2b46:	68 07 4a 00 00       	push   $0x4a07
+    2b4b:	6a 01                	push   $0x1
+    2b4d:	e8 7e 0e 00 00       	call   39d0 <printf>
+    exit();
+    2b52:	e8 2b 0d 00 00       	call   3882 <exit>
+    2b57:	89 f6                	mov    %esi,%esi
+    2b59:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00002b60 <iref>:
+{
+    2b60:	55                   	push   %ebp
+    2b61:	89 e5                	mov    %esp,%ebp
+    2b63:	53                   	push   %ebx
+  printf(1, "empty file name\n");
+    2b64:	bb 33 00 00 00       	mov    $0x33,%ebx
+{
+    2b69:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "empty file name\n");
+    2b6c:	68 85 4a 00 00       	push   $0x4a85
+    2b71:	6a 01                	push   $0x1
+    2b73:	e8 58 0e 00 00       	call   39d0 <printf>
+    2b78:	83 c4 10             	add    $0x10,%esp
+    2b7b:	90                   	nop
+    2b7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(mkdir("irefd") != 0){
+    2b80:	83 ec 0c             	sub    $0xc,%esp
+    2b83:	68 96 4a 00 00       	push   $0x4a96
+    2b88:	e8 5d 0d 00 00       	call   38ea <mkdir>
+    2b8d:	83 c4 10             	add    $0x10,%esp
+    2b90:	85 c0                	test   %eax,%eax
+    2b92:	0f 85 bb 00 00 00    	jne    2c53 <iref+0xf3>
+    if(chdir("irefd") != 0){
+    2b98:	83 ec 0c             	sub    $0xc,%esp
+    2b9b:	68 96 4a 00 00       	push   $0x4a96
+    2ba0:	e8 4d 0d 00 00       	call   38f2 <chdir>
+    2ba5:	83 c4 10             	add    $0x10,%esp
+    2ba8:	85 c0                	test   %eax,%eax
+    2baa:	0f 85 b7 00 00 00    	jne    2c67 <iref+0x107>
+    mkdir("");
+    2bb0:	83 ec 0c             	sub    $0xc,%esp
+    2bb3:	68 4b 41 00 00       	push   $0x414b
+    2bb8:	e8 2d 0d 00 00       	call   38ea <mkdir>
+    link("README", "");
+    2bbd:	59                   	pop    %ecx
+    2bbe:	58                   	pop    %eax
+    2bbf:	68 4b 41 00 00       	push   $0x414b
+    2bc4:	68 42 4a 00 00       	push   $0x4a42
+    2bc9:	e8 14 0d 00 00       	call   38e2 <link>
+    fd = open("", O_CREATE);
+    2bce:	58                   	pop    %eax
+    2bcf:	5a                   	pop    %edx
+    2bd0:	68 00 02 00 00       	push   $0x200
+    2bd5:	68 4b 41 00 00       	push   $0x414b
+    2bda:	e8 e3 0c 00 00       	call   38c2 <open>
+    if(fd >= 0)
+    2bdf:	83 c4 10             	add    $0x10,%esp
+    2be2:	85 c0                	test   %eax,%eax
+    2be4:	78 0c                	js     2bf2 <iref+0x92>
+      close(fd);
+    2be6:	83 ec 0c             	sub    $0xc,%esp
+    2be9:	50                   	push   %eax
+    2bea:	e8 bb 0c 00 00       	call   38aa <close>
+    2bef:	83 c4 10             	add    $0x10,%esp
+    fd = open("xx", O_CREATE);
+    2bf2:	83 ec 08             	sub    $0x8,%esp
+    2bf5:	68 00 02 00 00       	push   $0x200
+    2bfa:	68 80 46 00 00       	push   $0x4680
+    2bff:	e8 be 0c 00 00       	call   38c2 <open>
+    if(fd >= 0)
+    2c04:	83 c4 10             	add    $0x10,%esp
+    2c07:	85 c0                	test   %eax,%eax
+    2c09:	78 0c                	js     2c17 <iref+0xb7>
+      close(fd);
+    2c0b:	83 ec 0c             	sub    $0xc,%esp
+    2c0e:	50                   	push   %eax
+    2c0f:	e8 96 0c 00 00       	call   38aa <close>
+    2c14:	83 c4 10             	add    $0x10,%esp
+    unlink("xx");
+    2c17:	83 ec 0c             	sub    $0xc,%esp
+    2c1a:	68 80 46 00 00       	push   $0x4680
+    2c1f:	e8 ae 0c 00 00       	call   38d2 <unlink>
+  for(i = 0; i < 50 + 1; i++){
+    2c24:	83 c4 10             	add    $0x10,%esp
+    2c27:	83 eb 01             	sub    $0x1,%ebx
+    2c2a:	0f 85 50 ff ff ff    	jne    2b80 <iref+0x20>
+  chdir("/");
+    2c30:	83 ec 0c             	sub    $0xc,%esp
+    2c33:	68 71 3d 00 00       	push   $0x3d71
+    2c38:	e8 b5 0c 00 00       	call   38f2 <chdir>
+  printf(1, "empty file name OK\n");
+    2c3d:	58                   	pop    %eax
+    2c3e:	5a                   	pop    %edx
+    2c3f:	68 c4 4a 00 00       	push   $0x4ac4
+    2c44:	6a 01                	push   $0x1
+    2c46:	e8 85 0d 00 00       	call   39d0 <printf>
+}
+    2c4b:	83 c4 10             	add    $0x10,%esp
+    2c4e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2c51:	c9                   	leave  
+    2c52:	c3                   	ret    
+      printf(1, "mkdir irefd failed\n");
+    2c53:	83 ec 08             	sub    $0x8,%esp
+    2c56:	68 9c 4a 00 00       	push   $0x4a9c
+    2c5b:	6a 01                	push   $0x1
+    2c5d:	e8 6e 0d 00 00       	call   39d0 <printf>
+      exit();
+    2c62:	e8 1b 0c 00 00       	call   3882 <exit>
+      printf(1, "chdir irefd failed\n");
+    2c67:	83 ec 08             	sub    $0x8,%esp
+    2c6a:	68 b0 4a 00 00       	push   $0x4ab0
+    2c6f:	6a 01                	push   $0x1
+    2c71:	e8 5a 0d 00 00       	call   39d0 <printf>
+      exit();
+    2c76:	e8 07 0c 00 00       	call   3882 <exit>
+    2c7b:	90                   	nop
+    2c7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00002c80 <forktest>:
+{
+    2c80:	55                   	push   %ebp
+    2c81:	89 e5                	mov    %esp,%ebp
+    2c83:	53                   	push   %ebx
+  for(n=0; n<1000; n++){
+    2c84:	31 db                	xor    %ebx,%ebx
+{
+    2c86:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "fork test\n");
+    2c89:	68 d8 4a 00 00       	push   $0x4ad8
+    2c8e:	6a 01                	push   $0x1
+    2c90:	e8 3b 0d 00 00       	call   39d0 <printf>
+    2c95:	83 c4 10             	add    $0x10,%esp
+    2c98:	eb 13                	jmp    2cad <forktest+0x2d>
+    2c9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(pid == 0)
+    2ca0:	74 62                	je     2d04 <forktest+0x84>
+  for(n=0; n<1000; n++){
+    2ca2:	83 c3 01             	add    $0x1,%ebx
+    2ca5:	81 fb e8 03 00 00    	cmp    $0x3e8,%ebx
+    2cab:	74 43                	je     2cf0 <forktest+0x70>
+    pid = fork();
+    2cad:	e8 c8 0b 00 00       	call   387a <fork>
+    if(pid < 0)
+    2cb2:	85 c0                	test   %eax,%eax
+    2cb4:	79 ea                	jns    2ca0 <forktest+0x20>
+  for(; n > 0; n--){
+    2cb6:	85 db                	test   %ebx,%ebx
+    2cb8:	74 14                	je     2cce <forktest+0x4e>
+    2cba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(wait() < 0){
+    2cc0:	e8 c5 0b 00 00       	call   388a <wait>
+    2cc5:	85 c0                	test   %eax,%eax
+    2cc7:	78 40                	js     2d09 <forktest+0x89>
+  for(; n > 0; n--){
+    2cc9:	83 eb 01             	sub    $0x1,%ebx
+    2ccc:	75 f2                	jne    2cc0 <forktest+0x40>
+  if(wait() != -1){
+    2cce:	e8 b7 0b 00 00       	call   388a <wait>
+    2cd3:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2cd6:	75 45                	jne    2d1d <forktest+0x9d>
+  printf(1, "fork test OK\n");
+    2cd8:	83 ec 08             	sub    $0x8,%esp
+    2cdb:	68 0a 4b 00 00       	push   $0x4b0a
+    2ce0:	6a 01                	push   $0x1
+    2ce2:	e8 e9 0c 00 00       	call   39d0 <printf>
+}
+    2ce7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2cea:	c9                   	leave  
+    2ceb:	c3                   	ret    
+    2cec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    printf(1, "fork claimed to work 1000 times!\n");
+    2cf0:	83 ec 08             	sub    $0x8,%esp
+    2cf3:	68 78 52 00 00       	push   $0x5278
+    2cf8:	6a 01                	push   $0x1
+    2cfa:	e8 d1 0c 00 00       	call   39d0 <printf>
+    exit();
+    2cff:	e8 7e 0b 00 00       	call   3882 <exit>
+      exit();
+    2d04:	e8 79 0b 00 00       	call   3882 <exit>
+      printf(1, "wait stopped early\n");
+    2d09:	83 ec 08             	sub    $0x8,%esp
+    2d0c:	68 e3 4a 00 00       	push   $0x4ae3
+    2d11:	6a 01                	push   $0x1
+    2d13:	e8 b8 0c 00 00       	call   39d0 <printf>
+      exit();
+    2d18:	e8 65 0b 00 00       	call   3882 <exit>
+    printf(1, "wait got too many\n");
+    2d1d:	50                   	push   %eax
+    2d1e:	50                   	push   %eax
+    2d1f:	68 f7 4a 00 00       	push   $0x4af7
+    2d24:	6a 01                	push   $0x1
+    2d26:	e8 a5 0c 00 00       	call   39d0 <printf>
+    exit();
+    2d2b:	e8 52 0b 00 00       	call   3882 <exit>
+
+00002d30 <sbrktest>:
+{
+    2d30:	55                   	push   %ebp
+    2d31:	89 e5                	mov    %esp,%ebp
+    2d33:	57                   	push   %edi
+    2d34:	56                   	push   %esi
+    2d35:	53                   	push   %ebx
+  for(i = 0; i < 5000; i++){
+    2d36:	31 ff                	xor    %edi,%edi
+{
+    2d38:	83 ec 64             	sub    $0x64,%esp
+  printf(stdout, "sbrk test\n");
+    2d3b:	68 18 4b 00 00       	push   $0x4b18
+    2d40:	ff 35 a8 5d 00 00    	pushl  0x5da8
+    2d46:	e8 85 0c 00 00       	call   39d0 <printf>
+  oldbrk = sbrk(0);
+    2d4b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2d52:	e8 b3 0b 00 00       	call   390a <sbrk>
+  a = sbrk(0);
+    2d57:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  oldbrk = sbrk(0);
+    2d5e:	89 c3                	mov    %eax,%ebx
+  a = sbrk(0);
+    2d60:	e8 a5 0b 00 00       	call   390a <sbrk>
+    2d65:	83 c4 10             	add    $0x10,%esp
+    2d68:	89 c6                	mov    %eax,%esi
+    2d6a:	eb 06                	jmp    2d72 <sbrktest+0x42>
+    2d6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    a = b + 1;
+    2d70:	89 c6                	mov    %eax,%esi
+    b = sbrk(1);
+    2d72:	83 ec 0c             	sub    $0xc,%esp
+    2d75:	6a 01                	push   $0x1
+    2d77:	e8 8e 0b 00 00       	call   390a <sbrk>
+    if(b != a){
+    2d7c:	83 c4 10             	add    $0x10,%esp
+    2d7f:	39 f0                	cmp    %esi,%eax
+    2d81:	0f 85 52 02 00 00    	jne    2fd9 <sbrktest+0x2a9>
+  for(i = 0; i < 5000; i++){
+    2d87:	83 c7 01             	add    $0x1,%edi
+    *b = 1;
+    2d8a:	c6 06 01             	movb   $0x1,(%esi)
+    a = b + 1;
+    2d8d:	8d 46 01             	lea    0x1(%esi),%eax
+  for(i = 0; i < 5000; i++){
+    2d90:	81 ff 88 13 00 00    	cmp    $0x1388,%edi
+    2d96:	75 d8                	jne    2d70 <sbrktest+0x40>
+  pid = fork();
+    2d98:	e8 dd 0a 00 00       	call   387a <fork>
+  if(pid < 0){
+    2d9d:	85 c0                	test   %eax,%eax
+  pid = fork();
+    2d9f:	89 c7                	mov    %eax,%edi
+  if(pid < 0){
+    2da1:	0f 88 5b 03 00 00    	js     3102 <sbrktest+0x3d2>
+  c = sbrk(1);
+    2da7:	83 ec 0c             	sub    $0xc,%esp
+  if(c != a + 1){
+    2daa:	83 c6 02             	add    $0x2,%esi
+  c = sbrk(1);
+    2dad:	6a 01                	push   $0x1
+    2daf:	e8 56 0b 00 00       	call   390a <sbrk>
+  c = sbrk(1);
+    2db4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2dbb:	e8 4a 0b 00 00       	call   390a <sbrk>
+  if(c != a + 1){
+    2dc0:	83 c4 10             	add    $0x10,%esp
+    2dc3:	39 f0                	cmp    %esi,%eax
+    2dc5:	0f 85 20 03 00 00    	jne    30eb <sbrktest+0x3bb>
+  if(pid == 0)
+    2dcb:	85 ff                	test   %edi,%edi
+    2dcd:	0f 84 13 03 00 00    	je     30e6 <sbrktest+0x3b6>
+  wait();
+    2dd3:	e8 b2 0a 00 00       	call   388a <wait>
+  a = sbrk(0);
+    2dd8:	83 ec 0c             	sub    $0xc,%esp
+    2ddb:	6a 00                	push   $0x0
+    2ddd:	e8 28 0b 00 00       	call   390a <sbrk>
+    2de2:	89 c6                	mov    %eax,%esi
+  amt = (BIG) - (uint)a;
+    2de4:	b8 00 00 40 06       	mov    $0x6400000,%eax
+    2de9:	29 f0                	sub    %esi,%eax
+  p = sbrk(amt);
+    2deb:	89 04 24             	mov    %eax,(%esp)
+    2dee:	e8 17 0b 00 00       	call   390a <sbrk>
+  if (p != a) {
+    2df3:	83 c4 10             	add    $0x10,%esp
+    2df6:	39 c6                	cmp    %eax,%esi
+    2df8:	0f 85 d1 02 00 00    	jne    30cf <sbrktest+0x39f>
+  a = sbrk(0);
+    2dfe:	83 ec 0c             	sub    $0xc,%esp
+    2e01:	6a 00                	push   $0x0
+    2e03:	e8 02 0b 00 00       	call   390a <sbrk>
+  c = sbrk(-4096);
+    2e08:	c7 04 24 00 f0 ff ff 	movl   $0xfffff000,(%esp)
+  a = sbrk(0);
+    2e0f:	89 c6                	mov    %eax,%esi
+  c = sbrk(-4096);
+    2e11:	e8 f4 0a 00 00       	call   390a <sbrk>
+  if(c == (char*)0xffffffff){
+    2e16:	83 c4 10             	add    $0x10,%esp
+    2e19:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2e1c:	0f 84 96 02 00 00    	je     30b8 <sbrktest+0x388>
+  c = sbrk(0);
+    2e22:	83 ec 0c             	sub    $0xc,%esp
+    2e25:	6a 00                	push   $0x0
+    2e27:	e8 de 0a 00 00       	call   390a <sbrk>
+  if(c != a - 4096){
+    2e2c:	8d 96 00 f0 ff ff    	lea    -0x1000(%esi),%edx
+    2e32:	83 c4 10             	add    $0x10,%esp
+    2e35:	39 d0                	cmp    %edx,%eax
+    2e37:	0f 85 64 02 00 00    	jne    30a1 <sbrktest+0x371>
+  a = sbrk(0);
+    2e3d:	83 ec 0c             	sub    $0xc,%esp
+    2e40:	6a 00                	push   $0x0
+    2e42:	e8 c3 0a 00 00       	call   390a <sbrk>
+    2e47:	89 c6                	mov    %eax,%esi
+  c = sbrk(4096);
+    2e49:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
+    2e50:	e8 b5 0a 00 00       	call   390a <sbrk>
+  if(c != a || sbrk(0) != a + 4096){
+    2e55:	83 c4 10             	add    $0x10,%esp
+    2e58:	39 c6                	cmp    %eax,%esi
+  c = sbrk(4096);
+    2e5a:	89 c7                	mov    %eax,%edi
+  if(c != a || sbrk(0) != a + 4096){
+    2e5c:	0f 85 28 02 00 00    	jne    308a <sbrktest+0x35a>
+    2e62:	83 ec 0c             	sub    $0xc,%esp
+    2e65:	6a 00                	push   $0x0
+    2e67:	e8 9e 0a 00 00       	call   390a <sbrk>
+    2e6c:	8d 96 00 10 00 00    	lea    0x1000(%esi),%edx
+    2e72:	83 c4 10             	add    $0x10,%esp
+    2e75:	39 d0                	cmp    %edx,%eax
+    2e77:	0f 85 0d 02 00 00    	jne    308a <sbrktest+0x35a>
+  a = sbrk(0);
+    2e7d:	83 ec 0c             	sub    $0xc,%esp
+    2e80:	6a 00                	push   $0x0
+    2e82:	e8 83 0a 00 00       	call   390a <sbrk>
+  c = sbrk(-(sbrk(0) - oldbrk));
+    2e87:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  a = sbrk(0);
+    2e8e:	89 c6                	mov    %eax,%esi
+  c = sbrk(-(sbrk(0) - oldbrk));
+    2e90:	e8 75 0a 00 00       	call   390a <sbrk>
+    2e95:	89 d9                	mov    %ebx,%ecx
+    2e97:	29 c1                	sub    %eax,%ecx
+    2e99:	89 0c 24             	mov    %ecx,(%esp)
+    2e9c:	e8 69 0a 00 00       	call   390a <sbrk>
+  if(c != a){
+    2ea1:	83 c4 10             	add    $0x10,%esp
+    2ea4:	39 c6                	cmp    %eax,%esi
+    2ea6:	0f 85 c7 01 00 00    	jne    3073 <sbrktest+0x343>
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    2eac:	be 00 00 00 80       	mov    $0x80000000,%esi
+    ppid = getpid();
+    2eb1:	e8 4c 0a 00 00       	call   3902 <getpid>
+    2eb6:	89 c7                	mov    %eax,%edi
+    pid = fork();
+    2eb8:	e8 bd 09 00 00       	call   387a <fork>
+    if(pid < 0){
+    2ebd:	85 c0                	test   %eax,%eax
+    2ebf:	0f 88 97 01 00 00    	js     305c <sbrktest+0x32c>
+    if(pid == 0){
+    2ec5:	0f 84 6f 01 00 00    	je     303a <sbrktest+0x30a>
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    2ecb:	81 c6 50 c3 00 00    	add    $0xc350,%esi
+    wait();
+    2ed1:	e8 b4 09 00 00       	call   388a <wait>
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    2ed6:	81 fe 80 84 1e 80    	cmp    $0x801e8480,%esi
+    2edc:	75 d3                	jne    2eb1 <sbrktest+0x181>
+  if(pipe(fds) != 0){
+    2ede:	8d 45 b8             	lea    -0x48(%ebp),%eax
+    2ee1:	83 ec 0c             	sub    $0xc,%esp
+    2ee4:	50                   	push   %eax
+    2ee5:	e8 a8 09 00 00       	call   3892 <pipe>
+    2eea:	83 c4 10             	add    $0x10,%esp
+    2eed:	85 c0                	test   %eax,%eax
+    2eef:	0f 85 32 01 00 00    	jne    3027 <sbrktest+0x2f7>
+    2ef5:	8d 7d c0             	lea    -0x40(%ebp),%edi
+    2ef8:	89 fe                	mov    %edi,%esi
+    2efa:	eb 23                	jmp    2f1f <sbrktest+0x1ef>
+    if(pids[i] != -1)
+    2efc:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2eff:	74 14                	je     2f15 <sbrktest+0x1e5>
+      read(fds[0], &scratch, 1);
+    2f01:	8d 45 b7             	lea    -0x49(%ebp),%eax
+    2f04:	83 ec 04             	sub    $0x4,%esp
+    2f07:	6a 01                	push   $0x1
+    2f09:	50                   	push   %eax
+    2f0a:	ff 75 b8             	pushl  -0x48(%ebp)
+    2f0d:	e8 88 09 00 00       	call   389a <read>
+    2f12:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    2f15:	8d 45 e8             	lea    -0x18(%ebp),%eax
+    2f18:	83 c6 04             	add    $0x4,%esi
+    2f1b:	39 c6                	cmp    %eax,%esi
+    2f1d:	74 53                	je     2f72 <sbrktest+0x242>
+    if((pids[i] = fork()) == 0){
+    2f1f:	e8 56 09 00 00       	call   387a <fork>
+    2f24:	85 c0                	test   %eax,%eax
+    2f26:	89 06                	mov    %eax,(%esi)
+    2f28:	75 d2                	jne    2efc <sbrktest+0x1cc>
+      sbrk(BIG - (uint)sbrk(0));
+    2f2a:	83 ec 0c             	sub    $0xc,%esp
+    2f2d:	6a 00                	push   $0x0
+    2f2f:	e8 d6 09 00 00       	call   390a <sbrk>
+    2f34:	ba 00 00 40 06       	mov    $0x6400000,%edx
+    2f39:	29 c2                	sub    %eax,%edx
+    2f3b:	89 14 24             	mov    %edx,(%esp)
+    2f3e:	e8 c7 09 00 00       	call   390a <sbrk>
+      write(fds[1], "x", 1);
+    2f43:	83 c4 0c             	add    $0xc,%esp
+    2f46:	6a 01                	push   $0x1
+    2f48:	68 81 46 00 00       	push   $0x4681
+    2f4d:	ff 75 bc             	pushl  -0x44(%ebp)
+    2f50:	e8 4d 09 00 00       	call   38a2 <write>
+    2f55:	83 c4 10             	add    $0x10,%esp
+    2f58:	90                   	nop
+    2f59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      for(;;) sleep(1000);
+    2f60:	83 ec 0c             	sub    $0xc,%esp
+    2f63:	68 e8 03 00 00       	push   $0x3e8
+    2f68:	e8 a5 09 00 00       	call   3912 <sleep>
+    2f6d:	83 c4 10             	add    $0x10,%esp
+    2f70:	eb ee                	jmp    2f60 <sbrktest+0x230>
+  c = sbrk(4096);
+    2f72:	83 ec 0c             	sub    $0xc,%esp
+    2f75:	68 00 10 00 00       	push   $0x1000
+    2f7a:	e8 8b 09 00 00       	call   390a <sbrk>
+    2f7f:	83 c4 10             	add    $0x10,%esp
+    2f82:	89 45 a4             	mov    %eax,-0x5c(%ebp)
+    if(pids[i] == -1)
+    2f85:	8b 07                	mov    (%edi),%eax
+    2f87:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2f8a:	74 11                	je     2f9d <sbrktest+0x26d>
+    kill(pids[i]);
+    2f8c:	83 ec 0c             	sub    $0xc,%esp
+    2f8f:	50                   	push   %eax
+    2f90:	e8 1d 09 00 00       	call   38b2 <kill>
+    wait();
+    2f95:	e8 f0 08 00 00       	call   388a <wait>
+    2f9a:	83 c4 10             	add    $0x10,%esp
+    2f9d:	83 c7 04             	add    $0x4,%edi
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    2fa0:	39 fe                	cmp    %edi,%esi
+    2fa2:	75 e1                	jne    2f85 <sbrktest+0x255>
+  if(c == (char*)0xffffffff){
+    2fa4:	83 7d a4 ff          	cmpl   $0xffffffff,-0x5c(%ebp)
+    2fa8:	74 66                	je     3010 <sbrktest+0x2e0>
+  if(sbrk(0) > oldbrk)
+    2faa:	83 ec 0c             	sub    $0xc,%esp
+    2fad:	6a 00                	push   $0x0
+    2faf:	e8 56 09 00 00       	call   390a <sbrk>
+    2fb4:	83 c4 10             	add    $0x10,%esp
+    2fb7:	39 d8                	cmp    %ebx,%eax
+    2fb9:	77 3c                	ja     2ff7 <sbrktest+0x2c7>
+  printf(stdout, "sbrk test OK\n");
+    2fbb:	83 ec 08             	sub    $0x8,%esp
+    2fbe:	68 c0 4b 00 00       	push   $0x4bc0
+    2fc3:	ff 35 a8 5d 00 00    	pushl  0x5da8
+    2fc9:	e8 02 0a 00 00       	call   39d0 <printf>
+}
+    2fce:	83 c4 10             	add    $0x10,%esp
+    2fd1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    2fd4:	5b                   	pop    %ebx
+    2fd5:	5e                   	pop    %esi
+    2fd6:	5f                   	pop    %edi
+    2fd7:	5d                   	pop    %ebp
+    2fd8:	c3                   	ret    
+      printf(stdout, "sbrk test failed %d %x %x\n", i, a, b);
+    2fd9:	83 ec 0c             	sub    $0xc,%esp
+    2fdc:	50                   	push   %eax
+    2fdd:	56                   	push   %esi
+    2fde:	57                   	push   %edi
+    2fdf:	68 23 4b 00 00       	push   $0x4b23
+    2fe4:	ff 35 a8 5d 00 00    	pushl  0x5da8
+    2fea:	e8 e1 09 00 00       	call   39d0 <printf>
+      exit();
+    2fef:	83 c4 20             	add    $0x20,%esp
+    2ff2:	e8 8b 08 00 00       	call   3882 <exit>
+    sbrk(-(sbrk(0) - oldbrk));
+    2ff7:	83 ec 0c             	sub    $0xc,%esp
+    2ffa:	6a 00                	push   $0x0
+    2ffc:	e8 09 09 00 00       	call   390a <sbrk>
+    3001:	29 c3                	sub    %eax,%ebx
+    3003:	89 1c 24             	mov    %ebx,(%esp)
+    3006:	e8 ff 08 00 00       	call   390a <sbrk>
+    300b:	83 c4 10             	add    $0x10,%esp
+    300e:	eb ab                	jmp    2fbb <sbrktest+0x28b>
+    printf(stdout, "failed sbrk leaked memory\n");
+    3010:	50                   	push   %eax
+    3011:	50                   	push   %eax
+    3012:	68 a5 4b 00 00       	push   $0x4ba5
+    3017:	ff 35 a8 5d 00 00    	pushl  0x5da8
+    301d:	e8 ae 09 00 00       	call   39d0 <printf>
+    exit();
+    3022:	e8 5b 08 00 00       	call   3882 <exit>
+    printf(1, "pipe() failed\n");
+    3027:	52                   	push   %edx
+    3028:	52                   	push   %edx
+    3029:	68 61 40 00 00       	push   $0x4061
+    302e:	6a 01                	push   $0x1
+    3030:	e8 9b 09 00 00       	call   39d0 <printf>
+    exit();
+    3035:	e8 48 08 00 00       	call   3882 <exit>
+      printf(stdout, "oops could read %x = %x\n", a, *a);
+    303a:	0f be 06             	movsbl (%esi),%eax
+    303d:	50                   	push   %eax
+    303e:	56                   	push   %esi
+    303f:	68 8c 4b 00 00       	push   $0x4b8c
+    3044:	ff 35 a8 5d 00 00    	pushl  0x5da8
+    304a:	e8 81 09 00 00       	call   39d0 <printf>
+      kill(ppid);
+    304f:	89 3c 24             	mov    %edi,(%esp)
+    3052:	e8 5b 08 00 00       	call   38b2 <kill>
+      exit();
+    3057:	e8 26 08 00 00       	call   3882 <exit>
+      printf(stdout, "fork failed\n");
+    305c:	51                   	push   %ecx
+    305d:	51                   	push   %ecx
+    305e:	68 69 4c 00 00       	push   $0x4c69
+    3063:	ff 35 a8 5d 00 00    	pushl  0x5da8
+    3069:	e8 62 09 00 00       	call   39d0 <printf>
+      exit();
+    306e:	e8 0f 08 00 00       	call   3882 <exit>
+    printf(stdout, "sbrk downsize failed, a %x c %x\n", a, c);
+    3073:	50                   	push   %eax
+    3074:	56                   	push   %esi
+    3075:	68 3c 53 00 00       	push   $0x533c
+    307a:	ff 35 a8 5d 00 00    	pushl  0x5da8
+    3080:	e8 4b 09 00 00       	call   39d0 <printf>
+    exit();
+    3085:	e8 f8 07 00 00       	call   3882 <exit>
+    printf(stdout, "sbrk re-allocation failed, a %x c %x\n", a, c);
+    308a:	57                   	push   %edi
+    308b:	56                   	push   %esi
+    308c:	68 14 53 00 00       	push   $0x5314
+    3091:	ff 35 a8 5d 00 00    	pushl  0x5da8
+    3097:	e8 34 09 00 00       	call   39d0 <printf>
+    exit();
+    309c:	e8 e1 07 00 00       	call   3882 <exit>
+    printf(stdout, "sbrk deallocation produced wrong address, a %x c %x\n", a, c);
+    30a1:	50                   	push   %eax
+    30a2:	56                   	push   %esi
+    30a3:	68 dc 52 00 00       	push   $0x52dc
+    30a8:	ff 35 a8 5d 00 00    	pushl  0x5da8
+    30ae:	e8 1d 09 00 00       	call   39d0 <printf>
+    exit();
+    30b3:	e8 ca 07 00 00       	call   3882 <exit>
+    printf(stdout, "sbrk could not deallocate\n");
+    30b8:	53                   	push   %ebx
+    30b9:	53                   	push   %ebx
+    30ba:	68 71 4b 00 00       	push   $0x4b71
+    30bf:	ff 35 a8 5d 00 00    	pushl  0x5da8
+    30c5:	e8 06 09 00 00       	call   39d0 <printf>
+    exit();
+    30ca:	e8 b3 07 00 00       	call   3882 <exit>
+    printf(stdout, "sbrk test failed to grow big address space; enough phys mem?\n");
+    30cf:	56                   	push   %esi
+    30d0:	56                   	push   %esi
+    30d1:	68 9c 52 00 00       	push   $0x529c
+    30d6:	ff 35 a8 5d 00 00    	pushl  0x5da8
+    30dc:	e8 ef 08 00 00       	call   39d0 <printf>
+    exit();
+    30e1:	e8 9c 07 00 00       	call   3882 <exit>
+    exit();
+    30e6:	e8 97 07 00 00       	call   3882 <exit>
+    printf(stdout, "sbrk test failed post-fork\n");
+    30eb:	57                   	push   %edi
+    30ec:	57                   	push   %edi
+    30ed:	68 55 4b 00 00       	push   $0x4b55
+    30f2:	ff 35 a8 5d 00 00    	pushl  0x5da8
+    30f8:	e8 d3 08 00 00       	call   39d0 <printf>
+    exit();
+    30fd:	e8 80 07 00 00       	call   3882 <exit>
+    printf(stdout, "sbrk test fork failed\n");
+    3102:	50                   	push   %eax
+    3103:	50                   	push   %eax
+    3104:	68 3e 4b 00 00       	push   $0x4b3e
+    3109:	ff 35 a8 5d 00 00    	pushl  0x5da8
+    310f:	e8 bc 08 00 00       	call   39d0 <printf>
+    exit();
+    3114:	e8 69 07 00 00       	call   3882 <exit>
+    3119:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00003120 <validateint>:
+{
+    3120:	55                   	push   %ebp
+    3121:	89 e5                	mov    %esp,%ebp
+}
+    3123:	5d                   	pop    %ebp
+    3124:	c3                   	ret    
+    3125:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3129:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00003130 <validatetest>:
+{
+    3130:	55                   	push   %ebp
+    3131:	89 e5                	mov    %esp,%ebp
+    3133:	56                   	push   %esi
+    3134:	53                   	push   %ebx
+  for(p = 0; p <= (uint)hi; p += 4096){
+    3135:	31 db                	xor    %ebx,%ebx
+  printf(stdout, "validate test\n");
+    3137:	83 ec 08             	sub    $0x8,%esp
+    313a:	68 ce 4b 00 00       	push   $0x4bce
+    313f:	ff 35 a8 5d 00 00    	pushl  0x5da8
+    3145:	e8 86 08 00 00       	call   39d0 <printf>
+    314a:	83 c4 10             	add    $0x10,%esp
+    314d:	8d 76 00             	lea    0x0(%esi),%esi
+    if((pid = fork()) == 0){
+    3150:	e8 25 07 00 00       	call   387a <fork>
+    3155:	85 c0                	test   %eax,%eax
+    3157:	89 c6                	mov    %eax,%esi
+    3159:	74 63                	je     31be <validatetest+0x8e>
+    sleep(0);
+    315b:	83 ec 0c             	sub    $0xc,%esp
+    315e:	6a 00                	push   $0x0
+    3160:	e8 ad 07 00 00       	call   3912 <sleep>
+    sleep(0);
+    3165:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    316c:	e8 a1 07 00 00       	call   3912 <sleep>
+    kill(pid);
+    3171:	89 34 24             	mov    %esi,(%esp)
+    3174:	e8 39 07 00 00       	call   38b2 <kill>
+    wait();
+    3179:	e8 0c 07 00 00       	call   388a <wait>
+    if(link("nosuchfile", (char*)p) != -1){
+    317e:	58                   	pop    %eax
+    317f:	5a                   	pop    %edx
+    3180:	53                   	push   %ebx
+    3181:	68 dd 4b 00 00       	push   $0x4bdd
+    3186:	e8 57 07 00 00       	call   38e2 <link>
+    318b:	83 c4 10             	add    $0x10,%esp
+    318e:	83 f8 ff             	cmp    $0xffffffff,%eax
+    3191:	75 30                	jne    31c3 <validatetest+0x93>
+  for(p = 0; p <= (uint)hi; p += 4096){
+    3193:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+    3199:	81 fb 00 40 11 00    	cmp    $0x114000,%ebx
+    319f:	75 af                	jne    3150 <validatetest+0x20>
+  printf(stdout, "validate ok\n");
+    31a1:	83 ec 08             	sub    $0x8,%esp
+    31a4:	68 01 4c 00 00       	push   $0x4c01
+    31a9:	ff 35 a8 5d 00 00    	pushl  0x5da8
+    31af:	e8 1c 08 00 00       	call   39d0 <printf>
+}
+    31b4:	83 c4 10             	add    $0x10,%esp
+    31b7:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    31ba:	5b                   	pop    %ebx
+    31bb:	5e                   	pop    %esi
+    31bc:	5d                   	pop    %ebp
+    31bd:	c3                   	ret    
+      exit();
+    31be:	e8 bf 06 00 00       	call   3882 <exit>
+      printf(stdout, "link should not succeed\n");
+    31c3:	83 ec 08             	sub    $0x8,%esp
+    31c6:	68 e8 4b 00 00       	push   $0x4be8
+    31cb:	ff 35 a8 5d 00 00    	pushl  0x5da8
+    31d1:	e8 fa 07 00 00       	call   39d0 <printf>
+      exit();
+    31d6:	e8 a7 06 00 00       	call   3882 <exit>
+    31db:	90                   	nop
+    31dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000031e0 <bsstest>:
+{
+    31e0:	55                   	push   %ebp
+    31e1:	89 e5                	mov    %esp,%ebp
+    31e3:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "bss test\n");
+    31e6:	68 0e 4c 00 00       	push   $0x4c0e
+    31eb:	ff 35 a8 5d 00 00    	pushl  0x5da8
+    31f1:	e8 da 07 00 00       	call   39d0 <printf>
+    if(uninit[i] != '\0'){
+    31f6:	83 c4 10             	add    $0x10,%esp
+    31f9:	80 3d 60 5e 00 00 00 	cmpb   $0x0,0x5e60
+    3200:	75 39                	jne    323b <bsstest+0x5b>
+  for(i = 0; i < sizeof(uninit); i++){
+    3202:	b8 01 00 00 00       	mov    $0x1,%eax
+    3207:	89 f6                	mov    %esi,%esi
+    3209:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    if(uninit[i] != '\0'){
+    3210:	80 b8 60 5e 00 00 00 	cmpb   $0x0,0x5e60(%eax)
+    3217:	75 22                	jne    323b <bsstest+0x5b>
+  for(i = 0; i < sizeof(uninit); i++){
+    3219:	83 c0 01             	add    $0x1,%eax
+    321c:	3d 10 27 00 00       	cmp    $0x2710,%eax
+    3221:	75 ed                	jne    3210 <bsstest+0x30>
+  printf(stdout, "bss test ok\n");
+    3223:	83 ec 08             	sub    $0x8,%esp
+    3226:	68 29 4c 00 00       	push   $0x4c29
+    322b:	ff 35 a8 5d 00 00    	pushl  0x5da8
+    3231:	e8 9a 07 00 00       	call   39d0 <printf>
+}
+    3236:	83 c4 10             	add    $0x10,%esp
+    3239:	c9                   	leave  
+    323a:	c3                   	ret    
+      printf(stdout, "bss test failed\n");
+    323b:	83 ec 08             	sub    $0x8,%esp
+    323e:	68 18 4c 00 00       	push   $0x4c18
+    3243:	ff 35 a8 5d 00 00    	pushl  0x5da8
+    3249:	e8 82 07 00 00       	call   39d0 <printf>
+      exit();
+    324e:	e8 2f 06 00 00       	call   3882 <exit>
+    3253:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    3259:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00003260 <bigargtest>:
+{
+    3260:	55                   	push   %ebp
+    3261:	89 e5                	mov    %esp,%ebp
+    3263:	83 ec 14             	sub    $0x14,%esp
+  unlink("bigarg-ok");
+    3266:	68 36 4c 00 00       	push   $0x4c36
+    326b:	e8 62 06 00 00       	call   38d2 <unlink>
+  pid = fork();
+    3270:	e8 05 06 00 00       	call   387a <fork>
+  if(pid == 0){
+    3275:	83 c4 10             	add    $0x10,%esp
+    3278:	85 c0                	test   %eax,%eax
+    327a:	74 3f                	je     32bb <bigargtest+0x5b>
+  } else if(pid < 0){
+    327c:	0f 88 c2 00 00 00    	js     3344 <bigargtest+0xe4>
+  wait();
+    3282:	e8 03 06 00 00       	call   388a <wait>
+  fd = open("bigarg-ok", 0);
+    3287:	83 ec 08             	sub    $0x8,%esp
+    328a:	6a 00                	push   $0x0
+    328c:	68 36 4c 00 00       	push   $0x4c36
+    3291:	e8 2c 06 00 00       	call   38c2 <open>
+  if(fd < 0){
+    3296:	83 c4 10             	add    $0x10,%esp
+    3299:	85 c0                	test   %eax,%eax
+    329b:	0f 88 8c 00 00 00    	js     332d <bigargtest+0xcd>
+  close(fd);
+    32a1:	83 ec 0c             	sub    $0xc,%esp
+    32a4:	50                   	push   %eax
+    32a5:	e8 00 06 00 00       	call   38aa <close>
+  unlink("bigarg-ok");
+    32aa:	c7 04 24 36 4c 00 00 	movl   $0x4c36,(%esp)
+    32b1:	e8 1c 06 00 00       	call   38d2 <unlink>
+}
+    32b6:	83 c4 10             	add    $0x10,%esp
+    32b9:	c9                   	leave  
+    32ba:	c3                   	ret    
+    32bb:	b8 c0 5d 00 00       	mov    $0x5dc0,%eax
+      args[i] = "bigargs test: failed\n                                                                                                                                                                                                       ";
+    32c0:	c7 00 60 53 00 00    	movl   $0x5360,(%eax)
+    32c6:	83 c0 04             	add    $0x4,%eax
+    for(i = 0; i < MAXARG-1; i++)
+    32c9:	3d 3c 5e 00 00       	cmp    $0x5e3c,%eax
+    32ce:	75 f0                	jne    32c0 <bigargtest+0x60>
+    printf(stdout, "bigarg test\n");
+    32d0:	51                   	push   %ecx
+    32d1:	51                   	push   %ecx
+    32d2:	68 40 4c 00 00       	push   $0x4c40
+    32d7:	ff 35 a8 5d 00 00    	pushl  0x5da8
+    args[MAXARG-1] = 0;
+    32dd:	c7 05 3c 5e 00 00 00 	movl   $0x0,0x5e3c
+    32e4:	00 00 00 
+    printf(stdout, "bigarg test\n");
+    32e7:	e8 e4 06 00 00       	call   39d0 <printf>
+    exec("echo", args);
+    32ec:	58                   	pop    %eax
+    32ed:	5a                   	pop    %edx
+    32ee:	68 c0 5d 00 00       	push   $0x5dc0
+    32f3:	68 0d 3e 00 00       	push   $0x3e0d
+    32f8:	e8 bd 05 00 00       	call   38ba <exec>
+    printf(stdout, "bigarg test ok\n");
+    32fd:	59                   	pop    %ecx
+    32fe:	58                   	pop    %eax
+    32ff:	68 4d 4c 00 00       	push   $0x4c4d
+    3304:	ff 35 a8 5d 00 00    	pushl  0x5da8
+    330a:	e8 c1 06 00 00       	call   39d0 <printf>
+    fd = open("bigarg-ok", O_CREATE);
+    330f:	58                   	pop    %eax
+    3310:	5a                   	pop    %edx
+    3311:	68 00 02 00 00       	push   $0x200
+    3316:	68 36 4c 00 00       	push   $0x4c36
+    331b:	e8 a2 05 00 00       	call   38c2 <open>
+    close(fd);
+    3320:	89 04 24             	mov    %eax,(%esp)
+    3323:	e8 82 05 00 00       	call   38aa <close>
+    exit();
+    3328:	e8 55 05 00 00       	call   3882 <exit>
+    printf(stdout, "bigarg test failed!\n");
+    332d:	50                   	push   %eax
+    332e:	50                   	push   %eax
+    332f:	68 76 4c 00 00       	push   $0x4c76
+    3334:	ff 35 a8 5d 00 00    	pushl  0x5da8
+    333a:	e8 91 06 00 00       	call   39d0 <printf>
+    exit();
+    333f:	e8 3e 05 00 00       	call   3882 <exit>
+    printf(stdout, "bigargtest: fork failed\n");
+    3344:	52                   	push   %edx
+    3345:	52                   	push   %edx
+    3346:	68 5d 4c 00 00       	push   $0x4c5d
+    334b:	ff 35 a8 5d 00 00    	pushl  0x5da8
+    3351:	e8 7a 06 00 00       	call   39d0 <printf>
+    exit();
+    3356:	e8 27 05 00 00       	call   3882 <exit>
+    335b:	90                   	nop
+    335c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00003360 <fsfull>:
+{
+    3360:	55                   	push   %ebp
+    3361:	89 e5                	mov    %esp,%ebp
+    3363:	57                   	push   %edi
+    3364:	56                   	push   %esi
+    3365:	53                   	push   %ebx
+  for(nfiles = 0; ; nfiles++){
+    3366:	31 db                	xor    %ebx,%ebx
+{
+    3368:	83 ec 54             	sub    $0x54,%esp
+  printf(1, "fsfull test\n");
+    336b:	68 8b 4c 00 00       	push   $0x4c8b
+    3370:	6a 01                	push   $0x1
+    3372:	e8 59 06 00 00       	call   39d0 <printf>
+    3377:	83 c4 10             	add    $0x10,%esp
+    337a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    name[1] = '0' + nfiles / 1000;
+    3380:	b8 d3 4d 62 10       	mov    $0x10624dd3,%eax
+    name[3] = '0' + (nfiles % 100) / 10;
+    3385:	b9 cd cc cc cc       	mov    $0xcccccccd,%ecx
+    printf(1, "writing %s\n", name);
+    338a:	83 ec 04             	sub    $0x4,%esp
+    name[1] = '0' + nfiles / 1000;
+    338d:	f7 e3                	mul    %ebx
+    name[0] = 'f';
+    338f:	c6 45 a8 66          	movb   $0x66,-0x58(%ebp)
+    name[5] = '\0';
+    3393:	c6 45 ad 00          	movb   $0x0,-0x53(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    3397:	c1 ea 06             	shr    $0x6,%edx
+    339a:	8d 42 30             	lea    0x30(%edx),%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    339d:	69 d2 e8 03 00 00    	imul   $0x3e8,%edx,%edx
+    name[1] = '0' + nfiles / 1000;
+    33a3:	88 45 a9             	mov    %al,-0x57(%ebp)
+    name[2] = '0' + (nfiles % 1000) / 100;
+    33a6:	89 d8                	mov    %ebx,%eax
+    33a8:	29 d0                	sub    %edx,%eax
+    33aa:	89 c2                	mov    %eax,%edx
+    33ac:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
+    33b1:	f7 e2                	mul    %edx
+    name[3] = '0' + (nfiles % 100) / 10;
+    33b3:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    33b8:	c1 ea 05             	shr    $0x5,%edx
+    33bb:	83 c2 30             	add    $0x30,%edx
+    33be:	88 55 aa             	mov    %dl,-0x56(%ebp)
+    name[3] = '0' + (nfiles % 100) / 10;
+    33c1:	f7 e3                	mul    %ebx
+    33c3:	89 d8                	mov    %ebx,%eax
+    33c5:	c1 ea 05             	shr    $0x5,%edx
+    33c8:	6b d2 64             	imul   $0x64,%edx,%edx
+    33cb:	29 d0                	sub    %edx,%eax
+    33cd:	f7 e1                	mul    %ecx
+    name[4] = '0' + (nfiles % 10);
+    33cf:	89 d8                	mov    %ebx,%eax
+    name[3] = '0' + (nfiles % 100) / 10;
+    33d1:	c1 ea 03             	shr    $0x3,%edx
+    33d4:	83 c2 30             	add    $0x30,%edx
+    33d7:	88 55 ab             	mov    %dl,-0x55(%ebp)
+    name[4] = '0' + (nfiles % 10);
+    33da:	f7 e1                	mul    %ecx
+    33dc:	89 d9                	mov    %ebx,%ecx
+    33de:	c1 ea 03             	shr    $0x3,%edx
+    33e1:	8d 04 92             	lea    (%edx,%edx,4),%eax
+    33e4:	01 c0                	add    %eax,%eax
+    33e6:	29 c1                	sub    %eax,%ecx
+    33e8:	89 c8                	mov    %ecx,%eax
+    33ea:	83 c0 30             	add    $0x30,%eax
+    33ed:	88 45 ac             	mov    %al,-0x54(%ebp)
+    printf(1, "writing %s\n", name);
+    33f0:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    33f3:	50                   	push   %eax
+    33f4:	68 98 4c 00 00       	push   $0x4c98
+    33f9:	6a 01                	push   $0x1
+    33fb:	e8 d0 05 00 00       	call   39d0 <printf>
+    int fd = open(name, O_CREATE|O_RDWR);
+    3400:	58                   	pop    %eax
+    3401:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    3404:	5a                   	pop    %edx
+    3405:	68 02 02 00 00       	push   $0x202
+    340a:	50                   	push   %eax
+    340b:	e8 b2 04 00 00       	call   38c2 <open>
+    if(fd < 0){
+    3410:	83 c4 10             	add    $0x10,%esp
+    3413:	85 c0                	test   %eax,%eax
+    int fd = open(name, O_CREATE|O_RDWR);
+    3415:	89 c7                	mov    %eax,%edi
+    if(fd < 0){
+    3417:	78 57                	js     3470 <fsfull+0x110>
+    int total = 0;
+    3419:	31 f6                	xor    %esi,%esi
+    341b:	eb 05                	jmp    3422 <fsfull+0xc2>
+    341d:	8d 76 00             	lea    0x0(%esi),%esi
+      total += cc;
+    3420:	01 c6                	add    %eax,%esi
+      int cc = write(fd, buf, 512);
+    3422:	83 ec 04             	sub    $0x4,%esp
+    3425:	68 00 02 00 00       	push   $0x200
+    342a:	68 80 85 00 00       	push   $0x8580
+    342f:	57                   	push   %edi
+    3430:	e8 6d 04 00 00       	call   38a2 <write>
+      if(cc < 512)
+    3435:	83 c4 10             	add    $0x10,%esp
+    3438:	3d ff 01 00 00       	cmp    $0x1ff,%eax
+    343d:	7f e1                	jg     3420 <fsfull+0xc0>
+    printf(1, "wrote %d bytes\n", total);
+    343f:	83 ec 04             	sub    $0x4,%esp
+    3442:	56                   	push   %esi
+    3443:	68 b4 4c 00 00       	push   $0x4cb4
+    3448:	6a 01                	push   $0x1
+    344a:	e8 81 05 00 00       	call   39d0 <printf>
+    close(fd);
+    344f:	89 3c 24             	mov    %edi,(%esp)
+    3452:	e8 53 04 00 00       	call   38aa <close>
+    if(total == 0)
+    3457:	83 c4 10             	add    $0x10,%esp
+    345a:	85 f6                	test   %esi,%esi
+    345c:	74 28                	je     3486 <fsfull+0x126>
+  for(nfiles = 0; ; nfiles++){
+    345e:	83 c3 01             	add    $0x1,%ebx
+    3461:	e9 1a ff ff ff       	jmp    3380 <fsfull+0x20>
+    3466:	8d 76 00             	lea    0x0(%esi),%esi
+    3469:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+      printf(1, "open %s failed\n", name);
+    3470:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    3473:	83 ec 04             	sub    $0x4,%esp
+    3476:	50                   	push   %eax
+    3477:	68 a4 4c 00 00       	push   $0x4ca4
+    347c:	6a 01                	push   $0x1
+    347e:	e8 4d 05 00 00       	call   39d0 <printf>
+      break;
+    3483:	83 c4 10             	add    $0x10,%esp
+    name[1] = '0' + nfiles / 1000;
+    3486:	bf d3 4d 62 10       	mov    $0x10624dd3,%edi
+    name[2] = '0' + (nfiles % 1000) / 100;
+    348b:	be 1f 85 eb 51       	mov    $0x51eb851f,%esi
+    name[1] = '0' + nfiles / 1000;
+    3490:	89 d8                	mov    %ebx,%eax
+    name[3] = '0' + (nfiles % 100) / 10;
+    3492:	b9 cd cc cc cc       	mov    $0xcccccccd,%ecx
+    unlink(name);
+    3497:	83 ec 0c             	sub    $0xc,%esp
+    name[1] = '0' + nfiles / 1000;
+    349a:	f7 e7                	mul    %edi
+    name[0] = 'f';
+    349c:	c6 45 a8 66          	movb   $0x66,-0x58(%ebp)
+    name[5] = '\0';
+    34a0:	c6 45 ad 00          	movb   $0x0,-0x53(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    34a4:	c1 ea 06             	shr    $0x6,%edx
+    34a7:	8d 42 30             	lea    0x30(%edx),%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    34aa:	69 d2 e8 03 00 00    	imul   $0x3e8,%edx,%edx
+    name[1] = '0' + nfiles / 1000;
+    34b0:	88 45 a9             	mov    %al,-0x57(%ebp)
+    name[2] = '0' + (nfiles % 1000) / 100;
+    34b3:	89 d8                	mov    %ebx,%eax
+    34b5:	29 d0                	sub    %edx,%eax
+    34b7:	f7 e6                	mul    %esi
+    name[3] = '0' + (nfiles % 100) / 10;
+    34b9:	89 d8                	mov    %ebx,%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    34bb:	c1 ea 05             	shr    $0x5,%edx
+    34be:	83 c2 30             	add    $0x30,%edx
+    34c1:	88 55 aa             	mov    %dl,-0x56(%ebp)
+    name[3] = '0' + (nfiles % 100) / 10;
+    34c4:	f7 e6                	mul    %esi
+    34c6:	89 d8                	mov    %ebx,%eax
+    34c8:	c1 ea 05             	shr    $0x5,%edx
+    34cb:	6b d2 64             	imul   $0x64,%edx,%edx
+    34ce:	29 d0                	sub    %edx,%eax
+    34d0:	f7 e1                	mul    %ecx
+    name[4] = '0' + (nfiles % 10);
+    34d2:	89 d8                	mov    %ebx,%eax
+    name[3] = '0' + (nfiles % 100) / 10;
+    34d4:	c1 ea 03             	shr    $0x3,%edx
+    34d7:	83 c2 30             	add    $0x30,%edx
+    34da:	88 55 ab             	mov    %dl,-0x55(%ebp)
+    name[4] = '0' + (nfiles % 10);
+    34dd:	f7 e1                	mul    %ecx
+    34df:	89 d9                	mov    %ebx,%ecx
+    nfiles--;
+    34e1:	83 eb 01             	sub    $0x1,%ebx
+    name[4] = '0' + (nfiles % 10);
+    34e4:	c1 ea 03             	shr    $0x3,%edx
+    34e7:	8d 04 92             	lea    (%edx,%edx,4),%eax
+    34ea:	01 c0                	add    %eax,%eax
+    34ec:	29 c1                	sub    %eax,%ecx
+    34ee:	89 c8                	mov    %ecx,%eax
+    34f0:	83 c0 30             	add    $0x30,%eax
+    34f3:	88 45 ac             	mov    %al,-0x54(%ebp)
+    unlink(name);
+    34f6:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    34f9:	50                   	push   %eax
+    34fa:	e8 d3 03 00 00       	call   38d2 <unlink>
+  while(nfiles >= 0){
+    34ff:	83 c4 10             	add    $0x10,%esp
+    3502:	83 fb ff             	cmp    $0xffffffff,%ebx
+    3505:	75 89                	jne    3490 <fsfull+0x130>
+  printf(1, "fsfull test finished\n");
+    3507:	83 ec 08             	sub    $0x8,%esp
+    350a:	68 c4 4c 00 00       	push   $0x4cc4
+    350f:	6a 01                	push   $0x1
+    3511:	e8 ba 04 00 00       	call   39d0 <printf>
+}
+    3516:	83 c4 10             	add    $0x10,%esp
+    3519:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    351c:	5b                   	pop    %ebx
+    351d:	5e                   	pop    %esi
+    351e:	5f                   	pop    %edi
+    351f:	5d                   	pop    %ebp
+    3520:	c3                   	ret    
+    3521:	eb 0d                	jmp    3530 <uio>
+    3523:	90                   	nop
+    3524:	90                   	nop
+    3525:	90                   	nop
+    3526:	90                   	nop
+    3527:	90                   	nop
+    3528:	90                   	nop
+    3529:	90                   	nop
+    352a:	90                   	nop
+    352b:	90                   	nop
+    352c:	90                   	nop
+    352d:	90                   	nop
+    352e:	90                   	nop
+    352f:	90                   	nop
+
+00003530 <uio>:
+{
+    3530:	55                   	push   %ebp
+    3531:	89 e5                	mov    %esp,%ebp
+    3533:	83 ec 10             	sub    $0x10,%esp
+  printf(1, "uio test\n");
+    3536:	68 da 4c 00 00       	push   $0x4cda
+    353b:	6a 01                	push   $0x1
+    353d:	e8 8e 04 00 00       	call   39d0 <printf>
+  pid = fork();
+    3542:	e8 33 03 00 00       	call   387a <fork>
+  if(pid == 0){
+    3547:	83 c4 10             	add    $0x10,%esp
+    354a:	85 c0                	test   %eax,%eax
+    354c:	74 1b                	je     3569 <uio+0x39>
+  } else if(pid < 0){
+    354e:	78 3d                	js     358d <uio+0x5d>
+  wait();
+    3550:	e8 35 03 00 00       	call   388a <wait>
+  printf(1, "uio test done\n");
+    3555:	83 ec 08             	sub    $0x8,%esp
+    3558:	68 e4 4c 00 00       	push   $0x4ce4
+    355d:	6a 01                	push   $0x1
+    355f:	e8 6c 04 00 00       	call   39d0 <printf>
+}
+    3564:	83 c4 10             	add    $0x10,%esp
+    3567:	c9                   	leave  
+    3568:	c3                   	ret    
+    asm volatile("outb %0,%1"::"a"(val), "d" (port));
+    3569:	b8 09 00 00 00       	mov    $0x9,%eax
+    356e:	ba 70 00 00 00       	mov    $0x70,%edx
+    3573:	ee                   	out    %al,(%dx)
+    asm volatile("inb %1,%0" : "=a" (val) : "d" (port));
+    3574:	ba 71 00 00 00       	mov    $0x71,%edx
+    3579:	ec                   	in     (%dx),%al
+    printf(1, "uio: uio succeeded; test FAILED\n");
+    357a:	52                   	push   %edx
+    357b:	52                   	push   %edx
+    357c:	68 40 54 00 00       	push   $0x5440
+    3581:	6a 01                	push   $0x1
+    3583:	e8 48 04 00 00       	call   39d0 <printf>
+    exit();
+    3588:	e8 f5 02 00 00       	call   3882 <exit>
+    printf (1, "fork failed\n");
+    358d:	50                   	push   %eax
+    358e:	50                   	push   %eax
+    358f:	68 69 4c 00 00       	push   $0x4c69
+    3594:	6a 01                	push   $0x1
+    3596:	e8 35 04 00 00       	call   39d0 <printf>
+    exit();
+    359b:	e8 e2 02 00 00       	call   3882 <exit>
+
+000035a0 <argptest>:
+{
+    35a0:	55                   	push   %ebp
+    35a1:	89 e5                	mov    %esp,%ebp
+    35a3:	53                   	push   %ebx
+    35a4:	83 ec 0c             	sub    $0xc,%esp
+  fd = open("init", O_RDONLY);
+    35a7:	6a 00                	push   $0x0
+    35a9:	68 f3 4c 00 00       	push   $0x4cf3
+    35ae:	e8 0f 03 00 00       	call   38c2 <open>
+  if (fd < 0) {
+    35b3:	83 c4 10             	add    $0x10,%esp
+    35b6:	85 c0                	test   %eax,%eax
+    35b8:	78 39                	js     35f3 <argptest+0x53>
+  read(fd, sbrk(0) - 1, -1);
+    35ba:	83 ec 0c             	sub    $0xc,%esp
+    35bd:	89 c3                	mov    %eax,%ebx
+    35bf:	6a 00                	push   $0x0
+    35c1:	e8 44 03 00 00       	call   390a <sbrk>
+    35c6:	83 c4 0c             	add    $0xc,%esp
+    35c9:	83 e8 01             	sub    $0x1,%eax
+    35cc:	6a ff                	push   $0xffffffff
+    35ce:	50                   	push   %eax
+    35cf:	53                   	push   %ebx
+    35d0:	e8 c5 02 00 00       	call   389a <read>
+  close(fd);
+    35d5:	89 1c 24             	mov    %ebx,(%esp)
+    35d8:	e8 cd 02 00 00       	call   38aa <close>
+  printf(1, "arg test passed\n");
+    35dd:	58                   	pop    %eax
+    35de:	5a                   	pop    %edx
+    35df:	68 05 4d 00 00       	push   $0x4d05
+    35e4:	6a 01                	push   $0x1
+    35e6:	e8 e5 03 00 00       	call   39d0 <printf>
+}
+    35eb:	83 c4 10             	add    $0x10,%esp
+    35ee:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    35f1:	c9                   	leave  
+    35f2:	c3                   	ret    
+    printf(2, "open failed\n");
+    35f3:	51                   	push   %ecx
+    35f4:	51                   	push   %ecx
+    35f5:	68 f8 4c 00 00       	push   $0x4cf8
+    35fa:	6a 02                	push   $0x2
+    35fc:	e8 cf 03 00 00       	call   39d0 <printf>
+    exit();
+    3601:	e8 7c 02 00 00       	call   3882 <exit>
+    3606:	8d 76 00             	lea    0x0(%esi),%esi
+    3609:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00003610 <rand>:
+  randstate = randstate * 1664525 + 1013904223;
+    3610:	69 05 a4 5d 00 00 0d 	imul   $0x19660d,0x5da4,%eax
+    3617:	66 19 00 
+{
+    361a:	55                   	push   %ebp
+    361b:	89 e5                	mov    %esp,%ebp
+}
+    361d:	5d                   	pop    %ebp
+  randstate = randstate * 1664525 + 1013904223;
+    361e:	05 5f f3 6e 3c       	add    $0x3c6ef35f,%eax
+    3623:	a3 a4 5d 00 00       	mov    %eax,0x5da4
+}
+    3628:	c3                   	ret    
+    3629:	66 90                	xchg   %ax,%ax
+    362b:	66 90                	xchg   %ax,%ax
+    362d:	66 90                	xchg   %ax,%ax
+    362f:	90                   	nop
+
+00003630 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+    3630:	55                   	push   %ebp
+    3631:	89 e5                	mov    %esp,%ebp
+    3633:	53                   	push   %ebx
+    3634:	8b 45 08             	mov    0x8(%ebp),%eax
+    3637:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+    363a:	89 c2                	mov    %eax,%edx
+    363c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3640:	83 c1 01             	add    $0x1,%ecx
+    3643:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+    3647:	83 c2 01             	add    $0x1,%edx
+    364a:	84 db                	test   %bl,%bl
+    364c:	88 5a ff             	mov    %bl,-0x1(%edx)
+    364f:	75 ef                	jne    3640 <strcpy+0x10>
+    ;
+  return os;
+}
+    3651:	5b                   	pop    %ebx
+    3652:	5d                   	pop    %ebp
+    3653:	c3                   	ret    
+    3654:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    365a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00003660 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+    3660:	55                   	push   %ebp
+    3661:	89 e5                	mov    %esp,%ebp
+    3663:	53                   	push   %ebx
+    3664:	8b 55 08             	mov    0x8(%ebp),%edx
+    3667:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+    366a:	0f b6 02             	movzbl (%edx),%eax
+    366d:	0f b6 19             	movzbl (%ecx),%ebx
+    3670:	84 c0                	test   %al,%al
+    3672:	75 1c                	jne    3690 <strcmp+0x30>
+    3674:	eb 2a                	jmp    36a0 <strcmp+0x40>
+    3676:	8d 76 00             	lea    0x0(%esi),%esi
+    3679:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+    3680:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+    3683:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+    3686:	83 c1 01             	add    $0x1,%ecx
+    3689:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+    368c:	84 c0                	test   %al,%al
+    368e:	74 10                	je     36a0 <strcmp+0x40>
+    3690:	38 d8                	cmp    %bl,%al
+    3692:	74 ec                	je     3680 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+    3694:	29 d8                	sub    %ebx,%eax
+}
+    3696:	5b                   	pop    %ebx
+    3697:	5d                   	pop    %ebp
+    3698:	c3                   	ret    
+    3699:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    36a0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+    36a2:	29 d8                	sub    %ebx,%eax
+}
+    36a4:	5b                   	pop    %ebx
+    36a5:	5d                   	pop    %ebp
+    36a6:	c3                   	ret    
+    36a7:	89 f6                	mov    %esi,%esi
+    36a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000036b0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+    36b0:	55                   	push   %ebp
+    36b1:	89 e5                	mov    %esp,%ebp
+    36b3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+    36b6:	80 39 00             	cmpb   $0x0,(%ecx)
+    36b9:	74 15                	je     36d0 <strlen+0x20>
+    36bb:	31 d2                	xor    %edx,%edx
+    36bd:	8d 76 00             	lea    0x0(%esi),%esi
+    36c0:	83 c2 01             	add    $0x1,%edx
+    36c3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+    36c7:	89 d0                	mov    %edx,%eax
+    36c9:	75 f5                	jne    36c0 <strlen+0x10>
+    ;
+  return n;
+}
+    36cb:	5d                   	pop    %ebp
+    36cc:	c3                   	ret    
+    36cd:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+    36d0:	31 c0                	xor    %eax,%eax
+}
+    36d2:	5d                   	pop    %ebp
+    36d3:	c3                   	ret    
+    36d4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    36da:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000036e0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+    36e0:	55                   	push   %ebp
+    36e1:	89 e5                	mov    %esp,%ebp
+    36e3:	57                   	push   %edi
+    36e4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+    36e7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+    36ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+    36ed:	89 d7                	mov    %edx,%edi
+    36ef:	fc                   	cld    
+    36f0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+    36f2:	89 d0                	mov    %edx,%eax
+    36f4:	5f                   	pop    %edi
+    36f5:	5d                   	pop    %ebp
+    36f6:	c3                   	ret    
+    36f7:	89 f6                	mov    %esi,%esi
+    36f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00003700 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+    3700:	55                   	push   %ebp
+    3701:	89 e5                	mov    %esp,%ebp
+    3703:	53                   	push   %ebx
+    3704:	8b 45 08             	mov    0x8(%ebp),%eax
+    3707:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+    370a:	0f b6 10             	movzbl (%eax),%edx
+    370d:	84 d2                	test   %dl,%dl
+    370f:	74 1d                	je     372e <strchr+0x2e>
+    if(*s == c)
+    3711:	38 d3                	cmp    %dl,%bl
+    3713:	89 d9                	mov    %ebx,%ecx
+    3715:	75 0d                	jne    3724 <strchr+0x24>
+    3717:	eb 17                	jmp    3730 <strchr+0x30>
+    3719:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3720:	38 ca                	cmp    %cl,%dl
+    3722:	74 0c                	je     3730 <strchr+0x30>
+  for(; *s; s++)
+    3724:	83 c0 01             	add    $0x1,%eax
+    3727:	0f b6 10             	movzbl (%eax),%edx
+    372a:	84 d2                	test   %dl,%dl
+    372c:	75 f2                	jne    3720 <strchr+0x20>
+      return (char*)s;
+  return 0;
+    372e:	31 c0                	xor    %eax,%eax
+}
+    3730:	5b                   	pop    %ebx
+    3731:	5d                   	pop    %ebp
+    3732:	c3                   	ret    
+    3733:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    3739:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00003740 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+    3740:	55                   	push   %ebp
+    3741:	89 e5                	mov    %esp,%ebp
+    3743:	57                   	push   %edi
+    3744:	56                   	push   %esi
+    3745:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    3746:	31 f6                	xor    %esi,%esi
+    3748:	89 f3                	mov    %esi,%ebx
+{
+    374a:	83 ec 1c             	sub    $0x1c,%esp
+    374d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+    3750:	eb 2f                	jmp    3781 <gets+0x41>
+    3752:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+    3758:	8d 45 e7             	lea    -0x19(%ebp),%eax
+    375b:	83 ec 04             	sub    $0x4,%esp
+    375e:	6a 01                	push   $0x1
+    3760:	50                   	push   %eax
+    3761:	6a 00                	push   $0x0
+    3763:	e8 32 01 00 00       	call   389a <read>
+    if(cc < 1)
+    3768:	83 c4 10             	add    $0x10,%esp
+    376b:	85 c0                	test   %eax,%eax
+    376d:	7e 1c                	jle    378b <gets+0x4b>
+      break;
+    buf[i++] = c;
+    376f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+    3773:	83 c7 01             	add    $0x1,%edi
+    3776:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+    3779:	3c 0a                	cmp    $0xa,%al
+    377b:	74 23                	je     37a0 <gets+0x60>
+    377d:	3c 0d                	cmp    $0xd,%al
+    377f:	74 1f                	je     37a0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+    3781:	83 c3 01             	add    $0x1,%ebx
+    3784:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+    3787:	89 fe                	mov    %edi,%esi
+    3789:	7c cd                	jl     3758 <gets+0x18>
+    378b:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+    378d:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+    3790:	c6 03 00             	movb   $0x0,(%ebx)
+}
+    3793:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    3796:	5b                   	pop    %ebx
+    3797:	5e                   	pop    %esi
+    3798:	5f                   	pop    %edi
+    3799:	5d                   	pop    %ebp
+    379a:	c3                   	ret    
+    379b:	90                   	nop
+    379c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    37a0:	8b 75 08             	mov    0x8(%ebp),%esi
+    37a3:	8b 45 08             	mov    0x8(%ebp),%eax
+    37a6:	01 de                	add    %ebx,%esi
+    37a8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+    37aa:	c6 03 00             	movb   $0x0,(%ebx)
+}
+    37ad:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    37b0:	5b                   	pop    %ebx
+    37b1:	5e                   	pop    %esi
+    37b2:	5f                   	pop    %edi
+    37b3:	5d                   	pop    %ebp
+    37b4:	c3                   	ret    
+    37b5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    37b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000037c0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+    37c0:	55                   	push   %ebp
+    37c1:	89 e5                	mov    %esp,%ebp
+    37c3:	56                   	push   %esi
+    37c4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+    37c5:	83 ec 08             	sub    $0x8,%esp
+    37c8:	6a 00                	push   $0x0
+    37ca:	ff 75 08             	pushl  0x8(%ebp)
+    37cd:	e8 f0 00 00 00       	call   38c2 <open>
+  if(fd < 0)
+    37d2:	83 c4 10             	add    $0x10,%esp
+    37d5:	85 c0                	test   %eax,%eax
+    37d7:	78 27                	js     3800 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+    37d9:	83 ec 08             	sub    $0x8,%esp
+    37dc:	ff 75 0c             	pushl  0xc(%ebp)
+    37df:	89 c3                	mov    %eax,%ebx
+    37e1:	50                   	push   %eax
+    37e2:	e8 f3 00 00 00       	call   38da <fstat>
+  close(fd);
+    37e7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+    37ea:	89 c6                	mov    %eax,%esi
+  close(fd);
+    37ec:	e8 b9 00 00 00       	call   38aa <close>
+  return r;
+    37f1:	83 c4 10             	add    $0x10,%esp
+}
+    37f4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    37f7:	89 f0                	mov    %esi,%eax
+    37f9:	5b                   	pop    %ebx
+    37fa:	5e                   	pop    %esi
+    37fb:	5d                   	pop    %ebp
+    37fc:	c3                   	ret    
+    37fd:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+    3800:	be ff ff ff ff       	mov    $0xffffffff,%esi
+    3805:	eb ed                	jmp    37f4 <stat+0x34>
+    3807:	89 f6                	mov    %esi,%esi
+    3809:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00003810 <atoi>:
+
+int
+atoi(const char *s)
+{
+    3810:	55                   	push   %ebp
+    3811:	89 e5                	mov    %esp,%ebp
+    3813:	53                   	push   %ebx
+    3814:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+    3817:	0f be 11             	movsbl (%ecx),%edx
+    381a:	8d 42 d0             	lea    -0x30(%edx),%eax
+    381d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+    381f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+    3824:	77 1f                	ja     3845 <atoi+0x35>
+    3826:	8d 76 00             	lea    0x0(%esi),%esi
+    3829:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+    3830:	8d 04 80             	lea    (%eax,%eax,4),%eax
+    3833:	83 c1 01             	add    $0x1,%ecx
+    3836:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+    383a:	0f be 11             	movsbl (%ecx),%edx
+    383d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+    3840:	80 fb 09             	cmp    $0x9,%bl
+    3843:	76 eb                	jbe    3830 <atoi+0x20>
+  return n;
+}
+    3845:	5b                   	pop    %ebx
+    3846:	5d                   	pop    %ebp
+    3847:	c3                   	ret    
+    3848:	90                   	nop
+    3849:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00003850 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+    3850:	55                   	push   %ebp
+    3851:	89 e5                	mov    %esp,%ebp
+    3853:	56                   	push   %esi
+    3854:	53                   	push   %ebx
+    3855:	8b 5d 10             	mov    0x10(%ebp),%ebx
+    3858:	8b 45 08             	mov    0x8(%ebp),%eax
+    385b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+    385e:	85 db                	test   %ebx,%ebx
+    3860:	7e 14                	jle    3876 <memmove+0x26>
+    3862:	31 d2                	xor    %edx,%edx
+    3864:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+    3868:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+    386c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+    386f:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+    3872:	39 d3                	cmp    %edx,%ebx
+    3874:	75 f2                	jne    3868 <memmove+0x18>
+  return vdst;
+}
+    3876:	5b                   	pop    %ebx
+    3877:	5e                   	pop    %esi
+    3878:	5d                   	pop    %ebp
+    3879:	c3                   	ret    
+
+0000387a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+    387a:	b8 01 00 00 00       	mov    $0x1,%eax
+    387f:	cd 40                	int    $0x40
+    3881:	c3                   	ret    
+
+00003882 <exit>:
+SYSCALL(exit)
+    3882:	b8 02 00 00 00       	mov    $0x2,%eax
+    3887:	cd 40                	int    $0x40
+    3889:	c3                   	ret    
+
+0000388a <wait>:
+SYSCALL(wait)
+    388a:	b8 03 00 00 00       	mov    $0x3,%eax
+    388f:	cd 40                	int    $0x40
+    3891:	c3                   	ret    
+
+00003892 <pipe>:
+SYSCALL(pipe)
+    3892:	b8 04 00 00 00       	mov    $0x4,%eax
+    3897:	cd 40                	int    $0x40
+    3899:	c3                   	ret    
+
+0000389a <read>:
+SYSCALL(read)
+    389a:	b8 05 00 00 00       	mov    $0x5,%eax
+    389f:	cd 40                	int    $0x40
+    38a1:	c3                   	ret    
+
+000038a2 <write>:
+SYSCALL(write)
+    38a2:	b8 10 00 00 00       	mov    $0x10,%eax
+    38a7:	cd 40                	int    $0x40
+    38a9:	c3                   	ret    
+
+000038aa <close>:
+SYSCALL(close)
+    38aa:	b8 15 00 00 00       	mov    $0x15,%eax
+    38af:	cd 40                	int    $0x40
+    38b1:	c3                   	ret    
+
+000038b2 <kill>:
+SYSCALL(kill)
+    38b2:	b8 06 00 00 00       	mov    $0x6,%eax
+    38b7:	cd 40                	int    $0x40
+    38b9:	c3                   	ret    
+
+000038ba <exec>:
+SYSCALL(exec)
+    38ba:	b8 07 00 00 00       	mov    $0x7,%eax
+    38bf:	cd 40                	int    $0x40
+    38c1:	c3                   	ret    
+
+000038c2 <open>:
+SYSCALL(open)
+    38c2:	b8 0f 00 00 00       	mov    $0xf,%eax
+    38c7:	cd 40                	int    $0x40
+    38c9:	c3                   	ret    
+
+000038ca <mknod>:
+SYSCALL(mknod)
+    38ca:	b8 11 00 00 00       	mov    $0x11,%eax
+    38cf:	cd 40                	int    $0x40
+    38d1:	c3                   	ret    
+
+000038d2 <unlink>:
+SYSCALL(unlink)
+    38d2:	b8 12 00 00 00       	mov    $0x12,%eax
+    38d7:	cd 40                	int    $0x40
+    38d9:	c3                   	ret    
+
+000038da <fstat>:
+SYSCALL(fstat)
+    38da:	b8 08 00 00 00       	mov    $0x8,%eax
+    38df:	cd 40                	int    $0x40
+    38e1:	c3                   	ret    
+
+000038e2 <link>:
+SYSCALL(link)
+    38e2:	b8 13 00 00 00       	mov    $0x13,%eax
+    38e7:	cd 40                	int    $0x40
+    38e9:	c3                   	ret    
+
+000038ea <mkdir>:
+SYSCALL(mkdir)
+    38ea:	b8 14 00 00 00       	mov    $0x14,%eax
+    38ef:	cd 40                	int    $0x40
+    38f1:	c3                   	ret    
+
+000038f2 <chdir>:
+SYSCALL(chdir)
+    38f2:	b8 09 00 00 00       	mov    $0x9,%eax
+    38f7:	cd 40                	int    $0x40
+    38f9:	c3                   	ret    
+
+000038fa <dup>:
+SYSCALL(dup)
+    38fa:	b8 0a 00 00 00       	mov    $0xa,%eax
+    38ff:	cd 40                	int    $0x40
+    3901:	c3                   	ret    
+
+00003902 <getpid>:
+SYSCALL(getpid)
+    3902:	b8 0b 00 00 00       	mov    $0xb,%eax
+    3907:	cd 40                	int    $0x40
+    3909:	c3                   	ret    
+
+0000390a <sbrk>:
+SYSCALL(sbrk)
+    390a:	b8 0c 00 00 00       	mov    $0xc,%eax
+    390f:	cd 40                	int    $0x40
+    3911:	c3                   	ret    
+
+00003912 <sleep>:
+SYSCALL(sleep)
+    3912:	b8 0d 00 00 00       	mov    $0xd,%eax
+    3917:	cd 40                	int    $0x40
+    3919:	c3                   	ret    
+
+0000391a <uptime>:
+SYSCALL(uptime)
+    391a:	b8 0e 00 00 00       	mov    $0xe,%eax
+    391f:	cd 40                	int    $0x40
+    3921:	c3                   	ret    
+
+00003922 <draw>:
+SYSCALL(draw)
+    3922:	b8 16 00 00 00       	mov    $0x16,%eax
+    3927:	cd 40                	int    $0x40
+    3929:	c3                   	ret    
+    392a:	66 90                	xchg   %ax,%ax
+    392c:	66 90                	xchg   %ax,%ax
+    392e:	66 90                	xchg   %ax,%ax
+
+00003930 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+    3930:	55                   	push   %ebp
+    3931:	89 e5                	mov    %esp,%ebp
+    3933:	57                   	push   %edi
+    3934:	56                   	push   %esi
+    3935:	53                   	push   %ebx
+    3936:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    3939:	85 d2                	test   %edx,%edx
+{
+    393b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+    393e:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+    3940:	79 76                	jns    39b8 <printint+0x88>
+    3942:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+    3946:	74 70                	je     39b8 <printint+0x88>
+    x = -xx;
+    3948:	f7 d8                	neg    %eax
+    neg = 1;
+    394a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+    3951:	31 f6                	xor    %esi,%esi
+    3953:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+    3956:	eb 0a                	jmp    3962 <printint+0x32>
+    3958:	90                   	nop
+    3959:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+    3960:	89 fe                	mov    %edi,%esi
+    3962:	31 d2                	xor    %edx,%edx
+    3964:	8d 7e 01             	lea    0x1(%esi),%edi
+    3967:	f7 f1                	div    %ecx
+    3969:	0f b6 92 98 54 00 00 	movzbl 0x5498(%edx),%edx
+  }while((x /= base) != 0);
+    3970:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+    3972:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+    3975:	75 e9                	jne    3960 <printint+0x30>
+  if(neg)
+    3977:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+    397a:	85 c0                	test   %eax,%eax
+    397c:	74 08                	je     3986 <printint+0x56>
+    buf[i++] = '-';
+    397e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+    3983:	8d 7e 02             	lea    0x2(%esi),%edi
+    3986:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+    398a:	8b 7d c0             	mov    -0x40(%ebp),%edi
+    398d:	8d 76 00             	lea    0x0(%esi),%esi
+    3990:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+    3993:	83 ec 04             	sub    $0x4,%esp
+    3996:	83 ee 01             	sub    $0x1,%esi
+    3999:	6a 01                	push   $0x1
+    399b:	53                   	push   %ebx
+    399c:	57                   	push   %edi
+    399d:	88 45 d7             	mov    %al,-0x29(%ebp)
+    39a0:	e8 fd fe ff ff       	call   38a2 <write>
+
+  while(--i >= 0)
+    39a5:	83 c4 10             	add    $0x10,%esp
+    39a8:	39 de                	cmp    %ebx,%esi
+    39aa:	75 e4                	jne    3990 <printint+0x60>
+    putc(fd, buf[i]);
+}
+    39ac:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    39af:	5b                   	pop    %ebx
+    39b0:	5e                   	pop    %esi
+    39b1:	5f                   	pop    %edi
+    39b2:	5d                   	pop    %ebp
+    39b3:	c3                   	ret    
+    39b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+    39b8:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+    39bf:	eb 90                	jmp    3951 <printint+0x21>
+    39c1:	eb 0d                	jmp    39d0 <printf>
+    39c3:	90                   	nop
+    39c4:	90                   	nop
+    39c5:	90                   	nop
+    39c6:	90                   	nop
+    39c7:	90                   	nop
+    39c8:	90                   	nop
+    39c9:	90                   	nop
+    39ca:	90                   	nop
+    39cb:	90                   	nop
+    39cc:	90                   	nop
+    39cd:	90                   	nop
+    39ce:	90                   	nop
+    39cf:	90                   	nop
+
+000039d0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+    39d0:	55                   	push   %ebp
+    39d1:	89 e5                	mov    %esp,%ebp
+    39d3:	57                   	push   %edi
+    39d4:	56                   	push   %esi
+    39d5:	53                   	push   %ebx
+    39d6:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    39d9:	8b 75 0c             	mov    0xc(%ebp),%esi
+    39dc:	0f b6 1e             	movzbl (%esi),%ebx
+    39df:	84 db                	test   %bl,%bl
+    39e1:	0f 84 b3 00 00 00    	je     3a9a <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+    39e7:	8d 45 10             	lea    0x10(%ebp),%eax
+    39ea:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+    39ed:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+    39ef:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    39f2:	eb 2f                	jmp    3a23 <printf+0x53>
+    39f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+    39f8:	83 f8 25             	cmp    $0x25,%eax
+    39fb:	0f 84 a7 00 00 00    	je     3aa8 <printf+0xd8>
+  write(fd, &c, 1);
+    3a01:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+    3a04:	83 ec 04             	sub    $0x4,%esp
+    3a07:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+    3a0a:	6a 01                	push   $0x1
+    3a0c:	50                   	push   %eax
+    3a0d:	ff 75 08             	pushl  0x8(%ebp)
+    3a10:	e8 8d fe ff ff       	call   38a2 <write>
+    3a15:	83 c4 10             	add    $0x10,%esp
+    3a18:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+    3a1b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+    3a1f:	84 db                	test   %bl,%bl
+    3a21:	74 77                	je     3a9a <printf+0xca>
+    if(state == 0){
+    3a23:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+    3a25:	0f be cb             	movsbl %bl,%ecx
+    3a28:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+    3a2b:	74 cb                	je     39f8 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+    3a2d:	83 ff 25             	cmp    $0x25,%edi
+    3a30:	75 e6                	jne    3a18 <printf+0x48>
+      if(c == 'd'){
+    3a32:	83 f8 64             	cmp    $0x64,%eax
+    3a35:	0f 84 05 01 00 00    	je     3b40 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+    3a3b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+    3a41:	83 f9 70             	cmp    $0x70,%ecx
+    3a44:	74 72                	je     3ab8 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+    3a46:	83 f8 73             	cmp    $0x73,%eax
+    3a49:	0f 84 99 00 00 00    	je     3ae8 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+    3a4f:	83 f8 63             	cmp    $0x63,%eax
+    3a52:	0f 84 08 01 00 00    	je     3b60 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+    3a58:	83 f8 25             	cmp    $0x25,%eax
+    3a5b:	0f 84 ef 00 00 00    	je     3b50 <printf+0x180>
+  write(fd, &c, 1);
+    3a61:	8d 45 e7             	lea    -0x19(%ebp),%eax
+    3a64:	83 ec 04             	sub    $0x4,%esp
+    3a67:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+    3a6b:	6a 01                	push   $0x1
+    3a6d:	50                   	push   %eax
+    3a6e:	ff 75 08             	pushl  0x8(%ebp)
+    3a71:	e8 2c fe ff ff       	call   38a2 <write>
+    3a76:	83 c4 0c             	add    $0xc,%esp
+    3a79:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+    3a7c:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+    3a7f:	6a 01                	push   $0x1
+    3a81:	50                   	push   %eax
+    3a82:	ff 75 08             	pushl  0x8(%ebp)
+    3a85:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+    3a88:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+    3a8a:	e8 13 fe ff ff       	call   38a2 <write>
+  for(i = 0; fmt[i]; i++){
+    3a8f:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+    3a93:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+    3a96:	84 db                	test   %bl,%bl
+    3a98:	75 89                	jne    3a23 <printf+0x53>
+    }
+  }
+}
+    3a9a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    3a9d:	5b                   	pop    %ebx
+    3a9e:	5e                   	pop    %esi
+    3a9f:	5f                   	pop    %edi
+    3aa0:	5d                   	pop    %ebp
+    3aa1:	c3                   	ret    
+    3aa2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+    3aa8:	bf 25 00 00 00       	mov    $0x25,%edi
+    3aad:	e9 66 ff ff ff       	jmp    3a18 <printf+0x48>
+    3ab2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+    3ab8:	83 ec 0c             	sub    $0xc,%esp
+    3abb:	b9 10 00 00 00       	mov    $0x10,%ecx
+    3ac0:	6a 00                	push   $0x0
+    3ac2:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+    3ac5:	8b 45 08             	mov    0x8(%ebp),%eax
+    3ac8:	8b 17                	mov    (%edi),%edx
+    3aca:	e8 61 fe ff ff       	call   3930 <printint>
+        ap++;
+    3acf:	89 f8                	mov    %edi,%eax
+    3ad1:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    3ad4:	31 ff                	xor    %edi,%edi
+        ap++;
+    3ad6:	83 c0 04             	add    $0x4,%eax
+    3ad9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    3adc:	e9 37 ff ff ff       	jmp    3a18 <printf+0x48>
+    3ae1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+    3ae8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+    3aeb:	8b 08                	mov    (%eax),%ecx
+        ap++;
+    3aed:	83 c0 04             	add    $0x4,%eax
+    3af0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+    3af3:	85 c9                	test   %ecx,%ecx
+    3af5:	0f 84 8e 00 00 00    	je     3b89 <printf+0x1b9>
+        while(*s != 0){
+    3afb:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+    3afe:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+    3b00:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+    3b02:	84 c0                	test   %al,%al
+    3b04:	0f 84 0e ff ff ff    	je     3a18 <printf+0x48>
+    3b0a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+    3b0d:	89 de                	mov    %ebx,%esi
+    3b0f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    3b12:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+    3b15:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+    3b18:	83 ec 04             	sub    $0x4,%esp
+          s++;
+    3b1b:	83 c6 01             	add    $0x1,%esi
+    3b1e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+    3b21:	6a 01                	push   $0x1
+    3b23:	57                   	push   %edi
+    3b24:	53                   	push   %ebx
+    3b25:	e8 78 fd ff ff       	call   38a2 <write>
+        while(*s != 0){
+    3b2a:	0f b6 06             	movzbl (%esi),%eax
+    3b2d:	83 c4 10             	add    $0x10,%esp
+    3b30:	84 c0                	test   %al,%al
+    3b32:	75 e4                	jne    3b18 <printf+0x148>
+    3b34:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+    3b37:	31 ff                	xor    %edi,%edi
+    3b39:	e9 da fe ff ff       	jmp    3a18 <printf+0x48>
+    3b3e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+    3b40:	83 ec 0c             	sub    $0xc,%esp
+    3b43:	b9 0a 00 00 00       	mov    $0xa,%ecx
+    3b48:	6a 01                	push   $0x1
+    3b4a:	e9 73 ff ff ff       	jmp    3ac2 <printf+0xf2>
+    3b4f:	90                   	nop
+  write(fd, &c, 1);
+    3b50:	83 ec 04             	sub    $0x4,%esp
+    3b53:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+    3b56:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+    3b59:	6a 01                	push   $0x1
+    3b5b:	e9 21 ff ff ff       	jmp    3a81 <printf+0xb1>
+        putc(fd, *ap);
+    3b60:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+    3b63:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+    3b66:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+    3b68:	6a 01                	push   $0x1
+        ap++;
+    3b6a:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+    3b6d:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+    3b70:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+    3b73:	50                   	push   %eax
+    3b74:	ff 75 08             	pushl  0x8(%ebp)
+    3b77:	e8 26 fd ff ff       	call   38a2 <write>
+        ap++;
+    3b7c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+    3b7f:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    3b82:	31 ff                	xor    %edi,%edi
+    3b84:	e9 8f fe ff ff       	jmp    3a18 <printf+0x48>
+          s = "(null)";
+    3b89:	bb 90 54 00 00       	mov    $0x5490,%ebx
+        while(*s != 0){
+    3b8e:	b8 28 00 00 00       	mov    $0x28,%eax
+    3b93:	e9 72 ff ff ff       	jmp    3b0a <printf+0x13a>
+    3b98:	66 90                	xchg   %ax,%ax
+    3b9a:	66 90                	xchg   %ax,%ax
+    3b9c:	66 90                	xchg   %ax,%ax
+    3b9e:	66 90                	xchg   %ax,%ax
+
+00003ba0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+    3ba0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    3ba1:	a1 40 5e 00 00       	mov    0x5e40,%eax
+{
+    3ba6:	89 e5                	mov    %esp,%ebp
+    3ba8:	57                   	push   %edi
+    3ba9:	56                   	push   %esi
+    3baa:	53                   	push   %ebx
+    3bab:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+    3bae:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+    3bb1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    3bb8:	39 c8                	cmp    %ecx,%eax
+    3bba:	8b 10                	mov    (%eax),%edx
+    3bbc:	73 32                	jae    3bf0 <free+0x50>
+    3bbe:	39 d1                	cmp    %edx,%ecx
+    3bc0:	72 04                	jb     3bc6 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    3bc2:	39 d0                	cmp    %edx,%eax
+    3bc4:	72 32                	jb     3bf8 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    3bc6:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    3bc9:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+    3bcc:	39 fa                	cmp    %edi,%edx
+    3bce:	74 30                	je     3c00 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+    3bd0:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+    3bd3:	8b 50 04             	mov    0x4(%eax),%edx
+    3bd6:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    3bd9:	39 f1                	cmp    %esi,%ecx
+    3bdb:	74 3a                	je     3c17 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+    3bdd:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+    3bdf:	a3 40 5e 00 00       	mov    %eax,0x5e40
+}
+    3be4:	5b                   	pop    %ebx
+    3be5:	5e                   	pop    %esi
+    3be6:	5f                   	pop    %edi
+    3be7:	5d                   	pop    %ebp
+    3be8:	c3                   	ret    
+    3be9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    3bf0:	39 d0                	cmp    %edx,%eax
+    3bf2:	72 04                	jb     3bf8 <free+0x58>
+    3bf4:	39 d1                	cmp    %edx,%ecx
+    3bf6:	72 ce                	jb     3bc6 <free+0x26>
+{
+    3bf8:	89 d0                	mov    %edx,%eax
+    3bfa:	eb bc                	jmp    3bb8 <free+0x18>
+    3bfc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+    3c00:	03 72 04             	add    0x4(%edx),%esi
+    3c03:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+    3c06:	8b 10                	mov    (%eax),%edx
+    3c08:	8b 12                	mov    (%edx),%edx
+    3c0a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+    3c0d:	8b 50 04             	mov    0x4(%eax),%edx
+    3c10:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    3c13:	39 f1                	cmp    %esi,%ecx
+    3c15:	75 c6                	jne    3bdd <free+0x3d>
+    p->s.size += bp->s.size;
+    3c17:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+    3c1a:	a3 40 5e 00 00       	mov    %eax,0x5e40
+    p->s.size += bp->s.size;
+    3c1f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+    3c22:	8b 53 f8             	mov    -0x8(%ebx),%edx
+    3c25:	89 10                	mov    %edx,(%eax)
+}
+    3c27:	5b                   	pop    %ebx
+    3c28:	5e                   	pop    %esi
+    3c29:	5f                   	pop    %edi
+    3c2a:	5d                   	pop    %ebp
+    3c2b:	c3                   	ret    
+    3c2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00003c30 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+    3c30:	55                   	push   %ebp
+    3c31:	89 e5                	mov    %esp,%ebp
+    3c33:	57                   	push   %edi
+    3c34:	56                   	push   %esi
+    3c35:	53                   	push   %ebx
+    3c36:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    3c39:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+    3c3c:	8b 15 40 5e 00 00    	mov    0x5e40,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    3c42:	8d 78 07             	lea    0x7(%eax),%edi
+    3c45:	c1 ef 03             	shr    $0x3,%edi
+    3c48:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+    3c4b:	85 d2                	test   %edx,%edx
+    3c4d:	0f 84 9d 00 00 00    	je     3cf0 <malloc+0xc0>
+    3c53:	8b 02                	mov    (%edx),%eax
+    3c55:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+    3c58:	39 cf                	cmp    %ecx,%edi
+    3c5a:	76 6c                	jbe    3cc8 <malloc+0x98>
+    3c5c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+    3c62:	bb 00 10 00 00       	mov    $0x1000,%ebx
+    3c67:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+    3c6a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+    3c71:	eb 0e                	jmp    3c81 <malloc+0x51>
+    3c73:	90                   	nop
+    3c74:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    3c78:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+    3c7a:	8b 48 04             	mov    0x4(%eax),%ecx
+    3c7d:	39 f9                	cmp    %edi,%ecx
+    3c7f:	73 47                	jae    3cc8 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+    3c81:	39 05 40 5e 00 00    	cmp    %eax,0x5e40
+    3c87:	89 c2                	mov    %eax,%edx
+    3c89:	75 ed                	jne    3c78 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+    3c8b:	83 ec 0c             	sub    $0xc,%esp
+    3c8e:	56                   	push   %esi
+    3c8f:	e8 76 fc ff ff       	call   390a <sbrk>
+  if(p == (char*)-1)
+    3c94:	83 c4 10             	add    $0x10,%esp
+    3c97:	83 f8 ff             	cmp    $0xffffffff,%eax
+    3c9a:	74 1c                	je     3cb8 <malloc+0x88>
+  hp->s.size = nu;
+    3c9c:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+    3c9f:	83 ec 0c             	sub    $0xc,%esp
+    3ca2:	83 c0 08             	add    $0x8,%eax
+    3ca5:	50                   	push   %eax
+    3ca6:	e8 f5 fe ff ff       	call   3ba0 <free>
+  return freep;
+    3cab:	8b 15 40 5e 00 00    	mov    0x5e40,%edx
+      if((p = morecore(nunits)) == 0)
+    3cb1:	83 c4 10             	add    $0x10,%esp
+    3cb4:	85 d2                	test   %edx,%edx
+    3cb6:	75 c0                	jne    3c78 <malloc+0x48>
+        return 0;
+  }
+}
+    3cb8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+    3cbb:	31 c0                	xor    %eax,%eax
+}
+    3cbd:	5b                   	pop    %ebx
+    3cbe:	5e                   	pop    %esi
+    3cbf:	5f                   	pop    %edi
+    3cc0:	5d                   	pop    %ebp
+    3cc1:	c3                   	ret    
+    3cc2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+    3cc8:	39 cf                	cmp    %ecx,%edi
+    3cca:	74 54                	je     3d20 <malloc+0xf0>
+        p->s.size -= nunits;
+    3ccc:	29 f9                	sub    %edi,%ecx
+    3cce:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+    3cd1:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+    3cd4:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+    3cd7:	89 15 40 5e 00 00    	mov    %edx,0x5e40
+}
+    3cdd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+    3ce0:	83 c0 08             	add    $0x8,%eax
+}
+    3ce3:	5b                   	pop    %ebx
+    3ce4:	5e                   	pop    %esi
+    3ce5:	5f                   	pop    %edi
+    3ce6:	5d                   	pop    %ebp
+    3ce7:	c3                   	ret    
+    3ce8:	90                   	nop
+    3ce9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+    3cf0:	c7 05 40 5e 00 00 44 	movl   $0x5e44,0x5e40
+    3cf7:	5e 00 00 
+    3cfa:	c7 05 44 5e 00 00 44 	movl   $0x5e44,0x5e44
+    3d01:	5e 00 00 
+    base.s.size = 0;
+    3d04:	b8 44 5e 00 00       	mov    $0x5e44,%eax
+    3d09:	c7 05 48 5e 00 00 00 	movl   $0x0,0x5e48
+    3d10:	00 00 00 
+    3d13:	e9 44 ff ff ff       	jmp    3c5c <malloc+0x2c>
+    3d18:	90                   	nop
+    3d19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+    3d20:	8b 08                	mov    (%eax),%ecx
+    3d22:	89 0a                	mov    %ecx,(%edx)
+    3d24:	eb b1                	jmp    3cd7 <malloc+0xa7>
diff -urN main/usertests.c xv6-public/usertests.c
--- main/usertests.c	2022-08-11 19:48:39.000000000 +0530
+++ xv6-public/usertests.c	2022-08-11 18:45:06.000000000 +0530
@@ -1415,7 +1415,7 @@
 sbrktest(void)
 {
   int fds[2], pid, pids[10], ppid;
-  char *a, *b, *c, *lastaddr, *oldbrk, *p, scratch;
+  char *a, *b, *c, *oldbrk, *p, scratch;
   uint amt;
 
   printf(stdout, "sbrk test\n");
@@ -1457,8 +1457,8 @@
     printf(stdout, "sbrk test failed to grow big address space; enough phys mem?\n");
     exit();
   }
-  lastaddr = (char*) (BIG-1);
-  *lastaddr = 99;
+//  lastaddr = (char*) (BIG-1);
+//  *lastaddr = 99;
 
   // can one de-allocate?
   a = sbrk(0);
@@ -1480,11 +1480,11 @@
     printf(stdout, "sbrk re-allocation failed, a %x c %x\n", a, c);
     exit();
   }
-  if(*lastaddr == 99){
-    // should be zero
-    printf(stdout, "sbrk de-allocation didn't really deallocate\n");
-    exit();
-  }
+//  if(*lastaddr == 99){
+//    // should be zero
+//    printf(stdout, "sbrk de-allocation didn't really deallocate\n");
+//    exit();
+//  }
 
   a = sbrk(0);
   c = sbrk(-(sbrk(0) - oldbrk));
diff -urN main/usertests.d xv6-public/usertests.d
--- main/usertests.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/usertests.d	2022-10-31 22:34:17.994384938 +0530
@@ -0,0 +1,2 @@
+usertests.o: usertests.c /usr/include/stdc-predef.h param.h types.h \
+ stat.h user.h fs.h fcntl.h syscall.h traps.h memlayout.h
Binary files main/usertests.o and xv6-public/usertests.o differ
diff -urN main/usertests.sym xv6-public/usertests.sym
--- main/usertests.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/usertests.sym	2022-10-31 22:34:18.030402940 +0530
@@ -0,0 +1,104 @@
+00000000 .text
+00003d28 .rodata
+000054ac .eh_frame
+00005da4 .data
+00005dc0 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 usertests.c
+00005dc0 args.1407
+00000000 ulib.c
+00000000 printf.c
+00003930 printint
+00005498 digits.1044
+00000000 umalloc.c
+00005e40 freep
+00005e44 base
+00003630 strcpy
+00000cf0 exitwait
+000039d0 printf
+00005da8 stdout
+00003260 bigargtest
+00003850 memmove
+000002f0 openiputtest
+000038ca mknod
+00003740 gets
+00003902 getpid
+00000a10 pipe1
+00002b60 iref
+00003c30 malloc
+00003912 sleep
+00000200 exitiputtest
+00003360 fsfull
+00001be0 bigdir
+00002c80 forktest
+00000660 writetest1
+000023f0 bigwrite
+00000e50 sharedfd
+00005da4 randstate
+00003892 pipe
+00005e60 uninit
+00002960 dirfile
+000038a2 write
+000031e0 bsstest
+00005dac echoargv
+000038da fstat
+000038b2 kill
+00003130 validatetest
+000027e0 rmdot
+000038f2 chdir
+000009c0 exectest
+000038ba exec
+0000388a wait
+00003610 rand
+0000389a read
+00000bb0 preempt
+000038d2 unlink
+000035a0 argptest
+00000d80 mem
+0000387a fork
+0000390a sbrk
+0000391a uptime
+00005dc0 __bss_start
+000036e0 memset
+00000830 createtest
+00000000 main
+00001210 createdelete
+00003660 strcmp
+00000480 writetest
+000038fa dup
+00002d30 sbrktest
+000003f0 opentest
+00001d10 subdir
+00003530 uio
+000015c0 linktest
+00008580 buf
+000008e0 dirtest
+00000120 iputtest
+000037c0 stat
+000024d0 bigfile
+00005dc0 _edata
+0000a584 _end
+00001430 unlinkread
+000038e2 link
+00003882 exit
+00003810 atoi
+00001ad0 linkunlink
+00003922 draw
+0000a580 name
+000036b0 strlen
+000038c2 open
+00003700 strchr
+000017d0 concreate
+000026a0 fourteen
+00003120 validateint
+00001010 fourfiles
+000038ea mkdir
+000038aa close
+00003ba0 free
Binary files main/usys.o and xv6-public/usys.o differ
diff -urN main/usys.S xv6-public/usys.S
--- main/usys.S	2022-09-03 13:43:44.000000000 +0530
+++ xv6-public/usys.S	2022-08-12 06:06:58.000000000 +0530
@@ -29,7 +29,4 @@
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
-SYSCALL(thread_create)
-SYSCALL(thread_join)
-SYSCALL(thread_exit)
-SYSCALL(draw)
\ No newline at end of file
+SYSCALL(draw)
Binary files main/vectors.o and xv6-public/vectors.o differ
diff -urN main/vm.c xv6-public/vm.c
--- main/vm.c	2022-08-11 19:48:39.000000000 +0530
+++ xv6-public/vm.c	2022-10-30 15:51:50.000000000 +0530
@@ -6,10 +6,15 @@
 #include "mmu.h"
 #include "proc.h"
 #include "elf.h"
+#include "spinlock.h"
 
 extern char data[];  // defined by kernel.ld
 pde_t *kpgdir;  // for use in scheduler()
 
+char * sleeping_channel;
+struct spinlock sleeping_channel_lock;
+int sleeping_channel_count=0;
+
 // Set up CPU's kernel segment descriptors.
 // Run once on entry on each CPU.
 void
@@ -57,7 +62,7 @@
 // Create PTEs for virtual addresses starting at va that refer to
 // physical addresses starting at pa. va and size might not
 // be page-aligned.
-static int
+int
 mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
 {
   char *a, *last;
@@ -233,8 +238,20 @@
   for(; a < newsz; a += PGSIZE){
     mem = kalloc();
     if(mem == 0){
-      cprintf("allocuvm out of memory\n");
+      // cprintf("allocuvm out of memory\n");
       deallocuvm(pgdir, newsz, oldsz);
+      //SLEEP
+      myproc()->state=SLEEPING;
+      acquire(&sleeping_channel_lock);
+      myproc()->chan=sleeping_channel;
+      sleeping_channel_count++;
+      release(&sleeping_channel_lock);
+      rpush(myproc());
+      if(!swap_out_process_exists){
+        swap_out_process_exists=1;
+        create_kernel_process("swap_out_process",&swap_out_process_function);
+      }
+      
       return 0;
     }
     memset(mem, 0, PGSIZE);
@@ -392,3 +409,4 @@
 //PAGEBREAK!
 // Blank page.
 
+
diff -urN main/vm.d xv6-public/vm.d
--- main/vm.d	2022-09-26 21:21:11.614085000 +0530
+++ xv6-public/vm.d	2022-10-31 22:34:09.526152488 +0530
@@ -1,2 +1,2 @@
 vm.o: vm.c /usr/include/stdc-predef.h param.h types.h defs.h x86.h \
- memlayout.h mmu.h proc.h elf.h
+ memlayout.h mmu.h proc.h elf.h spinlock.h
Binary files main/vm.o and xv6-public/vm.o differ
Binary files main/_wc and xv6-public/_wc differ
diff -urN main/wc.asm xv6-public/wc.asm
--- main/wc.asm	2022-09-26 21:21:17.280918000 +0530
+++ xv6-public/wc.asm	2022-10-31 22:34:18.110442944 +0530
@@ -73,15 +73,15 @@
       printf(1, "wc: cannot open %s\n", argv[i]);
   6b:	50                   	push   %eax
   6c:	ff 33                	pushl  (%ebx)
-  6e:	68 bb 08 00 00       	push   $0x8bb
+  6e:	68 9b 08 00 00       	push   $0x89b
   73:	6a 01                	push   $0x1
-  75:	e8 c6 04 00 00       	call   540 <printf>
+  75:	e8 a6 04 00 00       	call   520 <printf>
       exit();
   7a:	e8 53 03 00 00       	call   3d2 <exit>
     wc(0, "");
   7f:	52                   	push   %edx
   80:	52                   	push   %edx
-  81:	68 ad 08 00 00       	push   $0x8ad
+  81:	68 8d 08 00 00       	push   $0x88d
   86:	6a 00                	push   $0x0
   88:	e8 13 00 00 00       	call   a0 <wc>
     exit();
@@ -113,7 +113,7 @@
   while((n = read(fd, buf, sizeof(buf))) > 0){
   c0:	83 ec 04             	sub    $0x4,%esp
   c3:	68 00 02 00 00       	push   $0x200
-  c8:	68 e0 0b 00 00       	push   $0xbe0
+  c8:	68 c0 0b 00 00       	push   $0xbc0
   cd:	ff 75 08             	pushl  0x8(%ebp)
   d0:	e8 15 03 00 00       	call   3ea <read>
   d5:	83 c4 10             	add    $0x10,%esp
@@ -132,7 +132,7 @@
   f2:	39 fe                	cmp    %edi,%esi
   f4:	74 42                	je     138 <wc+0x98>
       if(buf[i] == '\n')
-  f6:	0f be 87 e0 0b 00 00 	movsbl 0xbe0(%edi),%eax
+  f6:	0f be 87 c0 0b 00 00 	movsbl 0xbc0(%edi),%eax
         l++;
   fd:	31 c9                	xor    %ecx,%ecx
   ff:	3c 0a                	cmp    $0xa,%al
@@ -140,7 +140,7 @@
       if(strchr(" \r\t\n\v", buf[i]))
  104:	83 ec 08             	sub    $0x8,%esp
  107:	50                   	push   %eax
- 108:	68 98 08 00 00       	push   $0x898
+ 108:	68 78 08 00 00       	push   $0x878
         l++;
  10d:	01 cb                	add    %ecx,%ebx
       if(strchr(" \r\t\n\v", buf[i]))
@@ -173,9 +173,9 @@
  148:	ff 75 e0             	pushl  -0x20(%ebp)
  14b:	ff 75 dc             	pushl  -0x24(%ebp)
  14e:	53                   	push   %ebx
- 14f:	68 ae 08 00 00       	push   $0x8ae
+ 14f:	68 8e 08 00 00       	push   $0x88e
  154:	6a 01                	push   $0x1
- 156:	e8 e5 03 00 00       	call   540 <printf>
+ 156:	e8 c5 03 00 00       	call   520 <printf>
 }
  15b:	83 c4 20             	add    $0x20,%esp
  15e:	8d 65 f4             	lea    -0xc(%ebp),%esp
@@ -187,9 +187,9 @@
     printf(1, "wc: read error\n");
  166:	50                   	push   %eax
  167:	50                   	push   %eax
- 168:	68 9e 08 00 00       	push   $0x89e
+ 168:	68 7e 08 00 00       	push   $0x87e
  16d:	6a 01                	push   $0x1
- 16f:	e8 cc 03 00 00       	call   540 <printf>
+ 16f:	e8 ac 03 00 00       	call   520 <printf>
     exit();
  174:	e8 59 02 00 00       	call   3d2 <exit>
  179:	66 90                	xchg   %ax,%ax
@@ -715,614 +715,593 @@
  46f:	cd 40                	int    $0x40
  471:	c3                   	ret    
 
-00000472 <thread_create>:
-SYSCALL(thread_create)
+00000472 <draw>:
+SYSCALL(draw)
  472:	b8 16 00 00 00       	mov    $0x16,%eax
  477:	cd 40                	int    $0x40
  479:	c3                   	ret    
+ 47a:	66 90                	xchg   %ax,%ax
+ 47c:	66 90                	xchg   %ax,%ax
+ 47e:	66 90                	xchg   %ax,%ax
 
-0000047a <thread_join>:
-SYSCALL(thread_join)
- 47a:	b8 18 00 00 00       	mov    $0x18,%eax
- 47f:	cd 40                	int    $0x40
- 481:	c3                   	ret    
-
-00000482 <thread_exit>:
-SYSCALL(thread_exit)
- 482:	b8 17 00 00 00       	mov    $0x17,%eax
- 487:	cd 40                	int    $0x40
- 489:	c3                   	ret    
-
-0000048a <draw>:
- 48a:	b8 19 00 00 00       	mov    $0x19,%eax
- 48f:	cd 40                	int    $0x40
- 491:	c3                   	ret    
- 492:	66 90                	xchg   %ax,%ax
- 494:	66 90                	xchg   %ax,%ax
- 496:	66 90                	xchg   %ax,%ax
- 498:	66 90                	xchg   %ax,%ax
- 49a:	66 90                	xchg   %ax,%ax
- 49c:	66 90                	xchg   %ax,%ax
- 49e:	66 90                	xchg   %ax,%ax
-
-000004a0 <printint>:
+00000480 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 4a0:	55                   	push   %ebp
- 4a1:	89 e5                	mov    %esp,%ebp
- 4a3:	57                   	push   %edi
- 4a4:	56                   	push   %esi
- 4a5:	53                   	push   %ebx
- 4a6:	83 ec 3c             	sub    $0x3c,%esp
+ 480:	55                   	push   %ebp
+ 481:	89 e5                	mov    %esp,%ebp
+ 483:	57                   	push   %edi
+ 484:	56                   	push   %esi
+ 485:	53                   	push   %ebx
+ 486:	83 ec 3c             	sub    $0x3c,%esp
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 4a9:	85 d2                	test   %edx,%edx
+ 489:	85 d2                	test   %edx,%edx
 {
- 4ab:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 48b:	89 45 c0             	mov    %eax,-0x40(%ebp)
     neg = 1;
     x = -xx;
- 4ae:	89 d0                	mov    %edx,%eax
+ 48e:	89 d0                	mov    %edx,%eax
   if(sgn && xx < 0){
- 4b0:	79 76                	jns    528 <printint+0x88>
- 4b2:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 4b6:	74 70                	je     528 <printint+0x88>
+ 490:	79 76                	jns    508 <printint+0x88>
+ 492:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 496:	74 70                	je     508 <printint+0x88>
     x = -xx;
- 4b8:	f7 d8                	neg    %eax
+ 498:	f7 d8                	neg    %eax
     neg = 1;
- 4ba:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+ 49a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
   } else {
     x = xx;
   }
 
   i = 0;
- 4c1:	31 f6                	xor    %esi,%esi
- 4c3:	8d 5d d7             	lea    -0x29(%ebp),%ebx
- 4c6:	eb 0a                	jmp    4d2 <printint+0x32>
- 4c8:	90                   	nop
- 4c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4a1:	31 f6                	xor    %esi,%esi
+ 4a3:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 4a6:	eb 0a                	jmp    4b2 <printint+0x32>
+ 4a8:	90                   	nop
+ 4a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   do{
     buf[i++] = digits[x % base];
- 4d0:	89 fe                	mov    %edi,%esi
- 4d2:	31 d2                	xor    %edx,%edx
- 4d4:	8d 7e 01             	lea    0x1(%esi),%edi
- 4d7:	f7 f1                	div    %ecx
- 4d9:	0f b6 92 d8 08 00 00 	movzbl 0x8d8(%edx),%edx
+ 4b0:	89 fe                	mov    %edi,%esi
+ 4b2:	31 d2                	xor    %edx,%edx
+ 4b4:	8d 7e 01             	lea    0x1(%esi),%edi
+ 4b7:	f7 f1                	div    %ecx
+ 4b9:	0f b6 92 b8 08 00 00 	movzbl 0x8b8(%edx),%edx
   }while((x /= base) != 0);
- 4e0:	85 c0                	test   %eax,%eax
+ 4c0:	85 c0                	test   %eax,%eax
     buf[i++] = digits[x % base];
- 4e2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+ 4c2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
   }while((x /= base) != 0);
- 4e5:	75 e9                	jne    4d0 <printint+0x30>
+ 4c5:	75 e9                	jne    4b0 <printint+0x30>
   if(neg)
- 4e7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
- 4ea:	85 c0                	test   %eax,%eax
- 4ec:	74 08                	je     4f6 <printint+0x56>
+ 4c7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 4ca:	85 c0                	test   %eax,%eax
+ 4cc:	74 08                	je     4d6 <printint+0x56>
     buf[i++] = '-';
- 4ee:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
- 4f3:	8d 7e 02             	lea    0x2(%esi),%edi
- 4f6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
- 4fa:	8b 7d c0             	mov    -0x40(%ebp),%edi
- 4fd:	8d 76 00             	lea    0x0(%esi),%esi
- 500:	0f b6 06             	movzbl (%esi),%eax
+ 4ce:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 4d3:	8d 7e 02             	lea    0x2(%esi),%edi
+ 4d6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 4da:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 4dd:	8d 76 00             	lea    0x0(%esi),%esi
+ 4e0:	0f b6 06             	movzbl (%esi),%eax
   write(fd, &c, 1);
- 503:	83 ec 04             	sub    $0x4,%esp
- 506:	83 ee 01             	sub    $0x1,%esi
- 509:	6a 01                	push   $0x1
- 50b:	53                   	push   %ebx
- 50c:	57                   	push   %edi
- 50d:	88 45 d7             	mov    %al,-0x29(%ebp)
- 510:	e8 dd fe ff ff       	call   3f2 <write>
+ 4e3:	83 ec 04             	sub    $0x4,%esp
+ 4e6:	83 ee 01             	sub    $0x1,%esi
+ 4e9:	6a 01                	push   $0x1
+ 4eb:	53                   	push   %ebx
+ 4ec:	57                   	push   %edi
+ 4ed:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 4f0:	e8 fd fe ff ff       	call   3f2 <write>
 
   while(--i >= 0)
- 515:	83 c4 10             	add    $0x10,%esp
- 518:	39 de                	cmp    %ebx,%esi
- 51a:	75 e4                	jne    500 <printint+0x60>
+ 4f5:	83 c4 10             	add    $0x10,%esp
+ 4f8:	39 de                	cmp    %ebx,%esi
+ 4fa:	75 e4                	jne    4e0 <printint+0x60>
     putc(fd, buf[i]);
 }
- 51c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 51f:	5b                   	pop    %ebx
- 520:	5e                   	pop    %esi
- 521:	5f                   	pop    %edi
- 522:	5d                   	pop    %ebp
- 523:	c3                   	ret    
- 524:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4ff:	5b                   	pop    %ebx
+ 500:	5e                   	pop    %esi
+ 501:	5f                   	pop    %edi
+ 502:	5d                   	pop    %ebp
+ 503:	c3                   	ret    
+ 504:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 528:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
- 52f:	eb 90                	jmp    4c1 <printint+0x21>
- 531:	eb 0d                	jmp    540 <printf>
- 533:	90                   	nop
- 534:	90                   	nop
- 535:	90                   	nop
- 536:	90                   	nop
- 537:	90                   	nop
- 538:	90                   	nop
- 539:	90                   	nop
- 53a:	90                   	nop
- 53b:	90                   	nop
- 53c:	90                   	nop
- 53d:	90                   	nop
- 53e:	90                   	nop
- 53f:	90                   	nop
+ 508:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 50f:	eb 90                	jmp    4a1 <printint+0x21>
+ 511:	eb 0d                	jmp    520 <printf>
+ 513:	90                   	nop
+ 514:	90                   	nop
+ 515:	90                   	nop
+ 516:	90                   	nop
+ 517:	90                   	nop
+ 518:	90                   	nop
+ 519:	90                   	nop
+ 51a:	90                   	nop
+ 51b:	90                   	nop
+ 51c:	90                   	nop
+ 51d:	90                   	nop
+ 51e:	90                   	nop
+ 51f:	90                   	nop
 
-00000540 <printf>:
+00000520 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 540:	55                   	push   %ebp
- 541:	89 e5                	mov    %esp,%ebp
- 543:	57                   	push   %edi
- 544:	56                   	push   %esi
- 545:	53                   	push   %ebx
- 546:	83 ec 2c             	sub    $0x2c,%esp
+ 520:	55                   	push   %ebp
+ 521:	89 e5                	mov    %esp,%ebp
+ 523:	57                   	push   %edi
+ 524:	56                   	push   %esi
+ 525:	53                   	push   %ebx
+ 526:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 549:	8b 75 0c             	mov    0xc(%ebp),%esi
- 54c:	0f b6 1e             	movzbl (%esi),%ebx
- 54f:	84 db                	test   %bl,%bl
- 551:	0f 84 b3 00 00 00    	je     60a <printf+0xca>
+ 529:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 52c:	0f b6 1e             	movzbl (%esi),%ebx
+ 52f:	84 db                	test   %bl,%bl
+ 531:	0f 84 b3 00 00 00    	je     5ea <printf+0xca>
   ap = (uint*)(void*)&fmt + 1;
- 557:	8d 45 10             	lea    0x10(%ebp),%eax
- 55a:	83 c6 01             	add    $0x1,%esi
+ 537:	8d 45 10             	lea    0x10(%ebp),%eax
+ 53a:	83 c6 01             	add    $0x1,%esi
   state = 0;
- 55d:	31 ff                	xor    %edi,%edi
+ 53d:	31 ff                	xor    %edi,%edi
   ap = (uint*)(void*)&fmt + 1;
- 55f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
- 562:	eb 2f                	jmp    593 <printf+0x53>
- 564:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 53f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 542:	eb 2f                	jmp    573 <printf+0x53>
+ 544:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
- 568:	83 f8 25             	cmp    $0x25,%eax
- 56b:	0f 84 a7 00 00 00    	je     618 <printf+0xd8>
+ 548:	83 f8 25             	cmp    $0x25,%eax
+ 54b:	0f 84 a7 00 00 00    	je     5f8 <printf+0xd8>
   write(fd, &c, 1);
- 571:	8d 45 e2             	lea    -0x1e(%ebp),%eax
- 574:	83 ec 04             	sub    $0x4,%esp
- 577:	88 5d e2             	mov    %bl,-0x1e(%ebp)
- 57a:	6a 01                	push   $0x1
- 57c:	50                   	push   %eax
- 57d:	ff 75 08             	pushl  0x8(%ebp)
- 580:	e8 6d fe ff ff       	call   3f2 <write>
- 585:	83 c4 10             	add    $0x10,%esp
- 588:	83 c6 01             	add    $0x1,%esi
+ 551:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 554:	83 ec 04             	sub    $0x4,%esp
+ 557:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 55a:	6a 01                	push   $0x1
+ 55c:	50                   	push   %eax
+ 55d:	ff 75 08             	pushl  0x8(%ebp)
+ 560:	e8 8d fe ff ff       	call   3f2 <write>
+ 565:	83 c4 10             	add    $0x10,%esp
+ 568:	83 c6 01             	add    $0x1,%esi
   for(i = 0; fmt[i]; i++){
- 58b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
- 58f:	84 db                	test   %bl,%bl
- 591:	74 77                	je     60a <printf+0xca>
+ 56b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 56f:	84 db                	test   %bl,%bl
+ 571:	74 77                	je     5ea <printf+0xca>
     if(state == 0){
- 593:	85 ff                	test   %edi,%edi
+ 573:	85 ff                	test   %edi,%edi
     c = fmt[i] & 0xff;
- 595:	0f be cb             	movsbl %bl,%ecx
- 598:	0f b6 c3             	movzbl %bl,%eax
+ 575:	0f be cb             	movsbl %bl,%ecx
+ 578:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
- 59b:	74 cb                	je     568 <printf+0x28>
+ 57b:	74 cb                	je     548 <printf+0x28>
         state = '%';
       } else {
         putc(fd, c);
       }
     } else if(state == '%'){
- 59d:	83 ff 25             	cmp    $0x25,%edi
- 5a0:	75 e6                	jne    588 <printf+0x48>
+ 57d:	83 ff 25             	cmp    $0x25,%edi
+ 580:	75 e6                	jne    568 <printf+0x48>
       if(c == 'd'){
- 5a2:	83 f8 64             	cmp    $0x64,%eax
- 5a5:	0f 84 05 01 00 00    	je     6b0 <printf+0x170>
+ 582:	83 f8 64             	cmp    $0x64,%eax
+ 585:	0f 84 05 01 00 00    	je     690 <printf+0x170>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 5ab:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 5b1:	83 f9 70             	cmp    $0x70,%ecx
- 5b4:	74 72                	je     628 <printf+0xe8>
+ 58b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 591:	83 f9 70             	cmp    $0x70,%ecx
+ 594:	74 72                	je     608 <printf+0xe8>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 5b6:	83 f8 73             	cmp    $0x73,%eax
- 5b9:	0f 84 99 00 00 00    	je     658 <printf+0x118>
+ 596:	83 f8 73             	cmp    $0x73,%eax
+ 599:	0f 84 99 00 00 00    	je     638 <printf+0x118>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 5bf:	83 f8 63             	cmp    $0x63,%eax
- 5c2:	0f 84 08 01 00 00    	je     6d0 <printf+0x190>
+ 59f:	83 f8 63             	cmp    $0x63,%eax
+ 5a2:	0f 84 08 01 00 00    	je     6b0 <printf+0x190>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 5c8:	83 f8 25             	cmp    $0x25,%eax
- 5cb:	0f 84 ef 00 00 00    	je     6c0 <printf+0x180>
+ 5a8:	83 f8 25             	cmp    $0x25,%eax
+ 5ab:	0f 84 ef 00 00 00    	je     6a0 <printf+0x180>
   write(fd, &c, 1);
- 5d1:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 5d4:	83 ec 04             	sub    $0x4,%esp
- 5d7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 5db:	6a 01                	push   $0x1
- 5dd:	50                   	push   %eax
- 5de:	ff 75 08             	pushl  0x8(%ebp)
- 5e1:	e8 0c fe ff ff       	call   3f2 <write>
- 5e6:	83 c4 0c             	add    $0xc,%esp
- 5e9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
- 5ec:	88 5d e6             	mov    %bl,-0x1a(%ebp)
- 5ef:	6a 01                	push   $0x1
- 5f1:	50                   	push   %eax
- 5f2:	ff 75 08             	pushl  0x8(%ebp)
- 5f5:	83 c6 01             	add    $0x1,%esi
+ 5b1:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 5b4:	83 ec 04             	sub    $0x4,%esp
+ 5b7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 5bb:	6a 01                	push   $0x1
+ 5bd:	50                   	push   %eax
+ 5be:	ff 75 08             	pushl  0x8(%ebp)
+ 5c1:	e8 2c fe ff ff       	call   3f2 <write>
+ 5c6:	83 c4 0c             	add    $0xc,%esp
+ 5c9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 5cc:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 5cf:	6a 01                	push   $0x1
+ 5d1:	50                   	push   %eax
+ 5d2:	ff 75 08             	pushl  0x8(%ebp)
+ 5d5:	83 c6 01             	add    $0x1,%esi
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
       }
       state = 0;
- 5f8:	31 ff                	xor    %edi,%edi
+ 5d8:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 5fa:	e8 f3 fd ff ff       	call   3f2 <write>
+ 5da:	e8 13 fe ff ff       	call   3f2 <write>
   for(i = 0; fmt[i]; i++){
- 5ff:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 5df:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
   write(fd, &c, 1);
- 603:	83 c4 10             	add    $0x10,%esp
+ 5e3:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 606:	84 db                	test   %bl,%bl
- 608:	75 89                	jne    593 <printf+0x53>
+ 5e6:	84 db                	test   %bl,%bl
+ 5e8:	75 89                	jne    573 <printf+0x53>
     }
   }
 }
- 60a:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 60d:	5b                   	pop    %ebx
- 60e:	5e                   	pop    %esi
- 60f:	5f                   	pop    %edi
- 610:	5d                   	pop    %ebp
- 611:	c3                   	ret    
- 612:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 5ea:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 5ed:	5b                   	pop    %ebx
+ 5ee:	5e                   	pop    %esi
+ 5ef:	5f                   	pop    %edi
+ 5f0:	5d                   	pop    %ebp
+ 5f1:	c3                   	ret    
+ 5f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         state = '%';
- 618:	bf 25 00 00 00       	mov    $0x25,%edi
- 61d:	e9 66 ff ff ff       	jmp    588 <printf+0x48>
- 622:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 5f8:	bf 25 00 00 00       	mov    $0x25,%edi
+ 5fd:	e9 66 ff ff ff       	jmp    568 <printf+0x48>
+ 602:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 628:	83 ec 0c             	sub    $0xc,%esp
- 62b:	b9 10 00 00 00       	mov    $0x10,%ecx
- 630:	6a 00                	push   $0x0
- 632:	8b 7d d4             	mov    -0x2c(%ebp),%edi
- 635:	8b 45 08             	mov    0x8(%ebp),%eax
- 638:	8b 17                	mov    (%edi),%edx
- 63a:	e8 61 fe ff ff       	call   4a0 <printint>
+ 608:	83 ec 0c             	sub    $0xc,%esp
+ 60b:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 610:	6a 00                	push   $0x0
+ 612:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 615:	8b 45 08             	mov    0x8(%ebp),%eax
+ 618:	8b 17                	mov    (%edi),%edx
+ 61a:	e8 61 fe ff ff       	call   480 <printint>
         ap++;
- 63f:	89 f8                	mov    %edi,%eax
- 641:	83 c4 10             	add    $0x10,%esp
+ 61f:	89 f8                	mov    %edi,%eax
+ 621:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 644:	31 ff                	xor    %edi,%edi
+ 624:	31 ff                	xor    %edi,%edi
         ap++;
- 646:	83 c0 04             	add    $0x4,%eax
- 649:	89 45 d4             	mov    %eax,-0x2c(%ebp)
- 64c:	e9 37 ff ff ff       	jmp    588 <printf+0x48>
- 651:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 626:	83 c0 04             	add    $0x4,%eax
+ 629:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 62c:	e9 37 ff ff ff       	jmp    568 <printf+0x48>
+ 631:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 658:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 65b:	8b 08                	mov    (%eax),%ecx
+ 638:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 63b:	8b 08                	mov    (%eax),%ecx
         ap++;
- 65d:	83 c0 04             	add    $0x4,%eax
- 660:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 63d:	83 c0 04             	add    $0x4,%eax
+ 640:	89 45 d4             	mov    %eax,-0x2c(%ebp)
         if(s == 0)
- 663:	85 c9                	test   %ecx,%ecx
- 665:	0f 84 8e 00 00 00    	je     6f9 <printf+0x1b9>
+ 643:	85 c9                	test   %ecx,%ecx
+ 645:	0f 84 8e 00 00 00    	je     6d9 <printf+0x1b9>
         while(*s != 0){
- 66b:	0f b6 01             	movzbl (%ecx),%eax
+ 64b:	0f b6 01             	movzbl (%ecx),%eax
       state = 0;
- 66e:	31 ff                	xor    %edi,%edi
+ 64e:	31 ff                	xor    %edi,%edi
         s = (char*)*ap;
- 670:	89 cb                	mov    %ecx,%ebx
+ 650:	89 cb                	mov    %ecx,%ebx
         while(*s != 0){
- 672:	84 c0                	test   %al,%al
- 674:	0f 84 0e ff ff ff    	je     588 <printf+0x48>
- 67a:	89 75 d0             	mov    %esi,-0x30(%ebp)
- 67d:	89 de                	mov    %ebx,%esi
- 67f:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 682:	8d 7d e3             	lea    -0x1d(%ebp),%edi
- 685:	8d 76 00             	lea    0x0(%esi),%esi
+ 652:	84 c0                	test   %al,%al
+ 654:	0f 84 0e ff ff ff    	je     568 <printf+0x48>
+ 65a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 65d:	89 de                	mov    %ebx,%esi
+ 65f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 662:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 665:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 688:	83 ec 04             	sub    $0x4,%esp
+ 668:	83 ec 04             	sub    $0x4,%esp
           s++;
- 68b:	83 c6 01             	add    $0x1,%esi
- 68e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+ 66b:	83 c6 01             	add    $0x1,%esi
+ 66e:	88 45 e3             	mov    %al,-0x1d(%ebp)
   write(fd, &c, 1);
- 691:	6a 01                	push   $0x1
- 693:	57                   	push   %edi
- 694:	53                   	push   %ebx
- 695:	e8 58 fd ff ff       	call   3f2 <write>
+ 671:	6a 01                	push   $0x1
+ 673:	57                   	push   %edi
+ 674:	53                   	push   %ebx
+ 675:	e8 78 fd ff ff       	call   3f2 <write>
         while(*s != 0){
- 69a:	0f b6 06             	movzbl (%esi),%eax
- 69d:	83 c4 10             	add    $0x10,%esp
- 6a0:	84 c0                	test   %al,%al
- 6a2:	75 e4                	jne    688 <printf+0x148>
- 6a4:	8b 75 d0             	mov    -0x30(%ebp),%esi
+ 67a:	0f b6 06             	movzbl (%esi),%eax
+ 67d:	83 c4 10             	add    $0x10,%esp
+ 680:	84 c0                	test   %al,%al
+ 682:	75 e4                	jne    668 <printf+0x148>
+ 684:	8b 75 d0             	mov    -0x30(%ebp),%esi
       state = 0;
- 6a7:	31 ff                	xor    %edi,%edi
- 6a9:	e9 da fe ff ff       	jmp    588 <printf+0x48>
- 6ae:	66 90                	xchg   %ax,%ax
+ 687:	31 ff                	xor    %edi,%edi
+ 689:	e9 da fe ff ff       	jmp    568 <printf+0x48>
+ 68e:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 10, 1);
- 6b0:	83 ec 0c             	sub    $0xc,%esp
- 6b3:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 6b8:	6a 01                	push   $0x1
- 6ba:	e9 73 ff ff ff       	jmp    632 <printf+0xf2>
- 6bf:	90                   	nop
+ 690:	83 ec 0c             	sub    $0xc,%esp
+ 693:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 698:	6a 01                	push   $0x1
+ 69a:	e9 73 ff ff ff       	jmp    612 <printf+0xf2>
+ 69f:	90                   	nop
   write(fd, &c, 1);
- 6c0:	83 ec 04             	sub    $0x4,%esp
- 6c3:	88 5d e5             	mov    %bl,-0x1b(%ebp)
- 6c6:	8d 45 e5             	lea    -0x1b(%ebp),%eax
- 6c9:	6a 01                	push   $0x1
- 6cb:	e9 21 ff ff ff       	jmp    5f1 <printf+0xb1>
+ 6a0:	83 ec 04             	sub    $0x4,%esp
+ 6a3:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 6a6:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 6a9:	6a 01                	push   $0x1
+ 6ab:	e9 21 ff ff ff       	jmp    5d1 <printf+0xb1>
         putc(fd, *ap);
- 6d0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 6b0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
   write(fd, &c, 1);
- 6d3:	83 ec 04             	sub    $0x4,%esp
+ 6b3:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 6d6:	8b 07                	mov    (%edi),%eax
+ 6b6:	8b 07                	mov    (%edi),%eax
   write(fd, &c, 1);
- 6d8:	6a 01                	push   $0x1
+ 6b8:	6a 01                	push   $0x1
         ap++;
- 6da:	83 c7 04             	add    $0x4,%edi
+ 6ba:	83 c7 04             	add    $0x4,%edi
         putc(fd, *ap);
- 6dd:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 6bd:	88 45 e4             	mov    %al,-0x1c(%ebp)
   write(fd, &c, 1);
- 6e0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
- 6e3:	50                   	push   %eax
- 6e4:	ff 75 08             	pushl  0x8(%ebp)
- 6e7:	e8 06 fd ff ff       	call   3f2 <write>
+ 6c0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 6c3:	50                   	push   %eax
+ 6c4:	ff 75 08             	pushl  0x8(%ebp)
+ 6c7:	e8 26 fd ff ff       	call   3f2 <write>
         ap++;
- 6ec:	89 7d d4             	mov    %edi,-0x2c(%ebp)
- 6ef:	83 c4 10             	add    $0x10,%esp
+ 6cc:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 6cf:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 6f2:	31 ff                	xor    %edi,%edi
- 6f4:	e9 8f fe ff ff       	jmp    588 <printf+0x48>
+ 6d2:	31 ff                	xor    %edi,%edi
+ 6d4:	e9 8f fe ff ff       	jmp    568 <printf+0x48>
           s = "(null)";
- 6f9:	bb cf 08 00 00       	mov    $0x8cf,%ebx
+ 6d9:	bb af 08 00 00       	mov    $0x8af,%ebx
         while(*s != 0){
- 6fe:	b8 28 00 00 00       	mov    $0x28,%eax
- 703:	e9 72 ff ff ff       	jmp    67a <printf+0x13a>
- 708:	66 90                	xchg   %ax,%ax
- 70a:	66 90                	xchg   %ax,%ax
- 70c:	66 90                	xchg   %ax,%ax
- 70e:	66 90                	xchg   %ax,%ax
+ 6de:	b8 28 00 00 00       	mov    $0x28,%eax
+ 6e3:	e9 72 ff ff ff       	jmp    65a <printf+0x13a>
+ 6e8:	66 90                	xchg   %ax,%ax
+ 6ea:	66 90                	xchg   %ax,%ax
+ 6ec:	66 90                	xchg   %ax,%ax
+ 6ee:	66 90                	xchg   %ax,%ax
 
-00000710 <free>:
+000006f0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 710:	55                   	push   %ebp
+ 6f0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 711:	a1 c0 0b 00 00       	mov    0xbc0,%eax
+ 6f1:	a1 a0 0b 00 00       	mov    0xba0,%eax
 {
- 716:	89 e5                	mov    %esp,%ebp
- 718:	57                   	push   %edi
- 719:	56                   	push   %esi
- 71a:	53                   	push   %ebx
- 71b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6f6:	89 e5                	mov    %esp,%ebp
+ 6f8:	57                   	push   %edi
+ 6f9:	56                   	push   %esi
+ 6fa:	53                   	push   %ebx
+ 6fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 71e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
- 721:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6fe:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 701:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 728:	39 c8                	cmp    %ecx,%eax
- 72a:	8b 10                	mov    (%eax),%edx
- 72c:	73 32                	jae    760 <free+0x50>
- 72e:	39 d1                	cmp    %edx,%ecx
- 730:	72 04                	jb     736 <free+0x26>
+ 708:	39 c8                	cmp    %ecx,%eax
+ 70a:	8b 10                	mov    (%eax),%edx
+ 70c:	73 32                	jae    740 <free+0x50>
+ 70e:	39 d1                	cmp    %edx,%ecx
+ 710:	72 04                	jb     716 <free+0x26>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 732:	39 d0                	cmp    %edx,%eax
- 734:	72 32                	jb     768 <free+0x58>
+ 712:	39 d0                	cmp    %edx,%eax
+ 714:	72 32                	jb     748 <free+0x58>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 736:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 739:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 73c:	39 fa                	cmp    %edi,%edx
- 73e:	74 30                	je     770 <free+0x60>
+ 716:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 719:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 71c:	39 fa                	cmp    %edi,%edx
+ 71e:	74 30                	je     750 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 740:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 720:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 743:	8b 50 04             	mov    0x4(%eax),%edx
- 746:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 749:	39 f1                	cmp    %esi,%ecx
- 74b:	74 3a                	je     787 <free+0x77>
+ 723:	8b 50 04             	mov    0x4(%eax),%edx
+ 726:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 729:	39 f1                	cmp    %esi,%ecx
+ 72b:	74 3a                	je     767 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 74d:	89 08                	mov    %ecx,(%eax)
+ 72d:	89 08                	mov    %ecx,(%eax)
   freep = p;
- 74f:	a3 c0 0b 00 00       	mov    %eax,0xbc0
+ 72f:	a3 a0 0b 00 00       	mov    %eax,0xba0
 }
- 754:	5b                   	pop    %ebx
- 755:	5e                   	pop    %esi
- 756:	5f                   	pop    %edi
- 757:	5d                   	pop    %ebp
- 758:	c3                   	ret    
- 759:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 734:	5b                   	pop    %ebx
+ 735:	5e                   	pop    %esi
+ 736:	5f                   	pop    %edi
+ 737:	5d                   	pop    %ebp
+ 738:	c3                   	ret    
+ 739:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 760:	39 d0                	cmp    %edx,%eax
- 762:	72 04                	jb     768 <free+0x58>
- 764:	39 d1                	cmp    %edx,%ecx
- 766:	72 ce                	jb     736 <free+0x26>
+ 740:	39 d0                	cmp    %edx,%eax
+ 742:	72 04                	jb     748 <free+0x58>
+ 744:	39 d1                	cmp    %edx,%ecx
+ 746:	72 ce                	jb     716 <free+0x26>
 {
- 768:	89 d0                	mov    %edx,%eax
- 76a:	eb bc                	jmp    728 <free+0x18>
- 76c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 748:	89 d0                	mov    %edx,%eax
+ 74a:	eb bc                	jmp    708 <free+0x18>
+ 74c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     bp->s.size += p->s.ptr->s.size;
- 770:	03 72 04             	add    0x4(%edx),%esi
- 773:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 750:	03 72 04             	add    0x4(%edx),%esi
+ 753:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 776:	8b 10                	mov    (%eax),%edx
- 778:	8b 12                	mov    (%edx),%edx
- 77a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 756:	8b 10                	mov    (%eax),%edx
+ 758:	8b 12                	mov    (%edx),%edx
+ 75a:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 77d:	8b 50 04             	mov    0x4(%eax),%edx
- 780:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 783:	39 f1                	cmp    %esi,%ecx
- 785:	75 c6                	jne    74d <free+0x3d>
+ 75d:	8b 50 04             	mov    0x4(%eax),%edx
+ 760:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 763:	39 f1                	cmp    %esi,%ecx
+ 765:	75 c6                	jne    72d <free+0x3d>
     p->s.size += bp->s.size;
- 787:	03 53 fc             	add    -0x4(%ebx),%edx
+ 767:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 78a:	a3 c0 0b 00 00       	mov    %eax,0xbc0
+ 76a:	a3 a0 0b 00 00       	mov    %eax,0xba0
     p->s.size += bp->s.size;
- 78f:	89 50 04             	mov    %edx,0x4(%eax)
+ 76f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 792:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 795:	89 10                	mov    %edx,(%eax)
+ 772:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 775:	89 10                	mov    %edx,(%eax)
 }
- 797:	5b                   	pop    %ebx
- 798:	5e                   	pop    %esi
- 799:	5f                   	pop    %edi
- 79a:	5d                   	pop    %ebp
- 79b:	c3                   	ret    
- 79c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 777:	5b                   	pop    %ebx
+ 778:	5e                   	pop    %esi
+ 779:	5f                   	pop    %edi
+ 77a:	5d                   	pop    %ebp
+ 77b:	c3                   	ret    
+ 77c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-000007a0 <malloc>:
+00000780 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 7a0:	55                   	push   %ebp
- 7a1:	89 e5                	mov    %esp,%ebp
- 7a3:	57                   	push   %edi
- 7a4:	56                   	push   %esi
- 7a5:	53                   	push   %ebx
- 7a6:	83 ec 0c             	sub    $0xc,%esp
+ 780:	55                   	push   %ebp
+ 781:	89 e5                	mov    %esp,%ebp
+ 783:	57                   	push   %edi
+ 784:	56                   	push   %esi
+ 785:	53                   	push   %ebx
+ 786:	83 ec 0c             	sub    $0xc,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 7a9:	8b 45 08             	mov    0x8(%ebp),%eax
+ 789:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 7ac:	8b 15 c0 0b 00 00    	mov    0xbc0,%edx
+ 78c:	8b 15 a0 0b 00 00    	mov    0xba0,%edx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 7b2:	8d 78 07             	lea    0x7(%eax),%edi
- 7b5:	c1 ef 03             	shr    $0x3,%edi
- 7b8:	83 c7 01             	add    $0x1,%edi
+ 792:	8d 78 07             	lea    0x7(%eax),%edi
+ 795:	c1 ef 03             	shr    $0x3,%edi
+ 798:	83 c7 01             	add    $0x1,%edi
   if((prevp = freep) == 0){
- 7bb:	85 d2                	test   %edx,%edx
- 7bd:	0f 84 9d 00 00 00    	je     860 <malloc+0xc0>
- 7c3:	8b 02                	mov    (%edx),%eax
- 7c5:	8b 48 04             	mov    0x4(%eax),%ecx
+ 79b:	85 d2                	test   %edx,%edx
+ 79d:	0f 84 9d 00 00 00    	je     840 <malloc+0xc0>
+ 7a3:	8b 02                	mov    (%edx),%eax
+ 7a5:	8b 48 04             	mov    0x4(%eax),%ecx
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
     if(p->s.size >= nunits){
- 7c8:	39 cf                	cmp    %ecx,%edi
- 7ca:	76 6c                	jbe    838 <malloc+0x98>
- 7cc:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
- 7d2:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 7d7:	0f 43 df             	cmovae %edi,%ebx
+ 7a8:	39 cf                	cmp    %ecx,%edi
+ 7aa:	76 6c                	jbe    818 <malloc+0x98>
+ 7ac:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 7b2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 7b7:	0f 43 df             	cmovae %edi,%ebx
   p = sbrk(nu * sizeof(Header));
- 7da:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
- 7e1:	eb 0e                	jmp    7f1 <malloc+0x51>
- 7e3:	90                   	nop
- 7e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 7ba:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 7c1:	eb 0e                	jmp    7d1 <malloc+0x51>
+ 7c3:	90                   	nop
+ 7c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 7e8:	8b 02                	mov    (%edx),%eax
+ 7c8:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 7ea:	8b 48 04             	mov    0x4(%eax),%ecx
- 7ed:	39 f9                	cmp    %edi,%ecx
- 7ef:	73 47                	jae    838 <malloc+0x98>
+ 7ca:	8b 48 04             	mov    0x4(%eax),%ecx
+ 7cd:	39 f9                	cmp    %edi,%ecx
+ 7cf:	73 47                	jae    818 <malloc+0x98>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 7f1:	39 05 c0 0b 00 00    	cmp    %eax,0xbc0
- 7f7:	89 c2                	mov    %eax,%edx
- 7f9:	75 ed                	jne    7e8 <malloc+0x48>
+ 7d1:	39 05 a0 0b 00 00    	cmp    %eax,0xba0
+ 7d7:	89 c2                	mov    %eax,%edx
+ 7d9:	75 ed                	jne    7c8 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 7fb:	83 ec 0c             	sub    $0xc,%esp
- 7fe:	56                   	push   %esi
- 7ff:	e8 56 fc ff ff       	call   45a <sbrk>
+ 7db:	83 ec 0c             	sub    $0xc,%esp
+ 7de:	56                   	push   %esi
+ 7df:	e8 76 fc ff ff       	call   45a <sbrk>
   if(p == (char*)-1)
- 804:	83 c4 10             	add    $0x10,%esp
- 807:	83 f8 ff             	cmp    $0xffffffff,%eax
- 80a:	74 1c                	je     828 <malloc+0x88>
+ 7e4:	83 c4 10             	add    $0x10,%esp
+ 7e7:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7ea:	74 1c                	je     808 <malloc+0x88>
   hp->s.size = nu;
- 80c:	89 58 04             	mov    %ebx,0x4(%eax)
+ 7ec:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 80f:	83 ec 0c             	sub    $0xc,%esp
- 812:	83 c0 08             	add    $0x8,%eax
- 815:	50                   	push   %eax
- 816:	e8 f5 fe ff ff       	call   710 <free>
+ 7ef:	83 ec 0c             	sub    $0xc,%esp
+ 7f2:	83 c0 08             	add    $0x8,%eax
+ 7f5:	50                   	push   %eax
+ 7f6:	e8 f5 fe ff ff       	call   6f0 <free>
   return freep;
- 81b:	8b 15 c0 0b 00 00    	mov    0xbc0,%edx
+ 7fb:	8b 15 a0 0b 00 00    	mov    0xba0,%edx
       if((p = morecore(nunits)) == 0)
- 821:	83 c4 10             	add    $0x10,%esp
- 824:	85 d2                	test   %edx,%edx
- 826:	75 c0                	jne    7e8 <malloc+0x48>
+ 801:	83 c4 10             	add    $0x10,%esp
+ 804:	85 d2                	test   %edx,%edx
+ 806:	75 c0                	jne    7c8 <malloc+0x48>
         return 0;
   }
 }
- 828:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 808:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 82b:	31 c0                	xor    %eax,%eax
+ 80b:	31 c0                	xor    %eax,%eax
 }
- 82d:	5b                   	pop    %ebx
- 82e:	5e                   	pop    %esi
- 82f:	5f                   	pop    %edi
- 830:	5d                   	pop    %ebp
- 831:	c3                   	ret    
- 832:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 80d:	5b                   	pop    %ebx
+ 80e:	5e                   	pop    %esi
+ 80f:	5f                   	pop    %edi
+ 810:	5d                   	pop    %ebp
+ 811:	c3                   	ret    
+ 812:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 838:	39 cf                	cmp    %ecx,%edi
- 83a:	74 54                	je     890 <malloc+0xf0>
+ 818:	39 cf                	cmp    %ecx,%edi
+ 81a:	74 54                	je     870 <malloc+0xf0>
         p->s.size -= nunits;
- 83c:	29 f9                	sub    %edi,%ecx
- 83e:	89 48 04             	mov    %ecx,0x4(%eax)
+ 81c:	29 f9                	sub    %edi,%ecx
+ 81e:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 841:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ 821:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 844:	89 78 04             	mov    %edi,0x4(%eax)
+ 824:	89 78 04             	mov    %edi,0x4(%eax)
       freep = prevp;
- 847:	89 15 c0 0b 00 00    	mov    %edx,0xbc0
+ 827:	89 15 a0 0b 00 00    	mov    %edx,0xba0
 }
- 84d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 82d:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 850:	83 c0 08             	add    $0x8,%eax
+ 830:	83 c0 08             	add    $0x8,%eax
 }
- 853:	5b                   	pop    %ebx
- 854:	5e                   	pop    %esi
- 855:	5f                   	pop    %edi
- 856:	5d                   	pop    %ebp
- 857:	c3                   	ret    
- 858:	90                   	nop
- 859:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 833:	5b                   	pop    %ebx
+ 834:	5e                   	pop    %esi
+ 835:	5f                   	pop    %edi
+ 836:	5d                   	pop    %ebp
+ 837:	c3                   	ret    
+ 838:	90                   	nop
+ 839:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     base.s.ptr = freep = prevp = &base;
- 860:	c7 05 c0 0b 00 00 c4 	movl   $0xbc4,0xbc0
- 867:	0b 00 00 
- 86a:	c7 05 c4 0b 00 00 c4 	movl   $0xbc4,0xbc4
- 871:	0b 00 00 
+ 840:	c7 05 a0 0b 00 00 a4 	movl   $0xba4,0xba0
+ 847:	0b 00 00 
+ 84a:	c7 05 a4 0b 00 00 a4 	movl   $0xba4,0xba4
+ 851:	0b 00 00 
     base.s.size = 0;
- 874:	b8 c4 0b 00 00       	mov    $0xbc4,%eax
- 879:	c7 05 c8 0b 00 00 00 	movl   $0x0,0xbc8
- 880:	00 00 00 
- 883:	e9 44 ff ff ff       	jmp    7cc <malloc+0x2c>
- 888:	90                   	nop
- 889:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 854:	b8 a4 0b 00 00       	mov    $0xba4,%eax
+ 859:	c7 05 a8 0b 00 00 00 	movl   $0x0,0xba8
+ 860:	00 00 00 
+ 863:	e9 44 ff ff ff       	jmp    7ac <malloc+0x2c>
+ 868:	90                   	nop
+ 869:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         prevp->s.ptr = p->s.ptr;
- 890:	8b 08                	mov    (%eax),%ecx
- 892:	89 0a                	mov    %ecx,(%edx)
- 894:	eb b1                	jmp    847 <malloc+0xa7>
+ 870:	8b 08                	mov    (%eax),%ecx
+ 872:	89 0a                	mov    %ecx,(%edx)
+ 874:	eb b1                	jmp    827 <malloc+0xa7>
Binary files main/wc.o and xv6-public/wc.o differ
diff -urN main/wc.sym xv6-public/wc.sym
--- main/wc.sym	2022-09-26 21:21:17.292924000 +0530
+++ xv6-public/wc.sym	2022-10-31 22:34:18.122448945 +0530
@@ -1,7 +1,7 @@
 00000000 .text
-00000898 .rodata
-000008ec .eh_frame
-00000bc0 .bss
+00000878 .rodata
+000008cc .eh_frame
+00000ba0 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,19 +13,18 @@
 00000000 wc.c
 00000000 ulib.c
 00000000 printf.c
-000004a0 printint
-000008d8 digits.1050
+00000480 printint
+000008b8 digits.1044
 00000000 umalloc.c
-00000bc0 freep
-00000bc4 base
+00000ba0 freep
+00000ba4 base
 00000180 strcpy
-00000540 printf
-00000482 thread_exit
+00000520 printf
 000003a0 memmove
 0000041a mknod
 00000290 gets
 00000452 getpid
-000007a0 malloc
+00000780 malloc
 00000462 sleep
 000003e2 pipe
 000003f2 write
@@ -40,24 +39,22 @@
 000003ca fork
 0000045a sbrk
 0000046a uptime
-00000bb8 __bss_start
+00000b98 __bss_start
 00000230 memset
 00000000 main
 000001b0 strcmp
 0000044a dup
-00000be0 buf
+00000bc0 buf
 00000310 stat
-00000bb8 _edata
-00000de0 _end
+00000b98 _edata
+00000dc0 _end
 00000432 link
 000003d2 exit
 00000360 atoi
-0000048a draw
+00000472 draw
 00000200 strlen
 00000412 open
 00000250 strchr
-00000472 thread_create
 0000043a mkdir
 000003fa close
-0000047a thread_join
-00000710 free
+000006f0 free
Binary files main/_wolfietest and xv6-public/_wolfietest differ
diff -urN main/wolfietest.c xv6-public/wolfietest.c
--- main/wolfietest.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/wolfietest.c	2022-08-12 06:08:06.000000000 +0530
@@ -0,0 +1,13 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int
+main(void)
+{
+	static char buf[2000];
+	printf(1,"Drawtest says call returns %d\n",draw((void*) buf,2000));
+
+	printf(1,"%s",buf);
+	exit();
+}
Binary files main/xv6.img and xv6-public/xv6.img differ
Binary files main/_zombie and xv6-public/_zombie differ
diff -urN main/zombie.asm xv6-public/zombie.asm
--- main/zombie.asm	2022-09-26 21:21:17.396976000 +0530
+++ xv6-public/zombie.asm	2022-10-31 22:34:18.194484949 +0530
@@ -550,614 +550,593 @@
  31f:	cd 40                	int    $0x40
  321:	c3                   	ret    
 
-00000322 <thread_create>:
-SYSCALL(thread_create)
+00000322 <draw>:
+SYSCALL(draw)
  322:	b8 16 00 00 00       	mov    $0x16,%eax
  327:	cd 40                	int    $0x40
  329:	c3                   	ret    
+ 32a:	66 90                	xchg   %ax,%ax
+ 32c:	66 90                	xchg   %ax,%ax
+ 32e:	66 90                	xchg   %ax,%ax
 
-0000032a <thread_join>:
-SYSCALL(thread_join)
- 32a:	b8 18 00 00 00       	mov    $0x18,%eax
- 32f:	cd 40                	int    $0x40
- 331:	c3                   	ret    
-
-00000332 <thread_exit>:
-SYSCALL(thread_exit)
- 332:	b8 17 00 00 00       	mov    $0x17,%eax
- 337:	cd 40                	int    $0x40
- 339:	c3                   	ret    
-
-0000033a <draw>:
- 33a:	b8 19 00 00 00       	mov    $0x19,%eax
- 33f:	cd 40                	int    $0x40
- 341:	c3                   	ret    
- 342:	66 90                	xchg   %ax,%ax
- 344:	66 90                	xchg   %ax,%ax
- 346:	66 90                	xchg   %ax,%ax
- 348:	66 90                	xchg   %ax,%ax
- 34a:	66 90                	xchg   %ax,%ax
- 34c:	66 90                	xchg   %ax,%ax
- 34e:	66 90                	xchg   %ax,%ax
-
-00000350 <printint>:
+00000330 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 350:	55                   	push   %ebp
- 351:	89 e5                	mov    %esp,%ebp
- 353:	57                   	push   %edi
- 354:	56                   	push   %esi
- 355:	53                   	push   %ebx
- 356:	83 ec 3c             	sub    $0x3c,%esp
+ 330:	55                   	push   %ebp
+ 331:	89 e5                	mov    %esp,%ebp
+ 333:	57                   	push   %edi
+ 334:	56                   	push   %esi
+ 335:	53                   	push   %ebx
+ 336:	83 ec 3c             	sub    $0x3c,%esp
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 359:	85 d2                	test   %edx,%edx
+ 339:	85 d2                	test   %edx,%edx
 {
- 35b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 33b:	89 45 c0             	mov    %eax,-0x40(%ebp)
     neg = 1;
     x = -xx;
- 35e:	89 d0                	mov    %edx,%eax
+ 33e:	89 d0                	mov    %edx,%eax
   if(sgn && xx < 0){
- 360:	79 76                	jns    3d8 <printint+0x88>
- 362:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 366:	74 70                	je     3d8 <printint+0x88>
+ 340:	79 76                	jns    3b8 <printint+0x88>
+ 342:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 346:	74 70                	je     3b8 <printint+0x88>
     x = -xx;
- 368:	f7 d8                	neg    %eax
+ 348:	f7 d8                	neg    %eax
     neg = 1;
- 36a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+ 34a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
   } else {
     x = xx;
   }
 
   i = 0;
- 371:	31 f6                	xor    %esi,%esi
- 373:	8d 5d d7             	lea    -0x29(%ebp),%ebx
- 376:	eb 0a                	jmp    382 <printint+0x32>
- 378:	90                   	nop
- 379:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 351:	31 f6                	xor    %esi,%esi
+ 353:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 356:	eb 0a                	jmp    362 <printint+0x32>
+ 358:	90                   	nop
+ 359:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   do{
     buf[i++] = digits[x % base];
- 380:	89 fe                	mov    %edi,%esi
- 382:	31 d2                	xor    %edx,%edx
- 384:	8d 7e 01             	lea    0x1(%esi),%edi
- 387:	f7 f1                	div    %ecx
- 389:	0f b6 92 50 07 00 00 	movzbl 0x750(%edx),%edx
+ 360:	89 fe                	mov    %edi,%esi
+ 362:	31 d2                	xor    %edx,%edx
+ 364:	8d 7e 01             	lea    0x1(%esi),%edi
+ 367:	f7 f1                	div    %ecx
+ 369:	0f b6 92 30 07 00 00 	movzbl 0x730(%edx),%edx
   }while((x /= base) != 0);
- 390:	85 c0                	test   %eax,%eax
+ 370:	85 c0                	test   %eax,%eax
     buf[i++] = digits[x % base];
- 392:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+ 372:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
   }while((x /= base) != 0);
- 395:	75 e9                	jne    380 <printint+0x30>
+ 375:	75 e9                	jne    360 <printint+0x30>
   if(neg)
- 397:	8b 45 c4             	mov    -0x3c(%ebp),%eax
- 39a:	85 c0                	test   %eax,%eax
- 39c:	74 08                	je     3a6 <printint+0x56>
+ 377:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 37a:	85 c0                	test   %eax,%eax
+ 37c:	74 08                	je     386 <printint+0x56>
     buf[i++] = '-';
- 39e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
- 3a3:	8d 7e 02             	lea    0x2(%esi),%edi
- 3a6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
- 3aa:	8b 7d c0             	mov    -0x40(%ebp),%edi
- 3ad:	8d 76 00             	lea    0x0(%esi),%esi
- 3b0:	0f b6 06             	movzbl (%esi),%eax
-  write(fd, &c, 1);
- 3b3:	83 ec 04             	sub    $0x4,%esp
- 3b6:	83 ee 01             	sub    $0x1,%esi
- 3b9:	6a 01                	push   $0x1
- 3bb:	53                   	push   %ebx
- 3bc:	57                   	push   %edi
- 3bd:	88 45 d7             	mov    %al,-0x29(%ebp)
- 3c0:	e8 dd fe ff ff       	call   2a2 <write>
+ 37e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 383:	8d 7e 02             	lea    0x2(%esi),%edi
+ 386:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 38a:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 38d:	8d 76 00             	lea    0x0(%esi),%esi
+ 390:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 393:	83 ec 04             	sub    $0x4,%esp
+ 396:	83 ee 01             	sub    $0x1,%esi
+ 399:	6a 01                	push   $0x1
+ 39b:	53                   	push   %ebx
+ 39c:	57                   	push   %edi
+ 39d:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 3a0:	e8 fd fe ff ff       	call   2a2 <write>
 
   while(--i >= 0)
- 3c5:	83 c4 10             	add    $0x10,%esp
- 3c8:	39 de                	cmp    %ebx,%esi
- 3ca:	75 e4                	jne    3b0 <printint+0x60>
+ 3a5:	83 c4 10             	add    $0x10,%esp
+ 3a8:	39 de                	cmp    %ebx,%esi
+ 3aa:	75 e4                	jne    390 <printint+0x60>
     putc(fd, buf[i]);
 }
- 3cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 3cf:	5b                   	pop    %ebx
- 3d0:	5e                   	pop    %esi
- 3d1:	5f                   	pop    %edi
- 3d2:	5d                   	pop    %ebp
- 3d3:	c3                   	ret    
- 3d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 3ac:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3af:	5b                   	pop    %ebx
+ 3b0:	5e                   	pop    %esi
+ 3b1:	5f                   	pop    %edi
+ 3b2:	5d                   	pop    %ebp
+ 3b3:	c3                   	ret    
+ 3b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 3d8:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
- 3df:	eb 90                	jmp    371 <printint+0x21>
- 3e1:	eb 0d                	jmp    3f0 <printf>
- 3e3:	90                   	nop
- 3e4:	90                   	nop
- 3e5:	90                   	nop
- 3e6:	90                   	nop
- 3e7:	90                   	nop
- 3e8:	90                   	nop
- 3e9:	90                   	nop
- 3ea:	90                   	nop
- 3eb:	90                   	nop
- 3ec:	90                   	nop
- 3ed:	90                   	nop
- 3ee:	90                   	nop
- 3ef:	90                   	nop
+ 3b8:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 3bf:	eb 90                	jmp    351 <printint+0x21>
+ 3c1:	eb 0d                	jmp    3d0 <printf>
+ 3c3:	90                   	nop
+ 3c4:	90                   	nop
+ 3c5:	90                   	nop
+ 3c6:	90                   	nop
+ 3c7:	90                   	nop
+ 3c8:	90                   	nop
+ 3c9:	90                   	nop
+ 3ca:	90                   	nop
+ 3cb:	90                   	nop
+ 3cc:	90                   	nop
+ 3cd:	90                   	nop
+ 3ce:	90                   	nop
+ 3cf:	90                   	nop
 
-000003f0 <printf>:
+000003d0 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 3f0:	55                   	push   %ebp
- 3f1:	89 e5                	mov    %esp,%ebp
- 3f3:	57                   	push   %edi
- 3f4:	56                   	push   %esi
- 3f5:	53                   	push   %ebx
- 3f6:	83 ec 2c             	sub    $0x2c,%esp
+ 3d0:	55                   	push   %ebp
+ 3d1:	89 e5                	mov    %esp,%ebp
+ 3d3:	57                   	push   %edi
+ 3d4:	56                   	push   %esi
+ 3d5:	53                   	push   %ebx
+ 3d6:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 3f9:	8b 75 0c             	mov    0xc(%ebp),%esi
- 3fc:	0f b6 1e             	movzbl (%esi),%ebx
- 3ff:	84 db                	test   %bl,%bl
- 401:	0f 84 b3 00 00 00    	je     4ba <printf+0xca>
+ 3d9:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 3dc:	0f b6 1e             	movzbl (%esi),%ebx
+ 3df:	84 db                	test   %bl,%bl
+ 3e1:	0f 84 b3 00 00 00    	je     49a <printf+0xca>
   ap = (uint*)(void*)&fmt + 1;
- 407:	8d 45 10             	lea    0x10(%ebp),%eax
- 40a:	83 c6 01             	add    $0x1,%esi
+ 3e7:	8d 45 10             	lea    0x10(%ebp),%eax
+ 3ea:	83 c6 01             	add    $0x1,%esi
   state = 0;
- 40d:	31 ff                	xor    %edi,%edi
+ 3ed:	31 ff                	xor    %edi,%edi
   ap = (uint*)(void*)&fmt + 1;
- 40f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
- 412:	eb 2f                	jmp    443 <printf+0x53>
- 414:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 3ef:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 3f2:	eb 2f                	jmp    423 <printf+0x53>
+ 3f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
- 418:	83 f8 25             	cmp    $0x25,%eax
- 41b:	0f 84 a7 00 00 00    	je     4c8 <printf+0xd8>
+ 3f8:	83 f8 25             	cmp    $0x25,%eax
+ 3fb:	0f 84 a7 00 00 00    	je     4a8 <printf+0xd8>
   write(fd, &c, 1);
- 421:	8d 45 e2             	lea    -0x1e(%ebp),%eax
- 424:	83 ec 04             	sub    $0x4,%esp
- 427:	88 5d e2             	mov    %bl,-0x1e(%ebp)
- 42a:	6a 01                	push   $0x1
- 42c:	50                   	push   %eax
- 42d:	ff 75 08             	pushl  0x8(%ebp)
- 430:	e8 6d fe ff ff       	call   2a2 <write>
- 435:	83 c4 10             	add    $0x10,%esp
- 438:	83 c6 01             	add    $0x1,%esi
+ 401:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 404:	83 ec 04             	sub    $0x4,%esp
+ 407:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 40a:	6a 01                	push   $0x1
+ 40c:	50                   	push   %eax
+ 40d:	ff 75 08             	pushl  0x8(%ebp)
+ 410:	e8 8d fe ff ff       	call   2a2 <write>
+ 415:	83 c4 10             	add    $0x10,%esp
+ 418:	83 c6 01             	add    $0x1,%esi
   for(i = 0; fmt[i]; i++){
- 43b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
- 43f:	84 db                	test   %bl,%bl
- 441:	74 77                	je     4ba <printf+0xca>
+ 41b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 41f:	84 db                	test   %bl,%bl
+ 421:	74 77                	je     49a <printf+0xca>
     if(state == 0){
- 443:	85 ff                	test   %edi,%edi
+ 423:	85 ff                	test   %edi,%edi
     c = fmt[i] & 0xff;
- 445:	0f be cb             	movsbl %bl,%ecx
- 448:	0f b6 c3             	movzbl %bl,%eax
+ 425:	0f be cb             	movsbl %bl,%ecx
+ 428:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
- 44b:	74 cb                	je     418 <printf+0x28>
+ 42b:	74 cb                	je     3f8 <printf+0x28>
         state = '%';
       } else {
         putc(fd, c);
       }
     } else if(state == '%'){
- 44d:	83 ff 25             	cmp    $0x25,%edi
- 450:	75 e6                	jne    438 <printf+0x48>
+ 42d:	83 ff 25             	cmp    $0x25,%edi
+ 430:	75 e6                	jne    418 <printf+0x48>
       if(c == 'd'){
- 452:	83 f8 64             	cmp    $0x64,%eax
- 455:	0f 84 05 01 00 00    	je     560 <printf+0x170>
+ 432:	83 f8 64             	cmp    $0x64,%eax
+ 435:	0f 84 05 01 00 00    	je     540 <printf+0x170>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 45b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 461:	83 f9 70             	cmp    $0x70,%ecx
- 464:	74 72                	je     4d8 <printf+0xe8>
+ 43b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 441:	83 f9 70             	cmp    $0x70,%ecx
+ 444:	74 72                	je     4b8 <printf+0xe8>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 466:	83 f8 73             	cmp    $0x73,%eax
- 469:	0f 84 99 00 00 00    	je     508 <printf+0x118>
+ 446:	83 f8 73             	cmp    $0x73,%eax
+ 449:	0f 84 99 00 00 00    	je     4e8 <printf+0x118>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 46f:	83 f8 63             	cmp    $0x63,%eax
- 472:	0f 84 08 01 00 00    	je     580 <printf+0x190>
+ 44f:	83 f8 63             	cmp    $0x63,%eax
+ 452:	0f 84 08 01 00 00    	je     560 <printf+0x190>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 478:	83 f8 25             	cmp    $0x25,%eax
- 47b:	0f 84 ef 00 00 00    	je     570 <printf+0x180>
+ 458:	83 f8 25             	cmp    $0x25,%eax
+ 45b:	0f 84 ef 00 00 00    	je     550 <printf+0x180>
   write(fd, &c, 1);
- 481:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 484:	83 ec 04             	sub    $0x4,%esp
- 487:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 48b:	6a 01                	push   $0x1
- 48d:	50                   	push   %eax
- 48e:	ff 75 08             	pushl  0x8(%ebp)
- 491:	e8 0c fe ff ff       	call   2a2 <write>
- 496:	83 c4 0c             	add    $0xc,%esp
- 499:	8d 45 e6             	lea    -0x1a(%ebp),%eax
- 49c:	88 5d e6             	mov    %bl,-0x1a(%ebp)
- 49f:	6a 01                	push   $0x1
- 4a1:	50                   	push   %eax
- 4a2:	ff 75 08             	pushl  0x8(%ebp)
- 4a5:	83 c6 01             	add    $0x1,%esi
+ 461:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 464:	83 ec 04             	sub    $0x4,%esp
+ 467:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 46b:	6a 01                	push   $0x1
+ 46d:	50                   	push   %eax
+ 46e:	ff 75 08             	pushl  0x8(%ebp)
+ 471:	e8 2c fe ff ff       	call   2a2 <write>
+ 476:	83 c4 0c             	add    $0xc,%esp
+ 479:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 47c:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 47f:	6a 01                	push   $0x1
+ 481:	50                   	push   %eax
+ 482:	ff 75 08             	pushl  0x8(%ebp)
+ 485:	83 c6 01             	add    $0x1,%esi
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
       }
       state = 0;
- 4a8:	31 ff                	xor    %edi,%edi
+ 488:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 4aa:	e8 f3 fd ff ff       	call   2a2 <write>
+ 48a:	e8 13 fe ff ff       	call   2a2 <write>
   for(i = 0; fmt[i]; i++){
- 4af:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 48f:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
   write(fd, &c, 1);
- 4b3:	83 c4 10             	add    $0x10,%esp
+ 493:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 4b6:	84 db                	test   %bl,%bl
- 4b8:	75 89                	jne    443 <printf+0x53>
+ 496:	84 db                	test   %bl,%bl
+ 498:	75 89                	jne    423 <printf+0x53>
     }
   }
 }
- 4ba:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4bd:	5b                   	pop    %ebx
- 4be:	5e                   	pop    %esi
- 4bf:	5f                   	pop    %edi
- 4c0:	5d                   	pop    %ebp
- 4c1:	c3                   	ret    
- 4c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 49a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 49d:	5b                   	pop    %ebx
+ 49e:	5e                   	pop    %esi
+ 49f:	5f                   	pop    %edi
+ 4a0:	5d                   	pop    %ebp
+ 4a1:	c3                   	ret    
+ 4a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         state = '%';
- 4c8:	bf 25 00 00 00       	mov    $0x25,%edi
- 4cd:	e9 66 ff ff ff       	jmp    438 <printf+0x48>
- 4d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 4a8:	bf 25 00 00 00       	mov    $0x25,%edi
+ 4ad:	e9 66 ff ff ff       	jmp    418 <printf+0x48>
+ 4b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 4d8:	83 ec 0c             	sub    $0xc,%esp
- 4db:	b9 10 00 00 00       	mov    $0x10,%ecx
- 4e0:	6a 00                	push   $0x0
- 4e2:	8b 7d d4             	mov    -0x2c(%ebp),%edi
- 4e5:	8b 45 08             	mov    0x8(%ebp),%eax
- 4e8:	8b 17                	mov    (%edi),%edx
- 4ea:	e8 61 fe ff ff       	call   350 <printint>
+ 4b8:	83 ec 0c             	sub    $0xc,%esp
+ 4bb:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4c0:	6a 00                	push   $0x0
+ 4c2:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 4c5:	8b 45 08             	mov    0x8(%ebp),%eax
+ 4c8:	8b 17                	mov    (%edi),%edx
+ 4ca:	e8 61 fe ff ff       	call   330 <printint>
         ap++;
- 4ef:	89 f8                	mov    %edi,%eax
- 4f1:	83 c4 10             	add    $0x10,%esp
+ 4cf:	89 f8                	mov    %edi,%eax
+ 4d1:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 4f4:	31 ff                	xor    %edi,%edi
+ 4d4:	31 ff                	xor    %edi,%edi
         ap++;
- 4f6:	83 c0 04             	add    $0x4,%eax
- 4f9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
- 4fc:	e9 37 ff ff ff       	jmp    438 <printf+0x48>
- 501:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4d6:	83 c0 04             	add    $0x4,%eax
+ 4d9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 4dc:	e9 37 ff ff ff       	jmp    418 <printf+0x48>
+ 4e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 508:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 50b:	8b 08                	mov    (%eax),%ecx
+ 4e8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 4eb:	8b 08                	mov    (%eax),%ecx
         ap++;
- 50d:	83 c0 04             	add    $0x4,%eax
- 510:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 4ed:	83 c0 04             	add    $0x4,%eax
+ 4f0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
         if(s == 0)
- 513:	85 c9                	test   %ecx,%ecx
- 515:	0f 84 8e 00 00 00    	je     5a9 <printf+0x1b9>
+ 4f3:	85 c9                	test   %ecx,%ecx
+ 4f5:	0f 84 8e 00 00 00    	je     589 <printf+0x1b9>
         while(*s != 0){
- 51b:	0f b6 01             	movzbl (%ecx),%eax
+ 4fb:	0f b6 01             	movzbl (%ecx),%eax
       state = 0;
- 51e:	31 ff                	xor    %edi,%edi
+ 4fe:	31 ff                	xor    %edi,%edi
         s = (char*)*ap;
- 520:	89 cb                	mov    %ecx,%ebx
+ 500:	89 cb                	mov    %ecx,%ebx
         while(*s != 0){
- 522:	84 c0                	test   %al,%al
- 524:	0f 84 0e ff ff ff    	je     438 <printf+0x48>
- 52a:	89 75 d0             	mov    %esi,-0x30(%ebp)
- 52d:	89 de                	mov    %ebx,%esi
- 52f:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 532:	8d 7d e3             	lea    -0x1d(%ebp),%edi
- 535:	8d 76 00             	lea    0x0(%esi),%esi
+ 502:	84 c0                	test   %al,%al
+ 504:	0f 84 0e ff ff ff    	je     418 <printf+0x48>
+ 50a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 50d:	89 de                	mov    %ebx,%esi
+ 50f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 512:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 515:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 538:	83 ec 04             	sub    $0x4,%esp
+ 518:	83 ec 04             	sub    $0x4,%esp
           s++;
- 53b:	83 c6 01             	add    $0x1,%esi
- 53e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+ 51b:	83 c6 01             	add    $0x1,%esi
+ 51e:	88 45 e3             	mov    %al,-0x1d(%ebp)
   write(fd, &c, 1);
- 541:	6a 01                	push   $0x1
- 543:	57                   	push   %edi
- 544:	53                   	push   %ebx
- 545:	e8 58 fd ff ff       	call   2a2 <write>
+ 521:	6a 01                	push   $0x1
+ 523:	57                   	push   %edi
+ 524:	53                   	push   %ebx
+ 525:	e8 78 fd ff ff       	call   2a2 <write>
         while(*s != 0){
- 54a:	0f b6 06             	movzbl (%esi),%eax
- 54d:	83 c4 10             	add    $0x10,%esp
- 550:	84 c0                	test   %al,%al
- 552:	75 e4                	jne    538 <printf+0x148>
- 554:	8b 75 d0             	mov    -0x30(%ebp),%esi
+ 52a:	0f b6 06             	movzbl (%esi),%eax
+ 52d:	83 c4 10             	add    $0x10,%esp
+ 530:	84 c0                	test   %al,%al
+ 532:	75 e4                	jne    518 <printf+0x148>
+ 534:	8b 75 d0             	mov    -0x30(%ebp),%esi
       state = 0;
- 557:	31 ff                	xor    %edi,%edi
- 559:	e9 da fe ff ff       	jmp    438 <printf+0x48>
- 55e:	66 90                	xchg   %ax,%ax
+ 537:	31 ff                	xor    %edi,%edi
+ 539:	e9 da fe ff ff       	jmp    418 <printf+0x48>
+ 53e:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 10, 1);
- 560:	83 ec 0c             	sub    $0xc,%esp
- 563:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 568:	6a 01                	push   $0x1
- 56a:	e9 73 ff ff ff       	jmp    4e2 <printf+0xf2>
- 56f:	90                   	nop
-  write(fd, &c, 1);
- 570:	83 ec 04             	sub    $0x4,%esp
- 573:	88 5d e5             	mov    %bl,-0x1b(%ebp)
- 576:	8d 45 e5             	lea    -0x1b(%ebp),%eax
- 579:	6a 01                	push   $0x1
- 57b:	e9 21 ff ff ff       	jmp    4a1 <printf+0xb1>
+ 540:	83 ec 0c             	sub    $0xc,%esp
+ 543:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 548:	6a 01                	push   $0x1
+ 54a:	e9 73 ff ff ff       	jmp    4c2 <printf+0xf2>
+ 54f:	90                   	nop
+  write(fd, &c, 1);
+ 550:	83 ec 04             	sub    $0x4,%esp
+ 553:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 556:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 559:	6a 01                	push   $0x1
+ 55b:	e9 21 ff ff ff       	jmp    481 <printf+0xb1>
         putc(fd, *ap);
- 580:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 560:	8b 7d d4             	mov    -0x2c(%ebp),%edi
   write(fd, &c, 1);
- 583:	83 ec 04             	sub    $0x4,%esp
+ 563:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 586:	8b 07                	mov    (%edi),%eax
+ 566:	8b 07                	mov    (%edi),%eax
   write(fd, &c, 1);
- 588:	6a 01                	push   $0x1
+ 568:	6a 01                	push   $0x1
         ap++;
- 58a:	83 c7 04             	add    $0x4,%edi
+ 56a:	83 c7 04             	add    $0x4,%edi
         putc(fd, *ap);
- 58d:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 56d:	88 45 e4             	mov    %al,-0x1c(%ebp)
   write(fd, &c, 1);
- 590:	8d 45 e4             	lea    -0x1c(%ebp),%eax
- 593:	50                   	push   %eax
- 594:	ff 75 08             	pushl  0x8(%ebp)
- 597:	e8 06 fd ff ff       	call   2a2 <write>
+ 570:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 573:	50                   	push   %eax
+ 574:	ff 75 08             	pushl  0x8(%ebp)
+ 577:	e8 26 fd ff ff       	call   2a2 <write>
         ap++;
- 59c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
- 59f:	83 c4 10             	add    $0x10,%esp
+ 57c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 57f:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 5a2:	31 ff                	xor    %edi,%edi
- 5a4:	e9 8f fe ff ff       	jmp    438 <printf+0x48>
+ 582:	31 ff                	xor    %edi,%edi
+ 584:	e9 8f fe ff ff       	jmp    418 <printf+0x48>
           s = "(null)";
- 5a9:	bb 48 07 00 00       	mov    $0x748,%ebx
+ 589:	bb 28 07 00 00       	mov    $0x728,%ebx
         while(*s != 0){
- 5ae:	b8 28 00 00 00       	mov    $0x28,%eax
- 5b3:	e9 72 ff ff ff       	jmp    52a <printf+0x13a>
- 5b8:	66 90                	xchg   %ax,%ax
- 5ba:	66 90                	xchg   %ax,%ax
- 5bc:	66 90                	xchg   %ax,%ax
- 5be:	66 90                	xchg   %ax,%ax
+ 58e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 593:	e9 72 ff ff ff       	jmp    50a <printf+0x13a>
+ 598:	66 90                	xchg   %ax,%ax
+ 59a:	66 90                	xchg   %ax,%ax
+ 59c:	66 90                	xchg   %ax,%ax
+ 59e:	66 90                	xchg   %ax,%ax
 
-000005c0 <free>:
+000005a0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 5c0:	55                   	push   %ebp
+ 5a0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5c1:	a1 f4 09 00 00       	mov    0x9f4,%eax
+ 5a1:	a1 d4 09 00 00       	mov    0x9d4,%eax
 {
- 5c6:	89 e5                	mov    %esp,%ebp
- 5c8:	57                   	push   %edi
- 5c9:	56                   	push   %esi
- 5ca:	53                   	push   %ebx
- 5cb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5a6:	89 e5                	mov    %esp,%ebp
+ 5a8:	57                   	push   %edi
+ 5a9:	56                   	push   %esi
+ 5aa:	53                   	push   %ebx
+ 5ab:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 5ce:	8d 4b f8             	lea    -0x8(%ebx),%ecx
- 5d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ae:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 5b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5d8:	39 c8                	cmp    %ecx,%eax
- 5da:	8b 10                	mov    (%eax),%edx
- 5dc:	73 32                	jae    610 <free+0x50>
- 5de:	39 d1                	cmp    %edx,%ecx
- 5e0:	72 04                	jb     5e6 <free+0x26>
+ 5b8:	39 c8                	cmp    %ecx,%eax
+ 5ba:	8b 10                	mov    (%eax),%edx
+ 5bc:	73 32                	jae    5f0 <free+0x50>
+ 5be:	39 d1                	cmp    %edx,%ecx
+ 5c0:	72 04                	jb     5c6 <free+0x26>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5e2:	39 d0                	cmp    %edx,%eax
- 5e4:	72 32                	jb     618 <free+0x58>
+ 5c2:	39 d0                	cmp    %edx,%eax
+ 5c4:	72 32                	jb     5f8 <free+0x58>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 5e6:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 5e9:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 5ec:	39 fa                	cmp    %edi,%edx
- 5ee:	74 30                	je     620 <free+0x60>
+ 5c6:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 5c9:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 5cc:	39 fa                	cmp    %edi,%edx
+ 5ce:	74 30                	je     600 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 5f0:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 5d0:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 5f3:	8b 50 04             	mov    0x4(%eax),%edx
- 5f6:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 5f9:	39 f1                	cmp    %esi,%ecx
- 5fb:	74 3a                	je     637 <free+0x77>
+ 5d3:	8b 50 04             	mov    0x4(%eax),%edx
+ 5d6:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 5d9:	39 f1                	cmp    %esi,%ecx
+ 5db:	74 3a                	je     617 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 5fd:	89 08                	mov    %ecx,(%eax)
+ 5dd:	89 08                	mov    %ecx,(%eax)
   freep = p;
- 5ff:	a3 f4 09 00 00       	mov    %eax,0x9f4
+ 5df:	a3 d4 09 00 00       	mov    %eax,0x9d4
 }
- 604:	5b                   	pop    %ebx
- 605:	5e                   	pop    %esi
- 606:	5f                   	pop    %edi
- 607:	5d                   	pop    %ebp
- 608:	c3                   	ret    
- 609:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5e4:	5b                   	pop    %ebx
+ 5e5:	5e                   	pop    %esi
+ 5e6:	5f                   	pop    %edi
+ 5e7:	5d                   	pop    %ebp
+ 5e8:	c3                   	ret    
+ 5e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 610:	39 d0                	cmp    %edx,%eax
- 612:	72 04                	jb     618 <free+0x58>
- 614:	39 d1                	cmp    %edx,%ecx
- 616:	72 ce                	jb     5e6 <free+0x26>
+ 5f0:	39 d0                	cmp    %edx,%eax
+ 5f2:	72 04                	jb     5f8 <free+0x58>
+ 5f4:	39 d1                	cmp    %edx,%ecx
+ 5f6:	72 ce                	jb     5c6 <free+0x26>
 {
- 618:	89 d0                	mov    %edx,%eax
- 61a:	eb bc                	jmp    5d8 <free+0x18>
- 61c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5f8:	89 d0                	mov    %edx,%eax
+ 5fa:	eb bc                	jmp    5b8 <free+0x18>
+ 5fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     bp->s.size += p->s.ptr->s.size;
- 620:	03 72 04             	add    0x4(%edx),%esi
- 623:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 600:	03 72 04             	add    0x4(%edx),%esi
+ 603:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 626:	8b 10                	mov    (%eax),%edx
- 628:	8b 12                	mov    (%edx),%edx
- 62a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 606:	8b 10                	mov    (%eax),%edx
+ 608:	8b 12                	mov    (%edx),%edx
+ 60a:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 62d:	8b 50 04             	mov    0x4(%eax),%edx
- 630:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 633:	39 f1                	cmp    %esi,%ecx
- 635:	75 c6                	jne    5fd <free+0x3d>
+ 60d:	8b 50 04             	mov    0x4(%eax),%edx
+ 610:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 613:	39 f1                	cmp    %esi,%ecx
+ 615:	75 c6                	jne    5dd <free+0x3d>
     p->s.size += bp->s.size;
- 637:	03 53 fc             	add    -0x4(%ebx),%edx
+ 617:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 63a:	a3 f4 09 00 00       	mov    %eax,0x9f4
+ 61a:	a3 d4 09 00 00       	mov    %eax,0x9d4
     p->s.size += bp->s.size;
- 63f:	89 50 04             	mov    %edx,0x4(%eax)
+ 61f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 642:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 645:	89 10                	mov    %edx,(%eax)
+ 622:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 625:	89 10                	mov    %edx,(%eax)
 }
- 647:	5b                   	pop    %ebx
- 648:	5e                   	pop    %esi
- 649:	5f                   	pop    %edi
- 64a:	5d                   	pop    %ebp
- 64b:	c3                   	ret    
- 64c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 627:	5b                   	pop    %ebx
+ 628:	5e                   	pop    %esi
+ 629:	5f                   	pop    %edi
+ 62a:	5d                   	pop    %ebp
+ 62b:	c3                   	ret    
+ 62c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-00000650 <malloc>:
+00000630 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 650:	55                   	push   %ebp
- 651:	89 e5                	mov    %esp,%ebp
- 653:	57                   	push   %edi
- 654:	56                   	push   %esi
- 655:	53                   	push   %ebx
- 656:	83 ec 0c             	sub    $0xc,%esp
+ 630:	55                   	push   %ebp
+ 631:	89 e5                	mov    %esp,%ebp
+ 633:	57                   	push   %edi
+ 634:	56                   	push   %esi
+ 635:	53                   	push   %ebx
+ 636:	83 ec 0c             	sub    $0xc,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 659:	8b 45 08             	mov    0x8(%ebp),%eax
+ 639:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 65c:	8b 15 f4 09 00 00    	mov    0x9f4,%edx
+ 63c:	8b 15 d4 09 00 00    	mov    0x9d4,%edx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 662:	8d 78 07             	lea    0x7(%eax),%edi
- 665:	c1 ef 03             	shr    $0x3,%edi
- 668:	83 c7 01             	add    $0x1,%edi
+ 642:	8d 78 07             	lea    0x7(%eax),%edi
+ 645:	c1 ef 03             	shr    $0x3,%edi
+ 648:	83 c7 01             	add    $0x1,%edi
   if((prevp = freep) == 0){
- 66b:	85 d2                	test   %edx,%edx
- 66d:	0f 84 9d 00 00 00    	je     710 <malloc+0xc0>
- 673:	8b 02                	mov    (%edx),%eax
- 675:	8b 48 04             	mov    0x4(%eax),%ecx
+ 64b:	85 d2                	test   %edx,%edx
+ 64d:	0f 84 9d 00 00 00    	je     6f0 <malloc+0xc0>
+ 653:	8b 02                	mov    (%edx),%eax
+ 655:	8b 48 04             	mov    0x4(%eax),%ecx
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
     if(p->s.size >= nunits){
- 678:	39 cf                	cmp    %ecx,%edi
- 67a:	76 6c                	jbe    6e8 <malloc+0x98>
- 67c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
- 682:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 687:	0f 43 df             	cmovae %edi,%ebx
+ 658:	39 cf                	cmp    %ecx,%edi
+ 65a:	76 6c                	jbe    6c8 <malloc+0x98>
+ 65c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 662:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 667:	0f 43 df             	cmovae %edi,%ebx
   p = sbrk(nu * sizeof(Header));
- 68a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
- 691:	eb 0e                	jmp    6a1 <malloc+0x51>
- 693:	90                   	nop
- 694:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 66a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 671:	eb 0e                	jmp    681 <malloc+0x51>
+ 673:	90                   	nop
+ 674:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 698:	8b 02                	mov    (%edx),%eax
+ 678:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 69a:	8b 48 04             	mov    0x4(%eax),%ecx
- 69d:	39 f9                	cmp    %edi,%ecx
- 69f:	73 47                	jae    6e8 <malloc+0x98>
+ 67a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 67d:	39 f9                	cmp    %edi,%ecx
+ 67f:	73 47                	jae    6c8 <malloc+0x98>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 6a1:	39 05 f4 09 00 00    	cmp    %eax,0x9f4
- 6a7:	89 c2                	mov    %eax,%edx
- 6a9:	75 ed                	jne    698 <malloc+0x48>
+ 681:	39 05 d4 09 00 00    	cmp    %eax,0x9d4
+ 687:	89 c2                	mov    %eax,%edx
+ 689:	75 ed                	jne    678 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 6ab:	83 ec 0c             	sub    $0xc,%esp
- 6ae:	56                   	push   %esi
- 6af:	e8 56 fc ff ff       	call   30a <sbrk>
+ 68b:	83 ec 0c             	sub    $0xc,%esp
+ 68e:	56                   	push   %esi
+ 68f:	e8 76 fc ff ff       	call   30a <sbrk>
   if(p == (char*)-1)
- 6b4:	83 c4 10             	add    $0x10,%esp
- 6b7:	83 f8 ff             	cmp    $0xffffffff,%eax
- 6ba:	74 1c                	je     6d8 <malloc+0x88>
+ 694:	83 c4 10             	add    $0x10,%esp
+ 697:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 69a:	74 1c                	je     6b8 <malloc+0x88>
   hp->s.size = nu;
- 6bc:	89 58 04             	mov    %ebx,0x4(%eax)
+ 69c:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 6bf:	83 ec 0c             	sub    $0xc,%esp
- 6c2:	83 c0 08             	add    $0x8,%eax
- 6c5:	50                   	push   %eax
- 6c6:	e8 f5 fe ff ff       	call   5c0 <free>
+ 69f:	83 ec 0c             	sub    $0xc,%esp
+ 6a2:	83 c0 08             	add    $0x8,%eax
+ 6a5:	50                   	push   %eax
+ 6a6:	e8 f5 fe ff ff       	call   5a0 <free>
   return freep;
- 6cb:	8b 15 f4 09 00 00    	mov    0x9f4,%edx
+ 6ab:	8b 15 d4 09 00 00    	mov    0x9d4,%edx
       if((p = morecore(nunits)) == 0)
- 6d1:	83 c4 10             	add    $0x10,%esp
- 6d4:	85 d2                	test   %edx,%edx
- 6d6:	75 c0                	jne    698 <malloc+0x48>
+ 6b1:	83 c4 10             	add    $0x10,%esp
+ 6b4:	85 d2                	test   %edx,%edx
+ 6b6:	75 c0                	jne    678 <malloc+0x48>
         return 0;
   }
 }
- 6d8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6b8:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 6db:	31 c0                	xor    %eax,%eax
+ 6bb:	31 c0                	xor    %eax,%eax
 }
- 6dd:	5b                   	pop    %ebx
- 6de:	5e                   	pop    %esi
- 6df:	5f                   	pop    %edi
- 6e0:	5d                   	pop    %ebp
- 6e1:	c3                   	ret    
- 6e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 6bd:	5b                   	pop    %ebx
+ 6be:	5e                   	pop    %esi
+ 6bf:	5f                   	pop    %edi
+ 6c0:	5d                   	pop    %ebp
+ 6c1:	c3                   	ret    
+ 6c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 6e8:	39 cf                	cmp    %ecx,%edi
- 6ea:	74 54                	je     740 <malloc+0xf0>
+ 6c8:	39 cf                	cmp    %ecx,%edi
+ 6ca:	74 54                	je     720 <malloc+0xf0>
         p->s.size -= nunits;
- 6ec:	29 f9                	sub    %edi,%ecx
- 6ee:	89 48 04             	mov    %ecx,0x4(%eax)
+ 6cc:	29 f9                	sub    %edi,%ecx
+ 6ce:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 6f1:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ 6d1:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 6f4:	89 78 04             	mov    %edi,0x4(%eax)
+ 6d4:	89 78 04             	mov    %edi,0x4(%eax)
       freep = prevp;
- 6f7:	89 15 f4 09 00 00    	mov    %edx,0x9f4
+ 6d7:	89 15 d4 09 00 00    	mov    %edx,0x9d4
 }
- 6fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6dd:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 700:	83 c0 08             	add    $0x8,%eax
+ 6e0:	83 c0 08             	add    $0x8,%eax
 }
- 703:	5b                   	pop    %ebx
- 704:	5e                   	pop    %esi
- 705:	5f                   	pop    %edi
- 706:	5d                   	pop    %ebp
- 707:	c3                   	ret    
- 708:	90                   	nop
- 709:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6e3:	5b                   	pop    %ebx
+ 6e4:	5e                   	pop    %esi
+ 6e5:	5f                   	pop    %edi
+ 6e6:	5d                   	pop    %ebp
+ 6e7:	c3                   	ret    
+ 6e8:	90                   	nop
+ 6e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     base.s.ptr = freep = prevp = &base;
- 710:	c7 05 f4 09 00 00 f8 	movl   $0x9f8,0x9f4
- 717:	09 00 00 
- 71a:	c7 05 f8 09 00 00 f8 	movl   $0x9f8,0x9f8
- 721:	09 00 00 
+ 6f0:	c7 05 d4 09 00 00 d8 	movl   $0x9d8,0x9d4
+ 6f7:	09 00 00 
+ 6fa:	c7 05 d8 09 00 00 d8 	movl   $0x9d8,0x9d8
+ 701:	09 00 00 
     base.s.size = 0;
- 724:	b8 f8 09 00 00       	mov    $0x9f8,%eax
- 729:	c7 05 fc 09 00 00 00 	movl   $0x0,0x9fc
- 730:	00 00 00 
- 733:	e9 44 ff ff ff       	jmp    67c <malloc+0x2c>
- 738:	90                   	nop
- 739:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 704:	b8 d8 09 00 00       	mov    $0x9d8,%eax
+ 709:	c7 05 dc 09 00 00 00 	movl   $0x0,0x9dc
+ 710:	00 00 00 
+ 713:	e9 44 ff ff ff       	jmp    65c <malloc+0x2c>
+ 718:	90                   	nop
+ 719:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         prevp->s.ptr = p->s.ptr;
- 740:	8b 08                	mov    (%eax),%ecx
- 742:	89 0a                	mov    %ecx,(%edx)
- 744:	eb b1                	jmp    6f7 <malloc+0xa7>
+ 720:	8b 08                	mov    (%eax),%ecx
+ 722:	89 0a                	mov    %ecx,(%edx)
+ 724:	eb b1                	jmp    6d7 <malloc+0xa7>
Binary files main/zombie.o and xv6-public/zombie.o differ
diff -urN main/zombie.sym xv6-public/zombie.sym
--- main/zombie.sym	2022-09-26 21:21:17.404980000 +0530
+++ xv6-public/zombie.sym	2022-10-31 22:34:18.198486949 +0530
@@ -1,7 +1,7 @@
 00000000 .text
-00000748 .rodata
-00000764 .eh_frame
-000009f4 .bss
+00000728 .rodata
+00000744 .eh_frame
+000009d4 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,19 +13,18 @@
 00000000 zombie.c
 00000000 ulib.c
 00000000 printf.c
-00000350 printint
-00000750 digits.1050
+00000330 printint
+00000730 digits.1044
 00000000 umalloc.c
-000009f4 freep
-000009f8 base
+000009d4 freep
+000009d8 base
 00000030 strcpy
-000003f0 printf
-00000332 thread_exit
+000003d0 printf
 00000250 memmove
 000002ca mknod
 00000140 gets
 00000302 getpid
-00000650 malloc
+00000630 malloc
 00000312 sleep
 00000292 pipe
 000002a2 write
@@ -39,23 +38,21 @@
 0000027a fork
 0000030a sbrk
 0000031a uptime
-000009f4 __bss_start
+000009d4 __bss_start
 000000e0 memset
 00000000 main
 00000060 strcmp
 000002fa dup
 000001c0 stat
-000009f4 _edata
-00000a00 _end
+000009d4 _edata
+000009e0 _end
 000002e2 link
 00000282 exit
 00000210 atoi
-0000033a draw
+00000322 draw
 000000b0 strlen
 000002c2 open
 00000100 strchr
-00000322 thread_create
 000002ea mkdir
 000002aa close
-0000032a thread_join
-000005c0 free
+000005a0 free
